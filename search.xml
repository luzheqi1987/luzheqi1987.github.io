<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[[转]如何处理异常? catch Exception OR catch Throwable]]></title>
      <url>http://yoursite.com/2016/05/11/%5B%E8%BD%AC%5D%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%20catch%20Exception%20OR%20catch%20Throwable/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>在Java中，当你需要统一处理异常的时候，你是会选择catch (Exception)，还是直接catch (Throwable)？</strong></p>
</blockquote>
<h3 id="Java的异常体系"><a href="#Java的异常体系" class="headerlink" title="Java的异常体系"></a>Java的异常体系</h3><ol>
<li><p><em><u>Throwable</u></em>: Java中所有异常和错误类的父类。只有这个类的实例（或者子类的实例）可以被虚拟机抛出或者被java的throw关键字抛出。同样，只有其或其子类可以出现在catch子句里面。</p>
</li>
<li><p><em><u>Error</u></em>: Throwable的子类，表示严重的问题发生了，而且这种错误是不可恢复的。</p>
</li>
<li><p><em><u>Exception</u></em>: Throwable的子类，应用程序应该要捕获其或其子类（RuntimeException例外），称为checked exception。比如：IOException, NoSuchMethodException…</p>
</li>
<li><p><em><u>RuntimeException</u></em>: Exception的子类，运行时异常，程序可以不捕获，称为unchecked exception。比如：NullPointException.</p>
<a id="more"></a>
</li>
</ol>
<hr>
<h3 id="应该catch什么"><a href="#应该catch什么" class="headerlink" title="应该catch什么"></a>应该catch什么</h3><p>其实只要是Throwable和其子类都是可以throw和catch的，那么如果在需要统一处理异常的地方，我们应该catch (Throwable th) 还是 catch (Exception)呢？</p>
<p>这两种处理的区别在于，catch throwable会把Error和其他继承Throwable的类捕捉到。而catch Exception只会捕捉Exception极其子类，捕捉的范围更小。先不考虑有其他的类继承了Throwable的情况下（附录A），第一种catch相当于比第二种catch多捕捉了把Error和其子类。</p>
<p>那么究竟Error是否需要捕捉呢？JDK中Error类的的注释（如下）里提到过，Error是一种严重的问题，应用程序不应该捕捉它。</p>
<blockquote>
<p>An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. The ThreadDeath error, though a “normal” condition, is also a subclass of Error because most applications should not try to catch it.<br>A method is not required to declare in its throws clause any subclasses of Error that might be thrown during the execution of the method but not caught, since these errors are abnormal conditions that should never occur.</p>
</blockquote>
<p>Java Lanuage Spec 7 中也提到：Error继承自Throwable而不是继承自Exception，是为了方便程序可以使用 “catch (Exception)“来捕捉异常而不会把Error也捕捉在内，因为Exception发生后可以进行一些恢复工作的，但是Error发生后一般是不可恢复的。</p>
<blockquote>
<p>The class Error is a separate subclass ofThrowable, distinct from Exception in the class<br>hierarchy, to allow programs to use the idiom “} catch (Exception e) { &quot; (§11.2.3)<br>to catch all exceptions from which recovery may be possible without catching errors from which recovery is typically not possible.</p>
</blockquote>
<p>已经不难看出，Java本身设计思路就是希望大家catch Exception就足够了，如果有Error发生，catch了也不会有什么作用（附录B）。 </p>
<hr>
<h3 id="引申，如何设计异常体系？"><a href="#引申，如何设计异常体系？" class="headerlink" title="引申，如何设计异常体系？"></a>引申，如何设计异常体系？</h3><p>如何设计异常体系要根据你的项目的情况，类库框架，应用程序的异常设计方式都会有一些区别。下面简单谈谈个人对异常设计的一些看法</p>
<p><strong>类库/框架</strong></p>
<p>继承RuntimeException扩展一个新的异常作为整个类库的异常基类。这个异常应该可以满足大部分类库对异常的要求。<br>在实现中，在任何需要捕捉checked exception的地方都会把异常统一转化成这个新的异常。<br>对于有特殊需求，需要自定义异常的，就通过继承这个基类来实现自定义异常。<br>不对异常记录log（交给上层来处理）</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>fastjson</strong><br><img src="/images/exception_fastjson.png" alt=""></p>
<p><strong>spring</strong><br>自定义异常比较多，不过都是继承自<code>org.springframework.core.NestedRuntimeException</code>，而这个异常也是继承自RuntimeException。</p>
<p><strong>应用程序</strong><br>设计上和框架异常类似，只是在捕捉checked exception的时候需要log<br>如果需要根据异常进行不同的处理，建议给自定义异常增加一个ERROR_CODE字段，这样无论在服务器还是客户端都可以根据不同的ERROR_CODE进行对应的处理。但是出现这种情况的时候，应该需要考虑一下设计思路了，一般来讲根据异常来决定业务流程不是一个好的设计方案。</p>
<p><em>附录A：是否应该直接继承Throwable来扩展新的异常？</em><br>个人认为异常都应该继承自Exception或者RuntimeException，而且Java本身对Exception和Error的规划就很清晰了，Java自己类库中没有异常是直接继承自Throwable的。<br><em>附录B：Error可以catch吗？ 可以catch了后做些其他处理吗？</em><br>Error是可以catch的，而且也可以向常规Exception一样被处理，而且就算不捕捉的话也只是导致当前线程挂掉，其他线程还是可以正常运行，如果有需要的话捕捉Error之后也可以做些其他处理。但是Error是一种系统内部的错误，这种错误不像Exception一样是可能是程序和业务上的错误是可以恢复的。<br>假设进行网络连接操作的时候，IOException 发生了，可能是网络中断，我可以再尝试几次。<br>假设OutOfMemoryError发生了，就算被捕捉了，可以有什么手段让程序正常运行下去吗？<br>假设ExceptionInInitializerError发生了，类无法被正常初始化，这个是可以通过捕捉来恢复的吗？</p>
<p>原文链接:<a href="http://my.oschina.net/foxty/blog/359473" title="http://my.oschina.net/foxty/blog/359473" target="_blank" rel="external">http://my.oschina.net/foxty/blog/359473</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java8中Lambda表达式的10个例子]]></title>
      <url>http://yoursite.com/2015/11/25/Java8%E4%B8%ADLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%8410%E4%B8%AA%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h3 id="例1-用Lambda表达式实现Runnable接口"><a href="#例1-用Lambda表达式实现Runnable接口" class="headerlink" title="例1: 用Lambda表达式实现Runnable接口"></a>例1: 用Lambda表达式实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Before Java 8:  </span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    System.out.println(&amp;quot;Before Java8, too much code <span class="keyword">for</span> too little to do&amp;quot;);  </div><div class="line">&#125;  </div><div class="line">&#125;).start();  </div><div class="line"><span class="comment">//Java 8 way:  </span></div><div class="line"><span class="keyword">new</span> Thread( () -&amp;gt; System.out.println(&amp;quot;In Java8, Lambda expression rocks !!&amp;quot;) ).start();</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">too much code, for too little to do </div><div class="line">Lambda expression rocks !!</div></pre></td></tr></table></figure></p>
<p>这个例子使我们学到了java8中Lambda表达式的书写方式：<br>(参数) -&gt; 表达式<br>(参数) -&gt; 语句<br>(参数) -&gt; { 语句 }<br>例如，如果你的方法只是在控制台打印信息，则可以这么写： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&amp;gt; System.out.println(&amp;quot;Hello Lambda Expressions&amp;quot;);</div></pre></td></tr></table></figure>
<p>如果你的方法接收两个参数，那么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">int</span> even, <span class="keyword">int</span> odd) -&amp;gt; even + odd</div></pre></td></tr></table></figure></p>
<p>顺带提一句，一般来说在Lambda表达式中要尽量保持变量的简洁性。这会使你的代码简短而能保持在一行之内。所以像上面的代码可以选择变量名类似a,b或者x,y之类的，比起even和odd来会更好。 </p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="例2-用Lambda表达式写事件监听程序"><a href="#例2-用Lambda表达式写事件监听程序" class="headerlink" title="例2: 用Lambda表达式写事件监听程序"></a>例2: 用Lambda表达式写事件监听程序</h3><p>要是你用过Swing API，那就少不了事件监听代码，这是使用匿名类的经典例子。现在我们可以用Lambda表达式来抒写更好的事件处理代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before Java 8:  </span></div><div class="line">JButton show = <span class="keyword">new</span> JButton(&amp;quot;Show&amp;quot;);  </div><div class="line">show.addActionListener(<span class="keyword">new</span> ActionListener() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </div><div class="line">        System.out.println(&amp;quot;Event handling without lambda expression is boring&amp;quot;);  </div><div class="line">    &#125;  </div><div class="line">&#125;);  </div><div class="line"><span class="comment">// Java 8 way:  </span></div><div class="line">show.addActionListener((e) -&amp;gt; &#123;  </div><div class="line">    System.out.println(&amp;quot;Light, Camera, Action !! Lambda expressions Rocks&amp;quot;);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>另外一个常用匿名类的地方是给Collections.sort()方法提供自定义的Comparator接口实现。这个地方也可以用Lambda表达式。 </p>
<hr>
<h3 id="例3-用Lambda表达式进行List迭代"><a href="#例3-用Lambda表达式进行List迭代" class="headerlink" title="例3: 用Lambda表达式进行List迭代"></a>例3: 用Lambda表达式进行List迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Prior Java 8 :  </span></div><div class="line">List features = Arrays.asList(&amp;quot;Lambdas&amp;quot;, &amp;quot;Default Method&amp;quot;, &amp;quot;Stream API&amp;quot;, &amp;quot;Date and Time API&amp;quot;);  </div><div class="line"><span class="keyword">for</span> (String feature : features) &#123;  </div><div class="line">    System.out.println(feature);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//In Java 8:  </span></div><div class="line">List features = Arrays.asList(&amp;quot;Lambdas&amp;quot;, &amp;quot;Default Method&amp;quot;, &amp;quot;Stream API&amp;quot;, &amp;quot;Date and Time API&amp;quot;);  </div><div class="line">features.forEach(n -&amp;gt; System.out.println(n));  </div><div class="line"></div><div class="line"><span class="comment">// 用java8的方法引用更好，方法引用由::(双冒号)操作符来完成,看起来像c++中的作用域操作符 </span></div><div class="line">Java代码  收藏代码</div><div class="line">features.forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Lambdas </div><div class="line">Default Method </div><div class="line">Stream API </div><div class="line">Date and Time API</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="例4-使用Lambda表达式和函数式接口Predicate"><a href="#例4-使用Lambda表达式和函数式接口Predicate" class="headerlink" title="例4: 使用Lambda表达式和函数式接口Predicate"></a>例4: 使用Lambda表达式和函数式接口Predicate</h3><p>除了提供函数式编程语言级别的支持外，java8同时也新增了一个新的包java.util.function。其中包含了许多类来支持java函数式编程。其中之一是Predicate接口，使用这个接口和lamb表达式就可以以更少的代码为API方法添加更多的动态行为。<br>以下是Predicate的使用范例，展示了过滤集合数据的许多共性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(args[])</span></span>&#123;  </div><div class="line">    List languages = Arrays.asList(&amp;quot;Java&amp;quot;, &amp;quot;Scala&amp;quot;, &amp;quot;C++&amp;quot;, &amp;quot;Haskell&amp;quot;, &amp;quot;Lisp&amp;quot;);  </div><div class="line">    System.out.println(&amp;quot;Languages which starts with J :&amp;quot;);  </div><div class="line">    filter(languages, (str)-&amp;gt;str.startsWith(&amp;quot;J&amp;quot;));  </div><div class="line">    System.out.println(&amp;quot;Languages which ends with a &amp;quot;);  </div><div class="line">    filter(languages, (str)-&amp;gt;str.endsWith(&amp;quot;a&amp;quot;));  </div><div class="line">    System.out.println(&amp;quot;Print all languages :&amp;quot;);  </div><div class="line">    filter(languages, (str)-&amp;gt;<span class="keyword">true</span>);  </div><div class="line">    System.out.println(&amp;quot;Print no language : &amp;quot;);  </div><div class="line">    filter(languages, (str)-&amp;gt;<span class="keyword">false</span>);  </div><div class="line">    System.out.println(&amp;quot;Print language whose length greater than <span class="number">4</span>:&amp;quot;);  </div><div class="line">    filter(languages, (str)-&amp;gt;str.length() &amp;gt; <span class="number">4</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List names, Predicate condition)</span> </span>&#123;  </div><div class="line">    <span class="keyword">for</span>(String name: names) &#123;  </div><div class="line">        <span class="keyword">if</span>(condition.test(name)) &#123;  </div><div class="line">            System.out.println(name + &amp;quot; &amp;quot;);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Languages which starts with J : </div><div class="line">Java </div><div class="line">Languages which ends with a </div><div class="line">Java </div><div class="line">Scala </div><div class="line">Print all languages : </div><div class="line">Java </div><div class="line">Scala </div><div class="line">C++ </div><div class="line">Haskell </div><div class="line">Lisp </div><div class="line">Print no language : </div><div class="line">Print language whose length greater than 4: </div><div class="line">Scala </div><div class="line">Haskell</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//更佳的方式  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List names, Predicate condition)</span> </span>&#123;  </div><div class="line">    names.stream().filter((name) -&amp;gt; (condition.test(name))).forEach((name) -&amp;gt; &#123;  </div><div class="line">        System.out.println(name + &amp;quot; &amp;quot;);  </div><div class="line">    &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到Stream API的filter方法也接受一个Predicate，意味着可以用内联代码直接替换我们自定义的filter()方法。这就是Lambda表达式的威力所在。除此之外Predicate接口也可以测试多个条件，将会在下面的例子中加以说明。</p>
<hr>
<h3 id="例5-Lambda表达式结合Predicate"><a href="#例5-Lambda表达式结合Predicate" class="headerlink" title="例5: Lambda表达式结合Predicate"></a>例5: Lambda表达式结合Predicate</h3><p>就像上个例子所说，Predicate允许组合两个以上的条件，它提供了类似于逻辑与和或的操作and(),or()和xor()，这些方法可以用来组合传递到filter方法中的多个条件。例如为了获取所有以J开头并有四个字符长度的语言，可以定义两个单独的Predicate实例覆盖每个条件然后用and方法将他们组合在一起。看例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Predicate&amp;lt;String&amp;gt; startsWithJ = (n) -&amp;gt; n.startsWith(&amp;quot;J&amp;quot;);  </div><div class="line">Predicate&amp;lt;String&amp;gt; fourLetterLong = (n) -&amp;gt; n.length() == <span class="number">4</span>;  </div><div class="line">names.stream().filter(startsWithJ.and(fourLetterLong)).forEach((n) -&amp;gt; System.out.print(&amp;quot;\nName, which starts with <span class="string">'J'</span> and four letter <span class="keyword">long</span> is : &amp;quot; + n));</div></pre></td></tr></table></figure></p>
<p>类似可以用or或者xor。这个例子也强调了单独用或者按需组合用Predicate的重要性。简而言之用Predicate和Lambda表达式的优势你可以写的更少做得更多。 </p>
<hr>
<h3 id="例6-Map和Reduce的例子"><a href="#例6-Map和Reduce的例子" class="headerlink" title="例6: Map和Reduce的例子"></a>例6: Map和Reduce的例子</h3><h4 id="6-1-Map"><a href="#6-1-Map" class="headerlink" title="6.1 Map"></a>6.1 Map</h4><p>在这个例子中，我们要将costBeforeTax的每个元素以加上他们的增值税。传递一个Lambda表达式给map方法使之应用于每个元素，之后在用forEach打印结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Without lambda expressions:  </span></div><div class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);  </div><div class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;  </div><div class="line">    <span class="keyword">double</span> price = cost + .<span class="number">12</span>*cost;  </div><div class="line">    System.out.println(price);  </div><div class="line">&#125;   </div><div class="line"><span class="comment">// With Lambda expression:  </span></div><div class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);  </div><div class="line">costBeforeTax.stream().map((cost) -&amp;gt; cost + .<span class="number">12</span>*cost).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">112.0 </div><div class="line">224.0 </div><div class="line">336.0 </div><div class="line">448.0 </div><div class="line">560.0 </div><div class="line">112.0 </div><div class="line">224.0 </div><div class="line">336.0 </div><div class="line">448.0 </div><div class="line">560.0</div></pre></td></tr></table></figure></p>
<h4 id="6-2-Reduce"><a href="#6-2-Reduce" class="headerlink" title="6.2 Reduce"></a>6.2 Reduce</h4><p>还有另外一个函数reduce可以将所有值转换为一个值。map跟reduce操作是函数式编程的核心，reduce也被称作折叠操作。reduce并不是一种新的操作，在SQL中我们用的一些聚集函数比如sum，avg，count等他们实际上也是reduce操作，因为他们也是将多个值进行操作然后返回一个值。Stream API定义了reduce函数，可以接受一个Lambda表达式然后组合所有值。Stream类中像IntStream都有内置的方法像average(), count(), sum(), mapToLong(), mapToDouble()等转换方法。我们可以用内置的方法也可以自定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Old way:  </span></div><div class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);  </div><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;  </div><div class="line">    <span class="keyword">double</span> price = cost + .<span class="number">12</span>*cost;  </div><div class="line">    total = total + price;  </div><div class="line">&#125;  </div><div class="line">System.out.println(&amp;quot;Total : &amp;quot; + total);  </div><div class="line"><span class="comment">// New way:  </span></div><div class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);  </div><div class="line"><span class="keyword">double</span> bill = costBeforeTax.stream().map((cost) -&amp;gt; cost + .<span class="number">12</span>*cost).reduce((sum, cost) -&amp;gt; sum  </div><div class="line">+ cost).get();  </div><div class="line">System.out.println(&amp;quot;Total : &amp;quot; + bill);</div></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Total : 1680.0 </div><div class="line">Total : 1680.0</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="例7-用filter创建一个字符串List"><a href="#例7-用filter创建一个字符串List" class="headerlink" title="例7: 用filter创建一个字符串List"></a>例7: 用filter创建一个字符串List</h3><p>在java开发中对大的集合进行过滤是常用的操作。用Lambda表达式和Stream API会让操作变得简单易懂。<br>Stream提供了一个filter()方法，接受一个Predicate对象。这意味着可以传递一个Lambda表达式作为过滤逻辑，看例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个长度大于两个字符的字符串List  </span></div><div class="line">List&amp;lt;String&amp;gt; filtered = strList.stream().filter(x -&amp;gt; x.length()&amp;gt;  </div><div class="line"><span class="number">2</span>).collect(Collectors.toList());  </div><div class="line">System.out.printf(&amp;quot;Original List : %s, filtered list : %s %n&amp;quot;, strList, filtered);</div></pre></td></tr></table></figure></p>
<p>输出 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [abc, , bcd, , defg, jk], filtered list : [abc, bcd, defg]</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="例8-给每个List元素应用函数"><a href="#例8-给每个List元素应用函数" class="headerlink" title="例8: 给每个List元素应用函数"></a>例8: 给每个List元素应用函数</h3><p>在工作中我们经常会碰到这样的情况：给List中每个元素加以一定的操作例如乘以或者除以某个值等。这些操作用map方法再好不过了，我们可以将转换逻辑以Lambda表达式传给map方法来应用于每个元素：<br>//将字符串转为大写然后用逗号连起来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&amp;lt;String&amp;gt; G7 = Arrays.asList(&amp;quot;USA&amp;quot;, &amp;quot;Japan&amp;quot;, &amp;quot;France&amp;quot;, &amp;quot;Germany&amp;quot;, &amp;quot;Italy&amp;quot;,&amp;quot;U.K.&amp;quot;,&amp;quot;Canada&amp;quot;);  </div><div class="line">String G7Countries = G7.stream().map(x -&amp;gt; x.toUpperCase()).collect(Collectors.joining(&amp;quot;, &amp;quot;));  </div><div class="line">System.out.println(G7Countries);</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">USA, JAPAN, FRANCE, GERMANY, ITALY, U.K., CANADA</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="例9-复制不同值到子列表"><a href="#例9-复制不同值到子列表" class="headerlink" title="例9: 复制不同值到子列表"></a>例9: 复制不同值到子列表</h3><p>本例演示如何利用Stream类的distinct方法过滤重复值到集合中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(<span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>);  </div><div class="line">List&amp;lt;Integer&amp;gt; distinct = numbers.stream().map( i -&amp;gt;i*i).distinct().collect(Collectors.toList());  </div><div class="line">System.out.printf(&amp;quot;Original List : %s, Square Without duplicates : %s %n&amp;quot;, numbers, distinct);</div></pre></td></tr></table></figure></p>
<p>输出 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [9, 10, 3, 4, 7, 3, 4], Square Without duplicates : [81, 100, 9, 16, 49]</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="例10-计算List中元素的最大，最小，和以及平均值"><a href="#例10-计算List中元素的最大，最小，和以及平均值" class="headerlink" title="例10: 计算List中元素的最大，最小，和以及平均值"></a>例10: 计算List中元素的最大，最小，和以及平均值</h3><p>在Stream类中像IntStream, LongStream and DoubleStream有一个非常有用的方法summaryStattics()，返回IntSummaryStatistics, LongSummaryStatistics or DoubleSummaryStatistics其描述了这个流中元素的统计数据。下面的例子中我们用这个方法来计算一个List中的最大最小值总和以及均值:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&amp;lt;Integer&amp;gt; primes = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>);  </div><div class="line">IntSummaryStatistics stats = primes.stream().mapToInt((x) -&amp;gt; x).summaryStatistics();  </div><div class="line">System.out.println(&amp;quot;Highest prime number in List : &amp;quot; + stats.getMax());  </div><div class="line">System.out.println(&amp;quot;Lowest prime number in List : &amp;quot; + stats.getMin());  </div><div class="line">System.out.println(&amp;quot;Sum of all prime numbers : &amp;quot; + stats.getSum());  </div><div class="line">System.out.println(&amp;quot;Average of all prime numbers : &amp;quot; + stats.getAverage());</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest prime number in List : 29 </div><div class="line">Lowest prime number in List : 2 </div><div class="line">Sum of all prime numbers : 129 </div><div class="line">Average of all prime numbers : 12.9</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python之在Windows 7下安装PIL]]></title>
      <url>http://yoursite.com/2015/10/22/Python%E4%B9%8B%E5%9C%A8Windows%207%E4%B8%8B%E5%AE%89%E8%A3%85PIL/</url>
      <content type="html"><![CDATA[<p>在PIL的官方网页上，给出了很多PIL的版本，当选择Win32版本在Windows 7下安装时，会报出无法找到Python的提示，即使正确安装了Python 2.7。在网上查阅后，有人如下回答：</p>
<p>问题：<br>在64位Win7下安装PIL库，提示注册表中找不到Python2.7（肯定是有的）。<br>原因：<br>PIL官方<a href="http://www.pythonware.com/products/pil/提供的PIL二进制安装库都是32位的。" target="_blank" rel="external">http://www.pythonware.com/products/pil/提供的PIL二进制安装库都是32位的。</a><br>64位程序和32位程序检测注册表的位置是不一样的：<br>64-bit: HKLM|HKCU\SOFTWARE\<br>32-bit: HKLM|HKCU\SOFTWARE\wow6432node\<br>我安装的是Python2.7 x64版，所以相关信息是在 HKLM|HKCU\SOFTWARE\下面，32位程序在HKLM|HKCU\SOFTWARE\wow6432node\下面找Python安装信息，肯定是找不到了。<br>解决：<br>幸好有人提供了非官方的64位库（官方源码编译版）。<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>在提供的网址下，下载PIL 64位的版本，果然可以用了。</p>
<p>注：在linux下安装PIL for Python3.x，可以到<a href="https://github.com/sloonz/pil-py3k下载相应版本。" target="_blank" rel="external">https://github.com/sloonz/pil-py3k下载相应版本。</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ruby操作mysql数据库及中文编码解决方案]]></title>
      <url>http://yoursite.com/2015/07/11/Ruby%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>搭建ruby mysql环境<br>1. 安装ruby2.2.1<br>2. 安装mysql插件<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install mysql</div></pre></td></tr></table></figure></p>
<p>3. 数据库编码修改<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'mysql'</span></div><div class="line"><span class="keyword">begin</span> </div><div class="line">db = Mysql.init db.options(Mysql::SET_CHARSET_NAME, <span class="string">'utf8'</span>) </div><div class="line">db = Mysql.real_connect(<span class="comment">#&#123;host&#125;, #&#123;username&#125;, #&#123;passwd&#125;, #&#123;dbname&#125;,3306)</span></div><div class="line">db.query(&amp;quot;SET NAMES utf8&amp;quot;) </div><div class="line">db.query(&amp;quot;drop table <span class="keyword">if</span> exists test_rb&amp;quot;)</div><div class="line">db.query(&amp;quot;create table test_rb (id int,text [...]</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>4.ruby文件的编码：<br>加入<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding: utf-8</span></div></pre></td></tr></table></figure></p>
<p>通过下面的语句可以查看编码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puts __ENCODING_<span class="number">_</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data truncation: Out of range value adjusted for column "***"]]></title>
      <url>http://yoursite.com/2015/07/01/com-mysql-jdbc-mysqldatatruncation-data-truncation-out-of-range-value-adjusted-for-column/</url>
      <content type="html"><![CDATA[<pre><code>com.mysql.jdbc.MysqlDataTruncation: Data truncation: Out of range value adjusted for column &apos;***&apos; at row 1
    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3513)
    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3447)
    at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1951)
    at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2101)
    at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2548)
    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1605)
    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1524)
</code></pre><p>出现这个问题的原因有以下几种：<br>1.超过字段的表示范围。<br>2.设置了无符号的字段，却传了负数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Git 常用命令大全]]></title>
      <url>http://yoursite.com/2015/06/24/%5B%E8%BD%AC%5DGit%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。<br>Git常用操作命令：<br>1) 远程仓库相关命令<br>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]</p>
<p>*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：<br>$git push origin test:master         // 提交本地test分支作为远程的master分支<br>$git push origin test:test              // 提交本地test分支作为远程的test分支<br><a id="more"></a><br>2）分支(branch)操作相关命令<br>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>
<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)<br>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx</p>
<p>3）版本(tag)操作相关命令<br>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>
<p>4) 子模块(submodule)相关操作命令<br>添加子模块：$ git submodule add [url] [path]<br>   如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs<br>初始化子模块：$ git submodule init  —-只在首次检出仓库时运行一次就行<br>更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下<br>删除子模块：（分4步走哦）<br> 1) $ git rm –cached [path]<br> 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉<br> 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉<br> 4) 手动删除子模块残留的目录</p>
<p>5）忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br>target<br>bin<br>*.db</p>
<p>=====================<br>Git 常用命令<br>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中</p>
<h2 id="git-stash-pop-将文件从临时空间pop下来"><a href="#git-stash-pop-将文件从临时空间pop下来" class="headerlink" title="git stash pop 将文件从临时空间pop下来"></a>git stash pop 将文件从临时空间pop下来</h2><p>git remote add origin git@github.com:username/Hello-World.git</p>
<h2 id="git-push-origin-master-将本地项目给提交到服务器中"><a href="#git-push-origin-master-将本地项目给提交到服务器中" class="headerlink" title="git push origin master 将本地项目给提交到服务器中"></a>git push origin master 将本地项目给提交到服务器中</h2><h2 id="git-pull-本地与服务器端同步"><a href="#git-pull-本地与服务器端同步" class="headerlink" title="git pull 本地与服务器端同步"></a>git pull 本地与服务器端同步</h2><p>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</p>
<h2 id="git-push-origin-serverfix-awesomebranch"><a href="#git-push-origin-serverfix-awesomebranch" class="headerlink" title="git push origin serverfix:awesomebranch"></a>git push origin serverfix:awesomebranch</h2><p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs</p>
<hr>
<p>mkdir WebApp<br>cd WebApp<br>git init<br>touch README<br>git add README<br>git commit -m ‘first commit’<br>git remote add origin git@github.com:daixu/WebApp.git<br>git push -u origin master</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 View，ViewResolver]]></title>
      <url>http://yoursite.com/2015/06/06/Spring%20MVC%20%E4%B9%8B%20View%EF%BC%8CViewResolver/</url>
      <content type="html"><![CDATA[<p>一、概念理解</p>
<p>View —View接口表示一个响应给用户的视图，例如jsp文件，pdf文件，html文件等，它的定义如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</div><div class="line">    <span class="comment">//HttpServletRequest中的属性名，其值为响应状态码</span></div><div class="line">    String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + &amp;quot;.responseStatus&amp;quot;;</div><div class="line">    <span class="comment">//HttpServletRequest中的属性名，前一篇文章用到了该变量，它的对应值是请求路径中的变量，及@PathVariable</span></div><div class="line">    <span class="comment">//注解的变量</span></div><div class="line">    String PATH_VARIABLES = View.class.getName() + &amp;quot;.pathVariables&amp;quot;;</div><div class="line">    <span class="comment">//该视图的ContentType</span></div><div class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//渲染该视图</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&amp;lt;String, ?&amp;gt; model, HttpServletRequest request, HttpServletResponse response)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   该接口只有两个方法定义，分别表明该视图的ContentType和如何被渲染。Spring中提供了丰富的视图支持，几乎包含所有你想得到的，并且Spring的视图拓展性很好，你可以轻松实现自己的视图。</p>
<p>ViewResolver — ViewResolver接口定义了如何通过view 名称来解析对应View实例的行为，它的定义相当简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewResolver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该接口只有一个方法，通过view name 解析出View。同样Spring提供了丰富的ViewResolver实现用来解析不同的View：<br><a id="more"></a><br>二、获取ModelAndView</p>
<pre><code>上一篇文章我们分析了处理器方法如何被调用以及获取了返回值，但是Spring是如何处理返回值并响应给客户呢？这就是这节要分析的，根据返回值解析出对应的视图。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">invokeHandleMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line"></div><div class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line">        ServletInvocableHandlerMethod requestMappingMethod = </div><div class="line">                                    createRequestMappingMethod(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">        modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);</div><div class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">        AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request);</div><div class="line">        chain.addDelegatingCallable(getAsyncCallable(mavContainer, modelFactory, webRequest));</div><div class="line">        chain.setAsyncWebRequest(createAsyncWebRequest(request, response));</div><div class="line">        chain.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">        <span class="comment">//上一篇文章分析到这里，调用了处理器方法并处理了返回值</span></div><div class="line">        requestMappingMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (chain.isAsyncStarted()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//这里是根据返回值返回ModelAndView了</span></div><div class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   上面的代码在上一篇文章中已经分析到了invokeAndHandle方法，该方法调用了处理器方法，并处理了返回值，剩下的就是如何将返回值呈现给用户了，我们看getModelAndView的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">getModelAndView</span><span class="params">(ModelAndViewContainer mavContainer,</span></span></div><div class="line">            ModelFactory modelFactory, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//主要是同步model属性，并且将BindingResult添加到model中来</span></div><div class="line">        modelFactory.updateModel(webRequest, mavContainer);</div><div class="line">        <span class="comment">//是否直接处理请求，如@ResponseBody</span></div><div class="line">        <span class="keyword">if</span> (mavContainer.isRequestHandled()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        ModelMap model = mavContainer.getModel();</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(mavContainer.getViewName(), model);</div><div class="line">        <span class="keyword">if</span> (!mavContainer.isViewReference()) &#123;</div><div class="line">            mav.setView((View) mavContainer.getView());</div><div class="line">        &#125;<span class="comment">//如果model是RedirectAttributes，进行flashAttributes的处理</span></div><div class="line">        <span class="comment">//即将flashAttribute属性添加到request的Output FlashMap中，以被重定向后的request获取</span></div><div class="line">        <span class="keyword">if</span> (model <span class="keyword">instanceof</span> RedirectAttributes) &#123;</div><div class="line">            Map&amp;lt;String, ?&amp;gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</div><div class="line">            HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</div><div class="line">            RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   上面的代码是根据方法执行完后生成的model和视图名等信息生成ModelAndView对象，该对象维护了一个View和Model的对应关系，以便在View中可以访问Model的属性。</p>
<p>三、RedirectAttributes    </p>
<pre><code>上面的代码还有一个对RedirectAttributes的处理，这里我们来分析下是个什么回事？我们知道request中的属性只能在request范围内访问到，一旦执行重定向，重定向后的request并访问不到前面设置的属性了，虽然放到Session中可以在不同的request中共享这些属性，但是有时候放到Session中显得没有必要，毕竟很多属性只需要在“某次操作”中有用（重定向操作对用户来说其实是一次操作，因为重定向是浏览器执行的，对用户透明的。

因此为了解决这个问题，Spring引入了RedirectAttributes概念，即添加到RedirectAttributes中的属性，在重定向后依旧可以获取到，并且获取到以后，这些属性就会失效，新的request便无法获取了，这样就方便了开发者，同样也节省了内错占用。

那Spring是怎么实现的呢？这里牵扯到了FlashMap这一概念，Spring会默认为每一个请求添加两个FlashMap属性，一个是InputFlashMap，另一个是OutputFlashMap，其中InputFlashMap便包含了上一个请求在重定向到该请求前设置的属性值，也就是上一个请求的OutputFlashMap，看下面的图方便理解：

下面是DispatcherServlet中doService中的代码片段，在调用doDispatch前便设置了InputFlashmap和OutputFlashMap：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//尝试获取该request的InputFlashMap</span></div><div class="line">FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</div><div class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</div><div class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, </div><div class="line">                                                Collections.unmodifiableMap(inputFlashMap));</div><div class="line">        &#125;</div><div class="line"><span class="comment">//设置该请求的OutputFlashMap</span></div><div class="line">request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</div><div class="line"><span class="comment">//设置该请求的FlashMapManager，用来管理InputFlashMap和OutputFlashMap</span></div><div class="line">request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</div></pre></td></tr></table></figure>
<p>四、视图解析</p>
<pre><code>了解了FlashMap的概念我们继续往下看，前面我们已经获取到了请求的ModelAndView对象，这时invokeHandleMethod执行完毕将控制权交给了doDispatch，我们看怎么处理ModelAndView：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"><span class="keyword">if</span> (asyncChain.isAsyncStarted()) &#123;<span class="comment">///异步调用，暂不关心</span></div><div class="line">        mappedHandler.applyPostHandleAsyncStarted(processedRequest, response);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">&#125;<span class="comment">//如果ModelAndView中没有设置视图名，则设置默认视图（大致是prefix/请求路径/suffix）</span></div><div class="line">applyDefaultViewName(request, mv);</div><div class="line"><span class="comment">//执行拦截器的后处理器</span></div><div class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line"><span class="comment">//处理分派结果，响应用户</span></div><div class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div></pre></td></tr></table></figure>
<p>   重点就在最后一行，我们继续追踪：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) &#123;</div><div class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">//出现异常，进行异常处理，暂不关心</span></div><div class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">                logger.debug(&amp;quot;ModelAndViewDefiningException encountered&amp;quot;, exception);</div><div class="line">                mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">                mv = processHandlerException(request, response, handler, exception);</div><div class="line">                errorView = (mv != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果返回View需要渲染？</span></div><div class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;amp;&amp;amp; !mv.wasCleared()) &#123;</div><div class="line">            <span class="comment">//惊醒视图的渲染，我们主题</span></div><div class="line">            render(mv, request, response);</div><div class="line">            <span class="keyword">if</span> (errorView) &#123;</div><div class="line">                WebUtils.clearErrorRequestAttributes(request);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//调用拦截器的afterComplete</span></div><div class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">            mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   上面的代码我们着重看render方法是怎样实现的：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">protected void render(ModelAndView mv,HttpServletRequest request,HttpServletResponse response)&#123;</div><div class="line">        // 确定当前请求的Locale，并设置Response</div><div class="line">        Locale locale = this.localeResolver.resolveLocale(request);</div><div class="line">        response.setLocale(locale);</div><div class="line"></div><div class="line">        View view;//ModelAndView中的View还只是名称，需要解析成View对象</div><div class="line">        if (mv.isReference()) &#123;</div><div class="line">            view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</div><div class="line">            if (view == null) &#123;</div><div class="line">                throw new ServletException(</div><div class="line">                        &amp;quot;Could not resolve view with name '&amp;quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else &#123;//直接获取视图对象</div><div class="line">            view = mv.getView();</div><div class="line">            if (view == null) &#123;</div><div class="line">                throw new ServletException(&amp;quot;ModelAndView [&amp;quot; + mv + &amp;quot;] &amp;quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //委托视图对象进行渲染</div><div class="line">        view.render(mv.getModelInternal(), request, response);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   上面的代码涉及了两个重要步骤，视图名的解析和视图的渲染，这一小节我们来讲解视图名的解析，也就是ViewResolver了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Map&amp;lt;String, Object&amp;gt; model, Locale locale,</span></span></div><div class="line">            HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</div><div class="line">            View view = viewResolver.resolveViewName(viewName, locale);</div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> view;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<pre><code>我们查看resolveViewName方法，发现其中有一个viewResolvers实例变量，如果你看过前面的几篇文章，你获取会记得handlerMappings, handlerAdapters等变量，不错他们是一伙的，都是在DispatcherServlet初始化时完成设置的，并且我们可以在配置文件中定义我们自己的HandleMappings， HandlerAdapters，ViewResolvers等（这里不讲解怎样设置了），但是如果我们不设置的话Spring也会为我们设置一些默认值：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">org.springframework.web.servlet.HandlerMapping =</div><div class="line">                org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</div><div class="line">                org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerAdapter=</div><div class="line">                org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</div><div class="line">                org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</div><div class="line">                org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerExceptionResolver=</div><div class="line">    org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</div><div class="line">    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</div><div class="line">    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.RequestToViewNameTranslator=</div><div class="line">                org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</div><div class="line"></div><div class="line">org.springframework.web.servlet.ViewResolver=</div><div class="line">                            org.springframework.web.servlet.view.InternalResourceViewResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.FlashMapManager=</div><div class="line">                    org.springframework.web.servlet.support.SessionFlashMapManager</div></pre></td></tr></table></figure>
<p>   上面代码片段来自Spring MVC包中的DispatcherServlet.properties属性文件中，这里Spring为我们默认设置了诸多处理器，解析器等，可以看出在我们不进行ViewResolver设置的情况下，默认实现是InternalResourceViewResolver。我们知道，InternalResourceViewResolver继承自UrlBasedViewResolver， 而UrlBasedViewResolver继承自AbstractCachingViewResolver，其实这就是Spring的聪明之处，为了提高性能，Spring中充斥着缓存策略，在试图解析中也使用了缓存。这样只需在第一次解析时完成整个的视图创建工作，后续的请求只需从缓存中索取即可了。</p>
<pre><code>这里的InternalResourceViewResolver主要是用来支持Jsp文件的，换句话说，如果你的系统中只用到了jsp文件而没有模板引擎等框架，这个ViewResolver就够你用了，你也就无需在配置文件中多此一举的写上该ViewResolver了。下面我们就来看它的实现吧：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//如果没有被缓存呢，只能创建了</span></div><div class="line">        <span class="keyword">if</span> (!isCache()) &#123;</div><div class="line">            <span class="keyword">return</span> createView(viewName, locale);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;<span class="comment">//检索缓存中的视图对象</span></div><div class="line">            Object cacheKey = getCacheKey(viewName, locale);</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.viewCache) &#123;</div><div class="line">                View view = <span class="keyword">this</span>.viewCache.get(cacheKey);</div><div class="line">                <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;amp;&amp;amp; (!<span class="keyword">this</span>.cacheUnresolved </div><div class="line">                                                || !<span class="keyword">this</span>.viewCache.containsKey(cacheKey))) &#123;</div><div class="line">                    <span class="comment">// Ask the subclass to create the View object.</span></div><div class="line">                    view = createView(viewName, locale);</div><div class="line">                    <span class="keyword">if</span> (view != <span class="keyword">null</span> || <span class="keyword">this</span>.cacheUnresolved) &#123;</div><div class="line">                        <span class="keyword">this</span>.viewCache.put(cacheKey, view);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> view;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   方法很简单，我们接着看是怎样创建视图的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 当前ViewResolver无法解析该视图名，返回null</span></div><div class="line">        <span class="keyword">if</span> (!canHandle(viewName, locale)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// view名称以redirect:开头，即重定向视图解析</span></div><div class="line">        <span class="keyword">if</span> (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;</div><div class="line">            String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());</div><div class="line">            RedirectView view = <span class="keyword">new</span> RedirectView(redirectUrl, isRedirectContextRelative()</div><div class="line">                                                               , isRedirectHttp10Compatible());</div><div class="line">            <span class="keyword">return</span> applyLifecycleMethods(viewName, view);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// view名称以forward:开头，即转发视图解析</span></div><div class="line">        <span class="keyword">if</span> (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;</div><div class="line">            String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InternalResourceView(forwardUrl);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 正常情况下，让父类创建吧</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.createView(viewName, locale);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   创建视图时，Spring会检查视图名，有三种情况redirect视图，forward视图，普通视图，进行了不同处理。对于redirect视图，spring获取redirectURL并创建了RedirectView对象，然后执行了一下bean实例的生命周期方法，没什么实质性东西，我们不关心。对于转发视图，创建了InternalResourceView对象，上面说的这两种对象的渲染过程我们过会会降到的。这里大家先记住。第三种情况呢，又交给了父类处理，我们继续看看吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> loadView(viewName, locale);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">loadView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        AbstractUrlBasedView view = buildView(viewName);</div><div class="line">        View result = applyLifecycleMethods(viewName, view);</div><div class="line">        <span class="keyword">return</span> (view.checkResource(locale) ? result : <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   父类的createView方法又委托给了loadView，而loadView是抽象的由子类实现，我们继续看loadView中有一个buildView方法，看着不错哦：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> AbstractUrlBasedView <span class="title">buildView</span><span class="params">(String viewName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//根据ViewClass实例化该Class</span></div><div class="line">        AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils</div><div class="line">                                                            .instantiateClass(getViewClass());</div><div class="line">        <span class="comment">//设置视图的url，prefix/viewName/suffix</span></div><div class="line">        view.setUrl(getPrefix() + viewName + getSuffix());</div><div class="line">        String contentType = getContentType();</div><div class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;<span class="comment">//设置ContentType</span></div><div class="line">            view.setContentType(contentType);</div><div class="line">        &#125;<span class="comment">//设置请求上下文属性</span></div><div class="line">        view.setRequestContextAttribute(getRequestContextAttribute());</div><div class="line">        view.setAttributesMap(getAttributesMap());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.exposePathVariables != <span class="keyword">null</span>) &#123;<span class="comment">//设置是否暴露PathVariable</span></div><div class="line">            view.setExposePathVariables(exposePathVariables);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   上面的代码又出来个ViewClass， prefix，suffix，他们又是个什么东西呢？其实我们知道在配置InternalResourceViewResolver时可以指定一个viewClass，prefix，suffix，没错，就是他们，先说prefix，suffix，我们看到了它会分别添加到viewName的前后，组成视图的URL。那个viewClass就是视图的class对象类型了。我们看InternalResourceViewResolver的构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">InternalResourceViewResolver</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class viewClass = requiredViewClass();</div><div class="line">        <span class="keyword">if</span> (viewClass.equals(InternalResourceView.class) &amp;amp;&amp;amp; jstlPresent) &#123;</div><div class="line">            viewClass = JstlView.class;</div><div class="line">        &#125;</div><div class="line">        setViewClass(viewClass);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   会发现在我们没有指定的情况下默认是JstlView哦。它继承自InternalResourceView。到此为止我们的视图对象已经创建完毕。</p>
<pre><code>我们这里只解析了Spring默认情况下的InternalResourceViewResolver的解析过程，默认情况下解析的视图类型是JstlView。如果是Redirect的话则是RedirectView。
</code></pre><p>五、视图渲染</p>
<pre><code>视图解析出来了，下面就是要将视图渲染给用户显示了。这里我们依旧只讲解默认的JstlView的渲染过程，当然还有RedirectView的。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&amp;lt;String, ?&amp;gt; model, HttpServletRequest request, </span></span></div><div class="line">                                                HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        Map&amp;lt;String, Object&amp;gt; mergedModel = createMergedOutputModel(model, request, response);</div><div class="line"></div><div class="line">        prepareResponse(request, response);</div><div class="line">        renderMergedOutputModel(mergedModel, request, response);</div><div class="line">&#125;</div><div class="line"><span class="keyword">protected</span> Map&amp;lt;String, Object&amp;gt; createMergedOutputModel(Map&amp;lt;String, ?&amp;gt; model, </div><div class="line">                            HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(&amp;quot;unchecked&amp;quot;)</div><div class="line">        <span class="comment">//如果需要保留PathVariable</span></div><div class="line">        Map&amp;lt;String, Object&amp;gt; pathVars = <span class="keyword">this</span>.exposePathVariables ?</div><div class="line">            (Map&amp;lt;String, Object&amp;gt;) request.getAttribute(View.PATH_VARIABLES) : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//联合动态和静态属性</span></div><div class="line">        <span class="keyword">int</span> size = <span class="keyword">this</span>.staticAttributes.size();</div><div class="line">        size += (model != <span class="keyword">null</span>) ? model.size() : <span class="number">0</span>;</div><div class="line">        size += (pathVars != <span class="keyword">null</span>) ? pathVars.size() : <span class="number">0</span>;</div><div class="line">        Map&amp;lt;String, Object&amp;gt; mergedModel = <span class="keyword">new</span> HashMap&amp;lt;String, Object&amp;gt;(size);</div><div class="line">        mergedModel.putAll(<span class="keyword">this</span>.staticAttributes);</div><div class="line">        <span class="keyword">if</span> (pathVars != <span class="keyword">null</span>) &#123;</div><div class="line">            mergedModel.putAll(pathVars);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (model != <span class="keyword">null</span>) &#123;</div><div class="line">            mergedModel.putAll(model);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Expose RequestContext?</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.requestContextAttribute != <span class="keyword">null</span>) &#123;</div><div class="line">            mergedModel.put(<span class="keyword">this</span>.requestContextAttribute, </div><div class="line">                                        createRequestContext(request, response, mergedModel));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mergedModel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   上面代码是AbstractView中的方法，也就是所有视图都会执行的操作，就是将静态属性和动态生成的属性合并，我们重点看</p>
<p>renderMergedOutputModel方法，子类会覆盖该方法，实现不同的逻辑。我们来看JstlView和RedirectView的实现，首先JstlView :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></div><div class="line">            Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request,HttpServletResponse response)&#123;</div><div class="line"></div><div class="line">        <span class="comment">//确定执行请求转发的request对象</span></div><div class="line">        HttpServletRequest requestToExpose = getRequestToExpose(request);</div><div class="line">        <span class="comment">//将model中的属性暴露为请求属性表中</span></div><div class="line">        exposeModelAsRequestAttributes(model, requestToExpose);</div><div class="line">        <span class="comment">//暴露MessageResource</span></div><div class="line">        exposeHelpers(requestToExpose);</div><div class="line">        <span class="comment">//确定转发的路径，也就是View的URL，但会检查是否会进入死循环，即跟当前请求同一个路径</span></div><div class="line">        String dispatcherPath = prepareForRendering(requestToExpose, response);</div><div class="line">        <span class="comment">//生成RequestDispatcher对象</span></div><div class="line">        RequestDispatcher rd = getRequestDispatcher(requestToExpose, dispatcherPath);</div><div class="line">        <span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(&amp;quot;Could not get RequestDispatcher <span class="keyword">for</span> [&amp;quot; + getUrl() +&amp;quot;]&amp;quot;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//include操作</span></div><div class="line">        <span class="keyword">if</span> (useInclude(requestToExpose, response)) &#123;</div><div class="line">            response.setContentType(getContentType());</div><div class="line">            rd.include(requestToExpose, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//执行转发，暴露属性到转发请求中</span></div><div class="line">            exposeForwardRequestAttributes(requestToExpose);</div><div class="line">            rd.forward(requestToExpose, response);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  方法看着很长其实思路比较简单，主要就是调用了RequestDispatcher的include 或forward的方法，将请求转发到指定URL。JstlView的视图渲染相对简单，我们来看RedirectView的渲染：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></div><div class="line">            Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request, HttpServletResponse response)</div><div class="line">            <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="comment">//获取重定向的路径，也就是前面生成RedirectView时设置的URL，但会进行相对路径的处理</span></div><div class="line">        String targetUrl = createTargetUrl(model, request);</div><div class="line">        <span class="comment">//调用用户注册的RequestDataValueProcessor的process方法，通常用不到，不管</span></div><div class="line">        targetUrl = updateTargetUrl(targetUrl, model, request, response);</div><div class="line">        <span class="comment">//这里就是上面讲到的FlashMap的处理啦，是怎样实现的呢？</span></div><div class="line">        <span class="comment">//我们知道前面将RedirectAttributes的属性都设置到了当前请求的OutputFlashMap中了，这里再取出来。</span></div><div class="line">        <span class="comment">//设置flashMap的目标请求路径，用来比对下次请求的路径，如果匹配，将其中的属性设置到请求属性表中</span></div><div class="line">        FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);</div><div class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(flashMap)) &#123;</div><div class="line">            UriComponents uriComponents = UriComponentsBuilder.fromUriString(targetUrl).build();</div><div class="line">            flashMap.setTargetRequestPath(uriComponents.getPath());</div><div class="line">            flashMap.addTargetRequestParams(uriComponents.getQueryParams());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将flashMap交由FlashMapManager管理。</span></div><div class="line">        FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager(request);</div><div class="line">        flashMapManager.saveOutputFlashMap(flashMap, request, response);</div><div class="line">        <span class="comment">//返回结果，设置响应头304.</span></div><div class="line">        sendRedirect(request, response, targetUrl.toString(), <span class="keyword">this</span>.http10Compatible);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   到此为止，我们的试图解析，渲染过程就完全分析完了，获取到目前为止有点晕，其实好好思考下，Spring在视图解析，和渲染这块给了我们足够的拓展空间。</p>
<p>六、总结<br>    Spring对视图的支持相当完善，默认的JSP不用说，PDF，Excel, 等，还包括主流的模板引擎，像FreeMarker， Tiles等，可以参考第一张图片。当然你完全也可以实现自己的View，以及ViewResolver，来解析自定义的视图。不过应该没多大必要。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 @RequestMapping（2）]]></title>
      <url>http://yoursite.com/2015/06/04/Spring%20MVC%20%E4%B9%8B%20RequestMapping%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>一、从头开始</p>
<p>   SpringMvc会通过DispatcherServlet来处理所有的请求，展开这个方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) &#123;</div><div class="line">        HttpServletRequest processedRequest = request;</div><div class="line">        HandlerExecutionChain mappedHandler = null;</div><div class="line">        AsyncExecutionChain asyncChain = AsyncExecutionChain.getForCurrentRequest(request);</div><div class="line">        try &#123;</div><div class="line">            ModelAndView mv = null;</div><div class="line">            Exception dispatchException = null;</div><div class="line">            try &#123;</div><div class="line">                processedRequest = checkMultipart(request);</div><div class="line">                // 确定当前请求的处理器（HandlerExecutionChain 包含Handler和Interceptor列表）</div><div class="line">                mappedHandler = getHandler(processedRequest, false);</div><div class="line">                if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;</div><div class="line">                    noHandlerFound(processedRequest, response);//404异常</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                // 确定当前请求的处理器适配器</div><div class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line">                //......省略诸多代码......</div><div class="line">                // 调用处理处理器方法，返回ModelAndView对象</div><div class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line">            &#125;//处理返回结果</div><div class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>  下面展开getHandler是怎么做的：<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//这里有一个handlerMappings实例变量，如果你看过&amp;lt;mvc:annotation-driven/&amp;gt;那篇文章，相信你就知道这</span></div><div class="line">        <span class="comment">//个handlerMappings都包括哪些HandlerMapping实例了？</span></div><div class="line">        <span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">            HandlerExecutionChain handler = hm.getHandler(request);</div><div class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> handler;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   <mvc:annotation-driven>这篇博客中说明了在启用该标签时Spring会默认注册RequestMappingHandlerMapping实例在处理@RequestMapping注解，而@RequestMapping (1) 这篇博客说明了该HandlerMapping是如何处理@RequestMapping注解，以及怎么保存请求映射关系的。下面我们就看RequestMappingHandlerMapping的getHandler方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.....</span></div><div class="line"><span class="comment">//AbstractHandlerMapping</span></div><div class="line"><span class="comment">//.....</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Object handler = getHandlerInternal(request);<span class="comment">//调用下面的方法</span></div><div class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</div><div class="line">            handler = getDefaultHandler();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Bean name or resolved handler?</span></div><div class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</div><div class="line">            String handlerName = (String) handler;</div><div class="line">            handler = getApplicationContext().getBean(handlerName);</div><div class="line">        &#125;<span class="comment">//返回该请求对应的HandlerExecutionChain（包括处理器方法和拦截器）</span></div><div class="line">        <span class="keyword">return</span> getHandlerExecutionChain(handler, request);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//.....</span></div><div class="line"><span class="comment">//AbstractHandlerMethodMapping(RequestMappingHandlerMapping 的祖先类)</span></div><div class="line"><span class="comment">//返回值是HandlerMethod</span></div><div class="line"><span class="comment">//.....</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</div><div class="line">        <span class="comment">///查找请求路径对应的HandlerMethod实例</span></div><div class="line">        HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</div><div class="line">        <span class="comment">//确保HandlerMethod中的handler是处理器实例而不是处理器名字</span></div><div class="line">        <span class="keyword">return</span> (handlerMethod != <span class="keyword">null</span>) ? handlerMethod.createWithResolvedBean() : <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></mvc:annotation-driven></p>
<p>以上两个方法都是RequestMappingHandlerMapping的祖先类，逻辑很简单，先获取当前请求的路径，然后查找该路径对应的HandlerMethod实例。@RequestMapping (1)<br>这篇博客最后讲到了，RequestMappingHandlerMapping中的两个映射表实例，urlMap和handlerMethods，第一个是路径与RequestMappingInfo的映射，第二个是RequestMappingInfo和HandlerMethod的映射，lookupHandlerMethod方法负责检索这两个变量了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span></span>&#123;</div><div class="line">        List&amp;lt;Match&amp;gt; matches = <span class="keyword">new</span> ArrayList&amp;lt;Match&amp;gt;();</div><div class="line">        <span class="comment">//查找urlMap，获取直接匹配的RequestMappingInfo列表。如</span></div><div class="line">        <span class="comment">//URL 是/work/produce/2， @RequestMapping（&amp;quot;/work/produce/2&amp;quot;)直接匹配</span></div><div class="line">        List&amp;lt;T&amp;gt; directPathMatches = <span class="keyword">this</span>.urlMap.get(lookupPath);</div><div class="line">        <span class="keyword">if</span> (directPathMatches != <span class="keyword">null</span>) &#123;</div><div class="line">            addMatchingMappings(directPathMatches, matches, request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (matches.isEmpty()) &#123;<span class="comment">//如果没有找到直接匹配项，遍历所有的注册的RequestMappingInfo来查找</span></div><div class="line">            <span class="comment">//遍历所有可能的RequestMappingInfo，找到完全匹配的RequestMappingInfo实例，并生成Match对象</span></div><div class="line">            <span class="comment">//添加到Match列表中，Match是RequestMappingInfo和HandlerMethod的临时映射表。</span></div><div class="line">            <span class="comment">//举个例子：请求URL可能是GET:/work/produce/2,</span></div><div class="line">            <span class="comment">//而@RequestMapping(&amp;quot;/work/produce/&#123;no&#125;&amp;quot; &amp;quot;GET&amp;quot;)此时需要匹配是否是GET请求，以及模式是否匹配</span></div><div class="line">            addMatchingMappings(<span class="keyword">this</span>.handlerMethods.keySet(), matches, request);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!matches.isEmpty()) &#123;<span class="comment">//排序，找出最佳匹配</span></div><div class="line">            Comparator&amp;lt;Match&amp;gt; comparator = <span class="keyword">new</span> MatchComparator(getMappingComparator(request));</div><div class="line">            Collections.sort(matches, comparator);</div><div class="line">            Match bestMatch = matches.get(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (matches.size() &amp;gt; <span class="number">1</span>) &#123;<span class="comment">//如果可能的方法多余一个</span></div><div class="line">                Match secondBestMatch = matches.get(<span class="number">1</span>);<span class="comment">//并且两个方法的@RequestMapping内容相同</span></div><div class="line">                <span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;<span class="comment">//抛出异常</span></div><div class="line">                    Method m1 = bestMatch.handlerMethod.getMethod();</div><div class="line">                    Method m2 = secondBestMatch.handlerMethod.getMethod();</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">                            &amp;quot;Ambiguous handler methods mapped <span class="keyword">for</span> HTTP path&amp;quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这里是处理请求路径中的变量，如果/work/produce/&#123;no&#125;匹配的/work/produce/2中将no=2</span></div><div class="line">            <span class="comment">//添加到Request的属性表中，以便后面@PathVarible参数的处理</span></div><div class="line">            handleMatch(bestMatch.mapping, lookupPath, request);</div><div class="line">            <span class="keyword">return</span> bestMatch.handlerMethod;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> handleNoMatch(handlerMethods.keySet(), lookupPath, request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   在进行URL匹配中，Spring会先查找是否存在直接匹配的RequestMappingInfo实例，即@RequestMapping中的value，method属性完全匹配请求的，如果没有找到通常是存在PathVariable的，如果/{no}和/222的情况等也是匹配的,  找到匹配项后，需要找出最优解，然后将路径中的变量存入Request的变量表中，我们分别详细的了解下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMatchingMappings</span><span class="params">(Collection&amp;lt;T&amp;gt; mappings, List&amp;lt;Match&amp;gt; matches, </span></span></div><div class="line">                                                                HttpServletRequest request) &#123;</div><div class="line">        <span class="keyword">for</span> (T mapping : mappings) &#123;<span class="comment">//遍历所有的RequestMappingInfo列表</span></div><div class="line">            T match = getMatchingMapping(mapping, request);<span class="comment">//获取匹配的RequestMappingInfo实例</span></div><div class="line">            <span class="keyword">if</span> (match != <span class="keyword">null</span>) &#123;<span class="comment">//并生成匹配的RequestMappingInfo实例和对应HandlerMethod的Match实例</span></div><div class="line">                matches.add(<span class="keyword">new</span> Match(match, handlerMethods.get(mapping)));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   继续看getMatchingMapping的实现：</div><div class="line">```<span class="function">java</span></div><div class="line"><span class="keyword">public</span> RequestMappingInfo <span class="title">getMatchingCondition</span><span class="params">(HttpServletRequest request)</span> &#123;</div><div class="line">        <span class="comment">//查看RequestMappingInfo的所有属性是否匹配</span></div><div class="line">        RequestMethodsRequestCondition methods = methodsCondition.getMatchingCondition(request);</div><div class="line">        ParamsRequestCondition params = paramsCondition.getMatchingCondition(request);</div><div class="line">        HeadersRequestCondition headers = headersCondition.getMatchingCondition(request);</div><div class="line">        ConsumesRequestCondition consumes = consumesCondition.getMatchingCondition(request);</div><div class="line">        ProducesRequestCondition produces = producesCondition.getMatchingCondition(request);</div><div class="line">        <span class="keyword">if</span> (methods == <span class="keyword">null</span> || params == <span class="keyword">null</span> || headers == <span class="keyword">null</span> </div><div class="line">                                                    || consumes == <span class="keyword">null</span> || produces == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;<span class="comment">//我们重点看这个，路径是否匹配</span></div><div class="line">        PatternsRequestCondition patterns = patternsCondition.getMatchingCondition(request);</div><div class="line">        <span class="keyword">if</span> (patterns == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        RequestConditionHolder custom = customConditionHolder.getMatchingCondition(request);</div><div class="line">        <span class="keyword">if</span> (custom == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestMappingInfo(patterns, methods, params, headers, </div><div class="line">                                                        produces, custom.getCondition());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   我们知道RequestMappingInfo就是@RequestMapping注解的抽象，它包含@RequestMapping中的所有属性，因此在查找匹配项时，需要查看所有这些属性是否与请求匹配。我们这里只看路径模式是否匹配，都很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> PatternsRequestCondition <span class="title">getMatchingCondition</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.patterns.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;<span class="comment">//获取请求路径如/work/produce/2</span></div><div class="line">        String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</div><div class="line">        List&amp;lt;String&amp;gt; matches = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">        <span class="comment">//遍历@RequestMapping中的所有模式</span></div><div class="line">        <span class="keyword">for</span> (String pattern : patterns) &#123;</div><div class="line">            <span class="comment">//找出与请求路径匹配的模式，如/work/produce/&#123;no&#125;</span></div><div class="line">            String match = getMatchingPattern(pattern, lookupPath);</div><div class="line">            <span class="keyword">if</span> (match != <span class="keyword">null</span>) &#123;</div><div class="line">                matches.add(match);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="comment">//排序</span></div><div class="line">        Collections.sort(matches, <span class="keyword">this</span>.pathMatcher.getPatternComparator(lookupPath));</div><div class="line">        <span class="comment">//返回匹配的请求模式实例</span></div><div class="line">        <span class="keyword">return</span> matches.isEmpty() ? <span class="keyword">null</span> : </div><div class="line">            <span class="keyword">new</span> PatternsRequestCondition(matches, <span class="keyword">this</span>.urlPathHelper, <span class="keyword">this</span>.pathMatcher, </div><div class="line">                                       <span class="keyword">this</span>.useSuffixPatternMatch, <span class="keyword">this</span>.useTrailingSlashMatch);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMatchingPattern</span><span class="params">(String pattern, String lookupPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (pattern.equals(lookupPath)) &#123;</div><div class="line">            <span class="keyword">return</span> pattern;<span class="comment">//直接匹配</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.useSuffixPatternMatch) &#123;<span class="comment">//是否使用后缀模式，/abc/de匹配/abc</span></div><div class="line">            <span class="keyword">boolean</span> hasSuffix = pattern.indexOf(<span class="string">'.'</span>) != -<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (!hasSuffix &amp;amp;&amp;amp; <span class="keyword">this</span>.pathMatcher.match(pattern + &amp;quot;.*&amp;quot;, lookupPath)) &#123;</div><div class="line">                <span class="keyword">return</span> pattern + &amp;quot;.*&amp;quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="comment">//匹配/work/produce/&#123;no&#125; 和/work/produce/2</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pathMatcher.match(pattern, lookupPath)) &#123;</div><div class="line">            <span class="keyword">return</span> pattern;</div><div class="line">        &#125;<span class="comment">//是否使用结尾的斜线匹配</span></div><div class="line">        <span class="keyword">boolean</span> endsWithSlash = pattern.endsWith(&amp;quot;/&amp;quot;);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.useTrailingSlashMatch) &#123;</div><div class="line">            <span class="keyword">if</span> (!endsWithSlash &amp;amp;&amp;amp; <span class="keyword">this</span>.pathMatcher.match(pattern + &amp;quot;/&amp;quot;, lookupPath)) &#123;</div><div class="line">                <span class="keyword">return</span> pattern +&amp;quot;/&amp;quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   至于上面的pathMatcher.match方法这里就不分析了，可以自己看看，匹配算法还是比较复杂的，主要是尽可能的全面，除了进行匹配外，还会将路径中的变量保存起来以便@PathVariable参数使用。</p>
<pre><code>以上便是整个的匹配过程，好麻烦，或许你会说这会不会降低Spring的性能？实话说，在处理首次请求时，效率是很差，但是Spring使用了各种缓存策略，一旦程序进入正轨，效率就非常高了。
</code></pre><p>二、处理器方法的调用</p>
<pre><code>现在我们已经查找到了对应请求的处理器方法，下面我们就看Spring是如何在运行时动态地调用处理器方法的，并传递正确的参数。在doDispatch方法中，我们看到，确定了处理器（方法）后，Spring接着获取了该处理器方法的适配器（HandlerAdapter概念讲解中说到过，用来调用处理器方法的）
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="comment">//这个handlerAdapters跟handlerMappings一样，启用&amp;lt;mvc:annoation-driven/&amp;gt;后默认注册</span></div><div class="line">        <span class="comment">//RequestMappingHandlerAdapter（since3.1）</span></div><div class="line">        <span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</div><div class="line">            <span class="keyword">if</span> (ha.supports(handler)) &#123;</div><div class="line">                <span class="keyword">return</span> ha;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(&amp;quot;No adapter <span class="keyword">for</span> handler [&amp;quot; + handler +</div><div class="line">                &amp;quot;]: Does your handler implement a supported <span class="class"><span class="keyword">interface</span> <span class="title">like</span> <span class="title">Controller</span>?&amp;<span class="title">quot</span></span>;);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//是否支持当前处理器，其实就是看看处理器是不是HandlerMethod实例</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> HandlerMethod &amp;amp;&amp;amp; supportsInternal((HandlerMethod) handler);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   获取了HandlerAdapter后，Spring就会调用handlerAdapter实例的handle方法，并返回ModelAndView实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//如果HandlerMethod所属的处理器被@SessionAttribute注解标记了</span></div><div class="line">        <span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</div><div class="line">         <span class="comment">//设置响应头信息，防止缓存以便Session属性的管理</span></div><div class="line">         checkAndPrepare(request, response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//设置响应头，缓存默认时间</span></div><div class="line">            checkAndPrepare(request, response, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//要求在Session级别上进行同步，即同一个客户端的多个请求需要阻塞调用该处理器方法</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</div><div class="line">            HttpSession session = request.getSession(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">                Object mutex = WebUtils.getSessionMutex(session);</div><div class="line">                <span class="keyword">synchronized</span> (mutex) &#123;<span class="comment">//调用</span></div><div class="line">                    <span class="keyword">return</span> invokeHandleMethod(request, response, handlerMethod);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="comment">//调用</span></div><div class="line">        <span class="keyword">return</span> invokeHandleMethod(request, response, handlerMethod);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   我们接着看invokeHandlerMethod方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">invokeHandleMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//包装请求和响应对象</span></div><div class="line">        ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">        <span class="comment">//获取与HandlerMethod对应的DataBinderFactory。</span></div><div class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">        <span class="comment">//获取处理器方法所属处理器中被@ModelAttribute标记，但是没有被@RequestMapping标记的方法</span></div><div class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line">        <span class="comment">//创建请求映射方法，并将HandlerAdapter中的参数解析器列表和返回值处理器列表传递给它。</span></div><div class="line">        ServletInvocableHandlerMethod requestMappingMethod = </div><div class="line">                                      createRequestMappingMethod(handlerMethod, binderFactory);</div><div class="line">        <span class="comment">//创建ModelAndViewContainer</span></div><div class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">        modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);</div><div class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line">        <span class="comment">//获取并设置当前请求的异步调用链实例</span></div><div class="line">        AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request);</div><div class="line">        chain.addDelegatingCallable(getAsyncCallable(mavContainer, modelFactory, webRequest));</div><div class="line">        chain.setAsyncWebRequest(createAsyncWebRequest(request, response));</div><div class="line">        chain.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">        <span class="comment">//调用该处理器方法。</span></div><div class="line">        requestMappingMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (chain.isAsyncStarted()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//获取并返回ModelAndView</span></div><div class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   关于异步调用链那块我们暂不关心，。从上面代码可以看到，在调用方法前，分别检查了处理器中存在的@InitBinder注解的方法和@ModelAttribute注解的方法，InitBinder方法用于类型转化，如将String转化为Date类型等，可以通过@InitBinder方法实现，感兴趣可以自己看看，不在详细分析。至于@ModelAttribute注解的方法，其返回值会被放入Model对象中供视图使用。下面我们看invokeAndHandle方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest,</span></span></div><div class="line">            ModelAndViewContainer mavContainer, Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//....省略异步调用方法，暂不考虑</span></div><div class="line">        Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</div><div class="line">        <span class="comment">//....省略几行代码，暂不考虑</span></div><div class="line">        <span class="keyword">try</span> &#123;<span class="comment">//处理返回结果</span></div><div class="line">            <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(returnValue, </div><div class="line">                                    getReturnValueType(returnValue), mavContainer, webRequest);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   接着我们看下invokeForRequest方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request,</span></span></div><div class="line">                                         ModelAndViewContainer mavContainer,</div><div class="line">                                         Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//获取方法参数值。</span></div><div class="line">        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</div><div class="line">        <span class="comment">//传递参数值，调用，返回返回值</span></div><div class="line">        Object returnValue = invoke(args);</div><div class="line">        <span class="keyword">return</span> returnValue;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   啊哈上面的代码貌似很简单，实则不是，重点就在getMethodArgumentValues方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Object[] getMethodArgumentValues(</div><div class="line">            NativeWebRequest request, ModelAndViewContainer mavContainer,</div><div class="line">            Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//获取处理器方法的MethodParameter数组，就是方法的“参数定义”列表。</span></div><div class="line">        MethodParameter[] parameters = getMethodParameters();</div><div class="line">        Object[] args = <span class="keyword">new</span> Object[parameters.length];</div><div class="line">        <span class="comment">//遍历所有方法参数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; parameters.length; i++) &#123;</div><div class="line">            MethodParameter parameter = parameters[i];</div><div class="line">            parameter.initParameterNameDiscovery(parameterNameDiscoverer);</div><div class="line">            <span class="comment">//确定泛型参数的类型</span></div><div class="line">            GenericTypeResolver.resolveParameterType(parameter, getBean().getClass());</div><div class="line">            <span class="comment">//根据提供的参数值，解析当前参数的值</span></div><div class="line">            args[i] = resolveProvidedArgument(parameter, providedArgs);</div><div class="line">            <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//根据内置的参数解析器，来解析当前的参数值</span></div><div class="line">            <span class="keyword">if</span> (argumentResolvers.supportsParameter(parameter)) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    args[i] = argumentResolvers.resolveArgument(parameter, mavContainer,</div><div class="line">                                                                 request, dataBinderFactory);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果参数值依旧为空，抛出异常。</span></div><div class="line">            <span class="keyword">if</span> (args[i] == <span class="keyword">null</span>) &#123;</div><div class="line">         String msg = getArgumentResolutionErrorMessage(&amp;quot;No suitable resolver <span class="keyword">for</span> argument&amp;quot;, i);</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> args;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   该方法是HandlerMethod中的方法，因此可以调用getMethodParameters()方法获取参数列表，然后遍历这些参数，分别用参数解析器来解析当前参数值，其中，argumentResolvers是HandlerMethodArgumentResolverComposite，它包含了所有的参数解析器的列表，以及参数类型和解析器的映射表，我们不妨看看到底什么怎么回事：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是的，这个方法是HandlerAdapter中的方法，上一篇文章我们介绍了这是InitializingBean接口中的方法，</span></div><div class="line"><span class="comment">//会被自动调用</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//调用下面的方法，获取所有某人参数解析器。</span></div><div class="line">            List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers = getDefaultArgumentResolvers();</div><div class="line">            <span class="comment">//这个是HandlerAdapterComposite实例。</span></div><div class="line">            <span class="keyword">this</span>.argumentResolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite()</div><div class="line">                                                            .addResolvers(resolvers);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.initBinderArgumentResolvers == <span class="keyword">null</span>) &#123;</div><div class="line">            List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers = </div><div class="line">                                                    getDefaultInitBinderArgumentResolvers();</div><div class="line">            <span class="keyword">this</span>.initBinderArgumentResolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite()</div><div class="line">                                                                    .addResolvers(resolvers);</div><div class="line">        &#125;<span class="comment">//注册默认返回值处理器</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers == <span class="keyword">null</span>) &#123;</div><div class="line">            List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; handlers = getDefaultReturnValueHandlers();</div><div class="line">            <span class="keyword">this</span>.returnValueHandlers = <span class="keyword">new</span> HandlerMethodReturnValueHandlerComposite()</div><div class="line">                                                                    .addHandlers(handlers);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the list of argument resolvers to use including built-in resolvers</div><div class="line">     * and custom resolvers provided via &#123;<span class="doctag">@link</span> #setCustomArgumentResolvers&#125;.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&amp;lt;HandlerMethodArgumentResolver&amp;gt; getDefaultArgumentResolvers() &#123;</div><div class="line">        List&amp;lt;HandlerMethodArgumentResolver&amp;gt; resolvers </div><div class="line">                                            = <span class="keyword">new</span> ArrayList&amp;lt;HandlerMethodArgumentResolver&amp;gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Annotation-based argument resolution</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</div><div class="line"></div><div class="line">        <span class="comment">// Type-based argument resolution</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</div><div class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</div><div class="line"></div><div class="line">        <span class="comment">// Custom arguments</span></div><div class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</div><div class="line">            resolvers.addAll(getCustomArgumentResolvers());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Catch-all</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> resolvers;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   这下清晰了吧，RequestMappingHandlerAdapter实现了InitializingBean接口，因此Spring启动是会调用它的afterPropertySet方法，进行上述参数解析器的注册。然后在处理器方法调用过程中会遍历这些解析器找到支持当前参数的解析器并解析参数。Perfect。我们再回到之前的resolveArgument方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(</span></span></div><div class="line">            MethodParameter parameter, ModelAndViewContainer mavContainer,</div><div class="line">            NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//调用下面的方法回去支持当前参数类型的解析器。</span></div><div class="line">        HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</div><div class="line">        <span class="comment">//调用该解析器的解析方法进行解析。</span></div><div class="line">        <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//前面说过了，HandlerAdapterComposite会维护一个MethodParameter到解析器的映射关系。没错吧</span></div><div class="line">    <span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">        HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (HandlerMethodArgumentResolver methodArgumentResolver : argumentResolvers) &#123;</div><div class="line">                <span class="comment">//判断解析器是否支持当前参数类型</span></div><div class="line">                <span class="keyword">if</span> (methodArgumentResolver.supportsParameter(parameter)) &#123;</div><div class="line">                    result = methodArgumentResolver;</div><div class="line">                    <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   再往下就到某个解析器怎样解析具体参数了，有大约一二十个解析器，我们不可能全部分析，这里我们只分析其中常见的一个：@PathVariable注解的解析器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果该参数没有被@PathVariable注解标记，则返回false，不支持</span></div><div class="line">        <span class="keyword">if</span> (!parameter.hasParameterAnnotation(PathVariable.class)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果该参数是Map类型的。则判断@PathVariable是否设置了value属性</span></div><div class="line">        <span class="keyword">if</span> (Map.class.isAssignableFrom(parameter.getParameterType())) &#123;</div><div class="line">            String paramName = parameter.getParameterAnnotation(PathVariable.class).value();</div><div class="line">            <span class="keyword">return</span> StringUtils.hasText(paramName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   从上面代码我们知道PathVariableMethodArgumentResolver支持被@PathVariable注解的参数。下面我们看它怎样解析参数值得：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(</span></span></div><div class="line">            MethodParameter parameter, ModelAndViewContainer mavContainer,</div><div class="line">            NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//获取参数类型</span></div><div class="line">        Class&amp;lt;?&amp;gt; paramType = parameter.getParameterType();</div><div class="line">        <span class="comment">//获取参数的名-值信息，如@PathVariable(&amp;quot;NO&amp;quot;) 则NO为名称，值为请求路径中对应</span></div><div class="line">        <span class="comment">//@RequestMapping(&amp;quot;/work/produce/NO&amp;quot;)中NO的值。</span></div><div class="line">        NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);</div><div class="line">        <span class="comment">//解析请求路径中对应名称的值。上例中NO对应的值。</span></div><div class="line">        Object arg = resolveName(namedValueInfo.name, parameter, webRequest);</div><div class="line">        <span class="keyword">if</span> (arg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (namedValueInfo.defaultValue != <span class="keyword">null</span>) &#123;</div><div class="line">                arg = resolveDefaultValue(namedValueInfo.defaultValue);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (namedValueInfo.required) &#123;</div><div class="line">                handleMissingValue(namedValueInfo.name, parameter);</div><div class="line">            &#125;</div><div class="line">            arg = handleNullValue(namedValueInfo.name, arg, paramType);</div><div class="line">        &#125;<span class="comment">//DataBinder，后续讲解。</span></div><div class="line">        <span class="keyword">if</span> (binderFactory != <span class="keyword">null</span>) &#123;</div><div class="line">            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class="keyword">null</span>, </div><div class="line">                                                                    namedValueInfo.name);</div><div class="line">            arg = binder.convertIfNecessary(arg, paramType, parameter);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将上面解析到的名称和值放到Request的属性表中。</span></div><div class="line">        handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);</div><div class="line">        <span class="keyword">return</span> arg;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>   上面代码首先获取参数的@PathVariable的value属性值，如果value是空，则将参数的名称作为NameValueInfo的name值，然后用这个name值匹配请求路径中的变量值，作为NameValueInfo的value值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">resolveName</span><span class="params">(String name, MethodParameter parameter, NativeWebRequest request)</span></span>&#123;</div><div class="line">        Map&amp;lt;String, String&amp;gt; uriTemplateVars =<span class="comment">//从请求的属性表中获取值</span></div><div class="line">            (Map&amp;lt;String, String&amp;gt;) request.getAttribute(</div><div class="line">             HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</div><div class="line">        <span class="keyword">return</span> (uriTemplateVars != <span class="keyword">null</span>) ? uriTemplateVars.get(name) : <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   上面再lookupHandlerMethod方法中，调用了handleMatch方法，我们说了它会将解析到的路径变量放到request的变量表中，这不，这里就用到了，这样我们就获取到了@PathVariable对应参数的值了。到此为止，@PathVariable参数的解析就算完成了，其他类型的参数解析思路一样不同的就是resolveArgument方法中的逻辑了，大家可以自行了解。</p>
<pre><code>注：这里Spring用到了多种设计模式，包括组合模式，策略模式，适配器模式等。其实这些实现都是3.1v的，之前的版本，参数解析这块相当乱，几乎完全在一个方法内实现的，拓展性，维护性相当差，3.1后我们可以很轻松的实现自己的参数解析器等，真的很棒。
</code></pre><p>三、返回值的处理</p>
<pre><code>上一节我们分析了参数的解析，及方法的调用，下面我们再来看返回值的处理，回到HandlerMethod的invokeAndHandle方法来，该方法的最后调用了returnValueHandlers.handleReturenValue方法，其中returnValueHandlers是HandlerMethodReturnValueHandlerComposite实例，就像HandlermethodArgumentResolverComposite一样，它包含了所有HandlerMethodReturnValueHandler的列表，并在Spring启动时完成注册。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(</span></span></div><div class="line">            Object returnValue, MethodParameter returnType,</div><div class="line">            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        HandlerMethodReturnValueHandler handler = getReturnValueHandler(returnType);</div><div class="line">        handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title">getReturnValueHandler</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (HandlerMethodReturnValueHandler returnValueHandler : returnValueHandlers) &#123;</div><div class="line">            <span class="keyword">if</span> (returnValueHandler.supportsReturnType(returnType)) &#123;</div><div class="line">                <span class="keyword">return</span> returnValueHandler;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//这个是处理String类型的返回值，即将返回值解析为视图名</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(</span></span></div><div class="line">            Object returnValue, MethodParameter returnType,</div><div class="line">            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> String) &#123;</div><div class="line">            String viewName = (String) returnValue;</div><div class="line">            <span class="comment">//将返回值存储为视图名</span></div><div class="line">            mavContainer.setViewName(viewName);</div><div class="line">            <span class="keyword">if</span> (isRedirectViewName(viewName)) &#123;</div><div class="line">                mavContainer.setRedirectModelScenario(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(&amp;quot;Unexpected <span class="keyword">return</span> type: &amp;quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>   返回值的处理思路与参数的处理几乎一样了，根据不同的返回值类型，查找匹配的处理器，然后进行处理(主要就是设置Model和View了，如上面的代码将返回值解析为视图名)，这里就不多说了。返回值处理完了，剩下的就是将返回值响应给客户端了，再往下就是视图的解析了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 @RequestMapping（1）]]></title>
      <url>http://yoursite.com/2015/06/02/Spring%20MVC%20%E4%B9%8B%20RequestMapping%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>一、从@AutoWaired开始</p>
<pre><code>在@AutoWaired中有下面的一段代码，其中populateBean负责属性的加载。而initializeBean完成属性属性加载后的自定义操作。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object exposedObject = bean;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            populateBean(beanName, mbd, instanceWrapper);</div><div class="line">            <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</div><div class="line">                exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>来看一下initializeBean的实现。<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</div><div class="line">		AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                <span class="comment">//这里检测当前Bean是否实现一些列Aware接口，并调用相关方法。</span></div><div class="line">				invokeAwareMethods(beanName, bean);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;, getAccessControlContext());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		invokeAwareMethods(beanName, bean);</div><div class="line">	&#125;</div><div class="line">		Object wrappedBean = bean;</div><div class="line">	<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</div><div class="line">		wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//调用初始化方法的方法</span></div><div class="line">		invokeInitMethods(beanName, wrappedBean, mbd);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">				(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</div><div class="line">				beanName, &amp;quot;Invocation of init method failed&amp;quot;, ex);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</div><div class="line">		wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> wrappedBean;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着看下invokeInitMethods方法的实现。在<mvc:annotation-driven>的解析中，我们了解到Spring会默认为我们注册RequestMappingHandlerMapping等Bean定义。而RequestMappingHandlerMapping 实现了InitializingBean接口，因此，在初始化并装配该Bean实例时，执行到上述代码是，便会执行他的afterPropertySet方法。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd)</div><div class="line">		throws Throwable &#123;</div><div class="line">        //判断是否是InitializingBean的实例</div><div class="line">	boolean isInitializingBean = (bean instanceof InitializingBean);</div><div class="line">	if (isInitializingBean &amp;amp;&amp;amp; (mbd == null || !mbd.isExternallyManagedInitMethod(&amp;quot;afterPropertiesSet&amp;quot;))) &#123;</div><div class="line">		if (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(&amp;quot;Invoking afterPropertiesSet() on bean with name '&amp;quot; + beanName + &amp;quot;'&amp;quot;);</div><div class="line">		&#125;</div><div class="line">		if (System.getSecurityManager() != null) &#123;</div><div class="line">			try &#123;</div><div class="line">				AccessController.doPrivileged(new PrivilegedExceptionAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">					@Override</div><div class="line">					public Object run() throws Exception &#123;</div><div class="line">						((InitializingBean) bean).afterPropertiesSet();</div><div class="line">						return null;</div><div class="line">					&#125;</div><div class="line">				&#125;, getAccessControlContext());</div><div class="line">			&#125;</div><div class="line">			catch (PrivilegedActionException pae) &#123;</div><div class="line">				throw pae.getException();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			((InitializingBean) bean).afterPropertiesSet();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if (mbd != null) &#123;</div><div class="line">		String initMethodName = mbd.getInitMethodName();</div><div class="line">		if (initMethodName != null &amp;amp;&amp;amp; !(isInitializingBean &amp;amp;&amp;amp; &amp;quot;afterPropertiesSet&amp;quot;.equals(initMethodName)) &amp;amp;&amp;amp;</div><div class="line">				!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</div><div class="line">			invokeCustomInitMethod(beanName, bean, mbd);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></mvc:annotation-driven></p>
<p>接着看一下RequestMappingHandlerMapping的afterPropertySet方法。会进入AbstractHandlerMethodMapping中的initHandlerMethods方法，如下。该方法扫描ApplicationContext中的beans，检测并注册处理器方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initHandlerMethods</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">		logger.debug(&amp;quot;Looking <span class="keyword">for</span> request mappings in application context: &amp;quot; + getApplicationContext());</div><div class="line">	&#125;</div><div class="line">        <span class="comment">//扫描所有注册的Bean</span></div><div class="line">	String[] beanNames = (<span class="keyword">this</span>.detectHandlerMethodsInAncestorContexts ?</div><div class="line">			BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :</div><div class="line">			getApplicationContext().getBeanNamesForType(Object.class));</div><div class="line">        <span class="comment">//遍历这些Bean，依次判断是否是处理器，并检测其HandlerMethod</span></div><div class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</div><div class="line">		<span class="keyword">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX) &amp;amp;&amp;amp;</div><div class="line">				isHandler(getApplicationContext().getType(beanName)))&#123;</div><div class="line">			detectHandlerMethods(beanName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handlerMethodsInitialized(getHandlerMethods());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>二、detectHandlerMethods</p>
<p>展开上一节中的detectHandlerMethods。一共分为以下步骤。<br>1）遍历Handler中的所有方法，找出其中被@RequestMapping注解标记的方法。<br>2）然后遍历这些方法，生成RequestMappingInfo实例。<br>3）将RequestMappingInfo实例以及处理器方法注册到缓存中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlerMethods</span><span class="params">(<span class="keyword">final</span> Object handler)</span> </span>&#123;</div><div class="line">	Class&amp;lt;?&amp;gt; handlerType =</div><div class="line">			(handler <span class="keyword">instanceof</span> String ? getApplicationContext().getType((String) handler) : handler.getClass());</div><div class="line"></div><div class="line">	<span class="comment">// Avoid repeated calls to getMappingForMethod which would rebuild RequestMappingInfo instances</span></div><div class="line">	<span class="keyword">final</span> Map&amp;lt;Method, T&amp;gt; mappings = <span class="keyword">new</span> IdentityHashMap&amp;lt;Method, T&amp;gt;();</div><div class="line">	<span class="keyword">final</span> Class&amp;lt;?&amp;gt; userType = ClassUtils.getUserClass(handlerType);</div><div class="line"></div><div class="line">	Set&amp;lt;Method&amp;gt; methods = HandlerMethodSelector.selectMethods(userType, <span class="keyword">new</span> MethodFilter() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">                        <span class="comment">//根据方法上的@RequestMapping来创建RequestMappingInfo实例。</span></div><div class="line">			T mapping = getMappingForMethod(method, userType);</div><div class="line">			<span class="keyword">if</span> (mapping != <span class="keyword">null</span>) &#123;</div><div class="line">				mappings.put(method, mapping);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">        <span class="comment">//注册请求映射</span></div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">		registerHandlerMethod(handler, method, mappings.get(method));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开getMappingForMethod。这一步根据注解生成RequestMappingInfo。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&amp;lt;?&amp;gt; handlerType)</span> </span>&#123;</div><div class="line">	RequestMappingInfo info = <span class="keyword">null</span>;</div><div class="line">	RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class);</div><div class="line">	<span class="keyword">if</span> (methodAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">		RequestCondition&amp;lt;?&amp;gt; methodCondition = getCustomMethodCondition(method);</div><div class="line">		info = createRequestMappingInfo(methodAnnotation, methodCondition);</div><div class="line">		RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);</div><div class="line">		<span class="keyword">if</span> (typeAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">			RequestCondition&amp;lt;?&amp;gt; typeCondition = getCustomTypeCondition(handlerType);</div><div class="line">			info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> info;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开createRequestMappingInfo。<br>其中涉及到了几个类，我们大致了解下含义：<br>PatternRequestCondition 它其实就是URL模式的封装，它包含了一个URL模式的Set集合。其实就是@RequestMapping注解中的value值得封装;<br>RequestMethodRequestCondition 它是@RequestMapping 注解中method属性的封装;<br>ParamsRequestCondition 它是@RequestMapping注解中params属性的封装;<br>等等，依次类推。因此RequestMappingInfo其实就是对@RquestMapping 的封装。<br>生成了RequestMappingInfo 对每一个元素都进行combine操作，不再详细讲解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(RequestMapping annotation, RequestCondition&amp;lt;?&amp;gt; customCondition)</span> </span>&#123;</div><div class="line">	String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value());</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RequestMappingInfo(</div><div class="line">			annotation.name(),</div><div class="line">			<span class="keyword">new</span> PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),</div><div class="line">					<span class="keyword">this</span>.useSuffixPatternMatch, <span class="keyword">this</span>.useTrailingSlashMatch, <span class="keyword">this</span>.fileExtensions),</div><div class="line">			<span class="keyword">new</span> RequestMethodsRequestCondition(annotation.method()),</div><div class="line">			<span class="keyword">new</span> ParamsRequestCondition(annotation.params()),</div><div class="line">			<span class="keyword">new</span> HeadersRequestCondition(annotation.headers()),</div><div class="line">			<span class="keyword">new</span> ConsumesRequestCondition(annotation.consumes(), annotation.headers()),</div><div class="line">			<span class="keyword">new</span> ProducesRequestCondition(annotation.produces(), annotation.headers(), <span class="keyword">this</span>.contentNegotiationManager),</div><div class="line">			customCondition);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再回到本节第一个方法中的registerHandlerMethod方法。这个方法就是生成新的HandlerMethod实例，然后加入handlerMethods中，接着生成mapping中所有的url放入urlMap中。当请求到达时，去urlMap中需找匹配的url，以及获取对应mapping实例，然后去handlerMethods中获取匹配HandlerMethod实例。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">protected void registerHandlerMethod(Object handler, Method method, T mapping) &#123;</div><div class="line">        //根据新的处理器实例，方法实例，RequestMappingInfo来生成新的HandlerMethod实例</div><div class="line">        //从缓存中查看是否有存在的HandlerMethod实例，如果有并且不相等则抛出异常</div><div class="line">	HandlerMethod newHandlerMethod = createHandlerMethod(handler, method);</div><div class="line">	HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping);</div><div class="line">	if (oldHandlerMethod != null &amp;amp;&amp;amp; !oldHandlerMethod.equals(newHandlerMethod)) &#123;</div><div class="line">		throw new IllegalStateException(&amp;quot;Ambiguous mapping found. Cannot map '&amp;quot; + newHandlerMethod.getBean() +</div><div class="line">				&amp;quot;' bean method \n&amp;quot; + newHandlerMethod + &amp;quot;\nto &amp;quot; + mapping + &amp;quot;: There is already '&amp;quot; +</div><div class="line">				oldHandlerMethod.getBean() + &amp;quot;' bean method\n&amp;quot; + oldHandlerMethod + &amp;quot; mapped.&amp;quot;);</div><div class="line">	&#125;</div><div class="line">        //handlerMethods 是一个Map键是RequestMappingInfo对象，值是HandlerMethod实例</div><div class="line">        //因此一个HandlerMethod实例可能处理多个mapping，而一个mapping实例只能由一个method处理</div><div class="line">	this.handlerMethods.put(mapping, newHandlerMethod);</div><div class="line">	if (logger.isInfoEnabled()) &#123;</div><div class="line">		logger.info(&amp;quot;Mapped \&amp;quot;&amp;quot; + mapping + &amp;quot;\&amp;quot; onto &amp;quot; + newHandlerMethod);</div><div class="line">	&#125;</div><div class="line">        //这里获取mapping实例中的所有url。</div><div class="line">	Set&amp;lt;String&amp;gt; patterns = getMappingPathPatterns(mapping);</div><div class="line">        //urlMap也是Map，键是url 模式，值是RequestMappingInfo实例</div><div class="line">        //因此一个mapping实例可能对应多个pattern，但是一个pattern只能对应一个mapping实例</div><div class="line">	for (String pattern : patterns) &#123;</div><div class="line">		if (!getPathMatcher().isPattern(pattern)) &#123;</div><div class="line">			this.urlMap.add(pattern, mapping);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if (this.namingStrategy != null) &#123;</div><div class="line">		String name = this.namingStrategy.getName(newHandlerMethod, mapping);</div><div class="line">		updateNameMap(name, newHandlerMethod);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着会分析Spring怎样处理客户发来的请求。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 &lt;context:annotation-driven/>]]></title>
      <url>http://yoursite.com/2015/05/28/Spring%20MVC%20%E4%B9%8B%20contextannotation-driven/</url>
      <content type="html"><![CDATA[<p>一、解析类</p>
<p>通常如果我们希望通过注解的方式来进行Spring MVC开发，我们都会在<em>*</em>-servlet.xml中加入<mvc:annotation-driven>标签来告诉Spring我们的目的。找到对应的实现类是org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser。<br>通过阅读类注释文档，我们发现这个类主要是用来向工厂中注册了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RequestMappingHandlerMapping </div><div class="line">BeanNameUrlHandlerMapping</div><div class="line">RequestMappingHandlerAdapter</div><div class="line">HttpRequestHandlerAdapter</div><div class="line">SimpleControllerHandlerAdapter</div><div class="line">ExceptionHandlerExceptionResolver </div><div class="line">ResponseStatusExceptionResolver </div><div class="line">DefaultHandlerExceptionResolver</div></pre></td></tr></table></figure></mvc:annotation-driven></p>
<p>前两个是HandlerMapping接口的实现类，用来处理请求映射的。其中第一个是处理@RequestMapping注解的。第二个会将controller类的名字映射为请求url。</p>
<p>中间三个是用来处理请求的。具体点说就是确定调用哪个controller的哪个方法来处理当前请求。第一个处理@Controller注解的处理器，支持自定义方法参数和返回值（很酷）。第二个是处理继承HttpRequestHandler的处理器。第三个处理继承自Controller接口的处理器。</p>
<p>后面三个是用来处理异常的解析器。<a id="more"></a></p>
<p>二、实现流程</p>
<p>首先进入的是xml解析方法。由于annotation-driven不是默认的命名空间，会进入else，使用delegate解析元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Parse the elements at the root level in the document:</div><div class="line"> * &amp;quot;import&amp;quot;, &amp;quot;alias&amp;quot;, &amp;quot;bean&amp;quot;.</div><div class="line"> * <span class="doctag">@param</span> root the DOM root element of the document</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</div><div class="line">		NodeList nl = root.getChildNodes();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; nl.getLength(); i++) &#123;</div><div class="line">			Node node = nl.item(i);</div><div class="line">			<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</div><div class="line">				Element ele = (Element) node;</div><div class="line">				<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</div><div class="line">					parseDefaultElement(ele, delegate);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					delegate.parseCustomElement(ele);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		delegate.parseCustomElement(root);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后会进入下面的方法。这里的Handler获取的是MvcNamespaceHandler。接着可以看到MvcNamespaceHandler中注册的annotation-driven的Parse是AnnotationDrivenBeanDefinitionParser。最后是Parse方法，该方法比较繁琐但是很好理解，注册了上面说的那几个类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</div><div class="line">	String namespaceUri = getNamespaceURI(ele);</div><div class="line">	NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</div><div class="line">	<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</div><div class="line">		error(&amp;quot;Unable to locate Spring NamespaceHandler <span class="keyword">for</span> XML schema namespace [&amp;quot; + namespaceUri + &amp;quot;]&amp;quot;, ele);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	registerBeanDefinitionParser(&amp;quot;annotation-driven&amp;quot;, <span class="keyword">new</span> AnnotationDrivenBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;<span class="keyword">default</span>-servlet-handler&amp;quot;, <span class="keyword">new</span> DefaultServletHandlerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;interceptors&amp;quot;, <span class="keyword">new</span> InterceptorsBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;resources&amp;quot;, <span class="keyword">new</span> ResourcesBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;view-controller&amp;quot;, <span class="keyword">new</span> ViewControllerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;redirect-view-controller&amp;quot;, <span class="keyword">new</span> ViewControllerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;status-controller&amp;quot;, <span class="keyword">new</span> ViewControllerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;view-resolvers&amp;quot;, <span class="keyword">new</span> ViewResolversBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;tiles-configurer&amp;quot;, <span class="keyword">new</span> TilesConfigurerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;freemarker-configurer&amp;quot;, <span class="keyword">new</span> FreeMarkerConfigurerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;velocity-configurer&amp;quot;, <span class="keyword">new</span> VelocityConfigurerBeanDefinitionParser());</div><div class="line">	registerBeanDefinitionParser(&amp;quot;groovy-configurer&amp;quot;, <span class="keyword">new</span> GroovyMarkupConfigurerBeanDefinitionParser());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</div><div class="line">	Object source = parserContext.extractSource(element);</div><div class="line">	CompositeComponentDefinition compDefinition = <span class="keyword">new</span> CompositeComponentDefinition(element.getTagName(), source);</div><div class="line">	parserContext.pushContainingComponent(compDefinition);</div><div class="line">	RuntimeBeanReference contentNegotiationManager = getContentNegotiationManager(element, source, parserContext);</div><div class="line">        <span class="comment">//第一个在这 RequestMappingHandlerMapping</span></div><div class="line">	RootBeanDefinition handlerMappingDef = <span class="keyword">new</span> RootBeanDefinition(RequestMappingHandlerMapping.class);</div><div class="line">	handlerMappingDef.setSource(source);</div><div class="line">	handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	handlerMappingDef.getPropertyValues().add(&amp;quot;order&amp;quot;, <span class="number">0</span>);</div><div class="line">	handlerMappingDef.getPropertyValues().add(&amp;quot;contentNegotiationManager&amp;quot;, contentNegotiationManager);</div><div class="line">	String methodMappingName = parserContext.getReaderContext().registerWithGeneratedName(handlerMappingDef);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (element.hasAttribute(&amp;quot;enable-matrix-variables&amp;quot;)) &#123;</div><div class="line">		Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute(&amp;quot;enable-matrix-variables&amp;quot;));</div><div class="line">		handlerMappingDef.getPropertyValues().add(&amp;quot;removeSemicolonContent&amp;quot;, !enableMatrixVariables);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (element.hasAttribute(&amp;quot;enableMatrixVariables&amp;quot;)) &#123;</div><div class="line">		Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute(&amp;quot;enableMatrixVariables&amp;quot;));</div><div class="line">		handlerMappingDef.getPropertyValues().add(&amp;quot;removeSemicolonContent&amp;quot;, !enableMatrixVariables);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	configurePathMatchingProperties(handlerMappingDef, element, parserContext);</div><div class="line"></div><div class="line">	RuntimeBeanReference conversionService = getConversionService(element, source, parserContext);</div><div class="line">	RuntimeBeanReference validator = getValidator(element, source, parserContext);</div><div class="line">	RuntimeBeanReference messageCodesResolver = getMessageCodesResolver(element);</div><div class="line"></div><div class="line">	RootBeanDefinition bindingDef = <span class="keyword">new</span> RootBeanDefinition(ConfigurableWebBindingInitializer.class);</div><div class="line">	bindingDef.setSource(source);</div><div class="line">	bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	bindingDef.getPropertyValues().add(&amp;quot;conversionService&amp;quot;, conversionService);</div><div class="line">	bindingDef.getPropertyValues().add(&amp;quot;validator&amp;quot;, validator);</div><div class="line">	bindingDef.getPropertyValues().add(&amp;quot;messageCodesResolver&amp;quot;, messageCodesResolver);</div><div class="line"></div><div class="line">	ManagedList&amp;lt;?&amp;gt; messageConverters = getMessageConverters(element, source, parserContext);</div><div class="line">	ManagedList&amp;lt;?&amp;gt; argumentResolvers = getArgumentResolvers(element, parserContext);</div><div class="line">	ManagedList&amp;lt;?&amp;gt; returnValueHandlers = getReturnValueHandlers(element, parserContext);</div><div class="line">	String asyncTimeout = getAsyncTimeout(element);</div><div class="line">	RuntimeBeanReference asyncExecutor = getAsyncExecutor(element);</div><div class="line">	ManagedList&amp;lt;?&amp;gt; callableInterceptors = getCallableInterceptors(element, source, parserContext);</div><div class="line">	ManagedList&amp;lt;?&amp;gt; deferredResultInterceptors = getDeferredResultInterceptors(element, source, parserContext);</div><div class="line">        <span class="comment">//第二个在这 RequestMappingHandlerAdapter</span></div><div class="line">	RootBeanDefinition handlerAdapterDef = <span class="keyword">new</span> RootBeanDefinition(RequestMappingHandlerAdapter.class);</div><div class="line">	handlerAdapterDef.setSource(source);</div><div class="line">	handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	handlerAdapterDef.getPropertyValues().add(&amp;quot;contentNegotiationManager&amp;quot;, contentNegotiationManager);</div><div class="line">	handlerAdapterDef.getPropertyValues().add(&amp;quot;webBindingInitializer&amp;quot;, bindingDef);</div><div class="line">	handlerAdapterDef.getPropertyValues().add(&amp;quot;messageConverters&amp;quot;, messageConverters);</div><div class="line">	addResponseBodyAdvice(handlerAdapterDef);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (element.hasAttribute(&amp;quot;ignore-<span class="keyword">default</span>-model-on-redirect&amp;quot;)) &#123;</div><div class="line">		Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute(&amp;quot;ignore-<span class="keyword">default</span>-model-on-redirect&amp;quot;));</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;ignoreDefaultModelOnRedirect&amp;quot;, ignoreDefaultModel);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (element.hasAttribute(&amp;quot;ignoreDefaultModelOnRedirect&amp;quot;)) &#123;</div><div class="line">		<span class="comment">// &amp;quot;ignoreDefaultModelOnRedirect&amp;quot; spelling is deprecated</span></div><div class="line">		Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute(&amp;quot;ignoreDefaultModelOnRedirect&amp;quot;));</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;ignoreDefaultModelOnRedirect&amp;quot;, ignoreDefaultModel);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (argumentResolvers != <span class="keyword">null</span>) &#123;</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;customArgumentResolvers&amp;quot;, argumentResolvers);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (returnValueHandlers != <span class="keyword">null</span>) &#123;</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;customReturnValueHandlers&amp;quot;, returnValueHandlers);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (asyncTimeout != <span class="keyword">null</span>) &#123;</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;asyncRequestTimeout&amp;quot;, asyncTimeout);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (asyncExecutor != <span class="keyword">null</span>) &#123;</div><div class="line">		handlerAdapterDef.getPropertyValues().add(&amp;quot;taskExecutor&amp;quot;, asyncExecutor);</div><div class="line">	&#125;</div><div class="line">	handlerAdapterDef.getPropertyValues().add(&amp;quot;callableInterceptors&amp;quot;, callableInterceptors);</div><div class="line">	handlerAdapterDef.getPropertyValues().add(&amp;quot;deferredResultInterceptors&amp;quot;, deferredResultInterceptors);</div><div class="line">	String handlerAdapterName = parserContext.getReaderContext().registerWithGeneratedName(handlerAdapterDef);</div><div class="line"></div><div class="line">	String uriCompContribName = MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME;</div><div class="line">	RootBeanDefinition uriCompContribDef = <span class="keyword">new</span> RootBeanDefinition(CompositeUriComponentsContributorFactoryBean.class);</div><div class="line">	uriCompContribDef.setSource(source);</div><div class="line">	uriCompContribDef.getPropertyValues().addPropertyValue(&amp;quot;handlerAdapter&amp;quot;, handlerAdapterDef);</div><div class="line">	uriCompContribDef.getPropertyValues().addPropertyValue(&amp;quot;conversionService&amp;quot;, conversionService);</div><div class="line">	parserContext.getReaderContext().getRegistry().registerBeanDefinition(uriCompContribName, uriCompContribDef);</div><div class="line"></div><div class="line">	RootBeanDefinition csInterceptorDef = <span class="keyword">new</span> RootBeanDefinition(ConversionServiceExposingInterceptor.class);</div><div class="line">	csInterceptorDef.setSource(source);</div><div class="line">	csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>, conversionService);</div><div class="line">	RootBeanDefinition mappedCsInterceptorDef = <span class="keyword">new</span> RootBeanDefinition(MappedInterceptor.class);</div><div class="line">	mappedCsInterceptorDef.setSource(source);</div><div class="line">	mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>, (Object) <span class="keyword">null</span>);</div><div class="line">	mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">1</span>, csInterceptorDef);</div><div class="line">	String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);</div><div class="line"></div><div class="line">	RootBeanDefinition exceptionHandlerExceptionResolver = <span class="keyword">new</span> RootBeanDefinition(ExceptionHandlerExceptionResolver.class);</div><div class="line">	exceptionHandlerExceptionResolver.setSource(source);</div><div class="line">	exceptionHandlerExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	exceptionHandlerExceptionResolver.getPropertyValues().add(&amp;quot;contentNegotiationManager&amp;quot;, contentNegotiationManager);</div><div class="line">	exceptionHandlerExceptionResolver.getPropertyValues().add(&amp;quot;messageConverters&amp;quot;, messageConverters);</div><div class="line">	exceptionHandlerExceptionResolver.getPropertyValues().add(&amp;quot;order&amp;quot;, <span class="number">0</span>);</div><div class="line">	addResponseBodyAdvice(exceptionHandlerExceptionResolver);</div><div class="line"></div><div class="line">	String methodExceptionResolverName =</div><div class="line">			parserContext.getReaderContext().registerWithGeneratedName(exceptionHandlerExceptionResolver);</div><div class="line"></div><div class="line">	RootBeanDefinition responseStatusExceptionResolver = <span class="keyword">new</span> RootBeanDefinition(ResponseStatusExceptionResolver.class);</div><div class="line">	responseStatusExceptionResolver.setSource(source);</div><div class="line">	responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	responseStatusExceptionResolver.getPropertyValues().add(&amp;quot;order&amp;quot;, <span class="number">1</span>);</div><div class="line">	String responseStatusExceptionResolverName =</div><div class="line">			parserContext.getReaderContext().registerWithGeneratedName(responseStatusExceptionResolver);</div><div class="line"></div><div class="line">	RootBeanDefinition defaultExceptionResolver = <span class="keyword">new</span> RootBeanDefinition(DefaultHandlerExceptionResolver.class);</div><div class="line">	defaultExceptionResolver.setSource(source);</div><div class="line">	defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	defaultExceptionResolver.getPropertyValues().add(&amp;quot;order&amp;quot;, <span class="number">2</span>);</div><div class="line">	String defaultExceptionResolverName =</div><div class="line">			parserContext.getReaderContext().registerWithGeneratedName(defaultExceptionResolver);</div><div class="line"></div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(handlerMappingDef, methodMappingName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(handlerAdapterDef, handlerAdapterName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(uriCompContribDef, uriCompContribName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(exceptionHandlerExceptionResolver, methodExceptionResolverName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));</div><div class="line">	parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));</div><div class="line"></div><div class="line">	<span class="comment">// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not &amp;quot;turned off&amp;quot;</span></div><div class="line">	MvcNamespaceUtils.registerDefaultComponents(parserContext, source);</div><div class="line">	parserContext.popAndRegisterContainingComponent();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三、总结<br>主要说明里面的两个，RequestMappingHandlerMapping和RequestMappingHandlerAdapter。</p>
<pre><code>第一个是HandlerMapping的实现类，它会处理@RequestMapping 注解，并将其注册到请求映射表中。（下片文章我们会详细介绍的）

第二个是HandlerAdapter的实现类，它是处理请求的适配器，说白了，就是确定调用哪个类的哪个方法，并且构造方法参数，返回值。（后面文章也会陆续详细介绍的）

那么它跟&lt;context:component-scan/&gt;的区别是，&lt;context:component-scan/&gt;标签是告诉Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。

而&lt;mvc:annotation-scan/&gt;是告知Spring，我们启用注解驱动。然后Spring会自动为我们注册上面说到的几个Bean到工厂中，来处理我们的请求。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 @Autowired]]></title>
      <url>http://yoursite.com/2015/05/21/Spring%20MVC%20%E4%B9%8B%20@Autowired/</url>
      <content type="html"><![CDATA[<p>一、准备工作</p>
<p>POJO类Parent<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.mvc;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Controller类HomeController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	Parent parent;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HomeController.class);</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Simply selects the home view to render by returning its name.</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value = &amp;quot;/&amp;quot;, method = RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(Locale locale, Model model)</span> </span>&#123;</div><div class="line">		logger.info(&amp;quot;Welcome home! The client locale is &#123;&#125;. &amp;quot;, locale);</div><div class="line">		logger.info(parent.toString());		</div><div class="line">		Date date = <span class="keyword">new</span> Date();</div><div class="line">		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);		</div><div class="line">		String formattedDate = dateFormat.format(date);		</div><div class="line">		model.addAttribute(&amp;quot;serverTime&amp;quot;, formattedDate );</div><div class="line"></div><div class="line">		<span class="keyword">return</span> &amp;quot;home&amp;quot;; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>root-context.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;lt;bean id=&amp;quot;parent&amp;quot; class=&amp;quot;com.test.mvc.Parent&amp;quot; &amp;gt;&amp;lt;/bean&amp;gt;</div></pre></td></tr></table></figure></p>
<p>web.xml略。</p>
<p>二、回忆</p>
<p>在<a href="http://www.bugpointer.com/archives/521.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（六）</a>这篇文章中介绍了bean参数的赋值，AutoWired也是在这个地方实现自动加载的。首先展开文章中的doCreateBean。这里省略了很多代码。首先看pplyMergedBeanDefinitionPostProcessors这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> Object[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// Instantiate the bean.</span></div><div class="line">	BeanWrapper instanceWrapper = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (mbd.isSingleton()) &#123;</div><div class="line">		instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//.......</span></div><div class="line">        <span class="comment">//.......</span></div><div class="line">	<span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</div><div class="line">		<span class="keyword">if</span> (!mbd.postProcessed) &#123;</div><div class="line">			applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</div><div class="line"> 			mbd.postProcessed = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//......</span></div><div class="line">        <span class="comment">//......</span></div><div class="line">	<span class="comment">// Initialize the bean instance.</span></div><div class="line">	Object exposedObject = bean;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		populateBean(beanName, mbd, instanceWrapper);</div><div class="line">		<span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</div><div class="line">			exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;amp;&amp;amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</div><div class="line">			<span class="keyword">throw</span> (BeanCreationException) ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, &amp;quot;Initialization of bean failed&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//......</span></div><div class="line">        <span class="comment">//......</span></div><div class="line">	<span class="comment">// Register bean as disposable.</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		registerDisposableBeanIfNecessary(beanName, bean, mbd);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, &amp;quot;Invalid destruction signature&amp;quot;, ex);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> exposedObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>断点运行到后去homeController的，后处理为AutowiredAnnotationBeanPostProcessor，如下图。<br><img src="/images/断点在homeController-300x41.png" alt="断点在homeController"><br>展开AutowiredAnnotationBeanPostProcessor中的findAutowiringMetadata方法。这一步中的重点是在buildAutowiringMetadata，构建元数据。buildAutowiringMetadata首先去缓存里面找元数据，找不到就遍历bean的和父类的字段域和方法，如果别标记为@Autowired并且不是静态的就添加到InjectionMetadata中，并添加到缓存中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private InjectionMetadata findAutowiringMetadata(String beanName, Class&amp;lt;?&amp;gt; clazz, PropertyValues pvs) &#123;</div><div class="line">	// 回到使用类名作为缓存键,保持自定义命令向后兼容性</div><div class="line">	String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</div><div class="line">	InjectionMetadata metadata = this.injectionMetadataCache.get(cacheKey);</div><div class="line">	if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</div><div class="line">		synchronized (this.injectionMetadataCache) &#123;</div><div class="line">			metadata = this.injectionMetadataCache.get(cacheKey);</div><div class="line">			if (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</div><div class="line">				if (metadata != null) &#123;</div><div class="line">					metadata.clear(pvs);</div><div class="line">				&#125;</div><div class="line">				try &#123;</div><div class="line">                                        //构建元数据</div><div class="line">					metadata = buildAutowiringMetadata(clazz);</div><div class="line">					this.injectionMetadataCache.put(cacheKey, metadata);</div><div class="line">				&#125;</div><div class="line">				catch (NoClassDefFoundError err) &#123;</div><div class="line">					throw new IllegalStateException(&amp;quot;Failed to introspect bean class [&amp;quot; + clazz.getName() +</div><div class="line">							&amp;quot;] for autowiring metadata: could not find class that it depends on&amp;quot;, err);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return metadata;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">buildAutowiringMetadata</span><span class="params">(Class&amp;lt;?&amp;gt; clazz)</span> </span>&#123;</div><div class="line">	LinkedList&amp;lt;InjectionMetadata.InjectedElement&amp;gt; elements = <span class="keyword">new</span> LinkedList&amp;lt;InjectionMetadata.InjectedElement&amp;gt;();</div><div class="line">	Class&amp;lt;?&amp;gt; targetClass = clazz;</div><div class="line">	do &#123;<span class="comment">//这里一个循环，因为要考虑父类的字段和方法</span></div><div class="line">		LinkedList&amp;lt;InjectionMetadata.InjectedElement&amp;gt; currElements = <span class="keyword">new</span> LinkedList&amp;lt;InjectionMetadata.InjectedElement&amp;gt;();</div><div class="line">                <span class="comment">//这里循环字段，找到被标记为@Autowired的字段</span></div><div class="line">		<span class="keyword">for</span> (Field field : targetClass.getDeclaredFields()) &#123;</div><div class="line">			AnnotationAttributes ann = findAutowiredAnnotation(field);</div><div class="line">			<span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</div><div class="line">					<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">						logger.warn(&amp;quot;Autowired annotation is not supported on <span class="keyword">static</span> fields: &amp;quot; + field);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">                                <span class="comment">//创建AutowiredFieldElement。</span></div><div class="line">				currElements.add(<span class="keyword">new</span> AutowiredFieldElement(field, required));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">                 <span class="comment">//这里循环方法</span></div><div class="line">		<span class="keyword">for</span> (Method method : targetClass.getDeclaredMethods()) &#123;</div><div class="line">			Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</div><div class="line">			<span class="keyword">if</span> (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</div><div class="line">			<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;amp;&amp;amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</div><div class="line">				<span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</div><div class="line">					<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">						logger.warn(&amp;quot;Autowired annotation is not supported on <span class="keyword">static</span> methods: &amp;quot; + method);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (method.getParameterTypes().length == <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">						logger.warn(&amp;quot;Autowired annotation should be used on methods with actual parameters: &amp;quot; + method);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">				PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</div><div class="line">                                <span class="comment">//创建AutowiredMethodElement。</span></div><div class="line">				currElements.add(<span class="keyword">new</span> AutowiredMethodElement(method, required, pd));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		elements.addAll(<span class="number">0</span>, currElements);</div><div class="line">		targetClass = targetClass.getSuperclass();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;amp;&amp;amp; targetClass != Object.class);</div><div class="line"></div><div class="line">        <span class="comment">//将InjectionElement集合添加到新建的InjectionMetadata中。</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> InjectionMetadata(clazz, elements);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三、自动装载</p>
<p>代码运行到populateBean方法。这个方法太长，这里就不贴出来了，直接走到postProcessPropertyValues方法,获得InjectionMetadata对象后便遍历其中的所有InjectionElement对象，调用其中的inject方法。接着对每一个injectedElement进行inject。最后的inject进行真正的属性赋值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></div><div class="line">		PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">	InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		metadata.inject(bean, beanName, pvs);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, &amp;quot;Injection of autowired dependencies failed&amp;quot;, ex);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> pvs;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, String beanName, PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">	Collection&amp;lt;InjectedElement&amp;gt; elementsToIterate =</div><div class="line">			(<span class="keyword">this</span>.checkedElements != <span class="keyword">null</span> ? <span class="keyword">this</span>.checkedElements : <span class="keyword">this</span>.injectedElements);</div><div class="line">	<span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</div><div class="line">		<span class="keyword">boolean</span> debug = logger.isDebugEnabled();</div><div class="line">		<span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</div><div class="line">			<span class="keyword">if</span> (debug) &#123;</div><div class="line">				logger.debug(&amp;quot;Processing injected element of bean <span class="string">'&amp;quot; + beanName + &amp;quot;'</span>: &amp;quot; + element);</div><div class="line">			&#125;</div><div class="line">			element.inject(target, beanName, pvs);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object bean, String beanName, PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Field field = (Field) <span class="keyword">this</span>.member;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Object value;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.cached) &#123;</div><div class="line">				value = resolvedCachedArgument(beanName, <span class="keyword">this</span>.cachedFieldValue);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				DependencyDescriptor desc = <span class="keyword">new</span> DependencyDescriptor(field, <span class="keyword">this</span>.required);</div><div class="line">				desc.setContainingClass(bean.getClass());</div><div class="line">				Set&amp;lt;String&amp;gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&amp;lt;String&amp;gt;(<span class="number">1</span>);</div><div class="line">				TypeConverter typeConverter = beanFactory.getTypeConverter();</div><div class="line">                                <span class="comment">//获取真正的属性值。</span></div><div class="line">				value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</div><div class="line">				<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (!<span class="keyword">this</span>.cached) &#123;</div><div class="line">						<span class="keyword">if</span> (value != <span class="keyword">null</span> || <span class="keyword">this</span>.required) &#123;</div><div class="line">							<span class="keyword">this</span>.cachedFieldValue = desc;</div><div class="line">							registerDependentBeans(beanName, autowiredBeanNames);</div><div class="line">							<span class="keyword">if</span> (autowiredBeanNames.size() == <span class="number">1</span>) &#123;</div><div class="line">								String autowiredBeanName = autowiredBeanNames.iterator().next();</div><div class="line">								<span class="keyword">if</span> (beanFactory.containsBean(autowiredBeanName)) &#123;</div><div class="line">									<span class="keyword">if</span> (beanFactory.isTypeMatch(autowiredBeanName, field.getType())) &#123;</div><div class="line">										<span class="keyword">this</span>.cachedFieldValue = <span class="keyword">new</span> RuntimeBeanReference(autowiredBeanName);</div><div class="line">									&#125;</div><div class="line">								&#125;</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> &#123;</div><div class="line">							<span class="keyword">this</span>.cachedFieldValue = <span class="keyword">null</span>;</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">this</span>.cached = <span class="keyword">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">				ReflectionUtils.makeAccessible(field);</div><div class="line">                                <span class="comment">//最终赋值</span></div><div class="line">				field.set(bean, value);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(&amp;quot;Could not autowire field: &amp;quot; + field, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下resolveDependency。 这个方法其实就是根据类型到bean工厂中查找类型匹配的bean实例，然后就看到了这几个条件分支语句，如果是数组，集合，映射表，自定义类型都执行了差不多的操作，findAutowireCandidate方法。这个方法会去工厂中执行类型匹配的查找，将匹配的结果集返回，不同的是，集合数组类型会通过TypeConverter进行结果的转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">doResolveDependency</span><span class="params">(DependencyDescriptor descriptor, String beanName,</span></span></div><div class="line">	Set&amp;lt;String&amp;gt; autowiredBeanNames, TypeConverter typeConverter) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">	Class&amp;lt;?&amp;gt; type = descriptor.getDependencyType();</div><div class="line">	Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);</div><div class="line">	<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</div><div class="line">			String strVal = resolveEmbeddedValue((String) value);</div><div class="line">			BeanDefinition bd = (beanName != <span class="keyword">null</span> &amp;amp;&amp;amp; containsBean(beanName) ? getMergedBeanDefinition(beanName) : <span class="keyword">null</span>);</div><div class="line">			value = evaluateBeanDefinitionString(strVal, bd);</div><div class="line">		&#125;</div><div class="line">		TypeConverter converter = (typeConverter != <span class="keyword">null</span> ? typeConverter : getTypeConverter());</div><div class="line">		<span class="keyword">return</span> (descriptor.getField() != <span class="keyword">null</span> ?</div><div class="line">				converter.convertIfNecessary(value, type, descriptor.getField()) :</div><div class="line">				converter.convertIfNecessary(value, type, descriptor.getMethodParameter()));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (type.isArray()) &#123;</div><div class="line">                <span class="comment">//如果属性类型是数组</span></div><div class="line">		<span class="comment">//......</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(type) &amp;amp;&amp;amp; type.isInterface()) &#123;</div><div class="line">                <span class="comment">//如果属性是集合，并且是接口</span></div><div class="line">		<span class="comment">//......</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(type) &amp;amp;&amp;amp; type.isInterface()) &#123;</div><div class="line">                <span class="comment">//如果属性是Map并且是接口</span></div><div class="line">		<span class="comment">//......</span></div><div class="line">		<span class="keyword">return</span> matchingBeans;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;<span class="comment">//自定义类型</span></div><div class="line">		Map&amp;lt;String, Object&amp;gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);</div><div class="line">		<span class="keyword">if</span> (matchingBeans.isEmpty()) &#123;</div><div class="line">			<span class="keyword">if</span> (descriptor.isRequired()) &#123;</div><div class="line">				raiseNoSuchBeanDefinitionException(type, &amp;quot;&amp;quot;, descriptor);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (matchingBeans.size() &amp;gt; <span class="number">1</span>) &#123;</div><div class="line">			String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);</div><div class="line">			<span class="keyword">if</span> (primaryBeanName == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoUniqueBeanDefinitionException(type, matchingBeans.keySet());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (autowiredBeanNames != <span class="keyword">null</span>) &#123;</div><div class="line">				autowiredBeanNames.add(primaryBeanName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> matchingBeans.get(primaryBeanName);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// We have exactly one match.</span></div><div class="line">		Map.Entry&amp;lt;String, Object&amp;gt; entry = matchingBeans.entrySet().iterator().next();</div><div class="line">		<span class="keyword">if</span> (autowiredBeanNames != <span class="keyword">null</span>) &#123;</div><div class="line">			autowiredBeanNames.add(entry.getKey());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> entry.getValue();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此为止，找到了属性的匹配值，然后反射赋值就完成了整个的自动装配过程。可以看出，@Autowired是通过类型来进行自动装配的。</p>
<p>上面是属性的赋值过程也就是InjectionFieldElement的inject方法，InjectionMethodElement的inject方法大致相同只是对每一个方法参数执行一次resolveDependency方法来获取参数值，然后反射执行方法。</p>
<p>到此为止，整个实例化和装配过程也就讲完了，我们总结一下：</p>
<p>1）一切都是从bean工厂的getBean方法开始的，一旦该方法调用总会返回一个bean实例，无论当前是否存在，不存在就实例化一个并装配，否则直接返回。</p>
<p>2）实例化和装配过程中会多次递归调用getBean方法来解决类之间的依赖。</p>
<p>3）Spring几乎考虑了所有可能性，所以方法特别复杂但完整有条理。</p>
<p>4）@Autowired最终是根据类型来查找和装配元素的，但是我们设置了<beans default-autowire="byName">后会影响最终的类型匹配查找。因为在前面有根据BeanDefinition的autowire类型设置PropertyValue值得一步，其中会有新实例的创建和注册。就是那个autowireByName方法。</beans></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 之 &lt;context:component-scan/>]]></title>
      <url>http://yoursite.com/2015/05/19/Spring%20MVC%20%E4%B9%8B%20contextcomponent-scan/</url>
      <content type="html"><![CDATA[<p>一、ContextLoader<br>通过阅读SpringMVC的源码可知，SpringMVC的初始化在ContextLoaderListener类中的contextInitialized方法，跟一下代码发现实际上是在ContextLoader中的initWebApplicationContext方法中进行初始化。初始化的代码如下,首先会创建一个WebApplicationContext对象，然后加载父类，接着使用configureAndRefreshWebApplicationContext初始化这个WebApplicactionContext对象，是在configureAndRefreshWebApplicationContext方法中进行了配置文件的加载和组件的扫描。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">	ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</div><div class="line">	<span class="keyword">if</span> (!cwac.isActive()) &#123;</div><div class="line">		<span class="comment">// The context has not yet been refreshed -&amp;gt; provide services such as</span></div><div class="line">		<span class="comment">// setting the parent context, setting the application context id, etc</span></div><div class="line">		<span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// The context instance was injected without an explicit parent -&amp;gt;</span></div><div class="line">			<span class="comment">// determine parent for root web application context, if any.</span></div><div class="line">			ApplicationContext parent = loadParentContext(servletContext);</div><div class="line">			cwac.setParent(parent);</div><div class="line">		&#125;</div><div class="line">		configureAndRefreshWebApplicationContext(cwac, servletContext);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开createWebApplicationContext方法。该方法初始化根WebApplicationContext，这个WebApplicationContext可以使默认的context也尅进行定制。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected WebApplicationContext createWebApplicationContext(ServletContext sc) &#123;</div><div class="line">	Class&amp;lt;?&amp;gt; contextClass = determineContextClass(sc);</div><div class="line">	if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</div><div class="line">		throw new ApplicationContextException(&amp;quot;Custom context class [&amp;quot; + contextClass.getName() +</div><div class="line">				&amp;quot;] is not of type [&amp;quot; + ConfigurableWebApplicationContext.class.getName() + &amp;quot;]&amp;quot;);</div><div class="line">	&#125;</div><div class="line">	return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开determineContextClass方法。这个方法比较简单，首先查看有没有配置CONTEXT_CLASS_PARAM这个属性，有的话使用这个属性配置的类进行加载，否则使用默认的类。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">protected Class&amp;lt;?&amp;gt; determineContextClass(ServletContext servletContext) &#123;</div><div class="line">	String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);</div><div class="line">	if (contextClassName != null) &#123;</div><div class="line">		try &#123;</div><div class="line">			return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());</div><div class="line">		&#125;</div><div class="line">		catch (ClassNotFoundException ex) &#123;</div><div class="line">			throw new ApplicationContextException(</div><div class="line">					&amp;quot;Failed to load custom context class [&amp;quot; + contextClassName + &amp;quot;]&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">		contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());</div><div class="line">		try &#123;</div><div class="line">			return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());</div><div class="line">		&#125;</div><div class="line">		catch (ClassNotFoundException ex) &#123;</div><div class="line">			throw new ApplicationContextException(</div><div class="line">					&amp;quot;Failed to load default context class [&amp;quot; + contextClassName + &amp;quot;]&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看configureAndRefreshWebApplicationContext方法。configureAndRefreshWebApplicationContext最后的refresh方法已经在前面的<a href="http://www.bugpointer.com/archives/491.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试</a>系列文章里进行了简单的分析调试。</p>
<p>二、 &lt;context:component-scan/&gt;<br> 我们在SpringMVC开发项目中，有的用注解和XML配置Bean,这两种都各有自己的优势，数据源配置比较经常用XML配置，控制层依赖的service比较经常用注解等（在部署时比较不会改变的），我们经常比较常用的注解有@Component是通用标注，@Controller标注web控制器，@Service标注Servicec层的服务，@Respository标注DAO层的数据访问。SpringMVC启动时怎么被自动扫描然后解析并注册到Bean工厂中去（放到DefaultListableBeanFactory中的Map<string, beandefinition=""> beanDefinitionMap中 以BeanName为key）？我们今天带着这些问题来了解分析这实现的过程，我们在分析之前先了解一下这些注解。<br>   @Controller标注web控制器，@Service标注Service层的服务，@Respository标注DAO层的数据访问。@Component是通用标注，只是定义为一个类为Bean，SpringMVC会把所有添加@Component注解的类作为使用自动扫描注入配置路径下的备选对象。@Controller、@Service\@Respository只是更加的细化，都是被@Component标注，所以我们比较不推荐使用@Component。源代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)  </div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </div><div class="line"><span class="meta">@Documented</span>  </div><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;  </div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &amp;quot</span>;&amp;quot;;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)  </div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </div><div class="line"><span class="meta">@Documented</span>  </div><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;  </div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &amp;quot</span>;&amp;quot;;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)  </div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </div><div class="line"><span class="meta">@Documented</span>  </div><div class="line"><span class="meta">@Component</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;  </div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &amp;quot</span>;&amp;quot;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></string,></p>
<p>都是有标示@Component<br> 我们在配置文件中，标示配置需要扫描哪些包下，也可以配置对某个包下不扫描，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&amp;lt;context:component-scan base-<span class="keyword">package</span>=&amp;quot;cn.test&amp;quot;&amp;gt;  </div><div class="line">        &amp;lt;context:exclude-filter type=&amp;quot;regex&amp;quot; expression=&amp;quot;cn.test.*.*.controller&amp;quot;/&amp;gt;  </div><div class="line">        &amp;lt;context:exclude-filter type=&amp;quot;regex&amp;quot; expression=&amp;quot;cn.test.*.*.controller2&amp;quot;/&amp;gt;  </div><div class="line">&amp;lt;/context:component-scan&amp;gt;</div></pre></td></tr></table></figure></p>
<p>说明：<br>   <context:exclude-filter>指定的不扫描包，<context:exclude-filter>指定的扫描包<br>SpringMVC先读取配置文件，然后根据context:component-scan中属性base-package去扫描指定包下的class和jar文件，把标示@Controller标注web控制器，@Service标注Servicec层的服务，@Respository标注DAO层的数据访问等注解的都获取，并注册为Bean类放到Bean工厂。</context:exclude-filter></context:exclude-filter></p>
<p>三、ComponentScanBeanDefinitionParser<br>通过阅读源码，知道接口BeanDefinitionParser可以实现将自定义的标签转化为 BeanDefinition类。而<context:component-scan>则是由ComponentScanBeanDefinitionParser进行解析的。</context:component-scan></p>
<p>展开ComponentScanBeanDefinitionParser中的parse方法。可以看到主要完成以下工作。<br>    （1）获取context:component-scan 配置的属性base-package的值，然后放到数组。<br>    （2）创建扫描对应包下的class和jar文件的对象ClassPathBeanDefinitionScanner ，由这个类来实现扫描包下的class和jar文件并把注解的Bean包装成BeanDefinition。<br>    （3）BeanDefinition注册到Bean工厂。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</div><div class="line">	String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);</div><div class="line">	basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);</div><div class="line">	String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,</div><div class="line">			ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</div><div class="line">	<span class="comment">// Actually scan for bean definitions and register them.</span></div><div class="line">	ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);</div><div class="line">	Set&amp;lt;BeanDefinitionHolder&amp;gt; beanDefinitions = scanner.doScan(basePackages);</div><div class="line">	registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再展开configureScanner方法。首先通过findCandidateComponents获取候选bean definition。然后注册到registry中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Set&amp;lt;BeanDefinitionHolder&amp;gt; doScan(String... basePackages) &#123;</div><div class="line">	Assert.notEmpty(basePackages, &amp;quot;At least one base <span class="keyword">package</span> must be specified&amp;quot;);</div><div class="line">	Set&amp;lt;BeanDefinitionHolder&amp;gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&amp;lt;BeanDefinitionHolder&amp;gt;();</div><div class="line">	<span class="keyword">for</span> (String basePackage : basePackages) &#123;</div><div class="line">		Set&amp;lt;BeanDefinition&amp;gt; candidates = findCandidateComponents(basePackage);</div><div class="line">		<span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</div><div class="line">			ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</div><div class="line">			candidate.setScope(scopeMetadata.getScopeName());</div><div class="line">			String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</div><div class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</div><div class="line">				postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</div><div class="line">				AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</div><div class="line">				BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</div><div class="line">				definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</div><div class="line">				beanDefinitions.add(definitionHolder);</div><div class="line">				registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> beanDefinitions;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>四、筛选类<br>展开findCandidateComponents方法。首先获取路径下的资源Resource，然后判断资源是否可读，并且获取可读资源的MetadataReader对象，然后再调用isCandidateComponent(MetadataReader)判段是否是候选组件，如果是，则生成该metadataReader的ScannedGenericBeanDefinition对象。最后判断ScannedGenericBeanDefinition是否为候选的，如果是则添加到工厂中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public Set&amp;lt;BeanDefinition&amp;gt; findCandidateComponents(String basePackage) &#123;</div><div class="line">	Set&amp;lt;BeanDefinition&amp;gt; candidates = new LinkedHashSet&amp;lt;BeanDefinition&amp;gt;();</div><div class="line">	try &#123;</div><div class="line">		String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</div><div class="line">				resolveBasePackage(basePackage) + &amp;quot;/&amp;quot; + this.resourcePattern;</div><div class="line">		Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);</div><div class="line">		boolean traceEnabled = logger.isTraceEnabled();</div><div class="line">		boolean debugEnabled = logger.isDebugEnabled();</div><div class="line">		for (Resource resource : resources) &#123;</div><div class="line">			if (traceEnabled) &#123;</div><div class="line">				logger.trace(&amp;quot;Scanning &amp;quot; + resource);</div><div class="line">			&#125;</div><div class="line">			if (resource.isReadable()) &#123;</div><div class="line">				try &#123;</div><div class="line">					MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);</div><div class="line">					if (isCandidateComponent(metadataReader)) &#123;</div><div class="line">						ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);</div><div class="line">						sbd.setResource(resource);</div><div class="line">						sbd.setSource(resource);</div><div class="line">						if (isCandidateComponent(sbd)) &#123;</div><div class="line">							if (debugEnabled) &#123;</div><div class="line">								logger.debug(&amp;quot;Identified candidate component class: &amp;quot; + resource);</div><div class="line">							&#125;</div><div class="line">							candidates.add(sbd);</div><div class="line">						&#125;</div><div class="line">						else &#123;</div><div class="line">							if (debugEnabled) &#123;</div><div class="line">								logger.debug(&amp;quot;Ignored because not a concrete top-level class: &amp;quot; + resource);</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					else &#123;</div><div class="line">						if (traceEnabled) &#123;</div><div class="line">							logger.trace(&amp;quot;Ignored because not matching any filter: &amp;quot; + resource);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				catch (Throwable ex) &#123;</div><div class="line">					throw new BeanDefinitionStoreException(</div><div class="line">							&amp;quot;Failed to read candidate component class: &amp;quot; + resource, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				if (traceEnabled) &#123;</div><div class="line">					logger.trace(&amp;quot;Ignored because not readable: &amp;quot; + resource);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">        catch (IOException ex) &#123;</div><div class="line">	       throw new BeanDefinitionStoreException(&amp;quot;I/O failure during classpath scanning&amp;quot;, ex);</div><div class="line">	&#125;</div><div class="line">	return candidates;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开isCandidateComponent方法。通过变量excludeFilters, includeFilters去匹配传递进来的MetadataReader，如果与excludeFilter匹配成功返回false， 与includeFilter匹配成功返回true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCandidateComponent</span><span class="params">(MetadataReader metadataReader)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="keyword">for</span> (TypeFilter tf : <span class="keyword">this</span>.excludeFilters) &#123;</div><div class="line">		<span class="keyword">if</span> (tf.match(metadataReader, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (TypeFilter tf : <span class="keyword">this</span>.includeFilters) &#123;</div><div class="line">		<span class="keyword">if</span> (tf.match(metadataReader, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</div><div class="line">			<span class="keyword">return</span> isConditionMatch(metadataReader);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>五、注册bean factory</p>
<p>在上面doScan方法中有<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册到工厂中</span></div><div class="line">registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</div></pre></td></tr></table></figure></p>
<pre><code>这样一行代码将beanDefinition注册到registry中,这是一个BeanDefinitionRegistry，下面是它的接口定义及继承结构：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title">AliasRegistry</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></div><div class="line">            <span class="keyword">throws</span> BeanDefinitionStoreException;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</div><div class="line">    <span class="function">BeanDefinition <span class="title">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String beanName)</span></span>;</div><div class="line">    String[] getBeanDefinitionNames();</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isBeanNameInUse</span><span class="params">(String beanName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到接口中定义了诸多beandefinition的注册，删除，获取等方法，并且Spring为我们提供了三个内部实现，那么运行时，和之前文章的分析一样，使用了DefaultListableBeanFactory。<br>展开registerBeanDefinition方法。可以看出，所有的beanDefinition都由实例变量beanDefinitionMap来保存管理，他是一个ConcurrentHashMap，beanName作为键，beanDefinition对象作为值。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</div><div class="line">		throws BeanDefinitionStoreException &#123;</div><div class="line">	Assert.hasText(beanName, &amp;quot;Bean name must not be empty&amp;quot;);</div><div class="line">	Assert.notNull(beanDefinition, &amp;quot;BeanDefinition must not be null&amp;quot;);</div><div class="line">	if (beanDefinition instanceof AbstractBeanDefinition) &#123;</div><div class="line">		try &#123;</div><div class="line">			((AbstractBeanDefinition) beanDefinition).validate();</div><div class="line">		&#125;</div><div class="line">		catch (BeanDefinitionValidationException ex) &#123;</div><div class="line">			throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">					&amp;quot;Validation of bean definition failed&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	BeanDefinition oldBeanDefinition;</div><div class="line"></div><div class="line">	oldBeanDefinition = this.beanDefinitionMap.get(beanName);</div><div class="line">	if (oldBeanDefinition != null) &#123;</div><div class="line">		if (!isAllowBeanDefinitionOverriding()) &#123;</div><div class="line">			throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">					&amp;quot;Cannot register bean definition [&amp;quot; + beanDefinition + &amp;quot;] for bean '&amp;quot; + beanName +</div><div class="line">					&amp;quot;': There is already [&amp;quot; + oldBeanDefinition + &amp;quot;] bound.&amp;quot;);</div><div class="line">		&#125;</div><div class="line">		else if (oldBeanDefinition.getRole() &amp;lt; beanDefinition.getRole()) &#123;</div><div class="line">			// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</div><div class="line">			if (this.logger.isWarnEnabled()) &#123;</div><div class="line">				this.logger.warn(&amp;quot;Overriding user-defined bean definition for bean '&amp;quot; + beanName +</div><div class="line">						&amp;quot;' with a framework-generated bean definition: replacing [&amp;quot; +</div><div class="line">						oldBeanDefinition + &amp;quot;] with [&amp;quot; + beanDefinition + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			if (this.logger.isInfoEnabled()) &#123;</div><div class="line">				this.logger.info(&amp;quot;Overriding bean definition for bean '&amp;quot; + beanName +</div><div class="line">						&amp;quot;': replacing [&amp;quot; + oldBeanDefinition + &amp;quot;] with [&amp;quot; + beanDefinition + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">		this.beanDefinitionNames.add(beanName);</div><div class="line">		this.manualSingletonNames.remove(beanName);</div><div class="line">		this.frozenBeanDefinitionNames = null;</div><div class="line">	&#125;</div><div class="line">	this.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">	if (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</div><div class="line">		resetBeanDefinition(beanName);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（七）]]></title>
      <url>http://yoursite.com/2015/05/18/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上篇日志<a href="http://www.bugpointer.com/archives/521.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（六）</a>继续。</p>
<p>经过前面几章详（gai）细（kuo）的调试，最后来到了Demo中的第二步，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Animal a = ctx.getBean(&amp;quot;animal&amp;quot;, Animal.class);<span class="comment">// 创建bean的引用对象</span></div></pre></td></tr></table></figure></p>
<p>展开getBean，代码如下。这一步通过getBeanFactory方法获取bean factory，然后使用bean factory获取对应的bean。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &amp;lt;T&amp;gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&amp;lt;T&amp;gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">return</span> getBeanFactory().getBean(name, requiredType);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>继续展开getBean。会走到之前初始化时候走到的方法,如下。由于已经初始化完毕，所以这一步走到Object sharedInstance = getSingleton(beanName);就会获取对应的bean实例。getSingleton这个函数的功能就是从已加载的实例中知道对应名称的bean实例，然后返回。接着代码进入if (sharedInstance != null &amp;&amp; args == null)这个if中，通过getObjectForBeanInstance获取bean，这个函数说简单简单，简单的时候就是把前面获取的bean返回，说复杂复杂，前面获取的bean并不是需要的bean，而是一个factory的情况下，则使用这个factoy生成一个bean，然后返回。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">protected &amp;lt;T&amp;gt; T doGetBean(</div><div class="line">			final String name, final Class&amp;lt;T&amp;gt; requiredType, final Object[] args, boolean typeCheckOnly)</div><div class="line">			throws BeansException &#123;</div><div class="line"></div><div class="line">		final String beanName = transformedBeanName(name);</div><div class="line">		Object bean;</div><div class="line"></div><div class="line">		// Eagerly check singleton cache for manually registered singletons.</div><div class="line">		Object sharedInstance = getSingleton(beanName);</div><div class="line">		if (sharedInstance != null &amp;amp;&amp;amp; args == null) &#123;</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				if (isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class="line">					logger.debug(&amp;quot;Returning eagerly cached instance of singleton bean '&amp;quot; + beanName +</div><div class="line">							&amp;quot;' that is not fully initialized yet - a consequence of a circular reference&amp;quot;);</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					logger.debug(&amp;quot;Returning cached instance of singleton bean '&amp;quot; + beanName + &amp;quot;'&amp;quot;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		else &#123;</div><div class="line">			// Fail if we're already creating this bean instance:</div><div class="line">			// We're assumably within a circular reference.</div><div class="line">			if (isPrototypeCurrentlyInCreation(beanName)) &#123;</div><div class="line">				throw new BeanCurrentlyInCreationException(beanName);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			// Check if bean definition exists in this factory.</div><div class="line">			BeanFactory parentBeanFactory = getParentBeanFactory();</div><div class="line">			if (parentBeanFactory != null &amp;amp;&amp;amp; !containsBeanDefinition(beanName)) &#123;</div><div class="line">				// Not found -&amp;gt; check parent.</div><div class="line">				String nameToLookup = originalBeanName(name);</div><div class="line">				if (args != null) &#123;</div><div class="line">					// Delegation to parent with explicit args.</div><div class="line">					return (T) parentBeanFactory.getBean(nameToLookup, args);</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					// No args -&amp;gt; delegate to standard getBean method.</div><div class="line">					return parentBeanFactory.getBean(nameToLookup, requiredType);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			if (!typeCheckOnly) &#123;</div><div class="line">				markBeanAsCreated(beanName);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			try &#123;</div><div class="line">				final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</div><div class="line">				checkMergedBeanDefinition(mbd, beanName, args);</div><div class="line"></div><div class="line">				// Guarantee initialization of beans that the current bean depends on.</div><div class="line">				String[] dependsOn = mbd.getDependsOn();</div><div class="line">				if (dependsOn != null) &#123;</div><div class="line">					for (String dependsOnBean : dependsOn) &#123;</div><div class="line">						getBean(dependsOnBean);</div><div class="line">						registerDependentBean(dependsOnBean, beanName);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				// Create bean instance.</div><div class="line">				if (mbd.isSingleton()) &#123;</div><div class="line">					sharedInstance = getSingleton(beanName, new ObjectFactory&amp;lt;Object&amp;gt;() &#123;</div><div class="line">						public Object getObject() throws BeansException &#123;</div><div class="line">							try &#123;</div><div class="line">								return createBean(beanName, mbd, args);</div><div class="line">							&#125;</div><div class="line">							catch (BeansException ex) &#123;</div><div class="line">								// Explicitly remove instance from singleton cache: It might have been put there</div><div class="line">								// eagerly by the creation process, to allow for circular reference resolution.</div><div class="line">								// Also remove any beans that received a temporary reference to the bean.</div><div class="line">								destroySingleton(beanName);</div><div class="line">								throw ex;</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">					bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				else if (mbd.isPrototype()) &#123;</div><div class="line">					// It's a prototype -&amp;gt; create a new instance.</div><div class="line">					Object prototypeInstance = null;</div><div class="line">					try &#123;</div><div class="line">						beforePrototypeCreation(beanName);</div><div class="line">						prototypeInstance = createBean(beanName, mbd, args);</div><div class="line">					&#125;</div><div class="line">					finally &#123;</div><div class="line">						afterPrototypeCreation(beanName);</div><div class="line">					&#125;</div><div class="line">					bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				else &#123;</div><div class="line">					String scopeName = mbd.getScope();</div><div class="line">					final Scope scope = this.scopes.get(scopeName);</div><div class="line">					if (scope == null) &#123;</div><div class="line">						throw new IllegalStateException(&amp;quot;No Scope registered for scope '&amp;quot; + scopeName + &amp;quot;'&amp;quot;);</div><div class="line">					&#125;</div><div class="line">					try &#123;</div><div class="line">						Object scopedInstance = scope.get(beanName, new ObjectFactory&amp;lt;Object&amp;gt;() &#123;</div><div class="line">							public Object getObject() throws BeansException &#123;</div><div class="line">								beforePrototypeCreation(beanName);</div><div class="line">								try &#123;</div><div class="line">									return createBean(beanName, mbd, args);</div><div class="line">								&#125;</div><div class="line">								finally &#123;</div><div class="line">									afterPrototypeCreation(beanName);</div><div class="line">								&#125;</div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line">						bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</div><div class="line">					&#125;</div><div class="line">					catch (IllegalStateException ex) &#123;</div><div class="line">						throw new BeanCreationException(beanName,</div><div class="line">								&amp;quot;Scope '&amp;quot; + scopeName + &amp;quot;' is not active for the current thread; &amp;quot; +</div><div class="line">								&amp;quot;consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&amp;quot;,</div><div class="line">								ex);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			catch (BeansException ex) &#123;</div><div class="line">				cleanupAfterBeanCreationFailure(beanName);</div><div class="line">				throw ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Check if required type matches the type of the actual bean instance.</div><div class="line">		if (requiredType != null &amp;amp;&amp;amp; bean != null &amp;amp;&amp;amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</div><div class="line">			try &#123;</div><div class="line">				return getTypeConverter().convertIfNecessary(bean, requiredType);</div><div class="line">			&#125;</div><div class="line">			catch (TypeMismatchException ex) &#123;</div><div class="line">				if (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(&amp;quot;Failed to convert bean '&amp;quot; + name + &amp;quot;' to required type [&amp;quot; +</div><div class="line">							ClassUtils.getQualifiedName(requiredType) + &amp;quot;]&amp;quot;, ex);</div><div class="line">				&#125;</div><div class="line">				throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return (T) bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public boolean containsBean(String name) &#123;</div><div class="line">		String beanName = transformedBeanName(name);</div><div class="line">		if (containsSingleton(beanName) || containsBeanDefinition(beanName)) &#123;</div><div class="line">			return (!BeanFactoryUtils.isFactoryDereference(name) || isFactoryBean(name));</div><div class="line">		&#125;</div><div class="line">		// Not found -&amp;gt; check parent.</div><div class="line">		BeanFactory parentBeanFactory = getParentBeanFactory();</div><div class="line">		return (parentBeanFactory != null &amp;amp;&amp;amp; parentBeanFactory.containsBean(originalBeanName(name)));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public boolean isSingleton(String name) throws NoSuchBeanDefinitionException &#123;</div><div class="line">		String beanName = transformedBeanName(name);</div><div class="line"></div><div class="line">		Object beanInstance = getSingleton(beanName, false);</div><div class="line">		if (beanInstance != null) &#123;</div><div class="line">			if (beanInstance instanceof FactoryBean) &#123;</div><div class="line">				return (BeanFactoryUtils.isFactoryDereference(name) || ((FactoryBean&amp;lt;?&amp;gt;) beanInstance).isSingleton());</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				return !BeanFactoryUtils.isFactoryDereference(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else if (containsSingleton(beanName)) &#123;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		else &#123;</div><div class="line">			// No singleton instance found -&amp;gt; check bean definition.</div><div class="line">			BeanFactory parentBeanFactory = getParentBeanFactory();</div><div class="line">			if (parentBeanFactory != null &amp;amp;&amp;amp; !containsBeanDefinition(beanName)) &#123;</div><div class="line">				// No bean definition found in this factory -&amp;gt; delegate to parent.</div><div class="line">				return parentBeanFactory.isSingleton(originalBeanName(name));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</div><div class="line"></div><div class="line">			// In case of FactoryBean, return singleton status of created object if not a dereference.</div><div class="line">			if (mbd.isSingleton()) &#123;</div><div class="line">				if (isFactoryBean(beanName, mbd)) &#123;</div><div class="line">					if (BeanFactoryUtils.isFactoryDereference(name)) &#123;</div><div class="line">						return true;</div><div class="line">					&#125;</div><div class="line">					FactoryBean&amp;lt;?&amp;gt; factoryBean = (FactoryBean&amp;lt;?&amp;gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</div><div class="line">					return factoryBean.isSingleton();</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					return !BeanFactoryUtils.isFactoryDereference(name);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>在获取了bean以后，就可以使用这个bean了。简单的demo的分析就到此了，还有很多的问题和不足，Spring作为一个强大的java框架，复杂程度难以想象，在每一步的处理中到包含了大量的错误处理等目前没有分析到的部分。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（六）]]></title>
      <url>http://yoursite.com/2015/05/15/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上篇日志<a href="http://www.bugpointer.com/archives/517.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（五）</a>继续。</p>
<p>接上一篇转日志的第十一步，这一步主要完成单例的初始化。直接进入这一步中的beanFactory.preInstantiateSingletons();这一步的功能主要在对每一个bean进行getBean(beanName);操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.info(&amp;quot;Pre-instantiating singletons in &amp;quot; + <span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		List&amp;lt;String&amp;gt; beanNames;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</div><div class="line">			<span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></div><div class="line">			<span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></div><div class="line">			beanNames = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;(<span class="keyword">this</span>.beanDefinitionNames);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></div><div class="line">		<span class="keyword">for</span> (String beanName : beanNames) &#123;</div><div class="line">			RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</div><div class="line">			<span class="keyword">if</span> (!bd.isAbstract() &amp;amp;&amp;amp; bd.isSingleton() &amp;amp;&amp;amp; !bd.isLazyInit()) &#123;</div><div class="line">				<span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</div><div class="line">					<span class="keyword">final</span> FactoryBean&amp;lt;?&amp;gt; factory = (FactoryBean&amp;lt;?&amp;gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</div><div class="line">					<span class="keyword">boolean</span> isEagerInit;</div><div class="line">					<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;amp;&amp;amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</div><div class="line">						isEagerInit = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&amp;lt;Boolean&amp;gt;() &#123;</div><div class="line">							<span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">								<span class="keyword">return</span> ((SmartFactoryBean&amp;lt;?&amp;gt;) factory).isEagerInit();</div><div class="line">							&#125;</div><div class="line">						&#125;, getAccessControlContext());</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;amp;&amp;amp;</div><div class="line">								((SmartFactoryBean&amp;lt;?&amp;gt;) factory).isEagerInit());</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (isEagerInit) &#123;</div><div class="line">						getBean(beanName);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					getBean(beanName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>展开getBean(beanName);，再展开其中的doGetBean方法，首先检查单例缓存中是否存在这个单例，是则返回这个实例。否则创建这个实例，详见return createBean(beanName, mbd, args);这一句。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 返回实例</div><div class="line"> */</div><div class="line">@SuppressWarnings(&amp;quot;unchecked&amp;quot;)</div><div class="line">protected &amp;lt;T&amp;gt; T doGetBean(</div><div class="line">		final String name, final Class&amp;lt;T&amp;gt; requiredType, final Object[] args, boolean typeCheckOnly)</div><div class="line">		throws BeansException &#123;</div><div class="line"></div><div class="line">	final String beanName = transformedBeanName(name);</div><div class="line">	Object bean;</div><div class="line"></div><div class="line">	// 为了手动注册的单例，检查单例缓存.</div><div class="line">	Object sharedInstance = getSingleton(beanName);</div><div class="line">	if (sharedInstance != null &amp;amp;&amp;amp; args == null) &#123;</div><div class="line">		if (logger.isDebugEnabled()) &#123;</div><div class="line">			if (isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class="line">				logger.debug(&amp;quot;Returning eagerly cached instance of singleton bean '&amp;quot; + beanName +</div><div class="line">						&amp;quot;' that is not fully initialized yet - a consequence of a circular reference&amp;quot;);</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				logger.debug(&amp;quot;Returning cached instance of singleton bean '&amp;quot; + beanName + &amp;quot;'&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	else &#123;</div><div class="line">		// Fail if we're already creating this bean instance:</div><div class="line">		// We're assumably within a circular reference.</div><div class="line">		if (isPrototypeCurrentlyInCreation(beanName)) &#123;</div><div class="line">			throw new BeanCurrentlyInCreationException(beanName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Check if bean definition exists in this factory.</div><div class="line">		BeanFactory parentBeanFactory = getParentBeanFactory();</div><div class="line">		if (parentBeanFactory != null &amp;amp;&amp;amp; !containsBeanDefinition(beanName)) &#123;</div><div class="line">			// Not found -&amp;gt; check parent.</div><div class="line">			String nameToLookup = originalBeanName(name);</div><div class="line">			if (args != null) &#123;</div><div class="line">				// Delegation to parent with explicit args.</div><div class="line">				return (T) parentBeanFactory.getBean(nameToLookup, args);</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				// No args -&amp;gt; delegate to standard getBean method.</div><div class="line">				return parentBeanFactory.getBean(nameToLookup, requiredType);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (!typeCheckOnly) &#123;</div><div class="line">			markBeanAsCreated(beanName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</div><div class="line">			checkMergedBeanDefinition(mbd, beanName, args);</div><div class="line"></div><div class="line">			// Guarantee initialization of beans that the current bean depends on.</div><div class="line">			String[] dependsOn = mbd.getDependsOn();</div><div class="line">			if (dependsOn != null) &#123;</div><div class="line">				for (String dependsOnBean : dependsOn) &#123;</div><div class="line">					getBean(dependsOnBean);</div><div class="line">					registerDependentBean(dependsOnBean, beanName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			// Create bean instance.</div><div class="line">			if (mbd.isSingleton()) &#123;</div><div class="line">				sharedInstance = getSingleton(beanName, new ObjectFactory&amp;lt;Object&amp;gt;() &#123;</div><div class="line">					public Object getObject() throws BeansException &#123;</div><div class="line">						try &#123;</div><div class="line">							return createBean(beanName, mbd, args);</div><div class="line">						&#125;</div><div class="line">						catch (BeansException ex) &#123;</div><div class="line">							// Explicitly remove instance from singleton cache: It might have been put there</div><div class="line">							// eagerly by the creation process, to allow for circular reference resolution.</div><div class="line">							// Also remove any beans that received a temporary reference to the bean.</div><div class="line">							destroySingleton(beanName);</div><div class="line">							throw ex;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">				bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			else if (mbd.isPrototype()) &#123;</div><div class="line">				// It's a prototype -&amp;gt; create a new instance.</div><div class="line">				Object prototypeInstance = null;</div><div class="line">				try &#123;</div><div class="line">					beforePrototypeCreation(beanName);</div><div class="line">					prototypeInstance = createBean(beanName, mbd, args);</div><div class="line">				&#125;</div><div class="line">				finally &#123;</div><div class="line">					afterPrototypeCreation(beanName);</div><div class="line">				&#125;</div><div class="line">				bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			else &#123;</div><div class="line">				String scopeName = mbd.getScope();</div><div class="line">				final Scope scope = this.scopes.get(scopeName);</div><div class="line">				if (scope == null) &#123;</div><div class="line">					throw new IllegalStateException(&amp;quot;No Scope registered for scope '&amp;quot; + scopeName + &amp;quot;'&amp;quot;);</div><div class="line">				&#125;</div><div class="line">				try &#123;</div><div class="line">					Object scopedInstance = scope.get(beanName, new ObjectFactory&amp;lt;Object&amp;gt;() &#123;</div><div class="line">						public Object getObject() throws BeansException &#123;</div><div class="line">							beforePrototypeCreation(beanName);</div><div class="line">							try &#123;</div><div class="line">								return createBean(beanName, mbd, args);</div><div class="line">							&#125;</div><div class="line">							finally &#123;</div><div class="line">								afterPrototypeCreation(beanName);</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">					bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</div><div class="line">				&#125;</div><div class="line">				catch (IllegalStateException ex) &#123;</div><div class="line">					throw new BeanCreationException(beanName,</div><div class="line">							&amp;quot;Scope '&amp;quot; + scopeName + &amp;quot;' is not active for the current thread; &amp;quot; +</div><div class="line">							&amp;quot;consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&amp;quot;,</div><div class="line">							ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch (BeansException ex) &#123;</div><div class="line">			cleanupAfterBeanCreationFailure(beanName);</div><div class="line">			throw ex;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// Check if required type matches the type of the actual bean instance.</div><div class="line">	if (requiredType != null &amp;amp;&amp;amp; bean != null &amp;amp;&amp;amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</div><div class="line">		try &#123;</div><div class="line">			return getTypeConverter().convertIfNecessary(bean, requiredType);</div><div class="line">		&#125;</div><div class="line">		catch (TypeMismatchException ex) &#123;</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Failed to convert bean '&amp;quot; + name + &amp;quot;' to required type [&amp;quot; +</div><div class="line">						ClassUtils.getQualifiedName(requiredType) + &amp;quot;]&amp;quot;, ex);</div><div class="line">			&#125;</div><div class="line">			throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return (T) bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>展开return createBean(beanName, mbd, args);辗转反侧，我们进入AbstractAutowireCapableBeanFactory类中的doCreateBean方法，展开这个方法，这个方法是实际用来创建bean。这个方法还是很复杂，就不一步步的进行分析了，大概来看就是首先对bean definition进行后处理，然后检查cache避免循环初始化，填充Bean，最后bean注册为一次性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	 */</div><div class="line">	protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) &#123;</div><div class="line">		// Instantiate the bean.</div><div class="line">		BeanWrapper instanceWrapper = null;</div><div class="line">		if (mbd.isSingleton()) &#123;</div><div class="line">			instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);</div><div class="line">		&#125;</div><div class="line">		if (instanceWrapper == null) &#123;</div><div class="line">			instanceWrapper = createBeanInstance(beanName, mbd, args);</div><div class="line">		&#125;</div><div class="line">		final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);</div><div class="line">		Class&amp;lt;?&amp;gt; beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);</div><div class="line"></div><div class="line">		// Allow post-processors to modify the merged bean definition.</div><div class="line">		synchronized (mbd.postProcessingLock) &#123;</div><div class="line">			if (!mbd.postProcessed) &#123;</div><div class="line">				applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</div><div class="line">				mbd.postProcessed = true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Eagerly cache singletons to be able to resolve circular references</div><div class="line">		// even when triggered by lifecycle interfaces like BeanFactoryAware.</div><div class="line">		boolean earlySingletonExposure = (mbd.isSingleton() &amp;amp;&amp;amp; this.allowCircularReferences &amp;amp;&amp;amp;</div><div class="line">				isSingletonCurrentlyInCreation(beanName));</div><div class="line">		if (earlySingletonExposure) &#123;</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Eagerly caching bean '&amp;quot; + beanName +</div><div class="line">						&amp;quot;' to allow for resolving potential circular references&amp;quot;);</div><div class="line">			&#125;</div><div class="line">			addSingletonFactory(beanName, new ObjectFactory&amp;lt;Object&amp;gt;() &#123;</div><div class="line">				public Object getObject() throws BeansException &#123;</div><div class="line">					return getEarlyBeanReference(beanName, mbd, bean);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Initialize the bean instance.</div><div class="line">		Object exposedObject = bean;</div><div class="line">		try &#123;</div><div class="line">			populateBean(beanName, mbd, instanceWrapper);</div><div class="line">			if (exposedObject != null) &#123;</div><div class="line">				exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		catch (Throwable ex) &#123;</div><div class="line">			if (ex instanceof BeanCreationException &amp;amp;&amp;amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</div><div class="line">				throw (BeanCreationException) ex;</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				throw new BeanCreationException(mbd.getResourceDescription(), beanName, &amp;quot;Initialization of bean failed&amp;quot;, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (earlySingletonExposure) &#123;</div><div class="line">			Object earlySingletonReference = getSingleton(beanName, false);</div><div class="line">			if (earlySingletonReference != null) &#123;</div><div class="line">				if (exposedObject == bean) &#123;</div><div class="line">					exposedObject = earlySingletonReference;</div><div class="line">				&#125;</div><div class="line">				else if (!this.allowRawInjectionDespiteWrapping &amp;amp;&amp;amp; hasDependentBean(beanName)) &#123;</div><div class="line">					String[] dependentBeans = getDependentBeans(beanName);</div><div class="line">					Set&amp;lt;String&amp;gt; actualDependentBeans = new LinkedHashSet&amp;lt;String&amp;gt;(dependentBeans.length);</div><div class="line">					for (String dependentBean : dependentBeans) &#123;</div><div class="line">						if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</div><div class="line">							actualDependentBeans.add(dependentBean);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					if (!actualDependentBeans.isEmpty()) &#123;</div><div class="line">						throw new BeanCurrentlyInCreationException(beanName,</div><div class="line">								&amp;quot;Bean with name '&amp;quot; + beanName + &amp;quot;' has been injected into other beans [&amp;quot; +</div><div class="line">								StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</div><div class="line">								&amp;quot;] in its raw version as part of a circular reference, but has eventually been &amp;quot; +</div><div class="line">								&amp;quot;wrapped. This means that said other beans do not use the final version of the &amp;quot; +</div><div class="line">								&amp;quot;bean. This is often the result of over-eager type matching - consider using &amp;quot; +</div><div class="line">								&amp;quot;'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.&amp;quot;);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// Register bean as disposable.</div><div class="line">		try &#123;</div><div class="line">			registerDisposableBeanIfNecessary(beanName, bean, mbd);</div><div class="line">		&#125;</div><div class="line">		catch (BeanDefinitionValidationException ex) &#123;</div><div class="line">			throw new BeanCreationException(mbd.getResourceDescription(), beanName, &amp;quot;Invalid destruction signature&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return exposedObject;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们一直走，走到applyPropertyValues方法，该方法给予bean指定的属性。这个方法首先从pvs中获取所有的属性信息，对每一个属性信息获取对应的属性值，这里的属性值是通过一系列转换得到的。最后通过包装类的setPropertyValues方法设置属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 给予bean指定的属性</div><div class="line">	 * <span class="doctag">@param</span> beanName bean 名称</div><div class="line">	 * <span class="doctag">@param</span> mbd bean定义</div><div class="line">	 * <span class="doctag">@param</span> bw 目标对象的包装类</div><div class="line">	 * <span class="doctag">@param</span> pvs 属性</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (pvs == <span class="keyword">null</span> || pvs.isEmpty()) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		MutablePropertyValues mpvs = <span class="keyword">null</span>;</div><div class="line">		List&amp;lt;PropertyValue&amp;gt; original;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (bw <span class="keyword">instanceof</span> BeanWrapperImpl) &#123;</div><div class="line">				((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (pvs <span class="keyword">instanceof</span> MutablePropertyValues) &#123;</div><div class="line">			mpvs = (MutablePropertyValues) pvs;</div><div class="line">			<span class="keyword">if</span> (mpvs.isConverted()) &#123;</div><div class="line">				<span class="comment">// Shortcut: use the pre-converted values as-is.</span></div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					bw.setPropertyValues(mpvs);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">							mbd.getResourceDescription(), beanName, &amp;quot;Error setting property values&amp;quot;, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			original = mpvs.getPropertyValueList();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			original = Arrays.asList(pvs.getPropertyValues());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		TypeConverter converter = getCustomTypeConverter();</div><div class="line">		<span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</div><div class="line">			converter = bw;</div><div class="line">		&#125;</div><div class="line">		BeanDefinitionValueResolver valueResolver = <span class="keyword">new</span> BeanDefinitionValueResolver(<span class="keyword">this</span>, beanName, mbd, converter);</div><div class="line"></div><div class="line">		<span class="comment">// Create a deep copy, resolving any references for values.</span></div><div class="line">		List&amp;lt;PropertyValue&amp;gt; deepCopy = <span class="keyword">new</span> ArrayList&amp;lt;PropertyValue&amp;gt;(original.size());</div><div class="line">		<span class="keyword">boolean</span> resolveNecessary = <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">for</span> (PropertyValue pv : original) &#123;</div><div class="line">			<span class="keyword">if</span> (pv.isConverted()) &#123;</div><div class="line">				deepCopy.add(pv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				String propertyName = pv.getName();</div><div class="line">				Object originalValue = pv.getValue();</div><div class="line">				Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</div><div class="line">				Object convertedValue = resolvedValue;</div><div class="line">				<span class="keyword">boolean</span> convertible = bw.isWritableProperty(propertyName) &amp;amp;&amp;amp;</div><div class="line">						!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</div><div class="line">				<span class="keyword">if</span> (convertible) &#123;</div><div class="line">					convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// Possibly store converted value in merged bean definition,</span></div><div class="line">				<span class="comment">// in order to avoid re-conversion for every created bean instance.</span></div><div class="line">				<span class="keyword">if</span> (resolvedValue == originalValue) &#123;</div><div class="line">					<span class="keyword">if</span> (convertible) &#123;</div><div class="line">						pv.setConvertedValue(convertedValue);</div><div class="line">					&#125;</div><div class="line">					deepCopy.add(pv);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (convertible &amp;amp;&amp;amp; originalValue <span class="keyword">instanceof</span> TypedStringValue &amp;amp;&amp;amp;</div><div class="line">						!((TypedStringValue) originalValue).isDynamic() &amp;amp;&amp;amp;</div><div class="line">						!(convertedValue <span class="keyword">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</div><div class="line">					pv.setConvertedValue(convertedValue);</div><div class="line">					deepCopy.add(pv);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					resolveNecessary = <span class="keyword">true</span>;</div><div class="line">					deepCopy.add(<span class="keyword">new</span> PropertyValue(pv, convertedValue));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (mpvs != <span class="keyword">null</span> &amp;amp;&amp;amp; !resolveNecessary) &#123;</div><div class="line">			mpvs.setConverted();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Set our (possibly massaged) deep copy.</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			bw.setPropertyValues(<span class="keyword">new</span> MutablePropertyValues(deepCopy));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">					mbd.getResourceDescription(), beanName, &amp;quot;Error setting property values&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>最后辗转反侧到了BeanWrapperImpl中的setPropertyValue方法，首先获取属性名称，这里的tokens.keys我也不知道是什么。可以看到最后使用writeMethod.invoke(this.object, value);方法设置了属性值，这里使用的java的反射思想。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></td><td class="code"><pre><div class="line">private void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException &#123;</div><div class="line">		String propertyName = tokens.canonicalName;</div><div class="line">		String actualName = tokens.actualName;</div><div class="line"></div><div class="line">		if (tokens.keys != null) &#123;</div><div class="line">			// Apply indexes and map keys: fetch value for all keys but the last one.</div><div class="line">			PropertyTokenHolder getterTokens = new PropertyTokenHolder();</div><div class="line">			getterTokens.canonicalName = tokens.canonicalName;</div><div class="line">			getterTokens.actualName = tokens.actualName;</div><div class="line">			getterTokens.keys = new String[tokens.keys.length - 1];</div><div class="line">			System.arraycopy(tokens.keys, 0, getterTokens.keys, 0, tokens.keys.length - 1);</div><div class="line">			Object propValue;</div><div class="line">			try &#123;</div><div class="line">				propValue = getPropertyValue(getterTokens);</div><div class="line">			&#125;</div><div class="line">			catch (NotReadablePropertyException ex) &#123;</div><div class="line">				throw new NotWritablePropertyException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">						&amp;quot;Cannot access indexed value in property referenced &amp;quot; +</div><div class="line">						&amp;quot;in indexed property path '&amp;quot; + propertyName + &amp;quot;'&amp;quot;, ex);</div><div class="line">			&#125;</div><div class="line">			// Set value for last key.</div><div class="line">			String key = tokens.keys[tokens.keys.length - 1];</div><div class="line">			if (propValue == null) &#123;</div><div class="line">				// null map value case</div><div class="line">				if (this.autoGrowNestedPaths) &#123;</div><div class="line">					// TODO: cleanup, this is pretty hacky</div><div class="line">					int lastKeyIndex = tokens.canonicalName.lastIndexOf('[');</div><div class="line">					getterTokens.canonicalName = tokens.canonicalName.substring(0, lastKeyIndex);</div><div class="line">					propValue = setDefaultValue(getterTokens);</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">							&amp;quot;Cannot access indexed value in property referenced &amp;quot; +</div><div class="line">							&amp;quot;in indexed property path '&amp;quot; + propertyName + &amp;quot;': returned null&amp;quot;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			if (propValue.getClass().isArray()) &#123;</div><div class="line">				PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);</div><div class="line">				Class&amp;lt;?&amp;gt; requiredType = propValue.getClass().getComponentType();</div><div class="line">				int arrayIndex = Integer.parseInt(key);</div><div class="line">				Object oldValue = null;</div><div class="line">				try &#123;</div><div class="line">					if (isExtractOldValueForEditor() &amp;amp;&amp;amp; arrayIndex &amp;lt; Array.getLength(propValue)) &#123;</div><div class="line">						oldValue = Array.get(propValue, arrayIndex);</div><div class="line">					&#125;</div><div class="line">					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(),</div><div class="line">							requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));</div><div class="line">					Array.set(propValue, arrayIndex, convertedValue);</div><div class="line">				&#125;</div><div class="line">				catch (IndexOutOfBoundsException ex) &#123;</div><div class="line">					throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">							&amp;quot;Invalid array index in property path '&amp;quot; + propertyName + &amp;quot;'&amp;quot;, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			else if (propValue instanceof List) &#123;</div><div class="line">				PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);</div><div class="line">				Class&amp;lt;?&amp;gt; requiredType = GenericCollectionTypeResolver.getCollectionReturnType(</div><div class="line">						pd.getReadMethod(), tokens.keys.length);</div><div class="line">				List&amp;lt;Object&amp;gt; list = (List&amp;lt;Object&amp;gt;) propValue;</div><div class="line">				int index = Integer.parseInt(key);</div><div class="line">				Object oldValue = null;</div><div class="line">				if (isExtractOldValueForEditor() &amp;amp;&amp;amp; index &amp;lt; list.size()) &#123;</div><div class="line">					oldValue = list.get(index);</div><div class="line">				&#125;</div><div class="line">				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(),</div><div class="line">						requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));</div><div class="line">				int size = list.size();</div><div class="line">				if (index &amp;gt;= size &amp;amp;&amp;amp; index &amp;lt; this.autoGrowCollectionLimit) &#123;</div><div class="line">					for (int i = size; i &amp;lt; index; i++) &#123;</div><div class="line">						try &#123;</div><div class="line">							list.add(null);</div><div class="line">						&#125;</div><div class="line">						catch (NullPointerException ex) &#123;</div><div class="line">							throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">									&amp;quot;Cannot set element with index &amp;quot; + index + &amp;quot; in List of size &amp;quot; +</div><div class="line">									size + &amp;quot;, accessed using property path '&amp;quot; + propertyName +</div><div class="line">									&amp;quot;': List does not support filling up gaps with null elements&amp;quot;);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					list.add(convertedValue);</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					try &#123;</div><div class="line">						list.set(index, convertedValue);</div><div class="line">					&#125;</div><div class="line">					catch (IndexOutOfBoundsException ex) &#123;</div><div class="line">						throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">								&amp;quot;Invalid list index in property path '&amp;quot; + propertyName + &amp;quot;'&amp;quot;, ex);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			else if (propValue instanceof Map) &#123;</div><div class="line">				PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);</div><div class="line">				Class&amp;lt;?&amp;gt; mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(</div><div class="line">						pd.getReadMethod(), tokens.keys.length);</div><div class="line">				Class&amp;lt;?&amp;gt; mapValueType = GenericCollectionTypeResolver.getMapValueReturnType(</div><div class="line">						pd.getReadMethod(), tokens.keys.length);</div><div class="line">				Map&amp;lt;Object, Object&amp;gt; map = (Map&amp;lt;Object, Object&amp;gt;) propValue;</div><div class="line">				// IMPORTANT: Do not pass full property name in here - property editors</div><div class="line">				// must not kick in for map keys but rather only for map values.</div><div class="line">				TypeDescriptor typeDescriptor = (mapKeyType != null ?</div><div class="line">						TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));</div><div class="line">				Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);</div><div class="line">				Object oldValue = null;</div><div class="line">				if (isExtractOldValueForEditor()) &#123;</div><div class="line">					oldValue = map.get(convertedMapKey);</div><div class="line">				&#125;</div><div class="line">				// Pass full property name and old value in here, since we want full</div><div class="line">				// conversion ability for map values.</div><div class="line">				Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(),</div><div class="line">						mapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));</div><div class="line">				map.put(convertedMapKey, convertedMapValue);</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,</div><div class="line">						&amp;quot;Property referenced in indexed property path '&amp;quot; + propertyName +</div><div class="line">						&amp;quot;' is neither an array nor a List nor a Map; returned value was [&amp;quot; + pv.getValue() + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		else &#123;</div><div class="line">			PropertyDescriptor pd = pv.resolvedDescriptor;</div><div class="line">			if (pd == null || !pd.getWriteMethod().getDeclaringClass().isInstance(this.object)) &#123;</div><div class="line">				pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);</div><div class="line">				if (pd == null || pd.getWriteMethod() == null) &#123;</div><div class="line">					if (pv.isOptional()) &#123;</div><div class="line">						logger.debug(&amp;quot;Ignoring optional value for property '&amp;quot; + actualName +</div><div class="line">								&amp;quot;' - property not found on bean class [&amp;quot; + getRootClass().getName() + &amp;quot;]&amp;quot;);</div><div class="line">						return;</div><div class="line">					&#125;</div><div class="line">					else &#123;</div><div class="line">						PropertyMatches matches = PropertyMatches.forProperty(propertyName, getRootClass());</div><div class="line">						throw new NotWritablePropertyException(</div><div class="line">								getRootClass(), this.nestedPath + propertyName,</div><div class="line">								matches.buildErrorMessage(), matches.getPossibleMatches());</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				pv.getOriginalPropertyValue().resolvedDescriptor = pd;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			Object oldValue = null;</div><div class="line">			try &#123;</div><div class="line">				Object originalValue = pv.getValue();</div><div class="line">				Object valueToApply = originalValue;</div><div class="line">				if (!Boolean.FALSE.equals(pv.conversionNecessary)) &#123;</div><div class="line">					if (pv.isConverted()) &#123;</div><div class="line">						valueToApply = pv.getConvertedValue();</div><div class="line">					&#125;</div><div class="line">					else &#123;</div><div class="line">						if (isExtractOldValueForEditor() &amp;amp;&amp;amp; pd.getReadMethod() != null) &#123;</div><div class="line">							final Method readMethod = pd.getReadMethod();</div><div class="line">							if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers()) &amp;amp;&amp;amp;</div><div class="line">									!readMethod.isAccessible()) &#123;</div><div class="line">								if (System.getSecurityManager()!= null) &#123;</div><div class="line">									AccessController.doPrivileged(new PrivilegedAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">										public Object run() &#123;</div><div class="line">											readMethod.setAccessible(true);</div><div class="line">											return null;</div><div class="line">										&#125;</div><div class="line">									&#125;);</div><div class="line">								&#125;</div><div class="line">								else &#123;</div><div class="line">									readMethod.setAccessible(true);</div><div class="line">								&#125;</div><div class="line">							&#125;</div><div class="line">							try &#123;</div><div class="line">								if (System.getSecurityManager() != null) &#123;</div><div class="line">									oldValue = AccessController.doPrivileged(new PrivilegedExceptionAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">										public Object run() throws Exception &#123;</div><div class="line">											return readMethod.invoke(object);</div><div class="line">										&#125;</div><div class="line">									&#125;, acc);</div><div class="line">								&#125;</div><div class="line">								else &#123;</div><div class="line">									oldValue = readMethod.invoke(object);</div><div class="line">								&#125;</div><div class="line">							&#125;</div><div class="line">							catch (Exception ex) &#123;</div><div class="line">								if (ex instanceof PrivilegedActionException) &#123;</div><div class="line">									ex = ((PrivilegedActionException) ex).getException();</div><div class="line">								&#125;</div><div class="line">								if (logger.isDebugEnabled()) &#123;</div><div class="line">									logger.debug(&amp;quot;Could not read previous value of property '&amp;quot; +</div><div class="line">											this.nestedPath + propertyName + &amp;quot;'&amp;quot;, ex);</div><div class="line">								&#125;</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">						valueToApply = convertForProperty(</div><div class="line">								propertyName, oldValue, originalValue, new TypeDescriptor(property(pd)));</div><div class="line">					&#125;</div><div class="line">					pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue);</div><div class="line">				&#125;</div><div class="line">				final Method writeMethod = (pd instanceof GenericTypeAwarePropertyDescriptor ?</div><div class="line">						((GenericTypeAwarePropertyDescriptor) pd).getWriteMethodForActualAccess() :</div><div class="line">						pd.getWriteMethod());</div><div class="line">				if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers()) &amp;amp;&amp;amp; !writeMethod.isAccessible()) &#123;</div><div class="line">					if (System.getSecurityManager()!= null) &#123;</div><div class="line">						AccessController.doPrivileged(new PrivilegedAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">							public Object run() &#123;</div><div class="line">								writeMethod.setAccessible(true);</div><div class="line">								return null;</div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line">					&#125;</div><div class="line">					else &#123;</div><div class="line">						writeMethod.setAccessible(true);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				final Object value = valueToApply;</div><div class="line">				if (System.getSecurityManager() != null) &#123;</div><div class="line">					try &#123;</div><div class="line">						AccessController.doPrivileged(new PrivilegedExceptionAction&amp;lt;Object&amp;gt;() &#123;</div><div class="line">							public Object run() throws Exception &#123;</div><div class="line">								writeMethod.invoke(object, value);</div><div class="line">								return null;</div><div class="line">							&#125;</div><div class="line">						&#125;, acc);</div><div class="line">					&#125;</div><div class="line">					catch (PrivilegedActionException ex) &#123;</div><div class="line">						throw ex.getException();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					writeMethod.invoke(this.object, value);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			catch (TypeMismatchException ex) &#123;</div><div class="line">				throw ex;</div><div class="line">			&#125;</div><div class="line">			catch (InvocationTargetException ex) &#123;</div><div class="line">				PropertyChangeEvent propertyChangeEvent =</div><div class="line">						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());</div><div class="line">				if (ex.getTargetException() instanceof ClassCastException) &#123;</div><div class="line">					throw new TypeMismatchException(propertyChangeEvent, pd.getPropertyType(), ex.getTargetException());</div><div class="line">				&#125;</div><div class="line">				else &#123;</div><div class="line">					throw new MethodInvocationException(propertyChangeEvent, ex.getTargetException());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			catch (Exception ex) &#123;</div><div class="line">				PropertyChangeEvent pce =</div><div class="line">						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());</div><div class="line">				throw new MethodInvocationException(pce, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>由于Spring代码过于庞大，工作忙，时间有限，只能进行打开的代码流程分析，希望以后会有时间进行更加详细的分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（五）]]></title>
      <url>http://yoursite.com/2015/05/12/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上篇日志<a href="http://www.bugpointer.com/archives/511.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（四）</a>继续。</p>
<p>还记得refresh()函数嘛，记得也模糊了吧，贴出来好了。其中的第二步 ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()已经用大篇幅描述了基本流程。接着看以下几步。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">            <span class="comment">// 为了刷新准备上下文</span></div><div class="line">            prepareRefresh();</div><div class="line"></div><div class="line">            <span class="comment">// 利用子类完成内部bean factory的刷新</span></div><div class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">            <span class="comment">// 使用本地上下文准备bean factory</span></div><div class="line">            prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 允许在上下文子类中完成bean factory后处理</span></div><div class="line">                postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 调用上下文注册的bean factory处理器</span></div><div class="line">                invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 注册拦截bean创建的bean处理器</span></div><div class="line">                registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 初始化上下文中消息源</span></div><div class="line">                initMessageSource();</div><div class="line"></div><div class="line">                <span class="comment">// 初始化上下文中的事件多播</span></div><div class="line">                initApplicationEventMulticaster();</div><div class="line"></div><div class="line">                <span class="comment">// 在特定上下文子类中初始化其他特殊bean</span></div><div class="line">                onRefresh();</div><div class="line"></div><div class="line">                <span class="comment">// 检查监听器bean并注册 </span></div><div class="line">                registerListeners();</div><div class="line"></div><div class="line">                <span class="comment">// 实例化所有剩余(non-lazy-init)单例</span></div><div class="line">                finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 发布相应的事件</span></div><div class="line">                finishRefresh();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">                logger.warn(&amp;quot;Exception encountered during context initialization - cancelling refresh attempt&amp;quot;, ex);</div><div class="line"></div><div class="line">                <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">                destroyBeans();</div><div class="line"></div><div class="line">                <span class="comment">// Reset 'active' flag.</span></div><div class="line">                cancelRefresh(ex);</div><div class="line"></div><div class="line">                <span class="comment">// Propagate exception to caller.</span></div><div class="line">                <span class="keyword">throw</span> ex;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>第三步<br>展开 prepareBeanFactory(beanFactory)。有以下几步：<br>1. 使内部bean factory使用上下文类加载器等；<br>2. 使用上下文回调配置bean factory；<br>3. BeanFactory接口没有在在一个普通的工厂内注册为可解析类型；<br>4. 检测LoadTimeWeaver并准备织入；<br>5. 注册默认的环境beans。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 配置factory标准上下文特征</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// 使内部bean factory使用上下文类加载器等</span></div><div class="line">		beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">		beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver());</div><div class="line">		beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">		<span class="comment">// 使用上下文回调配置bean factory</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line"></div><div class="line">		<span class="comment">// BeanFactory接口没有在在一个普通的工厂内注册为可解析类型</span></div><div class="line">		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">		beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 检测LoadTimeWeaver并准备织入</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">			<span class="comment">// Set a temporary ClassLoader for type matching.</span></div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 注册默认的环境beans</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>第四步<br>postProcessBeanFactory(beanFactory)这一步允许子类对bean factory进行后处理，这里没有实现，不用展开。</p>
<p>第五步<br>invokeBeanFactoryPostProcessors(beanFactory)调用在上下文中作为bean注册的factory处理器。看起来比较复杂的一个方法，做了以下工作<br>1. 如果存在BeanDefinitionRegistryPostProcessors实例，则进行调用；<br>2. 寻找BeanFactoryPostProcessors实例，区分PriorityOrdered、Ordered和其他；<br>3. 调用继承PriorityOrdered的BeanFactoryPostProcessors实例；<br>4. 调用继承Ordered的BeanFactoryPostProcessors实例；<br>5. 调用其他BeanFactoryPostProcessors实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 调用在上下文中作为bean注册的factory处理器,</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></div><div class="line">		Set&amp;lt;String&amp;gt; processedBeans = <span class="keyword">new</span> HashSet&amp;lt;String&amp;gt;();</div><div class="line">		<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</div><div class="line">			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</div><div class="line">			List&amp;lt;BeanFactoryPostProcessor&amp;gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&amp;lt;BeanFactoryPostProcessor&amp;gt;();</div><div class="line">			List&amp;lt;BeanDefinitionRegistryPostProcessor&amp;gt; registryPostProcessors =</div><div class="line">					<span class="keyword">new</span> LinkedList&amp;lt;BeanDefinitionRegistryPostProcessor&amp;gt;();</div><div class="line">			<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : getBeanFactoryPostProcessors()) &#123;</div><div class="line">				<span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</div><div class="line">					BeanDefinitionRegistryPostProcessor registryPostProcessor =</div><div class="line">							(BeanDefinitionRegistryPostProcessor) postProcessor;</div><div class="line">					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">					registryPostProcessors.add(registryPostProcessor);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					regularPostProcessors.add(postProcessor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			Map&amp;lt;String, BeanDefinitionRegistryPostProcessor&amp;gt; beanMap =</div><div class="line">					beanFactory.getBeansOfType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">			List&amp;lt;BeanDefinitionRegistryPostProcessor&amp;gt; registryPostProcessorBeans =</div><div class="line">					<span class="keyword">new</span> ArrayList&amp;lt;BeanDefinitionRegistryPostProcessor&amp;gt;(beanMap.values());</div><div class="line">			OrderComparator.sort(registryPostProcessorBeans);</div><div class="line">			<span class="keyword">for</span> (BeanDefinitionRegistryPostProcessor postProcessor : registryPostProcessorBeans) &#123;</div><div class="line">				postProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">			&#125;</div><div class="line">			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);</div><div class="line">			invokeBeanFactoryPostProcessors(registryPostProcessorBeans, beanFactory);</div><div class="line">			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</div><div class="line">			processedBeans.addAll(beanMap.keySet());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Invoke factory processors registered with the context instance.</span></div><div class="line">			invokeBeanFactoryPostProcessors(getBeanFactoryPostProcessors(), beanFactory);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></div><div class="line">		<span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></div><div class="line">		String[] postProcessorNames =</div><div class="line">				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&amp;lt;BeanFactoryPostProcessor&amp;gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanFactoryPostProcessor&amp;gt;();</div><div class="line">		List&amp;lt;String&amp;gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">		List&amp;lt;String&amp;gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</div><div class="line">				<span class="comment">// skip - already processed in first phase above</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></div><div class="line">		List&amp;lt;BeanFactoryPostProcessor&amp;gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanFactoryPostProcessor&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</div><div class="line">			orderedPostProcessors.add(getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></div><div class="line">		List&amp;lt;BeanFactoryPostProcessor&amp;gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanFactoryPostProcessor&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			nonOrderedPostProcessors.add(getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第六步<br>registerBeanPostProcessors(beanFactory)注册拦截bean创建的处理器。这一步的步骤与上一部类似，如下，<br>1. 在BeanPostProcessor实例化的过程中有bean创建，则注册BeanPostProcessorChecker，该类完成对info信息的日志写入；<br>2. 寻找BeanPostProcessors实例，区分PriorityOrdered、Ordered和其他；<br>3. 注册继承PriorityOrdered的BeanPostProcessors实例；<br>4. 注册继承Ordered的BeanPostProcessors实例；<br>5. 注册其他合格的BeanPostProcessors实例。<br>6. 重新注册其他内部的BeanPostProcessors实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Instantiate and invoke all registered BeanPostProcessor beans,</div><div class="line">	 * respecting explicit order if given.</div><div class="line">	 * &amp;lt;p&amp;gt;Must be called before any instantiation of application beans.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></div><div class="line">		<span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></div><div class="line">		<span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></div><div class="line">		<span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&amp;lt;BeanPostProcessor&amp;gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanPostProcessor&amp;gt;();</div><div class="line">		List&amp;lt;BeanPostProcessor&amp;gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanPostProcessor&amp;gt;();</div><div class="line">		List&amp;lt;String&amp;gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">		List&amp;lt;String&amp;gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">				priorityOrderedPostProcessors.add(pp);</div><div class="line">				<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">					internalPostProcessors.add(pp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">		List&amp;lt;BeanPostProcessor&amp;gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanPostProcessor&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			orderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">		List&amp;lt;BeanPostProcessor&amp;gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&amp;lt;BeanPostProcessor&amp;gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			nonOrderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">		OrderComparator.sort(internalPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, internalPostProcessors);</div><div class="line"></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>第七步<br>initMessageSource()初始化MessageSource, 如果是null，在使用父类的。首先检查是否有MessageSource的定义，有的话，设置其父MessageSource；没有的话使用空MessageSource。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	 * 初始化MessageSource, 如果是null，在使用父类的</div><div class="line">	 */</div><div class="line">	protected void initMessageSource() &#123;</div><div class="line">		ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">		if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</div><div class="line">			this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</div><div class="line">			// Make MessageSource aware of parent MessageSource.</div><div class="line">			if (this.parent != null &amp;amp;&amp;amp; this.messageSource instanceof HierarchicalMessageSource) &#123;</div><div class="line">				HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource;</div><div class="line">				if (hms.getParentMessageSource() == null) &#123;</div><div class="line">					// Only set parent context as parent MessageSource if no parent MessageSource</div><div class="line">					// registered already.</div><div class="line">					hms.setParentMessageSource(getInternalParentMessageSource());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Using MessageSource [&amp;quot; + this.messageSource + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			// Use empty MessageSource to be able to accept getMessage calls.</div><div class="line">			DelegatingMessageSource dms = new DelegatingMessageSource();</div><div class="line">			dms.setParentMessageSource(getInternalParentMessageSource());</div><div class="line">			this.messageSource = dms;</div><div class="line">			beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Unable to locate MessageSource with name '&amp;quot; + MESSAGE_SOURCE_BEAN_NAME +</div><div class="line">						&amp;quot;': using default [&amp;quot; + this.messageSource + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第八步<br>initApplicationEventMulticaster()初始化ApplicationEventMulticaster，如果没有ApplicationEventMulticaster定义则使用SimpleApplicationEventMulticaster。首先判断是否存在ApplicationEventMulticaster的本定义，存在的话则获取该bean，否则新建一个SimpleApplicationEventMulticaster。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	 * 初始化ApplicationEventMulticaster，如果没有ApplicationEventMulticaster定义则使用SimpleApplicationEventMulticaster</div><div class="line">	 */</div><div class="line">	protected void initApplicationEventMulticaster() &#123;</div><div class="line">		ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">		if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</div><div class="line">			this.applicationEventMulticaster =</div><div class="line">					beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Using ApplicationEventMulticaster [&amp;quot; + this.applicationEventMulticaster + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);</div><div class="line">			beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);</div><div class="line">			if (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Unable to locate ApplicationEventMulticaster with name '&amp;quot; +</div><div class="line">						APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</div><div class="line">						&amp;quot;': using default [&amp;quot; + this.applicationEventMulticaster + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第九步<br>onRefresh()初始化子类中特殊的bean。这是一个可以被覆盖的添加添加上下文更新工作的模板方法，在单例对象的实例化之前初始化的特殊bean。</p>
<p>第十步<br>registerListeners()检测监听器bean并注册。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 添加实现ApplicationListener的bean作为监听器。不会影响其他可以不是bean的监听器。</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 先注册静态指定侦听器.</span></div><div class="line">		<span class="keyword">for</span> (ApplicationListener&amp;lt;?&amp;gt; listener : getApplicationListeners()) &#123;</div><div class="line">			getApplicationEventMulticaster().addApplicationListener(listener);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></div><div class="line">		<span class="comment">// uninitialized to let post-processors apply to them!</span></div><div class="line">		String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">for</span> (String lisName : listenerBeanNames) &#123;</div><div class="line">			getApplicationEventMulticaster().addApplicationListenerBean(lisName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第十一步<br>finishBeanFactoryInitialization(beanFactory)初始化所有剩余的单例。这个方法比较复杂，下回讨论。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 结束上下文bean factory的初始化,</div><div class="line">	 * 初始化所有剩余的单例.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// 这个上下文初始化转换服务。</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;amp;&amp;amp;</div><div class="line">				beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</div><div class="line">			beanFactory.setConversionService(</div><div class="line">					beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 初始化LoadTimeWeaverAware bean使得允许注册他们的转换器.</span></div><div class="line">		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</div><div class="line">			getBean(weaverAwareName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 停止使用临时类加载器进行类型匹配</span></div><div class="line">		beanFactory.setTempClassLoader(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 允许缓存所有bean定义元数据,而不期待进一步的改变</span></div><div class="line">		beanFactory.freezeConfiguration();</div><div class="line"></div><div class="line">		<span class="comment">// 实例化所有剩余(non-lazy-init)单.</span></div><div class="line">		beanFactory.preInstantiateSingletons();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第十二步<br>finishRefresh()发布相关事件。实际上在我们的demo里这里只做了默认工作，暂不详细说明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 完成上下文的刷新，调用LifecycleProcessor的onRefresh，发布ContextRefreshedEvent事件</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 初始化生命期处理器</span></div><div class="line">		initLifecycleProcessor();</div><div class="line"></div><div class="line">		<span class="comment">// 向生命周期处理器传播刷新</span></div><div class="line">		getLifecycleProcessor().onRefresh();</div><div class="line"></div><div class="line">		<span class="comment">// 发布最后的时间</span></div><div class="line">		publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">// 如果活跃，参与LiveBeansView MBean</span></div><div class="line">		LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>已经将refresh()其余的工作做了简单的分析，真的很复杂的一个框架，其中finishBeanFactoryInitialization(beanFactory)比较复杂，期待下回分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（四）]]></title>
      <url>http://yoursite.com/2015/05/11/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上篇日志<a href="http://www.bugpointer.com/archives/508.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（三）</a>继续。</p>
<p>第一步<br>展开loadBeanDefinitions(resources)。这个代码比较简单，是对每一个资源进行加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">	Assert.notNull(resources, &amp;quot;Resource array must not be <span class="keyword">null</span>&amp;quot;);</div><div class="line">	<span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (Resource resource : resources) &#123;</div><div class="line">		counter += loadBeanDefinitions(resource);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> counter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>展开loadBeanDefinitions(resource)。这一步为从特定的XML文件中加载bean factory，使用EncodedResource包装传来的resource，然后进一步加载。EncodedResource结合特定编码的资源描述符或特定字符集用于阅读资源，这里的资源描述符和特定字符集都为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 从特定的XML文件中加载bean factory</div><div class="line">	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException &#123;</div><div class="line">		return loadBeanDefinitions(new EncodedResource(resource));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第二步<br>展开 loadBeanDefinitions(new EncodedResource(resource));。这一步从encodedResource获取读入流，然后设置编码，最后通过doLoadBeanDefinitions(inputSource, encodedResource.getResource())进一步解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 从特定的XML文件中加载bean factory</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">		Assert.notNull(encodedResource, &amp;quot;EncodedResource must not be <span class="keyword">null</span>&amp;quot;);</div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(&amp;quot;Loading XML bean definitions from &amp;quot; + encodedResource.getResource());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Set&amp;lt;EncodedResource&amp;gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</div><div class="line">		<span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</div><div class="line">			currentResources = <span class="keyword">new</span> HashSet&amp;lt;EncodedResource&amp;gt;(<span class="number">4</span>);</div><div class="line">			<span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">					&amp;quot;Detected cyclic loading of &amp;quot; + encodedResource + &amp;quot; - check your <span class="keyword">import</span> definitions!&amp;quot;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InputStream inputStream = encodedResource.getResource().getInputStream();</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</div><div class="line">				<span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</div><div class="line">					inputSource.setEncoding(encodedResource.getEncoding());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				inputStream.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">					&amp;quot;IOException parsing XML document from &amp;quot; + encodedResource.getResource(), ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			currentResources.remove(encodedResource);</div><div class="line">			<span class="keyword">if</span> (currentResources.isEmpty()) &#123;</div><div class="line">				<span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>第三步<br>展开doLoadBeanDefinitions(inputSource, encodedResource.getResource())。这一步初始化Document实例，然后通过registerBeanDefinitions(doc, resource)注册bean定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 实际的从特定的XML文件中加载bean factory</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></div><div class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> validationMode = getValidationModeForResource(resource);</div><div class="line">			Document doc = <span class="keyword">this</span>.documentLoader.loadDocument(</div><div class="line">					inputSource, getEntityResolver(), <span class="keyword">this</span>.errorHandler, validationMode, isNamespaceAware());</div><div class="line">			<span class="keyword">return</span> registerBeanDefinitions(doc, resource);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (SAXParseException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">					&amp;quot;Line &amp;quot; + ex.getLineNumber() + &amp;quot; in XML document from &amp;quot; + resource + &amp;quot; is invalid&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (SAXException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">					&amp;quot;XML document from &amp;quot; + resource + &amp;quot; is invalid&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">					&amp;quot;Parser configuration exception parsing XML from &amp;quot; + resource, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">					&amp;quot;IOException parsing XML document from &amp;quot; + resource, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">					&amp;quot;Unexpected exception parsing XML document from &amp;quot; + resource, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第四步<br>展开registerBeanDefinitions(doc, resource)。这一步比较好理解，直接看documentReader.registerBeanDefinitions(doc, createReaderContext(resource))。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用DOM document注册bean定义.</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(&amp;quot;deprecation&amp;quot;)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">		BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</div><div class="line">		documentReader.setEnvironment(getEnvironment());</div><div class="line">		<span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</div><div class="line">		documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</div><div class="line">		<span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第五步<br>展开documentReader.registerBeanDefinitions(doc, createReaderContext(resource))。还是比较简单，哎，看doRegisterBeanDefinitions(root)这一步吧。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用&amp;quot;spring-beans&amp;quot; XSD 或者 DTD 解析bean定义</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.readerContext = readerContext;</div><div class="line">		logger.debug(&amp;quot;Loading bean definitions&amp;quot;);</div><div class="line">		Element root = doc.getDocumentElement();</div><div class="line">		doRegisterBeanDefinitions(root);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第六步<br>展开doRegisterBeanDefinitions(root)。这一步使用Doc里的root元素注册每一个bean定义。使用createDelegate的原因是任何嵌套的&lt; bean&gt;元素将导致该方法递归。为了传播和保存<bean> default-*属性正确,跟踪当前的(parent)delegate,这可能是null。为了后退创建一个引用到父delegate新的(child)delegate,最终重置delegate改回到原来（parent）引用。这种行为模拟一堆delegate，并不需要专门得类完成。最后通过预处理xml、解析bean定义和后处理xml完成注册bean定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Register each bean definition within the given root &#123;<span class="doctag">@code</span> &amp;lt;beans/&amp;gt;&#125; element.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</div><div class="line">		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</div><div class="line">					profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">			<span class="keyword">if</span> (!getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</div><div class="line">		<span class="keyword">this</span>.delegate = createDelegate(<span class="keyword">this</span>.readerContext, root, parent);</div><div class="line"></div><div class="line">		preProcessXml(root);</div><div class="line">		parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</div><div class="line">		postProcessXml(root);</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.delegate = parent;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></bean></p>
<p>第七步<br>展开parseBeanDefinitions(root, this.delegate)。这一步从文档的根元素解析文档。delegate.isDefaultNamespace(ele)这一步判断ele是不是默认命名域，这里的默认命名域为”<a href="http://www.springframework.org/schema/beans&quot;。如果ele是默认命名域则解析ele，即parseDefaultElement(ele" target="_blank" rel="external">http://www.springframework.org/schema/beans&quot;。如果ele是默认命名域则解析ele，即parseDefaultElement(ele</a>, delegate)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 从文档的根元素解析文档</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</div><div class="line">			NodeList nl = root.getChildNodes();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; nl.getLength(); i++) &#123;</div><div class="line">				Node node = nl.item(i);</div><div class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</div><div class="line">					Element ele = (Element) node;</div><div class="line">					<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</div><div class="line">						parseDefaultElement(ele, delegate);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						delegate.parseCustomElement(ele);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			delegate.parseCustomElement(root);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第八步<br>展开parseDefaultElement(ele, delegate)。可以看到，我们是BEAN_ELEMENT，所以走processBeanDefinition(ele, delegate);这一步。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</div><div class="line">			importBeanDefinitionResource(ele);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</div><div class="line">			processAliasRegistration(ele);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</div><div class="line">                        <span class="comment">//走这一步</span></div><div class="line">			processBeanDefinition(ele, delegate);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</div><div class="line">			<span class="comment">// recurse</span></div><div class="line">			doRegisterBeanDefinitions(ele);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第九步<br>展开processBeanDefinition(ele, delegate)。这一步首先使用bean元素定义了BeanDefinitionHolder实例bdHolder，目前不详细解析了，BeanDefinitionHolder包含BeanDefinition名和别名，可以注册为一个内部bean的占位符。然后如果需要则修饰Bean定义。最后通过BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())注册bean定义，BeanDefinitionReaderUtils类包含了bean定义阅读接口实现时有用的工具方法。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	 * 处理bean元素,解析bean定义并注册</div><div class="line">	 */ </div><div class="line">	protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</div><div class="line">		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</div><div class="line">		if (bdHolder != null) &#123;</div><div class="line">			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</div><div class="line">			try &#123;</div><div class="line">				// Register the final decorated instance.</div><div class="line">				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div><div class="line">			&#125;</div><div class="line">			catch (BeanDefinitionStoreException ex) &#123;</div><div class="line">				getReaderContext().error(&amp;quot;Failed to register bean definition with name '&amp;quot; +</div><div class="line">						bdHolder.getBeanName() + &amp;quot;'&amp;quot;, ele, ex);</div><div class="line">			&#125;</div><div class="line">			// Send registration event.</div><div class="line">			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第十步<br>展开BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())。首先获取bean名称；然后通过registry注册bean定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用最初的bean factory注册bean定义</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></div><div class="line">			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</div><div class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Register bean definition under primary name.</span></div><div class="line">		String beanName = definitionHolder.getBeanName();</div><div class="line">		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</div><div class="line"></div><div class="line">		<span class="comment">// Register aliases for bean name, if any.</span></div><div class="line">		String[] aliases = definitionHolder.getAliases();</div><div class="line">		<span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (String aliase : aliases) &#123;</div><div class="line">				registry.registerAlias(beanName, aliase);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第十一步<br>展开registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())。可以看到，这一步主要完成的工作有，bean定义校验、有旧定义是否可覆盖、添加新的bean定义。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</div><div class="line">		throws BeanDefinitionStoreException &#123;</div><div class="line"></div><div class="line">	Assert.hasText(beanName, &amp;quot;Bean name must not be empty&amp;quot;);</div><div class="line">	Assert.notNull(beanDefinition, &amp;quot;BeanDefinition must not be null&amp;quot;);</div><div class="line"></div><div class="line">	if (beanDefinition instanceof AbstractBeanDefinition) &#123;</div><div class="line">		try &#123;</div><div class="line">			((AbstractBeanDefinition) beanDefinition).validate();</div><div class="line">		&#125;</div><div class="line">		catch (BeanDefinitionValidationException ex) &#123;</div><div class="line">			throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">					&amp;quot;Validation of bean definition failed&amp;quot;, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	BeanDefinition oldBeanDefinition;</div><div class="line"></div><div class="line">	synchronized (this.beanDefinitionMap) &#123;</div><div class="line">		oldBeanDefinition = this.beanDefinitionMap.get(beanName);</div><div class="line">		if (oldBeanDefinition != null) &#123;</div><div class="line">			if (!this.allowBeanDefinitionOverriding) &#123;</div><div class="line">				throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">						&amp;quot;Cannot register bean definition [&amp;quot; + beanDefinition + &amp;quot;] for bean '&amp;quot; + beanName +</div><div class="line">						&amp;quot;': There is already [&amp;quot; + oldBeanDefinition + &amp;quot;] bound.&amp;quot;);</div><div class="line">			&#125;</div><div class="line">			else &#123;</div><div class="line">				if (this.logger.isInfoEnabled()) &#123;</div><div class="line">					this.logger.info(&amp;quot;Overriding bean definition for bean '&amp;quot; + beanName +</div><div class="line">							&amp;quot;': replacing [&amp;quot; + oldBeanDefinition + &amp;quot;] with [&amp;quot; + beanDefinition + &amp;quot;]&amp;quot;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			this.beanDefinitionNames.add(beanName);</div><div class="line">			this.frozenBeanDefinitionNames = null;</div><div class="line">		&#125;</div><div class="line">		this.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (oldBeanDefinition != null || containsSingleton(beanName)) &#123;</div><div class="line">		resetBeanDefinition(beanName);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此为止bean定义的加载已经完成。但是由于代码过于复杂，没有分析很多细节以及异常，仅仅是将主要的一条线理了出来，还是远远不够的。有机会在进行深入解析。接下来会继续分析我们的demo运行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（三）]]></title>
      <url>http://yoursite.com/2015/05/11/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上篇日志<a href="http://www.bugpointer.com/archives/505.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（二）</a>继续。</p>
<p>上篇提到了主要的初始化函数refresh，函数源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">            <span class="comment">// 为了刷新准备上下文</span></div><div class="line">            prepareRefresh();</div><div class="line"></div><div class="line">            <span class="comment">// 利用子类完成内部bean factory的刷新</span></div><div class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">            <span class="comment">// 使用本地上下文准备bean factory</span></div><div class="line">            prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 允许在上下文子类中完成bean factory后处理</span></div><div class="line">                postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 调用上下文注册的bean factory处理器</span></div><div class="line">                invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 注册拦截bean创建的bean处理器</span></div><div class="line">                registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 初始化上下文中消息源</span></div><div class="line">                initMessageSource();</div><div class="line"></div><div class="line">                <span class="comment">// 初始化上下文中的事件多播</span></div><div class="line">                initApplicationEventMulticaster();</div><div class="line"></div><div class="line">                <span class="comment">// 在特定上下文子类中初始化其他特殊bean</span></div><div class="line">                onRefresh();</div><div class="line"></div><div class="line">                <span class="comment">// 检查监听器bean并注册 </span></div><div class="line">                registerListeners();</div><div class="line"></div><div class="line">                <span class="comment">// 实例化所有剩余(non-lazy-init)单例</span></div><div class="line">                finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">                <span class="comment">// 发布相应的事件</span></div><div class="line">                finishRefresh();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">                logger.warn(&amp;quot;Exception encountered during context initialization - cancelling refresh attempt&amp;quot;, ex);</div><div class="line"></div><div class="line">                <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">                destroyBeans();</div><div class="line"></div><div class="line">                <span class="comment">// Reset 'active' flag.</span></div><div class="line">                cancelRefresh(ex);</div><div class="line"></div><div class="line">                <span class="comment">// Propagate exception to caller.</span></div><div class="line">                <span class="keyword">throw</span> ex;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>先把prepareRefresh的代码贴出来。这段代码主要功能是初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Prepare this context for refreshing, setting its startup date and</div><div class="line">	 * active flag as well as performing any initialization of property sources.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.startupDate = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.activeMonitor) &#123;</div><div class="line">			<span class="keyword">this</span>.active = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(&amp;quot;Refreshing &amp;quot; + <span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Initialize any placeholder property sources in the context environment</span></div><div class="line">		initPropertySources();</div><div class="line"></div><div class="line">		<span class="comment">// Validate that all properties marked as required are resolvable</span></div><div class="line">		<span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></div><div class="line">		getEnvironment().validateRequiredProperties();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这块基本是数据准备功能， 目前这一块没有实际用到。<br>接着我们看比较重要的一步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用子类完成内部bean factory的刷新</span></div><div class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div></pre></td></tr></table></figure></p>
<p>先展开obtainFreshBeanFactory函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Tell the subclass to refresh the internal bean factory.</div><div class="line">         * 使用子类完成内部bean factory</div><div class="line">	 * <span class="doctag">@return</span> the fresh BeanFactory instance</div><div class="line">	 * <span class="doctag">@see</span> #refreshBeanFactory()</div><div class="line">	 * <span class="doctag">@see</span> #getBeanFactory()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">		refreshBeanFactory();</div><div class="line">		ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(&amp;quot;Bean factory <span class="keyword">for</span> &amp;quot; + getDisplayName() + &amp;quot;: &amp;quot; + beanFactory);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> beanFactory;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>我们主要看refreshBeanFactory()这一步,分为以下步骤：<br>1. 如果有bean factory，删除之；<br>2. 新建一个bean factory；<br>3. 设置一个序列化Id；<br>4. 使用的上下文自定义内部bean factory；<br>5. 加载bean 定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * This implementation performs an actual refresh of this context's underlying</div><div class="line">	 * bean factory, shutting down the previous bean factory (if any) and</div><div class="line">	 * initializing a fresh bean factory for the next phase of the context's lifecycle.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (hasBeanFactory()) &#123;</div><div class="line">			destroyBeans();</div><div class="line">			closeBeanFactory();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			DefaultListableBeanFactory beanFactory = createBeanFactory();</div><div class="line">			beanFactory.setSerializationId(getId());</div><div class="line">			customizeBeanFactory(beanFactory);</div><div class="line">			loadBeanDefinitions(beanFactory);</div><div class="line">			<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</div><div class="line">				<span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(&amp;quot;I/O error parsing bean definition source <span class="keyword">for</span> &amp;quot; + getDisplayName(), ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>现在看一下第5步，加载bean定义，其实现如下。可以看到，这一步将beanFactory传入XmlBeanDefinitionReader的构造函数，新建一个XmlBeanDefinitionReader对象，然后对其环境进行设置。其中Environment表示当前应用程序运行的环境接口；ResourceLoader表示加载资源策略接口；EntityResolver表示实体解析接口。最后初始化XmlBeanDefinitionReader对象，然后使用这个对象加载bean 定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Loads the bean definitions via an XmlBeanDefinitionReader.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</div><div class="line">	 * <span class="doctag">@see</span> #initBeanDefinitionReader</div><div class="line">	 * <span class="doctag">@see</span> #loadBeanDefinitions</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">		<span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></div><div class="line">		XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Configure the bean definition reader with this context's</span></div><div class="line">		<span class="comment">// resource loading environment.</span></div><div class="line">		beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</div><div class="line">		beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</div><div class="line">		beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></div><div class="line">		<span class="comment">// then proceed with actually loading the bean definitions.</span></div><div class="line">		initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">		loadBeanDefinitions(beanDefinitionReader);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>再看下一步，这个方法比较好理解，就是使用已有的配置资源或者配置文件进行加载，当前没有配置资源，所以只使用配置文件进行加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用XmlBeanDefinitionReader实例加载bean定义</div><div class="line">	 * <span class="doctag">@param</span> reader the XmlBeanDefinitionReader to use</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">		Resource[] configResources = getConfigResources();</div><div class="line">		<span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</div><div class="line">			reader.loadBeanDefinitions(configResources);</div><div class="line">		&#125;</div><div class="line">		String[] configLocations = getConfigLocations();</div><div class="line">		<span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</div><div class="line">			reader.loadBeanDefinitions(configLocations);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>来看reader.loadBeanDefinitions(configLocations);这一步。这一步看起来很复杂，但最主要的还是loadBeanDefinitions(resources)这一步。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用配置文件加载bean定义	</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, Set&amp;lt;Resource&amp;gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">		ResourceLoader resourceLoader = getResourceLoader();</div><div class="line">		<span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">					&amp;quot;Cannot <span class="keyword">import</span> bean definitions from location [&amp;quot; + location + &amp;quot;]: no ResourceLoader available&amp;quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</div><div class="line">			<span class="comment">// Resource pattern matching available.</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</div><div class="line">				<span class="keyword">int</span> loadCount = loadBeanDefinitions(resources);</div><div class="line">				<span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">for</span> (Resource resource : resources) &#123;</div><div class="line">						actualResources.add(resource);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(&amp;quot;Loaded &amp;quot; + loadCount + &amp;quot; bean definitions from location pattern [&amp;quot; + location + &amp;quot;]&amp;quot;);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> loadCount;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">						&amp;quot;Could not resolve bean definition resource pattern [&amp;quot; + location + &amp;quot;]&amp;quot;, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Can only load single resources by absolute URL.</span></div><div class="line">			Resource resource = resourceLoader.getResource(location);</div><div class="line">			<span class="keyword">int</span> loadCount = loadBeanDefinitions(resource);</div><div class="line">			<span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</div><div class="line">				actualResources.add(resource);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(&amp;quot;Loaded &amp;quot; + loadCount + &amp;quot; bean definitions from location [&amp;quot; + location + &amp;quot;]&amp;quot;);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> loadCount;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>下一回展开loadBeanDefinitions(resources)。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（二）]]></title>
      <url>http://yoursite.com/2015/05/09/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p>接上一篇文章 <a href="http://www.bugpointer.com/archives/491.html" target="_blank" rel="external">Spring 使用简单Demo进行源码调试（一）</a></p>
<p>在运行到下面语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(&amp;quot;bean.xml&amp;quot;);<span class="comment">// 读取bean.xml中的内容</span></div></pre></td></tr></table></figure></p>
<p>该构造函数首先进入下面ClassPathXmlApplicationContext类中这段代码。代码中configLocations为我们的配置文件，及[bean.xml]；refresh表示是否刷新，这里为true，表示刷新配置；parent表示上级上下文，这里为null表示没有上级上下文。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用上一级上下文创建新的ClassPathXmlApplicationContext,</div><div class="line">	 * 从XML中加载定义</div><div class="line">	 * <span class="doctag">@param</span> configLocations 资源地址列表</div><div class="line">	 * <span class="doctag">@param</span> refresh 是否刷新上下文,</div><div class="line">	 * <span class="doctag">@param</span> parent 上一级上下文</div><div class="line">	 */</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></div><div class="line">			<span class="keyword">throws</span> BeansException &#123;			</div><div class="line">		<span class="comment">//parent = null;</span></div><div class="line">		<span class="comment">//refresh= true;</span></div><div class="line">		<span class="comment">//configLocations=[bean.xml];</span></div><div class="line">		<span class="keyword">super</span>(parent);</div><div class="line">		setConfigLocations(configLocations);</div><div class="line">		<span class="keyword">if</span> (refresh) &#123;</div><div class="line">			refresh();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>下面是抽象函数AbstractRefreshableConfigApplicationContext中setConfigLocations方法。该方法为设置配置文件，及将[bean.xml]设置为本地的this.configLocations属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 为应用的上下文设置配置地址.</div><div class="line">	 * 如果没有设置,会使用默认的配置</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(String[] locations)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</div><div class="line">			Assert.noNullElements(locations, &amp;quot;Config locations must not be <span class="keyword">null</span>&amp;quot;);</div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; locations.length; i++) &#123;</div><div class="line">				<span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>接着是refresh函数，该函数在AbstractApplicationContext类中，代码如下。可以看到该函数一共分为以下几步：<br>1. 为了刷新准备上下文；<br>2. 利用子类完成内部bean factory的刷新；<br>3. 使用本地上下文准备bean factory；<br>4. 允许在上下文子类中完成bean factory后处理；<br>5. 调用上下文注册的bean factory处理器；<br>6. 注册拦截bean创建的bean处理器；<br>7. 初始化上下文中消息源；<br>8. 初始化上下文中的事件多播；<br>9. 在特定上下文子类中初始化其他特殊bean；<br>10. 检查监听器bean并注册；<br>11. 实例化所有剩余(non-lazy-init)单例；<br>12. 发布相应的事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">// 为了刷新准备上下文</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">// 利用子类完成内部bean factory的刷新</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// 使用本地上下文准备bean factory</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 允许在上下文子类中完成bean factory后处理</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 调用上下文注册的bean factory处理器</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 注册拦截bean创建的bean处理器</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 初始化上下文中消息源</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// 初始化上下文中的事件多播</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// 在特定上下文子类中初始化其他特殊bean</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// 检查监听器bean并注册 </span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">// 实例化所有剩余(non-lazy-init)单例</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 发布相应的事件</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				logger.warn(&amp;quot;Exception encountered during context initialization - cancelling refresh attempt&amp;quot;, ex);</div><div class="line"></div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这里的每一步可能都很繁琐，鉴于我也是第一次看这些代码，还是慢慢进行分析吧，先到这里。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring 使用简单Demo进行源码调试（一）]]></title>
      <url>http://yoursite.com/2015/05/08/Spring%20%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95Demo%E8%BF%9B%E8%A1%8C%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>手码不易，转载请注明：<a href="http://www.bugpointer.com/" target="_blank" rel="external">BUG指南</a></p>
<p><strong>第一步</strong><br>在源码调试之前，需要将spring源码进行编译，这里选择的是3.2.x版本，这个版本在导入eclipse都会出现bug，但是不影响目前的调试。</p>
<p><strong>第二步</strong><br>将编译后的源码导入eclispe，如下图所示：<br><img src="/images/spring源码导入eclipse-242x300.png" alt="spring源码导入eclipse"><br>可以看到有两个工程报错，分别是spring—orm-hibernate4和spring-webmvc-tiles3，暂且不去管它，因为目前不会影响到后续的源码调试。</p>
<p><strong>第三步</strong><br>新建一个工程，Test，然后右键该工程，选择Build path -》 Configure Build Path…，然后把当前所有的没有报错的工程加入到Projects里，如下图所示：<br><img src="/images/加入未报错工程-300x234.png" alt="加入未报错工程"></p>
<p>新建一个pojo类，Animal，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(&amp;quot;name:&amp;quot; + getName() + &amp;quot; age:&amp;quot; + getAge());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">```java</div><div class="line"></div><div class="line">新建一个Main类，代码如下：</div><div class="line">```java</div><div class="line"><span class="keyword">package</span> com.test.bean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(&amp;quot;bean.xml&amp;quot;);<span class="comment">// 读取bean.xml中的内容</span></div><div class="line">		Animal a = ctx.getBean(&amp;quot;animal&amp;quot;, Animal.class);<span class="comment">// 创建bean的引用对象</span></div><div class="line">		a.info();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建一个bean.xml，代码如下：<br><code>xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&amp;quot;&amp;gt;
    &amp;lt;bean id=&amp;quot;animal&amp;quot; class=&amp;quot;com.test.bean.Animal&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;name&amp;quot; value=&amp;quot;mao&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;age&amp;quot; value=&amp;quot;12&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;</code>xml</p>
<p>第四部，运行Main.java，可以看到如下运行结果：<br><img src="/images/运行结果-300x69.png" alt="运行结果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java实现文件操作]]></title>
      <url>http://yoursite.com/2015/05/04/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>1.java实现文件复制、剪切文件和删除<br>[java]<br>import java.io.File;<br>import java.io.FileInputStream;<br>import java.io.FileOutputStream;<br>import java.io.IOException;</p>
<p>/**</p>
<ul>
<li>Java实现文件复制、剪切、删除操作</li>
<li>文件指文件或文件夹</li>
<li>文件分割符统一用&quot;\&quot;<br>*/</li>
</ul>
<p>public class FileOperateDemo {</p>
<pre><code>/**
 * 复制文件或文件夹
 * @param srcPath 源文件或源文件夹的路径
 * @param destDir 目标文件所在的目录
 * @return
 */
public static boolean copyGeneralFile(String srcPath, String destDir) {
    boolean flag = false;
    File file = new File(srcPath);
    if(!file.exists()) { // 源文件或源文件夹不存在
        return false;
    }

    if(file.isFile()) {    // 文件复制
        flag = copyFile(srcPath, destDir);
    }
    else if(file.isDirectory()) { // 文件夹复制
        flag = copyDirectory(srcPath, destDir);
    }

    return flag;
}

/**
 * 默认的复制文件方法，默认会覆盖目标文件夹下的同名文件
 * @param srcPath
 *            源文件绝对路径
 * @param destDir
 *            目标文件所在目录
 * @return boolean
 */
public static boolean copyFile(String srcPath, String destDir) {
 return copyFile(srcPath, destDir, true/**overwriteExistFile*/); // 默认覆盖同名文件
}

/**
 * 默认的复制文件夹方法，默认会覆盖目标文件夹下的同名文件夹
 * @param srcPath    源文件夹路径
 * @param destPath    目标文件夹所在目录
 * @return boolean
 */
public static boolean copyDirectory(String srcPath, String destDir) {
 return copyDirectory(srcPath, destDir, true/**overwriteExistDir*/);
}

/**
 * 复制文件到目标目录
 * @param srcPath
 *            源文件绝对路径
 * @param destDir
 *            目标文件所在目录
 * @param overwriteExistFile
 *            是否覆盖目标目录下的同名文件
 * @return boolean
 */
public static boolean copyFile(String srcPath, String destDir, boolean overwriteExistFile) {
    boolean flag = false;

    File srcFile = new File(srcPath);
    if (!srcFile.exists() || !srcFile.isFile()) { // 源文件不存在
        return false;
    }

    //获取待复制文件的文件名
    String fileName = srcFile.getName();
    String destPath = destDir + File.separator +fileName;
    File destFile = new File(destPath);
    if (destFile.getAbsolutePath().equals(srcFile.getAbsolutePath())) { // 源文件路径和目标文件路径重复
        return false;
    }
    if(destFile.exists() &amp;amp;&amp;amp; !overwriteExistFile) {    // 目标目录下已有同名文件且不允许覆盖
        return false;
    }

    File destFileDir = new File(destDir);
    if(!destFileDir.exists() &amp;amp;&amp;amp; !destFileDir.mkdirs()) { // 目录不存在并且创建目录失败直接返回
     return false;
    }

    try {
        FileInputStream fis = new FileInputStream(srcPath);
        FileOutputStream fos = new FileOutputStream(destFile);
        byte[] buf = new byte[1024];
        int c;
        while ((c = fis.read(buf)) != -1) {
            fos.write(buf, 0, c);
        }
        fos.flush();
        fis.close();
        fos.close();

        flag = true;
    } catch (IOException e) {
        e.printStackTrace();
    }

    return flag;
}

/**
 * 
 * @param srcPath    源文件夹路径
 * @param destPath    目标文件夹所在目录
 * @return
 */
public static boolean copyDirectory(String srcPath, String destDir, boolean overwriteExistDir) {
    if(destDir.contains(srcPath))
       return false;
    boolean flag = false;

    File srcFile = new File(srcPath);
    if (!srcFile.exists() || !srcFile.isDirectory()) { // 源文件夹不存在
        return false;
    }

    //获得待复制的文件夹的名字，比如待复制的文件夹为&amp;quot;E:\\dir\\&amp;quot;则获取的名字为&amp;quot;dir&amp;quot;
    String dirName = srcFile.getName();

    //目标文件夹的完整路径
    String destDirPath = destDir + File.separator + dirName + File.separator;
    File destDirFile = new File(destDirPath);
    if(destDirFile.getAbsolutePath().equals(srcFile.getAbsolutePath())) {
     return false;
    }
    if(destDirFile.exists() &amp;amp;&amp;amp; destDirFile.isDirectory() &amp;amp;&amp;amp; !overwriteExistDir) {    // 目标位置有一个同名文件夹且不允许覆盖同名文件夹，则直接返回false
        return false;
    }

    if(!destDirFile.exists() &amp;amp;&amp;amp; !destDirFile.mkdirs()) {  // 如果目标目录不存在并且创建目录失败
     return false;
    }

    File[] fileList = srcFile.listFiles();    //获取源文件夹下的子文件和子文件夹
    if(fileList.length==0) {    // 如果源文件夹为空目录则直接设置flag为true，这一步非常隐蔽，debug了很久
        flag = true;
    }
    else {
        for(File temp: fileList) {
            if(temp.isFile()) {    // 文件
                flag = copyFile(temp.getAbsolutePath(), destDirPath, overwriteExistDir);     // 递归复制时也继承覆盖属性
            }
            else if(temp.isDirectory()) {    // 文件夹
                flag = copyDirectory(temp.getAbsolutePath(), destDirPath, overwriteExistDir);   // 递归复制时也继承覆盖属性
            }

            if(!flag) {
                break;
            }
        }
    }

    return flag;
}

/**
 * 删除文件或文件夹
 * @param path
 *            待删除的文件的绝对路径
 * @return boolean
 */
public static boolean deleteFile(String path) {
    boolean flag = false;

    File file = new File(path);
    if (!file.exists()) { // 文件不存在直接返回
        return flag;
    }
    flag = file.delete();

    return flag;
}

/**
 * 由上面方法延伸出剪切方法：复制+删除
 * @param  destDir 同上
 */
public static boolean cutGeneralFile(String srcPath, String destDir) {
 boolean flag = false;
    if(copyGeneralFile(srcPath, destDir) &amp;amp;&amp;amp; deleteFile(srcPath)) { // 复制和删除都成功
     flag = true;
    }

    return flag;
}

public static void main(String[] args) {
 /** 测试复制文件 */
 System.out.println(copyGeneralFile(&amp;quot;d://test/test.html&amp;quot;, &amp;quot;d://test/test/&amp;quot;));  // 一般正常场景
 System.out.println(copyGeneralFile(&amp;quot;d://notexistfile&amp;quot;, &amp;quot;d://test/&amp;quot;));      // 复制不存在的文件或文件夹
 System.out.println(copyGeneralFile(&amp;quot;d://test/test.html&amp;quot;, &amp;quot;d://test/&amp;quot;));      // 待复制文件与目标文件在同一目录下
 System.out.println(copyGeneralFile(&amp;quot;d://test/test.html&amp;quot;, &amp;quot;d://test/test/&amp;quot;));  // 覆盖目标目录下的同名文件
 System.out.println(copyFile(&amp;quot;d://test/&amp;quot;, &amp;quot;d://test2&amp;quot;, false)); // 不覆盖目标目录下的同名文件
 System.out.println(copyGeneralFile(&amp;quot;d://test/test.html&amp;quot;, &amp;quot;notexist://noexistdir/&amp;quot;)); // 复制文件到一个不可能存在也不可能创建的目录下

 System.out.println(&amp;quot;---------&amp;quot;);

 /** 测试复制文件夹 */
 System.out.println(copyGeneralFile(&amp;quot;d://test/&amp;quot;, &amp;quot;d://test2/&amp;quot;));

 System.out.println(&amp;quot;---------&amp;quot;);

 /** 测试删除文件 */
 System.out.println(deleteFile(&amp;quot;d://a/&amp;quot;));
}
</code></pre><p>}<br>[/java]</p>
<p>2.验证传入路径是否为正确的路径名(Windows系统，其他系统未使用)<br>[java]<br>// 验证字符串是否为正确路径名的正则表达式<br>private static String matches = &quot;[A-Za-z]:\\[^:?\&quot;&gt;&lt;<em>]</em>&quot;;<br>// 通过 sPath.matches(matches) 方法的返回值判断是否正确<br>// sPath 为路径字符串<br>[/java]</p>
<p>3.通用的文件夹或文件删除方法，直接调用此方法，即可实现删除文件夹或文件，包括文件夹下的所有文件<br>[java]<br>/** </p>
<ul>
<li>根据路径删除指定的目录或文件，无论存在与否<br><em>@param sPath  要删除的目录或文件 
</em>@return 删除成功返回 true，否则返回 false。<br>*/<br>public boolean DeleteFolder(String sPath) {<br>flag = false;<br>file = new File(sPath);<br>// 判断目录或文件是否存在<br>if (!file.exists()) {  // 不存在返回 false  <pre><code>return flag;  
</code></pre>} else {  <pre><code>// 判断是否为文件  
if (file.isFile()) {  // 为文件时调用删除文件方法  
    return deleteFile(sPath);  
} else {  // 为目录时调用删除目录方法  
    return deleteDirectory(sPath);  
}  
</code></pre>}<br>}<br>[/java]</li>
</ul>
<p>4.实现删除文件的方法，<br>[java]<br>/** </p>
<ul>
<li>删除单个文件 </li>
<li>@param   sPath    被删除文件的文件名 </li>
<li>@return 单个文件删除成功返回true，否则返回false<br>*/<br>public boolean deleteFile(String sPath) {<br> flag = false;<br> file = new File(sPath);<br> // 路径为文件且不为空则进行删除<br> if (file.isFile() &amp;&amp; file.exists()) {  <pre><code>file.delete();  
flag = true;  
</code></pre> }<br> return flag;<br>}<br>[/java]</li>
</ul>
<p>5.实现删除文件夹的方法，<br>[java]<br>/** </p>
<ul>
<li>删除目录（文件夹）以及目录下的文件 </li>
<li>@param   sPath 被删除目录的文件路径 </li>
<li>@return  目录删除成功返回true，否则返回false<br>*/<br>public boolean deleteDirectory(String sPath) {<br> //如果sPath不以文件分隔符结尾，自动添加文件分隔符<br> if (!sPath.endsWith(File.separator)) {  <pre><code>sPath = sPath + File.separator;  
</code></pre> }<br> File dirFile = new File(sPath);<br> //如果dir对应的文件不存在，或者不是一个目录，则退出<br> if (!dirFile.exists() || !dirFile.isDirectory()) {  <pre><code>return false;  
</code></pre> }<br> flag = true;<br> //删除文件夹下的所有文件(包括子目录)<br> File[] files = dirFile.listFiles();<br> for (int i = 0; i &lt; files.length; i++) {  <pre><code>//删除子文件  
if (files[i].isFile()) {  
    flag = deleteFile(files[i].getAbsolutePath());  
    if (!flag) break;  
} //删除子目录  
else {  
    flag = deleteDirectory(files[i].getAbsolutePath());  
    if (!flag) break;  
}  
</code></pre> }<br> if (!flag) return false;<br> //删除当前目录<br> if (dirFile.delete()) {  <pre><code>return true;  
</code></pre> } else {  <pre><code>return false;  
</code></pre> }<br>}<br>[/java] </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入解析MySQL分区（Partition）功能]]></title>
      <url>http://yoursite.com/2015/04/27/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90MySQL%E5%88%86%E5%8C%BA%EF%BC%88Partition%EF%BC%89%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>Mysql自5.1开始对分区(Partition)有支持</p>
<p>= 水平分区（根据列属性按行分）=<br>举个简单例子：一个包含十年发票记录的表可以被分区为十个不同的分区，每个分区包含的是其中一年的记录。</p>
<p>=== 水平分区的几种模式：===</p>
<ul>
<li><p>Range（范围） – 这种模式允许DBA将数据划分不同范围。例如DBA可以将一个表通过年份划分成三个分区，80年代（1980’s）的数据，90年代（1990’s）的数据以及任何在2000年（包括2000年）后的数据。 </p>
</li>
<li><p>Hash（哈希） – 这中模式允许DBA通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区，。例如DBA可以建立一个对表主键进行分区的表。 </p>
</li>
<li><p>Key（键值） – 上面Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。 </p>
</li>
<li><p>List（预定义列表） – 这种模式允许系统通过DBA定义的列表的值所对应的行数据进行分割。例如：DBA建立了一个横跨三个分区的表，分别根据2004年2005年和2006年值所对应的数据。 </p>
</li>
<li><p>Composite（复合模式） - 很神秘吧，哈哈，其实是以上模式的组合使用而已，就不解释了。举例：在初始化已经进行了Range范围分区的表上，我们可以对其中一个分区再进行hash哈希分区。 </p>
</li>
</ul>
<p>= 垂直分区（按列分）=<br>举个简单例子：一个包含了大text和BLOB列的表，这些text和BLOB列又不经常被访问，这时候就要把这些不经常使用的text和BLOB了划分到另一个分区，在保证它们数据相关性的同时还能提高访问速度。</p>
<p>[分区表和未分区表试验过程]</p>
<p>*创建分区表,按日期的年份拆分<br>[sql]<br>CREATE TABLE part_tab ( c1 int default NULL, c2 varchar(30) default NULL, c3 date default NULL) engine=myisam<br>PARTITION BY RANGE (year(c3)) (PARTITION p0 VALUES LESS THAN (1995),<br>PARTITION p1 VALUES LESS THAN (1996) , PARTITION p2 VALUES LESS THAN (1997) ,<br>PARTITION p3 VALUES LESS THAN (1998) , PARTITION p4 VALUES LESS THAN (1999) ,<br>PARTITION p5 VALUES LESS THAN (2000) , PARTITION p6 VALUES LESS THAN (2001) ,<br>PARTITION p7 VALUES LESS THAN (2002) , PARTITION p8 VALUES LESS THAN (2003) ,<br>PARTITION p9 VALUES LESS THAN (2004) , PARTITION p10 VALUES LESS THAN (2010),<br>PARTITION p11 VALUES LESS THAN MAXVALUE );  [/sql]<br>注意最后一行，考虑到可能的最大值</p>
<p>*创建未分区表<br>[sql]<br>mysql&gt; create table no_part_tab (c1 int(11) default NULL,c2 varchar(30) default NULL,c3 date default NULL) engine=myisam;<br>[/sql]</p>
<p><em>通过存储过程灌入800万条测试数据<br>mysql&gt; set sql_mode=’’; /</em> 如果创建存储过程失败，则先需设置此变量, bug? <em>/<br>mysql&gt; delimiter //   /</em> 设定语句终结符为 //，因存储过程语句用;结束 */</p>
<p>[sql]<br>mysql&gt; CREATE PROCEDURE load_part_tab()<br>       begin<br>    declare v int default 0;<br>    while v &lt; 8000000<br>    do<br>        insert into part_tab<br>        values (v,’testing partitions’,adddate(‘1995-01-01’,(rand(v)<em>36520) mod 3652));<br>         set v = v + 1;<br>    end while;<br>    end<br>    //<br>mysql&gt; delimiter ;<br>mysql&gt; call load_part_tab();<br>Query OK, 1 row affected (8 min 17.75 sec)<br>[sql] view plaincopy<br>mysql&gt; insert into no_part_tab select </em> from part_tab;<br>Query OK, 8000000 rows affected (51.59 sec)<br>Records: 8000000 Duplicates: 0 Warnings: 0<br>[/sql]</p>
<ul>
<li>测试SQL性能</li>
</ul>
<p>[sql]<br>mysql&gt; select count(<em>) from part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|   795181 |<br>+———-+<br>1 row in set (0.55 sec)<br>[/sql]</p>
<p>[sql]<br>mysql&gt; select count(<em>) from no_part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|   795181 |<br>+———-+<br>1 row in set (4.69 sec)[/sql]<br>结果表明分区表比未分区表的执行时间少90%。</p>
<ul>
<li>通过explain语句来分析执行情况<br>[sql]<br>mysql &gt; explain select count(<em>) from no_part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’\G<br>/</em> 结尾的\G使得mysql的输出改为列模式 <em>/<br><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></em> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong><pre><code>id: 1
</code></pre>select_type: SIMPLE<pre><code>table: no_part_tab
 type: ALL
</code></pre>possible_keys: NULL<pre><code>    key: NULL
key_len: NULL
    ref: NULL
   rows: 8000000
  Extra: Using where
</code></pre>1 row in set (0.00 sec)<br>[/sql]</li>
</ul>
<p>[sql]<br>mysql&gt; explain select count(<em>) from part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’\G<br><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></em> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong><br>           id: 1<br>select_type: SIMPLE<br>        table: part_tab<br>         type: ALL<br>possible_keys: NULL<br>          key: NULL<br>      key_len: NULL<br>          ref: NULL<br>         rows: 798458<br>        Extra: Using where<br>1 row in set (0.00 sec)[/sql]<br>explain语句显示了SQL查询要处理的记录数目</p>
<ul>
<li><p>试验创建索引后情况<br>[sql]<br>mysql&gt; create index idx_of_c3 on no_part_tab (c3);<br>Query OK, 8000000 rows affected (1 min 18.08 sec)<br>Records: 8000000 Duplicates: 0 Warnings: 0<br>[/sql]<br>[sql]<br>mysql&gt; create index idx_of_c3 on part_tab (c3);<br>Query OK, 8000000 rows affected (1 min 19.19 sec)<br>Records: 8000000 Duplicates: 0 Warnings: 0[/sql]<br>创建索引后的数据库文件大小列表：<br>2008-05-24 09:23             8,608 no_part_tab.frm<br>2008-05-24 09:24       255,999,996 no_part_tab.MYD<br>2008-05-24 09:24        81,611,776 no_part_tab.MYI<br>2008-05-24 09:25                 0 part_tab#P#p0.MYD<br>2008-05-24 09:26             1,024 part_tab#P#p0.MYI<br>2008-05-24 09:26        25,550,656 part_tab#P#p1.MYD<br>2008-05-24 09:26         8,148,992 part_tab#P#p1.MYI<br>2008-05-24 09:26        25,620,192 part_tab#P#p10.MYD<br>2008-05-24 09:26         8,170,496 part_tab#P#p10.MYI<br>2008-05-24 09:25                 0 part_tab#P#p11.MYD<br>2008-05-24 09:26             1,024 part_tab#P#p11.MYI<br>2008-05-24 09:26        25,656,512 part_tab#P#p2.MYD<br>2008-05-24 09:26         8,181,760 part_tab#P#p2.MYI<br>2008-05-24 09:26        25,586,880 part_tab#P#p3.MYD<br>2008-05-24 09:26         8,160,256 part_tab#P#p3.MYI<br>2008-05-24 09:26        25,585,696 part_tab#P#p4.MYD<br>2008-05-24 09:26         8,159,232 part_tab#P#p4.MYI<br>2008-05-24 09:26        25,585,216 part_tab#P#p5.MYD<br>2008-05-24 09:26         8,159,232 part_tab#P#p5.MYI<br>2008-05-24 09:26        25,655,740 part_tab#P#p6.MYD<br>2008-05-24 09:26         8,181,760 part_tab#P#p6.MYI<br>2008-05-24 09:26        25,586,528 part_tab#P#p7.MYD<br>2008-05-24 09:26         8,160,256 part_tab#P#p7.MYI<br>2008-05-24 09:26        25,586,752 part_tab#P#p8.MYD<br>2008-05-24 09:26         8,160,256 part_tab#P#p8.MYI<br>2008-05-24 09:26        25,585,824 part_tab#P#p9.MYD<br>2008-05-24 09:26         8,159,232 part_tab#P#p9.MYI<br>2008-05-24 09:25             8,608 part_tab.frm<br>2008-05-24 09:25                68 part_tab.par</p>
</li>
<li><p>再次测试SQL性能</p>
</li>
</ul>
<p>[sql]<br>mysql&gt; select count(<em>) from no_part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|   795181 |<br>+———-+<br>1 row in set (2.42 sec)   /<em> 为原来4.69 sec 的51%</em>/<br>[/sql]</p>
<p>重启mysql ( net stop mysql, net start mysql)后，查询时间降为0.89 sec,几乎与分区表相同。</p>
<p>[sql]<br>mysql&gt; select count(<em>) from part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1995-12-31’;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|   795181 |<br>+———-+<br>1 row in set (0.86 sec)<br>[/sql]</p>
<ul>
<li>更进一步的试验<br><em>* 增加日期范围<br>[sql]<br>mysql&gt; select count(</em>) from no_part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1997-12-31’;<br>+———-+<br>| count(<em>) |<br>+———-+<br>| 2396524 |<br>+———-+<br>1 row in set (5.42 sec)<br>[/sql]<br>[sql]<br>mysql&gt; select count(</em>) from part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1997-12-31’;<br>+———-+<br>| count(*) |<br>+———-+<br>| 2396524 |<br>+———-+<br>1 row in set (2.63 sec)<br>[/sql]</li>
</ul>
<p><em>* 增加未索引字段查询<br>[sql]<br>mysql&gt; select count(</em>) from part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date<br>‘1996-12-31’ and c2=’hello’;<br>+———-+<br>| count(<em>) |<br>+———-+<br>|        0 |<br>+———-+<br>1 row in set (0.75 sec)<br>[/sql]<br>[sql]<br>mysql&gt; select count(</em>) from no_part_tab where c3 &gt; date ‘1995-01-01’ and c3 &lt; date ‘1996-12-31’ and c2=’hello’;<br>+———-+<br>| count(*) |<br>+———-+<br>|        0 |<br>+———-+<br>1 row in set (11.52 sec)<br>[/sql]</p>
<p>= 初步结论 =</p>
<ul>
<li>分区和未分区占用文件空间大致相同 （数据和索引文件）</li>
<li>如果查询语句中有未建立索引字段，分区时间远远优于未分区时间</li>
<li>如果查询语句中字段建立了索引，分区和未分区的差别缩小，分区略优于未分区。</li>
</ul>
<p>= 最终结论 =</p>
<ul>
<li>对于大数据量，建议使用分区功能。</li>
<li>去除不必要的字段</li>
<li>根据手册， 增加myisam_max_sort_file_size 会增加分区性能</li>
</ul>
<p>[分区命令详解]</p>
<p>= 分区例子 = </p>
<ul>
<li><p>RANGE 类型<br>[sql]<br>CREATE TABLE users (  </p>
<pre><code>uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,  
name VARCHAR(30) NOT NULL DEFAULT &apos;&apos;,  
email VARCHAR(30) NOT NULL DEFAULT &apos;&apos;  
</code></pre><p>)<br>PARTITION BY RANGE (uid) (  </p>
<pre><code>PARTITION p0 VALUES LESS THAN (3000000)  
DATA DIRECTORY = &apos;/data0/data&apos;  
INDEX DIRECTORY = &apos;/data1/idx&apos;,  

PARTITION p1 VALUES LESS THAN (6000000)  
DATA DIRECTORY = &apos;/data2/data&apos;  
INDEX DIRECTORY = &apos;/data3/idx&apos;,  

PARTITION p2 VALUES LESS THAN (9000000)  
DATA DIRECTORY = &apos;/data4/data&apos;  
INDEX DIRECTORY = &apos;/data5/idx&apos;,  

PARTITION p3 VALUES LESS THAN MAXVALUE     DATA DIRECTORY = &apos;/data6/data&apos;   
INDEX DIRECTORY = &apos;/data7/idx&apos;  
</code></pre><p>);  [/sql]<br>在这里，将用户表分成4个分区，以每300万条记录为界限，每个分区都有自己独立的数据、索引文件的存放目录，与此同时，这些目录所在的物理磁盘分区可能也都是完全独立的，可以提高磁盘IO吞吐量。</p>
</li>
<li><p>LIST 类型<br>[sql]<br>CREATE TABLE category (<br>   cid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,<br>   name VARCHAR(30) NOT NULL DEFAULT ‘’<br>)<br>PARTITION BY LIST (cid) (<br>   PARTITION p0 VALUES IN (0,4,8,12)<br>   DATA DIRECTORY = ‘/data0/data’<br>   INDEX DIRECTORY = ‘/data1/idx’,  </p>
<p>   PARTITION p1 VALUES IN (1,5,9,13)<br>   DATA DIRECTORY = ‘/data2/data’<br>   INDEX DIRECTORY = ‘/data3/idx’,  </p>
<p>   PARTITION p2 VALUES IN (2,6,10,14)<br>   DATA DIRECTORY = ‘/data4/data’<br>   INDEX DIRECTORY = ‘/data5/idx’,  </p>
<p>   PARTITION p3 VALUES IN (3,7,11,15)<br>   DATA DIRECTORY = ‘/data6/data’<br>   INDEX DIRECTORY = ‘/data7/idx’<br>);    [/sql]<br>分成4个区，数据文件和索引文件单独存放。</p>
</li>
<li><p>HASH 类型<br>[sql]<br>CREATE TABLE users (<br>   uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,<br>   name VARCHAR(30) NOT NULL DEFAULT ‘’,<br>   email VARCHAR(30) NOT NULL DEFAULT ‘’<br>)<br>PARTITION BY HASH (uid) PARTITIONS 4 (<br>   PARTITION p0<br>   DATA DIRECTORY = ‘/data0/data’<br>   INDEX DIRECTORY = ‘/data1/idx’,  </p>
<p>   PARTITION p1<br>   DATA DIRECTORY = ‘/data2/data’<br>   INDEX DIRECTORY = ‘/data3/idx’,  </p>
<p>   PARTITION p2<br>   DATA DIRECTORY = ‘/data4/data’<br>   INDEX DIRECTORY = ‘/data5/idx’,  </p>
<p>   PARTITION p3<br>   DATA DIRECTORY = ‘/data6/data’<br>   INDEX DIRECTORY = ‘/data7/idx’<br>);  [/sql]<br>分成4个区，数据文件和索引文件单独存放。</p>
</li>
</ul>
<p>例子：<br>[sql]<br>CREATE TABLE ti2 (id INT, amount DECIMAL(7,2), tr_date DATE)<br>    ENGINE=myisam<br>    PARTITION BY HASH( MONTH(tr_date) )<br>    PARTITIONS 6;  </p>
<p>CREATE PROCEDURE load_ti2()<br>       begin<br>    declare v int default 0;<br>    while v &lt; 80000<br>    do<br>        insert into ti2<br>        values (v,’3.14’,adddate(‘1995-01-01’,(rand(v)*3652) mod 365));<br>         set v = v + 1;<br>    end while;<br>    end<br>    //<br>[/sql]</p>
<ul>
<li><p>KEY 类型<br>[sql]<br>CREATE TABLE users (<br>   uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,<br>   name VARCHAR(30) NOT NULL DEFAULT ‘’,<br>   email VARCHAR(30) NOT NULL DEFAULT ‘’<br>)<br>PARTITION BY KEY (uid) PARTITIONS 4 (<br>   PARTITION p0<br>   DATA DIRECTORY = ‘/data0/data’<br>   INDEX DIRECTORY = ‘/data1/idx’,  </p>
<p>   PARTITION p1<br>   DATA DIRECTORY = ‘/data2/data’<br>   INDEX DIRECTORY = ‘/data3/idx’,  </p>
<p>   PARTITION p2<br>   DATA DIRECTORY = ‘/data4/data’<br>   INDEX DIRECTORY = ‘/data5/idx’,  </p>
<p>   PARTITION p3<br>   DATA DIRECTORY = ‘/data6/data’<br>   INDEX DIRECTORY = ‘/data7/idx’<br>); [/sql]<br>分成4个区，数据文件和索引文件单独存放。</p>
</li>
<li><p>子分区<br>子分区是针对 RANGE/LIST 类型的分区表中每个分区的再次分割。再次分割可以是 HASH/KEY 等类型。例如：<br>[sql]<br>CREATE TABLE users (<br>   uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,<br>   name VARCHAR(30) NOT NULL DEFAULT ‘’,<br>   email VARCHAR(30) NOT NULL DEFAULT ‘’<br>)<br>PARTITION BY RANGE (uid) SUBPARTITION BY HASH (uid % 4) SUBPARTITIONS 2(<br>   PARTITION p0 VALUES LESS THAN (3000000)<br>   DATA DIRECTORY = ‘/data0/data’<br>   INDEX DIRECTORY = ‘/data1/idx’,  </p>
<p>   PARTITION p1 VALUES LESS THAN (6000000)<br>   DATA DIRECTORY = ‘/data2/data’<br>   INDEX DIRECTORY = ‘/data3/idx’<br>);  [/sql]<br>对 RANGE 分区再次进行子分区划分，子分区采用 HASH 类型。<br>或者<br>[sql]<br>CREATE TABLE users (<br>   uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,<br>   name VARCHAR(30) NOT NULL DEFAULT ‘’,<br>   email VARCHAR(30) NOT NULL DEFAULT ‘’<br>)<br>PARTITION BY RANGE (uid) SUBPARTITION BY KEY(uid) SUBPARTITIONS 2(<br>   PARTITION p0 VALUES LESS THAN (3000000)<br>   DATA DIRECTORY = ‘/data0/data’<br>   INDEX DIRECTORY = ‘/data1/idx’,  </p>
<p>   PARTITION p1 VALUES LESS THAN (6000000)<br>   DATA DIRECTORY = ‘/data2/data’<br>   INDEX DIRECTORY = ‘/data3/idx’<br>);  [/sql]<br>对 RANGE 分区再次进行子分区划分，子分区采用 KEY 类型。</p>
</li>
</ul>
<p>= 分区管理 =</p>
<pre><code>* 删除分区  
</code></pre><p>[sql]<br>ALERT TABLE users DROP PARTITION p0;  [/sql]<br>      删除分区 p0。</p>
<pre><code>* 重建分区
      o RANGE 分区重建
</code></pre><p>[sql]<br>ALTER TABLE users REORGANIZE PARTITION p0,p1 INTO (PARTITION p0 VALUES LESS THAN (6000000));  [/sql]<br>            将原来的 p0,p1 分区合并起来，放到新的 p0 分区中。<br>          o LIST 分区重建<br>[sql]<br>ALTER TABLE users REORGANIZE PARTITION p0,p1 INTO (PARTITION p0 VALUES IN(0,1,4,5,8,9,12,13));  [/sql]<br>            将原来的 p0,p1 分区合并起来，放到新的 p0 分区中。<br>          o HASH/KEY 分区重建<br>[sql]<br>ALTER TABLE users REORGANIZE PARTITION COALESCE PARTITION 2;  [/sql]<br>            用 REORGANIZE 方式重建分区的数量变成2，在这里数量只能减少不能增加。想要增加可以用 ADD PARTITION 方法。</p>
<pre><code>* 新增分区
      o 新增 RANGE 分区   
</code></pre><p>[sql]<br>ALTER TABLE category ADD PARTITION (PARTITION p4 VALUES IN (16,17,18,19)<br>           DATA DIRECTORY = ‘/data8/data’<br>           INDEX DIRECTORY = ‘/data9/idx’);  [/sql]<br>            新增一个RANGE分区。<br>          o 新增 HASH/KEY 分区<br>[sql]<br>ALTER TABLE users ADD PARTITION PARTITIONS 8;  [/sql]<br>            将分区总数扩展到8个。</p>
<p>[ 给已有的表加上分区 ]<br>[sql]<br>alter table results partition by RANGE (month(ttime))<br>(PARTITION p0 VALUES LESS THAN (1),<br>PARTITION p1 VALUES LESS THAN (2) , PARTITION p2 VALUES LESS THAN (3) ,<br>PARTITION p3 VALUES LESS THAN (4) , PARTITION p4 VALUES LESS THAN (5) ,<br>PARTITION p5 VALUES LESS THAN (6) , PARTITION p6 VALUES LESS THAN (7) ,<br>PARTITION p7 VALUES LESS THAN (8) , PARTITION p8 VALUES LESS THAN (9) ,<br>PARTITION p9 VALUES LESS THAN (10) , PARTITION p10 VALUES LESS THAN (11),<br>PARTITION p11 VALUES LESS THAN (12),<br>PARTITION P12 VALUES LESS THAN (13) );   [/sql]</p>
<p>默认分区限制分区字段必须是主键（PRIMARY KEY)的一部分，为了去除此<br>限制：<br>[方法1] 使用ID<br>[sql]<br>mysql&gt; ALTER TABLE np_pk<br>    -&gt;     PARTITION BY HASH( TO_DAYS(added) )<br>    -&gt;     PARTITIONS 4;<br>ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table’s partitioning function<br>[/sql]<br>However, this statement using the id column for the partitioning column is valid, as shown here:</p>
<p>[sql]<br>mysql&gt; ALTER TABLE np_pk<br>    -&gt;     PARTITION BY HASH(id)<br>    -&gt;     PARTITIONS 4;<br>Query OK, 0 rows affected (0.11 sec)<br>Records: 0 Duplicates: 0 Warnings: 0<br>[/sql]<br>[方法2] 将原有PK去掉生成新PK<br>[sql]<br>mysql&gt; alter table results drop PRIMARY KEY;<br>Query OK, 5374850 rows affected (7 min 4.05 sec)<br>Records: 5374850 Duplicates: 0 Warnings: 0<br>[/sql]<br>[sql]<br>mysql&gt; alter table results add PRIMARY KEY(id, ttime);<br>Query OK, 5374850 rows affected (6 min 14.86 sec)<br>Records: 5374850 Duplicates: 0 Warnings: 0<br>[/sql]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 面试]]></title>
      <url>http://yoursite.com/2015/04/22/Linux%20%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>1. linux文件系统都有三个身份Owner, group, others， 每种身份都有r，w，x三种权限。<br>2. /etc/passwd 存有系统的用户信息，/etc/shadow存有用户的密码，/etc/group 存有组的情况。<br>3. 更改权限的三个命令：chmod, chgrp, chown<br>对于文件来说：r–读取文件内容；w–编辑、新增文件（不可删除）；x-可执行<br>umask 决定新建文件或文件夹的权限，显示的值为需要去掉的权限<br>对于目录来说：r–使用ls查看目录文件；w–创建、删除、移动、重命名文件；x-可使用cd切换目录<br>4. /sbin/service, /sbin/ifconfig默认状况下只有root用户才能直接使用<br>5.路径：. ， .. ，~<br>6. 目录有关的操作：cd，pwd，mkdir， rmdir<br>7.文件操作：ls，cp，rm，mv，touch<br>8.文件查阅：cat/tac， nl，more，less。head，tail<br>9.查看文件类型：file<br>10.查找脚本：which 查找文件名： whereis， locate， find<br>find -name -type -user -exec ls  {} \;<br>11. 添加用户useradd；用户组groupadd<br>用户查询：w/who 用户通讯：mesg，write，wall<br>批量添加用户和密码：useradd user；echo user | passwd –stdin user<br>12. 磁盘有关命令：df/du 查看磁盘； fdisk -l查看磁盘分区；fsck系统检查；mount挂载磁盘，新建目录，挂载磁盘分区；umount卸载磁盘<br>13. 打包 tar -czvf， 解压tar -xzvf<br>14.Vim编辑器使用<br>15.正则表达式和grep<br>16. awk，sed<br>17. Shell脚本<br>18.程序管理：<br>查看 进程 ps -ef | grep pname ps aux<br>后台运行&amp;<br>后台暂停：ctr+z<br>查看后台进程： jobs -l<br>恢复前台 fg %jobnumber<br>后台运行：bg %jobnumber<br>脱机运行：nohup<br>查看动态进程：top<br>强制杀死进程：kill -9 pid<br>19. 查看内存： free -m；查看内核：uname -a；跟踪网络 netstat -a -tlnp<br>20. /etc/init.d/<em> 系统启动脚本<br>     /etc/</em>  系统配置<br>     /var/lib/* 各服务产生的数据库<br>     service name start/stop/restart/status<br>     chkconfig –list –add 开机启动 防火墙 iptables<br>     /var/log 系统日志文件<br>21. 软件安装：rqm -ivh | -aq| -e ；yum install </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim下ctags使用]]></title>
      <url>http://yoursite.com/2015/04/22/vim%E4%B8%8Bctags%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>1. cd to the root directory of your code:<br>2.Run Ctags recursively over the entire code to generate the tags file<br>ctags -R *<br>3. To search for a specific tag and open Vim to its definition, run the following command in your shell:<br>vim -t <tag><br>4. Or, open any Linux source file in Vim and use the following basic commands:<br>Ctrl-] Jump to the tag underneath the cursor<br>:ts <tag> <ret> Search for a particular tag<br>:tn Go to the next definition for the last tag<br>:tp Go to the previous definition for the last tag<br>:ts List all of the definitions of the last tag<br>Ctrl-t Jump back up in the tag stack<br>The first command is probably the one you will use most often: it jumps to the definition of the tag (function name, structure name, variable name, or pretty much anything) under the cursor. The second command can be used to search for any tag, regardless of the file that is currently opened. If there are multiple definitions/uses for a particular tag, the tn and tp commands can be used to scroll through them, and the ts command can be used to “search” a list for the definition you want (useful when there are dozens or hundreds of definitions for some commonly-used struct). Finally, the last command is used to jump back up in the tag stack to the location you initiated the previous tag search from.</ret></tag></tag></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ganglia 安装]]></title>
      <url>http://yoursite.com/2015/04/21/Ganglia%20%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>1. Install prerequisites on server node</p>
<p>Step 0: Use yum to install dependency</p>
<h1 id="yum-y-install-apr-devel-apr-util-check-devel-cairo-devel-pango-devel-libxml2-devel-glib2-devel-dbus-devel-freetype-devel-fontconfig-devel-gcc-c-expat-devel-python-devel-libXrender-devel-zlib-libpng-freetype-libjpeg-fontconfig-gd-libxml2-pcre-pcre-devel"><a href="#yum-y-install-apr-devel-apr-util-check-devel-cairo-devel-pango-devel-libxml2-devel-glib2-devel-dbus-devel-freetype-devel-fontconfig-devel-gcc-c-expat-devel-python-devel-libXrender-devel-zlib-libpng-freetype-libjpeg-fontconfig-gd-libxml2-pcre-pcre-devel" class="headerlink" title="yum -y install apr-devel apr-util check-devel cairo-devel pango-devel libxml2-devel glib2-devel dbus-devel freetype-devel fontconfig-devel gcc-c++ expat-devel python-devel libXrender-devel zlib libpng freetype libjpeg fontconfig gd libxml2 pcre pcre-devel"></a>yum -y install apr-devel apr-util check-devel cairo-devel pango-devel libxml2-devel glib2-devel dbus-devel freetype-devel fontconfig-devel gcc-c++ expat-devel python-devel libXrender-devel zlib libpng freetype libjpeg fontconfig gd libxml2 pcre pcre-devel</h1><p>Step 1: Install libconfuse</p>
<h1 id="wget-http-savannah-nongnu-org-download-confuse-confuse-2-7-tar-gz"><a href="#wget-http-savannah-nongnu-org-download-confuse-confuse-2-7-tar-gz" class="headerlink" title="wget http://savannah.nongnu.org/download/confuse/confuse-2.7.tar.gz"></a>wget <a href="http://savannah.nongnu.org/download/confuse/confuse-2.7.tar.gz" target="_blank" rel="external">http://savannah.nongnu.org/download/confuse/confuse-2.7.tar.gz</a></h1><h1 id="tar-xzvf-confuse-2-7-tar-gz"><a href="#tar-xzvf-confuse-2-7-tar-gz" class="headerlink" title="tar -xzvf confuse-2.7.tar.gz"></a>tar -xzvf confuse-2.7.tar.gz</h1><h1 id="cd-confuse-2-7"><a href="#cd-confuse-2-7" class="headerlink" title="cd confuse-2.7"></a>cd confuse-2.7</h1><h1 id="configure-CFLAGS-fPIC-–disable-nls-amp-amp-make-amp-amp-make-install"><a href="#configure-CFLAGS-fPIC-–disable-nls-amp-amp-make-amp-amp-make-install" class="headerlink" title="./configure CFLAGS=-fPIC –disable-nls &amp;&amp; make &amp;&amp; make install"></a>./configure CFLAGS=-fPIC –disable-nls &amp;&amp; make &amp;&amp; make install</h1><p>Step 2: Install rrdtool on server node</p>
<h1 id="wget-http-oss-oetiker-ch-rrdtool-pub-rrdtool-1-4-7-tar-gz"><a href="#wget-http-oss-oetiker-ch-rrdtool-pub-rrdtool-1-4-7-tar-gz" class="headerlink" title="wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz"></a>wget <a href="http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz" target="_blank" rel="external">http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz</a></h1><h1 id="tar-xzvf-rrdtool-1-4-7-tar-gz"><a href="#tar-xzvf-rrdtool-1-4-7-tar-gz" class="headerlink" title="tar -xzvf rrdtool-1.4.7.tar.gz"></a>tar -xzvf rrdtool-1.4.7.tar.gz</h1><h1 id="cd-rrdtool-1-4-7"><a href="#cd-rrdtool-1-4-7" class="headerlink" title="cd rrdtool-1.4.7"></a>cd rrdtool-1.4.7</h1><h1 id="configure-–prefix-usr-lib64-rrdtool-–disable-perl"><a href="#configure-–prefix-usr-lib64-rrdtool-–disable-perl" class="headerlink" title="./configure –prefix=/usr/lib64/rrdtool –disable-perl"></a>./configure –prefix=/usr/lib64/rrdtool –disable-perl</h1><h1 id="make-amp-amp-make-install"><a href="#make-amp-amp-make-install" class="headerlink" title="make &amp;&amp; make install"></a>make &amp;&amp; make install</h1><p>Step 3(Optional): Install libpre</p>
<h1 id="wget-http-downloads-sourceforge-net-pcre-pcre-8-32-tar-bz2"><a href="#wget-http-downloads-sourceforge-net-pcre-pcre-8-32-tar-bz2" class="headerlink" title="wget  http://downloads.sourceforge.net/pcre/pcre-8.32.tar.bz2"></a>wget  <a href="http://downloads.sourceforge.net/pcre/pcre-8.32.tar.bz2" target="_blank" rel="external">http://downloads.sourceforge.net/pcre/pcre-8.32.tar.bz2</a></h1><h1 id="tar-xvf-pcre-8-32-tar-bz2"><a href="#tar-xvf-pcre-8-32-tar-bz2" class="headerlink" title="tar -xvf pcre-8.32.tar.bz2"></a>tar -xvf pcre-8.32.tar.bz2</h1><h1 id="cd-pcre-8-32"><a href="#cd-pcre-8-32" class="headerlink" title="cd pcre-8.32"></a>cd pcre-8.32</h1><h1 id="configure-amp-amp-make-amp-amp-make-install"><a href="#configure-amp-amp-make-amp-amp-make-install" class="headerlink" title="./configure &amp;&amp; make &amp;&amp; make install"></a>./configure &amp;&amp; make &amp;&amp; make install</h1><p>2. Install and configure gmetad&amp;gmond on server node</p>
<p>Step 0: Install ganglia code</p>
<h1 id="wget-http-sourceforge-net-projects-ganglia-files-latest-download-source-files"><a href="#wget-http-sourceforge-net-projects-ganglia-files-latest-download-source-files" class="headerlink" title="wget http://sourceforge.net/projects/ganglia/files/latest/download?source=files"></a>wget <a href="http://sourceforge.net/projects/ganglia/files/latest/download?source=files" target="_blank" rel="external">http://sourceforge.net/projects/ganglia/files/latest/download?source=files</a></h1><h1 id="tar-xzvf-ganglia-3-5-0-tar-gz"><a href="#tar-xzvf-ganglia-3-5-0-tar-gz" class="headerlink" title="tar -xzvf ganglia-3.5.0.tar.gz"></a>tar -xzvf ganglia-3.5.0.tar.gz</h1><h1 id="cd-ganglia-3-5-0"><a href="#cd-ganglia-3-5-0" class="headerlink" title="cd ganglia-3.5.0"></a>cd ganglia-3.5.0</h1><h1 id="configure-–with-gmetad-–with-librrd-usr-lib64-rrdtool-–sysconfdir-etc-ganglia"><a href="#configure-–with-gmetad-–with-librrd-usr-lib64-rrdtool-–sysconfdir-etc-ganglia" class="headerlink" title="./configure –with-gmetad –with-librrd=/usr/lib64/rrdtool –sysconfdir=/etc/ganglia"></a>./configure –with-gmetad –with-librrd=/usr/lib64/rrdtool –sysconfdir=/etc/ganglia</h1><p>Ganglia can not be compiled successfully until the information as below shows up.<br>Welcome to..</p>
<pre><code> ______                  ___
/ ____/___ _____  ____ _/ (_)___ _
</code></pre><p>   / / <strong>/ </strong> <code>/ __ \/ __</code>/ / / <strong> `/<br>  / /<em>/ / /</em>/ / / / / /<em>/ / / / /</em>/ /<br>  __</strong>/_<em>,</em>/<em>/ /</em>/_<em>, /</em>/<em>/__,</em>/<br>                   /<em>__</em>/</p>
<p>Copyright (c) 2005 University of California, Berkeley</p>
<h1 id="make-amp-amp-make-install-1"><a href="#make-amp-amp-make-install-1" class="headerlink" title="make &amp;&amp; make install"></a>make &amp;&amp; make install</h1><p>Step 1: Check gmetad&amp;gmond binary</p>
<h1 id="which-gmetric"><a href="#which-gmetric" class="headerlink" title="which gmetric"></a>which gmetric</h1><p>/usr/local/bin/gmetric</p>
<h1 id="which-gmond"><a href="#which-gmond" class="headerlink" title="which gmond"></a>which gmond</h1><p>/usr/local/sbin/gmond</p>
<h1 id="which-gmetad"><a href="#which-gmetad" class="headerlink" title="which gmetad"></a>which gmetad</h1><p>/usr/local/sbin/gmetad</p>
<p>Step 2: Customize data_source name and hosts in gmetad.conf</p>
<h1 id="vi-etc-ganglia-gmetad-conf"><a href="#vi-etc-ganglia-gmetad-conf" class="headerlink" title="vi /etc/ganglia/gmetad.conf"></a>vi /etc/ganglia/gmetad.conf</h1><p>data_source “cluster1” mdw # provide the name of host containing all data, better more than one if a cluster, default port number is 8649</p>
<p>Step 3: Generate &amp;&amp; Customize gmond.conf(Using unicast)</p>
<h1 id="gmond-–default-config-gt-etc-ganglia-gmond-conf"><a href="#gmond-–default-config-gt-etc-ganglia-gmond-conf" class="headerlink" title="gmond –default_config &gt; /etc/ganglia/gmond.conf"></a>gmond –default_config &gt; /etc/ganglia/gmond.conf</h1><p>At this point you may get this error</p>
<p>gmond: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p>
<p>Create a symlink and execute the command again</p>
<h1 id="ln-s-lib64-libpcre-so-0-lib64-libpcre-so-1"><a href="#ln-s-lib64-libpcre-so-0-lib64-libpcre-so-1" class="headerlink" title="ln -s /lib64/libpcre.so.0 /lib64/libpcre.so.1"></a>ln -s /lib64/libpcre.so.0 /lib64/libpcre.so.1</h1><h1 id="vi-etc-ganglia-gmond-conf"><a href="#vi-etc-ganglia-gmond-conf" class="headerlink" title="vi /etc/ganglia/gmond.conf"></a>vi /etc/ganglia/gmond.conf</h1><p>cluster {<br>  name = “cluster1” # use the cluster name defined in gmetad.conf<br>  owner = “unspecified”<br>  latlong = “unspecified”<br>  url = “unspecified”<br>}<br>udp_send_channel {</p>
<p>  #bind_hostname = yes # Highly recommended, soon to be default.</p>
<pre><code># This option tells gmond to use a source address
# that resolves to the machine&apos;s hostname.  Without
# this, the metrics may appear to come from any
# interface and the DNS names associated with
# those IPs will be used to create the RRDs.
</code></pre><p>  host = 172.28.8.250 #if using unicast, provide ip address of server node, host and mcast_join cannot be in a channel<br>  port = 8649<br>  ttl = 1<br>}</p>
<p>udp_recv_channel {</p>
<p>  #mcast_join = 239.2.11.71 don’t need to provide multicast address if using unicast<br>  port = 8649</p>
<h1 id="bind-239-2-11-71"><a href="#bind-239-2-11-71" class="headerlink" title="bind = 239.2.11.71"></a>bind = 239.2.11.71</h1><p>  #retry_bind = true<br>}<br>Step 4: Create rrd directory, change permissions</p>
<h1 id="mkdir-p-var-lib-ganglia-rrds"><a href="#mkdir-p-var-lib-ganglia-rrds" class="headerlink" title="mkdir -p /var/lib/ganglia/rrds"></a>mkdir -p /var/lib/ganglia/rrds</h1><h1 id="chown-nobody-nobody-var-lib-ganglia-R"><a href="#chown-nobody-nobody-var-lib-ganglia-R" class="headerlink" title="chown nobody:nobody /var/lib/ganglia/ -R"></a>chown nobody:nobody /var/lib/ganglia/ -R</h1><p>Step 5: Copy the init script &amp;&amp; binary to corresponding directory</p>
<h1 id="cp-gmetad-gmetad-init-etc-rc-d-init-d-gmetad"><a href="#cp-gmetad-gmetad-init-etc-rc-d-init-d-gmetad" class="headerlink" title="cp gmetad/gmetad.init /etc/rc.d/init.d/gmetad"></a>cp gmetad/gmetad.init /etc/rc.d/init.d/gmetad</h1><h1 id="cp-usr-local-sbin-gmetad-usr-sbin"><a href="#cp-usr-local-sbin-gmetad-usr-sbin" class="headerlink" title="cp /usr/local/sbin/gmetad /usr/sbin/"></a>cp /usr/local/sbin/gmetad /usr/sbin/</h1><h1 id="cp-gmond-gmond-init-etc-rc-d-init-d-gmond"><a href="#cp-gmond-gmond-init-etc-rc-d-init-d-gmond" class="headerlink" title="cp gmond/gmond.init /etc/rc.d/init.d/gmond"></a>cp gmond/gmond.init /etc/rc.d/init.d/gmond</h1><h1 id="cp-usr-local-sbin-gmond-usr-sbin"><a href="#cp-usr-local-sbin-gmond-usr-sbin" class="headerlink" title="cp /usr/local/sbin/gmond /usr/sbin/"></a>cp /usr/local/sbin/gmond /usr/sbin/</h1><p>Step 6: Start gmetad and gmond service</p>
<h1 id="chkconfig-–add-gmetad"><a href="#chkconfig-–add-gmetad" class="headerlink" title="chkconfig –add gmetad"></a>chkconfig –add gmetad</h1><h1 id="chkconfig-–add-gmond"><a href="#chkconfig-–add-gmond" class="headerlink" title="chkconfig –add gmond"></a>chkconfig –add gmond</h1><h1 id="chkconfig-gmetad-on"><a href="#chkconfig-gmetad-on" class="headerlink" title="chkconfig gmetad on"></a>chkconfig gmetad on</h1><h1 id="chkconfig-gmond-on"><a href="#chkconfig-gmond-on" class="headerlink" title="chkconfig gmond on"></a>chkconfig gmond on</h1><h1 id="service-gmetad-start"><a href="#service-gmetad-start" class="headerlink" title="service gmetad start"></a>service gmetad start</h1><h1 id="service-gmond-start"><a href="#service-gmond-start" class="headerlink" title="service gmond start"></a>service gmond start</h1><p>3. Install and configure gmond on client node</p>
<p>Put Ganglia on the compute nodes by just copying a few files. This is something you can add to a post install script.<br>Step 0: Create a file with all your host names.<br>Step 1: Change paths of libraries and run ganglia install script.</p>
<h1 id="cat-home-gpadmin-yum-install-ganglia-install-sh"><a href="#cat-home-gpadmin-yum-install-ganglia-install-sh" class="headerlink" title="cat /home/gpadmin/yum_install/ganglia_install.sh"></a>cat /home/gpadmin/yum_install/ganglia_install.sh</h1><p>#!/bin/sh</p>
<p>for i in <code>cat /home/gpadmin/yum_install/hosts_nomaster</code>; do<br>    scp /usr/sbin/gmond $i:/usr/sbin/gmond<br>    ssh $i mkdir -p /etc/ganglia/<br>    scp /etc/ganglia/gmond.conf $i:/etc/ganglia/<br>    scp /etc/init.d/gmond $i:/etc/init.d/<br>    scp /usr/local/lib64/libganglia-3.5.0.so.0 $i:/usr/local/lib64/<br>    scp /usr/lib64/libexpat.so.0 $i:/usr/lib64/<br>    scp /usr/local/lib/libconfuse.a $i:/usr/local/lib/<br>    scp /usr/lib64/libapr-1.so.0 $i:/usr/lib64/<br>    scp -r /usr/local/lib64/ganglia/ $i:/usr/local/lib64/ganglia/<br>    ssh $i service gmond start<br>done</p>
<p>4. Install web front-end on server node</p>
<p>Step 0: Install prerequisites</p>
<h1 id="yum-install-httpd-php"><a href="#yum-install-httpd-php" class="headerlink" title="yum install httpd php"></a>yum install httpd php</h1><p>Step 1: Install ganglia-web binary</p>
<h1 id="wget-http-downloads-sourceforge-net-project-ganglia-ganglia-web-3-5-2-ganglia-web-3-5-2-tar-gz-r-http-3A-2F-2Fsourceforge-net-2Fprojects-2Fganglia-2Ffiles-2Fganglia-web-2F3-5-2-2F-amp-ts-1347011991-amp-use-mirror-cdnetworks-kr-1"><a href="#wget-http-downloads-sourceforge-net-project-ganglia-ganglia-web-3-5-2-ganglia-web-3-5-2-tar-gz-r-http-3A-2F-2Fsourceforge-net-2Fprojects-2Fganglia-2Ffiles-2Fganglia-web-2F3-5-2-2F-amp-ts-1347011991-amp-use-mirror-cdnetworks-kr-1" class="headerlink" title="wget http://downloads.sourceforge.net/project/ganglia/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fganglia%2Ffiles%2Fganglia-web%2F3.5.2%2F&amp;ts=1347011991&amp;use_mirror=cdnetworks-kr-1"></a>wget <a href="http://downloads.sourceforge.net/project/ganglia/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fganglia%2Ffiles%2Fganglia-web%2F3.5.2%2F&amp;ts=1347011991&amp;use_mirror=cdnetworks-kr-1" target="_blank" rel="external">http://downloads.sourceforge.net/project/ganglia/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fganglia%2Ffiles%2Fganglia-web%2F3.5.2%2F&amp;ts=1347011991&amp;use_mirror=cdnetworks-kr-1</a></h1><h1 id="tar-xzvf-ganglia-web-3-5-2-tar-gz"><a href="#tar-xzvf-ganglia-web-3-5-2-tar-gz" class="headerlink" title="tar -xzvf ganglia-web-3.5.2.tar.gz"></a>tar -xzvf ganglia-web-3.5.2.tar.gz</h1><h1 id="cd-ganglia-web-3-5-2"><a href="#cd-ganglia-web-3-5-2" class="headerlink" title="cd ganglia-web-3.5.2"></a>cd ganglia-web-3.5.2</h1><h1 id="make-amp-amp-make-install-2"><a href="#make-amp-amp-make-install-2" class="headerlink" title="make &amp;&amp; make install"></a>make &amp;&amp; make install</h1><p>Step 2: Configure rrdtool path</p>
<h1 id="vi-var-www-html-ganglia-conf-default-php"><a href="#vi-var-www-html-ganglia-conf-default-php" class="headerlink" title="vi /var/www/html/ganglia/conf_default.php"></a>vi /var/www/html/ganglia/conf_default.php</h1><p>$conf[‘rrdtool’] = “/usr/lib64/rrdtool/bin/rrdtool”;</p>
<p>Step 3: Visit ganglia web interface through  “<a href="http://server-ip/ganglia" target="_blank" rel="external">http://server-ip/ganglia</a>“</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Postgre 源码学习]]></title>
      <url>http://yoursite.com/2015/04/21/Postgres%20%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>1. 首先， 我选择eclipse CDT作为开发工具，很简单， 在Help-&gt;Install New Software中输入一下网址安装插件即可<br><a href="http://download.eclipse.org/tools/cdt/releases/helios" target="_blank" rel="external">http://download.eclipse.org/tools/cdt/releases/helios</a></p>
<p>2. 下载postgres源码，配置、编译、安装<br>Step 2.1 在终端对PostgreSQL进行配置将目录切换到PostgreSQL源码的根目录，执行如下命令：<br>    cd postgresql-9.2.2<br>    ./configure –prefix=$HOME/project –enable-depend –enable-cassert –enable-debug<br>其中–prefix指定PostgreSQL要安装的目录 （这个目录可以任意指定，但是建议使用绝对路径，这样在后续开发过程中不会出现因路径问题而产生的一系列莫名其妙的问题） –enable-depend、 –enable-cassert及 –enable-debug</p>
<p>Step 2.2 编译PostgreSQL<br>打开Eclipse将PostgreSQL源码导入Eclipse的工作目录，选择File–&gt;import，选择Existing Code as Makefile Project， 然后点击Next,在下面的图示中选择PostgreSQL源码所在的目录，并为工程文件起一个项目名，并选择编译器<br>由于PostgreSQL是使用C编写的，所以也要把C++勾掉，只保留C，然后点击Finish,等待工程导入完毕，这里需要注意的是只有当工程完全导入之后才可以执行下面的操作，否可可能出现错误，（可以通过Eclipse右下角查看当前导入进度）。当工程完全导入之后没有出现错误，则表明PostgreSQL编译成功</p>
<p>Step 2.3  安装PostgreSQL<br>在导入的工程上右键选择Make Targets 然后选择Create，在Make Target选项卡中双击install进行安装，Eclipse控制台中出现“Postgres Installation Complete” 表明PostgreSQL安装成功。</p>
<p>3. 初始化Postgres<br>Step 3.1 此时的PostgreSQL还不能真正使用，还需要进行初始化，在终端中执行如下操作：<br>     export PATH=$HOME/postgresql-9.2.2/bin:$PATH<br>     export PGDATA=DemoDir<br>     initdb</p>
<p>Step 3.2 在Eclipse中项目上右键选择Run As–&gt;Run Configurations，双击C/C++ Application，在Main选项卡中点击Search Project选择Postgres点击Apply。然后再切换到Arguments选项卡，输入参数：-D DemoDir（即上面命令中PGDATA指定的路径）。点击Run，如果看到如下信息表示安装成功。<br>LOG:  database system is ready to accept connections<br>LOG:  autovacuum launcher started</p>
<p>4.  初始Postgres<br>在终端输入：<br>createdb DemoDB<br>psql -l<br>psql DemoDB</p>
<p>5. 在Eclipse中调试PostgreSQL源代码</p>
<p>如果要调试PostgreSQL源码，首先保证安装了gdb，之后在工程上右键，选择Debug  As–&gt;Local C/C++ Application,在弹出的窗口中选择postgres，点击OK, 这时我们就可以通过Eclipse调试PostgreSQL源码了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]SpringMVC源码剖析（四）- DispatcherServlet请求转发的实现]]></title>
      <url>http://yoursite.com/2015/04/16/%5B%E8%BD%AC%5DSpringMVC%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89-%20DispatcherServlet%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://my.oschina.net/lichhao/blog/104943" target="_blank" rel="external">http://my.oschina.net/lichhao/blog/104943</a></p>
<p>SpringMVC完成初始化流程之后，就进入Servlet标准生命周期的第二个阶段，即“service”阶段。在“service”阶段中，每一次Http请求到来，容器都会启动一个请求线程，通过service()方法，委派到doGet()或者doPost()这些方法，完成Http请求的处理。</p>
<p>在初始化流程中，SpringMVC巧妙的运用依赖注入读取参数，并最终建立一个与容器上下文相关联的Spring子上下文。这个子上下文，就像Struts2中xwork容器一样，为接下来的Http处理流程中各种编程元素提供了容身之所。如果说将Spring上下文关联到Servlet容器中，是SpringMVC框架的第一个亮点，那么在请求转发流程中，SpringMVC对各种处理环节编程元素的抽象，就是另外一个独具匠心的亮点。</p>
<p>Struts2采取的是一种完全和Web容器隔离和解耦的事件机制。诸如Action对象、Result对象、Interceptor对象，这些都是完全脱离Servlet容器的编程元素。Struts2将数据流和事件处理完全剥离开来，从Http请求中读取数据后，下面的事件处理流程就只依赖于这些数据，而完全不知道有Web环境的存在。</p>
<p>反观SpringMVC，无论HandlerMapping对象、HandlerAdapter对象还是View对象，这些核心的接口所定义的方法中，HttpServletRequest和HttpServletResponse对象都是直接作为方法的参数出现的。这也就意味着，框架的设计者，直接将SpringMVC框架和容器绑定到了一起。或者说，整个SpringMVC框架，都是依托着Servlet容器元素来设计的。下面就来看一下，源码中是如何体现这一点的。</p>
<p>1.请求转发的入口</p>
<p>就像任何一个注册在容器中的Servlet一样，DispatcherServlet也是通过自己的service()方法来接收和转发Http请求到具体的doGet()或doPost()这些方法的。以一次典型的GET请求为例，经过HttpServlet基类中service()方法的委派，请求会被转发到doGet()方法中。doGet()方法，在DispatcherServlet的父类FrameworkServlet类中被覆写。<br>[java]<br>@Override<br>protected final void doGet(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {</p>
<pre><code>processRequest(request, response);
</code></pre><p>}<br>[/java]<br>可以看到，这里只是简单的转发到processRequest()这个方法。</p>
<p>[java]<br>protected final void processRequest(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {</p>
<pre><code>long startTime = System.currentTimeMillis();
Throwable failureCause = null;

// Expose current LocaleResolver and request as LocaleContext.
LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();
LocaleContextHolder.setLocaleContext(buildLocaleContext(request), this.threadContextInheritable);

// Expose current RequestAttributes to current thread.
RequestAttributes previousRequestAttributes = RequestContextHolder.getRequestAttributes();
ServletRequestAttributes requestAttributes = null;
if (previousRequestAttributes == null || previousRequestAttributes.getClass().equals(ServletRequestAttributes.class)) {
    requestAttributes = new ServletRequestAttributes(request);
    RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);
}

if (logger.isTraceEnabled()) {
    logger.trace(&amp;quot;Bound request context to thread: &amp;quot; + request);
}

try {
    doService(request, response);
}
catch (ServletException ex) {
    failureCause = ex;
    throw ex;
}
catch (IOException ex) {
    failureCause = ex;
    throw ex;
}
catch (Throwable ex) {
    failureCause = ex;
    throw new NestedServletException(&amp;quot;Request processing failed&amp;quot;, ex);
}

finally {
    // Clear request attributes and reset thread-bound context.
    LocaleContextHolder.setLocaleContext(previousLocaleContext, this.threadContextInheritable);
    if (requestAttributes != null) {
        RequestContextHolder.setRequestAttributes(previousRequestAttributes, this.threadContextInheritable);
        requestAttributes.requestCompleted();
    }
    if (logger.isTraceEnabled()) {
        logger.trace(&amp;quot;Cleared thread-bound request context: &amp;quot; + request);
    }

    if (logger.isDebugEnabled()) {
        if (failureCause != null) {
            this.logger.debug(&amp;quot;Could not complete request&amp;quot;, failureCause);
        }
        else {
            this.logger.debug(&amp;quot;Successfully completed request&amp;quot;);
        }
    }
    if (this.publishEvents) {
        // Whether or not we succeeded, publish an event.
        long processingTime = System.currentTimeMillis() - startTime;
        this.webApplicationContext.publishEvent(
                new ServletRequestHandledEvent(this,
                        request.getRequestURI(), request.getRemoteAddr(),
                        request.getMethod(), getServletConfig().getServletName(),
                        WebUtils.getSessionId(request), getUsernameForRequest(request),
                        processingTime, failureCause));
    }
}
</code></pre><p>}[/java]<br>代码有点长，理解的要点是以doService()方法为区隔，前一部分是将当前请求的Locale对象和属性，分别设置到LocaleContextHolder和RequestContextHolder这两个抽象类中的ThreadLocal对象中，也就是分别将这两个东西和请求线程做了绑定。在doService()处理结束后，再恢复回请求前的LocaleContextHolder和RequestContextHolder，也即解除线程绑定。每次请求处理结束后，容器上下文都发布了一个ServletRequestHandledEvent事件，你可以注册监听器来监听该事件。</p>
<p>可以看到，processRequest()方法只是做了一些线程安全的隔离，真正的请求处理，发生在doService()方法中。点开FrameworkServlet类中的doService()方法。<br>[java]<br>protected abstract void doService(HttpServletRequest request, HttpServletResponse response)<br>        throws Exception;<br>[/java]<br>又是一个抽象方法，这也是SpringMVC类设计中的惯用伎俩：父类抽象处理流程，子类给予具体的实现。真正的实现是在DispatcherServlet类中。</p>
<p>让我们接着看DispatcherServlet类中实现的doService()方法。</p>
<p>[java]<br>@Override<br>protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {<br>    if (logger.isDebugEnabled()) {<br>        String requestUri = urlPathHelper.getRequestUri(request);<br>        logger.debug(&quot;DispatcherServlet with name ‘&quot; + getServletName() + &quot;’ processing &quot; + request.getMethod() +<br>                &quot; request for [&quot; + requestUri + &quot;]&quot;);<br>    }</p>
<pre><code>// Keep a snapshot of the request attributes in case of an include,
// to be able to restore the original attributes after the include.
Map&amp;lt;String, Object&amp;gt; attributesSnapshot = null;
if (WebUtils.isIncludeRequest(request)) {
    logger.debug(&amp;quot;Taking snapshot of request attributes before include&amp;quot;);
    attributesSnapshot = new HashMap&amp;lt;String, Object&amp;gt;();
    Enumeration&amp;lt;?&amp;gt; attrNames = request.getAttributeNames();
    while (attrNames.hasMoreElements()) {
        String attrName = (String) attrNames.nextElement();
        if (this.cleanupAfterInclude || attrName.startsWith(&amp;quot;org.springframework.web.servlet&amp;quot;)) {
            attributesSnapshot.put(attrName, request.getAttribute(attrName));
        }
    }
}

// Make framework objects available to handlers and view objects.
request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());
request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);
request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);
request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());

FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);
if (inputFlashMap != null) {
    request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));
}
request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());
request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);

try {
    doDispatch(request, response);
}
finally {
    // Restore the original attribute snapshot, in case of an include.
    if (attributesSnapshot != null) {
        restoreAttributesAfterInclude(request, attributesSnapshot);
    }
}
</code></pre><p>}[/java]<br>几个requet.setAttribute()方法的调用，将前面在初始化流程中实例化的对象设置到http请求的属性中，供下一步处理使用，其中有容器的上下文对象、本地化解析器等SpringMVC特有的编程元素。不同于Struts2中的ValueStack，SpringMVC的数据并没有从HttpServletRequest对象中抽离出来再存进另外一个编程元素，这也跟SpringMVC的设计思想有关。因为从一开始，SpringMVC的设计者就认为，不应该将请求处理过程和Web容器完全隔离。</p>
<p>所以，你可以看到，真正发生请求转发的方法doDispatch()中，它的参数是HttpServletRequest和HttpServletResponse对象。这给我们传递的意思也很明确，从request中能获取到一切请求的数据，从response中，我们又可以往服务器端输出任何响应，Http请求的处理，就应该围绕这两个对象来设计。我们不妨可以将SpringMVC这种设计方案，是从Struts2的过度设计中吸取教训，而向Servlet编程的一种回归和简化。</p>
<p>2.请求转发的抽象描述</p>
<p>接下来让我们看看doDispatch()这个整个请求转发流程中最核心的方法。DispatcherServlet所接收的Http请求，经过层层转发，最终都是汇总到这个方法中来进行最后的请求分发和处理。doDispatch()这个方法的内容，就是SpringMVC整个框架的精华所在。它通过高度抽象的接口，描述出了一个MVC（Model-View-Controller）设计模式的实现方案。Model、View、Controller三种层次的编程元素，在SpringMVC中都有大量的实现类，各种处理细节也是千差万别。但是，它们最后都是由，也都能由doDispatch()方法来统一描述，这就是接口和抽象的威力，万变不离其宗。</p>
<p>先来看一下doDispatch()方法的庐山真面目。<br>[java]<br>protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {<br>    HttpServletRequest processedRequest = request;<br>    HandlerExecutionChain mappedHandler = null;<br>    int interceptorIndex = -1;</p>
<pre><code>try {
    ModelAndView mv;
    boolean errorView = false;

    try {
        processedRequest = checkMultipart(request);

        // Determine handler for the current request.
        mappedHandler = getHandler(processedRequest, false);
        if (mappedHandler == null || mappedHandler.getHandler() == null) {
            noHandlerFound(processedRequest, response);
            return;
        }

        // Determine handler adapter for the current request.
        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());

        // Process last-modified header, if supported by the handler.
        String method = request.getMethod();
        boolean isGet = &amp;quot;GET&amp;quot;.equals(method);
        if (isGet || &amp;quot;HEAD&amp;quot;.equals(method)) {
            long lastModified = ha.getLastModified(request, mappedHandler.getHandler());
            if (logger.isDebugEnabled()) {
                String requestUri = urlPathHelper.getRequestUri(request);
                logger.debug(&amp;quot;Last-Modified value for [&amp;quot; + requestUri + &amp;quot;] is: &amp;quot; + lastModified);
            }
            if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;amp;&amp;amp; isGet) {
                return;
            }
        }

        // Apply preHandle methods of registered interceptors.
        HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();
        if (interceptors != null) {
            for (int i = 0; i &amp;lt; interceptors.length; i++) {
                HandlerInterceptor interceptor = interceptors[i];
                if (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) {
                    triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);
                    return;
                }
                interceptorIndex = i;
            }
        }

        // Actually invoke the handler.
        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

        // Do we need view name translation?
        if (mv != null &amp;amp;&amp;amp; !mv.hasView()) {
            mv.setViewName(getDefaultViewName(request));
        }

        // Apply postHandle methods of registered interceptors.
        if (interceptors != null) {
            for (int i = interceptors.length - 1; i &amp;gt;= 0; i--) {
                HandlerInterceptor interceptor = interceptors[i];
                interceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);
            }
        }
    }
    catch (ModelAndViewDefiningException ex) {
        logger.debug(&amp;quot;ModelAndViewDefiningException encountered&amp;quot;, ex);
        mv = ex.getModelAndView();
    }
    catch (Exception ex) {
        Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);
        mv = processHandlerException(processedRequest, response, handler, ex);
        errorView = (mv != null);
    }

    // Did the handler return a view to render?
    if (mv != null &amp;amp;&amp;amp; !mv.wasCleared()) {
        render(mv, processedRequest, response);
        if (errorView) {
            WebUtils.clearErrorRequestAttributes(request);
        }
    }
    else {
        if (logger.isDebugEnabled()) {
            logger.debug(&amp;quot;Null ModelAndView returned to DispatcherServlet with name &apos;&amp;quot; + getServletName() +
                    &amp;quot;&apos;: assuming HandlerAdapter completed request handling&amp;quot;);
        }
    }

    // Trigger after-completion for successful outcome.
    triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);
}

catch (Exception ex) {
    // Trigger after-completion for thrown exception.
    triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);
    throw ex;
}
catch (Error err) {
    ServletException ex = new NestedServletException(&amp;quot;Handler processing failed&amp;quot;, err);
    // Trigger after-completion for thrown exception.
    triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);
    throw ex;
}

finally {
    // Clean up any resources used by a multipart request.
    if (processedRequest != request) {
        cleanupMultipart(processedRequest);
    }
}
</code></pre><p>}[/java]<br>真是千呼万唤始出来，犹抱琵琶半遮面。我们在第一篇《SpringMVC源码剖析（一）- 从抽象和接口说起》中所描述的各种编程元素，依次出现在该方法中。HandlerMapping、HandlerAdapter、View这些接口的设计，我们在第一篇中已经讲过。现在我们来重点关注一下HandlerExecutionChain这个对象。</p>
<p>从上面的代码中，很明显可以看出一条线索，整个方法是围绕着如何获取HandlerExecutionChain对象，执行HandlerExecutionChain对象得到相应的视图对象，再对视图进行渲染这条主线来展开的。HandlerExecutionChain对象显得异常重要。</p>
<p>因为Http请求要进入SpringMVC的处理体系，必须由HandlerMapping接口的实现类映射Http请求，得到一个封装后的HandlerExecutionChain对象。再由HandlerAdapter接口的实现类来处理这个HandlerExecutionChain对象所包装的处理对象，来得到最后渲染的视图对象。</p>
<p>视图对象是用ModelAndView对象来描述的，名字已经非常直白，就是数据和视图，其中的数据，由HttpServletRequest的属性得到，视图就是由HandlerExecutionChain封装的处理对象处理后得到。当然HandlerExecutionChain中的拦截器列表HandlerInterceptor，会在处理过程的前后依次被调用，为处理过程留下充足的扩展点。</p>
<p>所有的SpringMVC框架元素，都是围绕着HandlerExecutionChain这个执行链来发挥效用。我们来看看，HandlerExecutionChain类的代码。</p>
<p>[java]<br>package org.springframework.web.servlet;</p>
<p>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.List;</p>
<p>import org.springframework.util.CollectionUtils;</p>
<p>public class HandlerExecutionChain {</p>
<pre><code>private final Object handler;

private HandlerInterceptor[] interceptors;

private List&amp;lt;HandlerInterceptor&amp;gt; interceptorList;

public HandlerExecutionChain(Object handler) {
    this(handler, null);
}

public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {
    if (handler instanceof HandlerExecutionChain) {
        HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;
        this.handler = originalChain.getHandler();
        this.interceptorList = new ArrayList&amp;lt;HandlerInterceptor&amp;gt;();
        CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList);
        CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList);
    }
    else {
        this.handler = handler;
        this.interceptors = interceptors;
    }
}

public Object getHandler() {
    return this.handler;
}

public void addInterceptor(HandlerInterceptor interceptor) {
    initInterceptorList();
    this.interceptorList.add(interceptor);
}

public void addInterceptors(HandlerInterceptor[] interceptors) {
    if (interceptors != null) {
        initInterceptorList();
        this.interceptorList.addAll(Arrays.asList(interceptors));
    }
}

private void initInterceptorList() {
    if (this.interceptorList == null) {
        this.interceptorList = new ArrayList&amp;lt;HandlerInterceptor&amp;gt;();
    }
    if (this.interceptors != null) {
        this.interceptorList.addAll(Arrays.asList(this.interceptors));
        this.interceptors = null;
    }
}

public HandlerInterceptor[] getInterceptors() {
    if (this.interceptors == null &amp;amp;&amp;amp; this.interceptorList != null) {
        this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()]);
    }
    return this.interceptors;
}

@Override
public String toString() {
    if (this.handler == null) {
        return &amp;quot;HandlerExecutionChain with no handler&amp;quot;;
    }
    StringBuilder sb = new StringBuilder();
    sb.append(&amp;quot;HandlerExecutionChain with handler [&amp;quot;).append(this.handler).append(&amp;quot;]&amp;quot;);
    if (!CollectionUtils.isEmpty(this.interceptorList)) {
        sb.append(&amp;quot; and &amp;quot;).append(this.interceptorList.size()).append(&amp;quot; interceptor&amp;quot;);
        if (this.interceptorList.size() &amp;gt; 1) {
            sb.append(&amp;quot;s&amp;quot;);
        }
    }
    return sb.toString();
}
</code></pre><p>}[/java]<br>一个拦截器列表，一个执行对象，这个类的内容十分的简单，它蕴含的设计思想，却十分的丰富。</p>
<p>1.拦截器组成的列表，在执行对象被调用的前后，会依次执行。这里可以看成是一个的AOP环绕通知，拦截器可以对处理对象随心所欲的进行处理和增强。这里明显是吸收了Struts2中拦截器的设计思想。这种AOP环绕式的扩展点设计，也几乎成为所有框架必备的内容。</p>
<p>2.实际的处理对象，即handler对象，是由Object对象来引用的。</p>
<p>[java]<br>private final Object handler;[/java]<br>之所以要用一个java世界最基础的Object对象引用来引用这个handler对象，是因为连特定的接口也不希望绑定在这个handler对象上，从而使handler对象具有最大程度的选择性和灵活性。</p>
<p>我们常说，一个框架最高层次的抽象是接口，但是这里SpringMVC更进了一步。在最后的处理对象上面，SpringMVC没有对它做任何的限制，只要是java世界中的对象，都可以用来作为最后的处理对象，来生成视图。极端一点来说，你甚至可以将另外一个MVC框架集成到SpringMVC中来，也就是为什么SpringMVC官方文档中，居然还有集成其他表现层框架的内容。这一点，在所有表现层框架中，是独领风骚，冠绝群雄的。<br><img src="http://static.oschina.net/uploads/space/2013/0125/203718_HPiY_118997.jpg" alt=""></p>
<p>3.结语</p>
<p>SpringMVC的成功，源于它对开闭原则的运用和遵守。也正因此，才使得整个框架具有如此强大的描述和扩展能力。这也许和SpringMVC出现和兴起的时间有关，正是经历了Struts1到Struts2这些Web开发领域MVC框架的更新换代，它的设计者才能站在前人的肩膀上。知道了如何将事情做的糟糕之后，你或许才知道如何将事情做得好。</p>
<p>希望在这个系列里面分享的SpringMVC源码阅读经验，能帮助读者们从更高的层次来审视SpringMVC框架的设计，也希望这里所描述的一些基本设计思想，能在你更深入的了解SpringMVC的细节时，对你有帮助。哲学才是唯一的、最终的武器，在一个框架的设计上，尤其是如此。经常地体会一个框架设计者的设计思想，对你更好的使用它，是有莫大的益处的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]SpringMVC源码剖析（三）- DispatcherServlet的初始化流程]]></title>
      <url>http://yoursite.com/2015/04/15/%5B%E8%BD%AC%5DSpringMVC%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89-%20DispatcherServlet%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://my.oschina.net/lichhao/blog/102315" target="_blank" rel="external">http://my.oschina.net/lichhao/blog/102315</a></p>
<p>在我们第一次学Servlet编程，学java web的时候，还没有那么多框架。我们开发一个简单的功能要做的事情很简单，就是继承HttpServlet，根据需要重写一下doGet，doPost方法，跳转到我们定义好的jsp页面。Servlet类编写完之后在web.xml里注册这个Servlet类。</p>
<p>除此之外，没有其他了。我们启动web服务器，在浏览器中输入地址，就可以看到浏览器上输出我们写好的页面。为了更好的理解上面这个过程，你需要学习关于Servlet生命周期的三个阶段，就是所谓的“init-service-destroy”。</p>
<p>以上的知识，我觉得对于你理解SpringMVC的设计思想，已经足够了。SpringMVC当然可以称得上是一个复杂的框架，但是同时它又遵循Servlet世界里最简单的法则，那就是“init-service-destroy”。我们要分析SpringMVC的初始化流程，其实就是分析DispatcherServlet类的init()方法，让我们带着这种单纯的观点，打开DispatcherServlet的源码一窥究竟吧。</p>
<p>1.<init-param>配置元素读取</init-param></p>
<p>用Eclipse IDE打开DispatcherServlet类的源码，ctrl+T看一下。<br><img src="http://static.oschina.net/uploads/space/2013/0114/170921_edHO_118997.jpg" alt=""></p>
<p>DispatcherServlet类的初始化入口方法init()定义在HttpServletBean这个父类中，HttpServletBean类作为一个直接继承于HttpServlet类的类，覆写了HttpServlet类的init()方法，实现了自己的初始化行为。<br>[java]<br>@Override<br>    public final void init() throws ServletException {<br>        if (logger.isDebugEnabled()) {<br>            logger.debug(&quot;Initializing servlet ‘&quot; + getServletName() + &quot;’&quot;);<br>        }</p>
<pre><code>    // Set bean properties from init parameters.
    try {
        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);
        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);
        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());
        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, this.environment));
        initBeanWrapper(bw);
        bw.setPropertyValues(pvs, true);
    }
    catch (BeansException ex) {
        logger.error(&amp;quot;Failed to set bean&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; properties on servlet &apos;&amp;quot; + getServletName() + &amp;quot;&apos;&amp;quot;, ex);
        throw ex;
    }

    // Let subclasses do whatever initialization they like.
    initServletBean();

    if (logger.isDebugEnabled()) {
        logger.debug(&amp;quot;Servlet &apos;&amp;quot; + getServletName() + &amp;quot;&apos; configured successfully&amp;quot;);
    }
}
</code></pre><p>[/java]<br>这里的initServletBean()方法在HttpServletBean类中是一个没有任何实现的空方法，它的目的就是留待子类实现自己的初始化逻辑，也就是我们常说的模板方法设计模式。SpringMVC在此生动的运用了这个模式，init()方法就是模版方法模式中的模板方法，SpringMVC真正的初始化过程，由子类FrameworkServlet中覆写的initServletBean()方法触发。</p>
<p>再看一下init()方法内被try,catch块包裹的代码，里面涉及到BeanWrapper，PropertyValues，ResourceEditor这些Spring内部非常底层的类。要深究具体代码实现上面的细节，需要对Spring框架源码具有相当深入的了解。我们这里先避繁就简，从代码效果和设计思想上面来分析这段try,catch块内的代码所做的事情：</p>
<p>注册一个字符串到资源文件的编辑器，让Servlet下面的<init-param>配置元素可以使用形如“classpath:”这种方式指定SpringMVC框架bean配置文件的来源。<br>将web.xml中在DispatcherServlet这个Servlet下面的<init-param>配置元素利用JavaBean的方式（即通过setter方法）读取到DispatcherServlet中来。<br>这两点，我想通过下面一个例子来说明一下。</init-param></init-param></p>
<p>我在web.xml中注册的DispatcherServlet配置如下：<br>[java]<br>&lt;!– springMVC配置开始 –&gt;<br>&lt;servlet&gt;<br>    &lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;<br>    &lt;init-param&gt;<br>        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<br>        &lt;param-value&gt;classpath:spring/spring-servlet.xml&lt;/param-value&gt;<br>    &lt;/init-param&gt;<br>    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>&lt;/servlet&gt;<br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br>&lt;!– springMVC配置结束 –&gt;[/java]<br>可以看到，我注册了一个名为contextConfigLocation的<init-param>元素，其值为“classpath:spring/spring-servlet.xml”，这也是大家常常用来指定SpringMVC配置文件路径的方法。上面那段try,catch块包裹的代码发挥的作用，一个是将“classpath:spring/spring-servlet.xml”这段字符串转换成classpath路径下的一个资源文件，供框架初始化读取配置元素。在我的工程中是在spring文件夹下面的配置文件spring-servlet.xml。<br><img src="http://static.oschina.net/uploads/space/2013/0114/185832_7twm_118997.jpg" alt=""></init-param></p>
<p>另外一个作用，就是将contextConfigLocation的值读取出来，然后通过setContextConfigLocation()方法设置到DispatcherServlet中，这个setContextConfigLocation()方法是在FrameworkServlet类中定义的，也就是上面继承类图中DispatcherServlet的直接父类。</p>
<p>我们在setContextConfigLocation()方法上面打上一个断点，启动web工程，可以看到下面的调试结果。<br><img src="http://static.oschina.net/uploads/space/2013/0114/190308_tfyy_118997.jpg" alt=""></p>
<p>HttpServletBean类的作者是大名鼎鼎的Spring之父Rod Johnson。作为POJO编程哲学的大师，他在HttpServletBean这个类的设计中，运用了依赖注入思想完成了<init-param>配置元素的读取。他抽离出HttpServletBean这个类的目的也在于此，就是“以依赖注入的方式来读取Servlet类的<init-param>配置信息”，而且这里很明显是一种setter注入。</init-param></init-param></p>
<p>明白了HttpServletBean类的设计思想，我们也就知道可以如何从中获益。具体来说，我们继承HttpServletBean类（就像DispatcherServlet做的那样），在类中定义一个属性，为这个属性加上setter方法后，我们就可以在<init-param>元素中为其定义值。在类被初始化后，值就会被注入进来，我们可以直接使用它，避免了样板式的getInitParameter()方法的使用，而且还免费享有Spring中资源编辑器的功能，可以在web.xml中，通过“classpath:”直接指定类路径下的资源文件。</init-param></p>
<p>注意，虽然SpringMVC本身为了后面初始化上下文的方便，使用了字符串来声明和设置contextConfigLocation参数，但是将其声明为Resource类型，同样能够成功获取。鼓励读者们自己继承HttpServletBean写一个测试用的Servlet类，并设置一个参数来调试一下，这样能够帮助你更好的理解获取配置参数的过程。</p>
<p>2.容器上下文的建立</p>
<p>上一篇文章中提到过，SpringMVC使用了Spring容器来容纳自己的配置元素，拥有自己的bean容器上下文。在SpringMVC初始化的过程中，非常关键的一步就是要建立起这个容器上下文，而这个建立上下文的过程，发生在FrameworkServlet类中，由上面init()方法中的initServletBean()方法触发。<br>[java]<br>@Override<br>protected final void initServletBean() throws ServletException {<br>    getServletContext().log(&quot;Initializing Spring FrameworkServlet ‘&quot; + getServletName() + &quot;’&quot;);<br>    if (this.logger.isInfoEnabled()) {<br>        this.logger.info(&quot;FrameworkServlet ‘&quot; + getServletName() + &quot;’: initialization started&quot;);<br>    }<br>    long startTime = System.currentTimeMillis();</p>
<pre><code>try {
    this.webApplicationContext = initWebApplicationContext();
    initFrameworkServlet();
}
catch (ServletException ex) {
    this.logger.error(&amp;quot;Context initialization failed&amp;quot;, ex);
    throw ex;
}
catch (RuntimeException ex) {
    this.logger.error(&amp;quot;Context initialization failed&amp;quot;, ex);
    throw ex;
}

if (this.logger.isInfoEnabled()) {
    long elapsedTime = System.currentTimeMillis() - startTime;
    this.logger.info(&amp;quot;FrameworkServlet &apos;&amp;quot; + getServletName() + &amp;quot;&apos;: initialization completed in &amp;quot; +
            elapsedTime + &amp;quot; ms&amp;quot;);
}
</code></pre><p>}[/java]<br>initFrameworkServlet()方法是一个没有任何实现的空方法，除去一些样板式的代码，那么这个initServletBean()方法所做的事情已经非常明白：</p>
<p>[java]<br>this.webApplicationContext = initWebApplicationContext();[/java]<br>这一句简单直白的代码，道破了FrameworkServlet这个类，在SpringMVC类体系中的设计目的，它是 用来抽离出建立 WebApplicationContext 上下文这个过程的。<br>initWebApplicationContext()方法，封装了建立Spring容器上下文的整个过程，方法内的逻辑如下：</p>
<p>获取由ContextLoaderListener初始化并注册在ServletContext中的根上下文，记为rootContext<br>如果webApplicationContext已经不为空，表示这个Servlet类是通过编程式注册到容器中的（Servlet 3.0+中的ServletContext.addServlet() ），上下文也由编程式传入。若这个传入的上下文还没被初始化，将rootContext上下文设置为它的父上下文，然后将其初始化，否则直接使用。<br>通过wac变量的引用是否为null，判断第2步中是否已经完成上下文的设置（即上下文是否已经用编程式方式传入），如果wac==null成立，说明该Servlet不是由编程式注册到容器中的。此时以contextAttribute属性的值为键，在ServletContext中查找上下文，查找得到，说明上下文已经以别的方式初始化并注册在contextAttribute下，直接使用。<br>检查wac变量的引用是否为null，如果wac==null成立，说明2、3两步中的上下文初始化策略都没成功，此时调用createWebApplicationContext(rootContext)，建立一个全新的以rootContext为父上下文的上下文，作为SpringMVC配置元素的容器上下文。大多数情况下我们所使用的上下文，就是这个新建的上下文。<br>以上三种初始化上下文的策略，都会回调onRefresh(ApplicationContext context)方法（回调的方式根据不同策略有不同），onRefresh方法在DispatcherServlet类中被覆写，以上面得到的上下文为依托，完成SpringMVC中默认实现类的初始化。<br>最后，将这个上下文发布到ServletContext中，也就是将上下文以一个和Servlet类在web.xml中注册名字有关的值为键，设置为ServletContext的一个属性。你可以通过改变publishContext的值来决定是否发布到ServletContext中，默认为true。<br>以上面6点跟踪FrameworkServlet类中的代码，可以比较清晰的了解到整个容器上下文的建立过程，也就能够领会到FrameworkServlet类的设计目的，它是用来建立一个和Servlet关联的Spring容器上下文，并将其注册到ServletContext中的。跳脱开SpringMVC体系，我们也能通过继承FrameworkServlet类，得到与Spring容器整合的好处，FrameworkServlet和HttpServletBean一样，是一个可以独立使用的类。整个SpringMVC设计中，处处体现开闭原则，这里显然也是其中一点。</p>
<p>3.初始化SpringMVC默认实现类</p>
<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过onRefresh(ApplicationContext context)方法的回调，进入到DispatcherServlet类中。</p>
<p>[java]<br>@Override<br>protected void onRefresh(ApplicationContext context) {<br>    initStrategies(context);<br>}[/java]<br>DispatcherServlet类覆写了父类FrameworkServlet中的onRefresh(ApplicationContext context)方法，提供了SpringMVC各种编程元素的初始化。当然这些编程元素，都是作为容器上下文中一个个bean而存在的。具体的初始化策略，在initStrategies()方法中封装。</p>
<p>[java]<br>protected void initStrategies(ApplicationContext context) {<br>    initMultipartResolver(context);<br>    initLocaleResolver(context);<br>    initThemeResolver(context);<br>    initHandlerMappings(context);<br>    initHandlerAdapters(context);<br>    initHandlerExceptionResolvers(context);<br>    initRequestToViewNameTranslator(context);<br>    initViewResolvers(context);<br>    initFlashMapManager(context);<br>}[/java]<br>我们以其中initHandlerMappings(context)方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。<br>[java]<br>private void initHandlerMappings(ApplicationContext context) {<br>        this.handlerMappings = null;</p>
<pre><code>    if (this.detectAllHandlerMappings) {
        // Find all HandlerMappings in the ApplicationContext, including ancestor contexts.
        Map&amp;lt;String, HandlerMapping&amp;gt; matchingBeans =
                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);
        if (!matchingBeans.isEmpty()) {
            this.handlerMappings = new ArrayList&amp;lt;HandlerMapping&amp;gt;(matchingBeans.values());
            // We keep HandlerMappings in sorted order.
            OrderComparator.sort(this.handlerMappings);
        }
    }
    else {
        try {
            HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);
            this.handlerMappings = Collections.singletonList(hm);
        }
        catch (NoSuchBeanDefinitionException ex) {
            // Ignore, we&apos;ll add a default HandlerMapping later.
        }
    }

    // Ensure we have at least one HandlerMapping, by registering
    // a default HandlerMapping if no other mappings are found.
    if (this.handlerMappings == null) {
        this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);
        if (logger.isDebugEnabled()) {
            logger.debug(&amp;quot;No HandlerMappings found in servlet &apos;&amp;quot; + getServletName() + &amp;quot;&apos;: using default&amp;quot;);
        }
    }
}[/java]
</code></pre><p>detectAllHandlerMappings变量默认为true，所以在初始化HandlerMapping接口默认实现类的时候，会把上下文中所有HandlerMapping类型的Bean都注册在handlerMappings这个List变量中。如果你手工将其设置为false，那么将尝试获取名为handlerMapping的Bean，新建一个只有一个元素的List，将其赋给handlerMappings。如果经过上面的过程，handlerMappings变量仍为空，那么说明你没有在上下文中提供自己HandlerMapping类型的Bean定义。此时，SpringMVC将采用默认初始化策略来初始化handlerMappings。</p>
<p>点进去getDefaultStrategies看一下。</p>
<p>[java]<br>@SuppressWarnings(&quot;unchecked&quot;)<br>protected &lt;T&gt; List&lt;T&gt; getDefaultStrategies(ApplicationContext context, Class&lt;T&gt; strategyInterface) {<br>    String key = strategyInterface.getName();<br>    String value = defaultStrategies.getProperty(key);<br>    if (value != null) {<br>        String[] classNames = StringUtils.commaDelimitedListToStringArray(value);<br>        List&lt;T&gt; strategies = new ArrayList&lt;T&gt;(classNames.length);<br>        for (String className : classNames) {<br>            try {<br>                Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());<br>                Object strategy = createDefaultStrategy(context, clazz);<br>                strategies.add((T) strategy);<br>            }<br>            catch (ClassNotFoundException ex) {<br>                throw new BeanInitializationException(<br>                        &quot;Could not find DispatcherServlet’s default strategy class [&quot; + className +<br>                                &quot;] for interface [&quot; + key + &quot;]&quot;, ex);<br>            }<br>            catch (LinkageError err) {<br>                throw new BeanInitializationException(<br>                        &quot;Error loading DispatcherServlet’s default strategy class [&quot; + className +<br>                                &quot;] for interface [&quot; + key + &quot;]: problem with class file or dependent class&quot;, err);<br>            }<br>        }<br>        return strategies;<br>    }<br>    else {<br>        return new LinkedList&lt;T&gt;();<br>    }<br>}[/java]<br>它是一个范型的方法，承担所有SpringMVC编程元素的默认初始化策略。方法的内容比较直白，就是以传递类的名称为键，从defaultStrategies这个Properties变量中获取实现类，然后反射初始化。</p>
<p>需要说明一下的是defaultStrategies变量的初始化，它是在DispatcherServlet的静态初始化代码块中加载的。<br>[java]<br>private static final Properties defaultStrategies;</p>
<p>static {<br>    // Load default strategy implementations from properties file.<br>    // This is currently strictly internal and not meant to be customized<br>    // by application developers.<br>    try {<br>        ClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);<br>        defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);<br>    }<br>    catch (IOException ex) {<br>        throw new IllegalStateException(&quot;Could not load ‘DispatcherServlet.properties’: &quot; + ex.getMessage());<br>    }<br>}[/java]<br>[java]<br>private static final String DEFAULT_STRATEGIES_PATH = &quot;DispatcherServlet.properties&quot;;[/java]<br>这个DispatcherServlet.properties里面，以键值对的方式，记录了SpringMVC默认实现类，它在spring-webmvc-3.1.3.RELEASE.jar这个jar包内，在org.springframework.web.servlet包里面。<br>[java]</p>
<h1 id="Default-implementation-classes-for-DispatcherServlet’s-strategy-interfaces"><a href="#Default-implementation-classes-for-DispatcherServlet’s-strategy-interfaces" class="headerlink" title="Default implementation classes for DispatcherServlet’s strategy interfaces."></a>Default implementation classes for DispatcherServlet’s strategy interfaces.</h1><h1 id="Used-as-fallback-when-no-matching-beans-are-found-in-the-DispatcherServlet-context"><a href="#Used-as-fallback-when-no-matching-beans-are-found-in-the-DispatcherServlet-context" class="headerlink" title="Used as fallback when no matching beans are found in the DispatcherServlet context."></a>Used as fallback when no matching beans are found in the DispatcherServlet context.</h1><h1 id="Not-meant-to-be-customized-by-application-developers"><a href="#Not-meant-to-be-customized-by-application-developers" class="headerlink" title="Not meant to be customized by application developers."></a>Not meant to be customized by application developers.</h1><p>org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</p>
<p>org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</p>
<p>org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\<br>    org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</p>
<p>org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\<br>    org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\<br>    org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</p>
<p>org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\<br>    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\<br>    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</p>
<p>org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</p>
<p>org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</p>
<p>org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager[/java]<br>至此，我们分析完了initHandlerMappings(context)方法的执行过程，其他的初始化过程与这个方法非常类似。所有初始化方法执行完后，SpringMVC正式完成初始化，静静等待Web请求的到来。</p>
<p>4.总结</p>
<p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。其中HttpServletBean完成的是<init-param>配置元素的依赖注入，FrameworkServlet完成的是容器上下文的建立，DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</init-param></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]SpringMVC源码剖析（二）- DispatcherServlet的前世今生]]></title>
      <url>http://yoursite.com/2015/04/14/%5B%E8%BD%AC%5DSpringMVC%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89-%20DispatcherServlet%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://my.oschina.net/lichhao/blog/100138" target="_blank" rel="external">http://my.oschina.net/lichhao/blog/100138</a></p>
<p>上一篇文章《SpringMVC源码剖析（一）- 从抽象和接口说起》中，我介绍了一次典型的SpringMVC请求处理过程中，相继粉墨登场的各种核心类和接口。我刻意忽略了源码中的处理细节，只列出最简单的类甚至是接口类，目的就是让大家先从最高层次的抽象意义上来审视SpringMVC这个框架；我也刻意将SpringMVC和Struts2做对比，目的是让大家看到，SpringMVC究竟吸取了Sturts2设计思想中的哪些精华，又弥补了它的哪些遗憾。</p>
<p>DispatcherServlet作为SpringMVC的核心之中的核心类，再怎么强调它的重要性也不为过。SpringMVC所有的核心类和接口，都密集地出现在DispatcherServlet的源码中，SpringMVC源码剖析，很大程度上可以说也是在剖析DispatcherServlet这一个类。这一篇文章里，我先说几点关于DispatcherServlet的前世今生，希望能帮助你更好的理解它。</p>
<p>1.对扩展开放，对修改封闭</p>
<p>SpringMVC是一个基于著名的Open-Closed，即开闭原则进行设计的框架。在Spring官方文档里面关于SpringMVC的介绍开宗明义地进行了说明：</p>
<p>[java]<br>A key design principle in Spring Web MVC and in Spring in general is the “Open for extension,closed for modification” principle.[/java]<br>开闭原则是一个很宽泛的原则，具体体现到DispatcherServlet的源码中，我们可以大致摸得到一些线索：</p>
<p>类中所有的变量声明，几乎都以接口的形式给出，并没有绑定在具体的实现类上。<br>使用模版方法模式，在父类中对基础行为进行定义，让子类实现模版方法扩展行为。<br>其中第一点，在一个框架的设计中尤为重要，也是贯彻开闭原则最重要的一点。因为当你通过一些高层次的接口或者抽象类，将一个类完成的逻辑或流程编写完成后（具体点说，是通过一个接口的引用调用接口方法），整个逻辑或流程的功能就被确实的在源码中固定下来了。可是这时，这些接口或抽象类的具体实现者是谁，还没有固定！这就给了你的系统或框架近乎无限的扩展性，因为你可以任意安排和实现这些类。</p>
<p>我认为，面向对象设计的精髓，是对现实世界中“行为和契约”的描述。这个“行为和契约”，体现在接口和抽象类的方法声明中。软件设计师要用面向对象的眼光去观察和抽象这个世界中的事物，这里的事物可以是一些商业逻辑、可以是一些处理流程，然后用高层次的接口去描述这些行为和契约。当你在越抽象的层次上将这些行为和契约描述清楚后，你所设计的系统就是越符合开闭原则的。</p>
<p>SpringMVC框架在面向对象设计上，做出了绝佳的示范。它通过高度抽象的接口，描述出了一次请求处理的流程，从而让整个框架从一开始就是符合开闭原则的。同时它也提供了这些接口的一系列默认实现类，让你不需要很复杂的配置，就能很好的使用SpringMVC进行开发。抽象的确是个利器，但是框架绝不能运行在空中楼阁中，SpringMVC提供的的这一系列默认实现类必须要有容身之所。聪明的你可能早已想到：Spring IOC容器。这就引出了我要说的第二点。</p>
<p>2.配置元素的对象化</p>
<p>所有的框架，都需要有这样一个功能，叫做：配置元素的对象化。因为几乎所有的框架，都将配置元素集中到外部的xml配置文件中，然后在框架的初始化流程中，对这些配置文件进行解析，再变成java世界中的一个个对象供框架使用，这整个过程，可以被称为配置元素的对象化。为什么要有配置文件呢？这个问题的回答也是很简单，因为没有人会想要使用一个配置散布在框架中各个java类源码里面的框架。框架也不允许使用者这样子做，因为框架在发布的时候，提供的是一个个jar包文件，jar包内是已经编译好的class文件。配置文件由使用者外部提供，框架对它进行解析，使用者能得到集中配置的好处，框架也乐于这样子，可以说是合情合理。</p>
<p>那么作为Spring产品族的新成员，SpringMVC在设计的时候，相信设计者们不做它想，这一个“配置元素的对象化”功能既然不可避免，那么使用Spring IOC容器，通过bean配置文件来配置SpringMVC，绝对是不二之选。不可能像Struts2一样，内部再搞一个别的容器，因为Spring容器本身已经是被高度设计，而且已经在java世界获得巨大成功。从推广的角度上来说，如果对spring容器的所有知识，都可以完整的应用到SpringMVC，那么对于开发者无疑是一个极大的吸引力。</p>
<p>剩下的问题就只有：到底该如何将Spring容器和SpringMVC的初始化过程整合起来呢？</p>
<p>答案就是WebApplicationContext接口，更具体点说，是XmlWebApplicationContext这个Spring上下文实现类。SpringMVC也使用了这一个为了将Spring容器和Web环境整合而特意设计的Spring上下文类。我们打开WebApplicationContext的源码：</p>
<p>[java]<br>package org.springframework.web.context;</p>
<p>import javax.servlet.ServletContext;</p>
<p>import org.springframework.context.ApplicationContext;</p>
<p>public interface WebApplicationContext extends ApplicationContext {</p>
<pre><code>String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + &amp;quot;.ROOT&amp;quot;;

String SCOPE_REQUEST = &amp;quot;request&amp;quot;;

String SCOPE_SESSION = &amp;quot;session&amp;quot;;

String SCOPE_GLOBAL_SESSION = &amp;quot;globalSession&amp;quot;;

String SCOPE_APPLICATION = &amp;quot;application&amp;quot;;

String SERVLET_CONTEXT_BEAN_NAME = &amp;quot;servletContext&amp;quot;;

String CONTEXT_PARAMETERS_BEAN_NAME = &amp;quot;contextParameters&amp;quot;;

String CONTEXT_ATTRIBUTES_BEAN_NAME = &amp;quot;contextAttributes&amp;quot;;

ServletContext getServletContext();
</code></pre><p>}[/java]<br>发现它是继承于ApplicationContext这个普通Spring容器所使用的上下文接口类，除了一些常量的声明，只多了一个可以获取到ServletContext的getServletContext()方法。回到上面提到的“行为和契约的描述”上，我们可以大胆的断言，Spring容器和Web环境的整合，是在ServletContext上做文章。</p>
<p>打开所有使用了Spring的Web项目的web.xml文件，必定有这样一段配置：<br>[java]<br>&lt;listener&gt;<br>    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;<br>&lt;/listener&gt;[/java]<br>ContextLoaderListener实现了ServletContextListener接口，在Servlet容器启动的时候，会初始化一个WebApplicationContext的实现类，并将其作为ServletContext的一个属性设置到Servlet环境中，摘抄源码如下： </p>
<p>[java]<br>servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);<br>[/java]<br>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的值，在上面WebApplicationContext的源码中的第一个常量中就被声明，是WebApplicationContext.class.getName() + “.ROOT”，更直接一点，它是“org.springframework.web.context.WebApplicationContext.ROOT”。ContextLoaderListener所初始化的这个Spring容器上下文，被称为根上下文。</p>
<p>SpringMVC在DispatcherServlet的初始化过程中，同样会初始化一个WebApplicationContext的实现类，作为自己独有的上下文，这个独有的上下文，会将上面的根上下文作为自己的父上下文，来存放SpringMVC的配置元素，然后同样作为ServletContext的一个属性，被设置到ServletContext中，只不过它的key就稍微有点不同，key和具体的DispatcherServlet注册在web.xml文件中的名字有关，从这一点也决定了，我们可以在web.xml文件中注册多个DispatcherServlet，因为Servlet容器中注册的Servlet名字肯定不一样，设置到Servlet环境中的key也肯定不同。</p>
<p>由于在Spring容器中，子上下文可以访问到所有父上下文中的信息，而父上下文访问不到子上下文的信息，这个根上下文，就很适合作为多个子上下文配置的集中点。以官方文档中的图来说明：<br><img src="http://static.oschina.net/uploads/space/2013/0105/171256_QY0t_118997.jpg" alt=""><br>3.前端控制器</p>
<p>前端控制器，即所谓的Front Controller，体现的是设计模式中的前端控制器模式。前端控制器处理所有从用户过来的请求。所有用户的请求都要通过前端控制器。SpringMVC框架和其他请求驱动的表示层框架一样，也是围绕一个将请求分发到相应控制器的核心Servlet来设计的。DispatcherServlet和其他框架中的Servlet不一样的地方在于，它和Spring容器无缝整合在了一起，因此你可以在SpringMVC中使用Spring容器所有的特性。</p>
<p>DispatcherServlet这个前端控制器，在SpringMVC中的作用，以官方文档中的配图来说明：<br><img src="http://static.oschina.net/uploads/space/2013/0105/172154_xuHb_118997.jpg" alt=""></p>
<p>整个流程可以被大致描述为：一个http请求到达服务器，被DispatcherServlet接收。DispatcherServlet将请求委派给合适的处理器Controller，此时处理控制权到达Controller对象。Controller内部完成请求的数据模型的创建和业务逻辑的处理，然后再将填充了数据后的模型即model和控制权一并交还给DispatcherServlet，委派DispatcherServlet来渲染响应。DispatcherServlet再将这些数据和适当的数据模版视图结合，向Response输出响应。</p>
<p>可以看到Model-View-Controller这三样东西协同合作，共同体现出MVC的设计理念，三个层次可以分别独立演化，整个系统架构又清晰又简洁。这是SpringMVC为我们描述的美好愿景，后面我们也将看到，SpringMVC为了实现这一承诺，究竟做出了什么样的努力。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]SpringMVC源码剖析（一）- 从抽象和接口说起]]></title>
      <url>http://yoursite.com/2015/04/14/%5B%E8%BD%AC%5DSpringMVC%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-%20%E4%BB%8E%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%8E%A5%E5%8F%A3%E8%AF%B4%E8%B5%B7/</url>
      <content type="html"><![CDATA[<p>原文地址  <a href="http://my.oschina.net/lichhao/blog/99039" target="_blank" rel="external">http://my.oschina.net/lichhao/blog/99039</a><br>SpringMVC作为Struts2之后异军突起的一个表现层框架，正越来越流行，相信javaee的开发者们就算没使用过SpringMVC，也应该对其略有耳闻。我试图通过对SpringMVC的设计思想和源码实现的剖析，从抽象意义上的设计层面和实现意义上的代码层面两个方面，逐一揭开SpringMVC神秘的面纱，本文的代码，都是基于Spring的 3.1.3RELEASE版本。</p>
<p>任何一个框架，都有自己特定的适用领域，框架的设计和实现，必定是为了应付该领域内许多通用的，烦琐的、基础的工作而生。SpringMVC作为一个表现层框架，也必须直面Web开发领域中表现层中的几大课题，并给出自己的回答：</p>
<p>URL到框架的映射。<br>http请求参数绑定<br>http响应的生成和输出<br>这三大课题，组成一个完整的web请求流程，每一个部分都具有非常广阔的外延。SpringMVC框架对这些课题的回答又是什么呢？</p>
<p>学习一个框架，首要的是要先领会它的设计思想。从抽象、从全局上来审视这个框架。其中最具有参考价值的，就是这个框架所定义的核心接口。核心接口定义了框架的骨架，也在最抽象的意义上表达了框架的设计思想。</p>
<p>下面我以一个web请求流程为载体，依次介绍SpringMVC的核心接口和类。</p>
<p>用户在浏览器中，输入了<a href="http://www.xxxx.com/aaa/bbb.ccc的地址，回车后，浏览器发起一个http请求。请求到达你的服务器后，首先会被SpringMVC注册在web.xml中的前端转发器DispatcherServlet接收，DispatcherServlet是一个标准的Servlet，它的作用是接受和转发web请求到内部框架处理单元。" target="_blank" rel="external">http://www.xxxx.com/aaa/bbb.ccc的地址，回车后，浏览器发起一个http请求。请求到达你的服务器后，首先会被SpringMVC注册在web.xml中的前端转发器DispatcherServlet接收，DispatcherServlet是一个标准的Servlet，它的作用是接受和转发web请求到内部框架处理单元。</a></p>
<p>下面看一下第一个出现在你面前的核心接口，它是在org.springframework.web.servlet包中定义的HandlerMapping接口：<br>[java]<br>package org.springframework.web.servlet;</p>
<p>import javax.servlet.http.HttpServletRequest;</p>
<p>public interface HandlerMapping {</p>
<pre><code>String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE = HandlerMapping.class.getName() + &amp;quot;.pathWithinHandlerMapping&amp;quot;;

String BEST_MATCHING_PATTERN_ATTRIBUTE = HandlerMapping.class.getName() + &amp;quot;.bestMatchingPattern&amp;quot;;

String INTROSPECT_TYPE_LEVEL_MAPPING = HandlerMapping.class.getName() + &amp;quot;.introspectTypeLevelMapping&amp;quot;;

String URI_TEMPLATE_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + &amp;quot;.uriTemplateVariables&amp;quot;;

String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + &amp;quot;.producibleMediaTypes&amp;quot;;

HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;
</code></pre><p>}[/java]<br>为了阅读方便，我去掉了源码中的注释，但是我强烈建议你一定要记得去阅读它，这样你才能从框架的设计者口中得到最准确的关于这个类或者接口的设计说明。类中定义的几个常量，我们先不去管它。关键在于这个接口中唯一的方法：</p>
<p>[java]<br>HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;<br>这个方法就算对于一个java初学者来说，也很容易理解：它只有一个类型为HttpServletRequest的参数，throws Exception的声明表示它不处理任何类型的异常，HandlerExecutionChain是它的返回类型。<br>[/java]</p>
<p>回到DispatcherServlet的处理流程，当DispatcherServlet接收到web请求后，由标准Servlet类处理方法doGet或者doPost，经过几次转发后，最终注册在DispatcherServlet类中的HandlerMapping实现类组成的一个List（有点拗口）会在一个循环中被遍历。以该web请求的HttpServletRequest对象为参数，依次调用其getHandler方法，第一个不为null的调用结果，将被返回。DispatcherServlet类中的这个遍历方法不长，贴一下，让大家有更直观的了解。<br>[java]<br>/**</p>
<pre><code> * Return the HandlerExecutionChain for this request.
 * &amp;lt;p&amp;gt;Tries all handler mappings in order.
 * @param request current HTTP request
 * @return the HandlerExecutionChain, or &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; if no handler could be found
 */
protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
    for (HandlerMapping hm : this.handlerMappings) {
        if (logger.isTraceEnabled()) {
            logger.trace(
                    &amp;quot;Testing handler map [&amp;quot; + hm + &amp;quot;] in DispatcherServlet with name &apos;&amp;quot; + getServletName() + &amp;quot;&apos;&amp;quot;);
        }
        HandlerExecutionChain handler = hm.getHandler(request);
        if (handler != null) {
            return handler;
        }
    }
    return null;
}
</code></pre><p>[/java]<br>是的，第一步处理就这么简单的完成了。一个web请求经过处理后，会得到一个HandlerExecutionChain对象，这就是SpringMVC对URl映射给出的回答。需要留意的是，HandlerMapping接口的getHandler方法参数是HttpServletRequest，这意味着，HandlerMapping的实现类可以利用HttpServletRequest中的 所有信息来做出这个HandlerExecutionChain对象的生成”决策“。这包括，请求头、url路径、cookie、session、参数等等一切你从一个web请求中可以得到的任何东西（最常用的是url路径）。</p>
<p>SpirngMVC的第一个扩展点，就出现在这里。我们可以编写任意的HandlerMapping实现类，依据任何策略来决定一个web请求到HandlerExecutionChain对象的生成。可以说，从第一个核心接口的声明开始，SpringMVC就把自己的灵活性和野心暴露无疑：哥玩的就是”Open-Closed“。</p>
<p>HandlerExecutionChain这个类，就是我们下一个要了解的核心类。从名字可以直观的看得出，这个对象是一个执行链的封装。熟悉Struts2的都知道，Action对象也是被层层拦截器包装，这里可以做个类比，说明SpringMVC确实是吸收了Struts2的部分设计思想。</p>
<p>HandlerExecutionChain类的代码不长，它定义在org.springframework.web.servlet包中，为了更直观的理解，先上代码。<br>[java]<br>package org.springframework.web.servlet;</p>
<p>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.List;</p>
<p>import org.springframework.util.CollectionUtils;</p>
<p>public class HandlerExecutionChain {</p>
<pre><code>private final Object handler;

private HandlerInterceptor[] interceptors;

private List&amp;lt;HandlerInterceptor&amp;gt; interceptorList;

public HandlerExecutionChain(Object handler) {
    this(handler, null);
}

public HandlerExecutionChain(Object handler, HandlerInterceptor[] interceptors) {
    if (handler instanceof HandlerExecutionChain) {
        HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;
        this.handler = originalChain.getHandler();
        this.interceptorList = new ArrayList&amp;lt;HandlerInterceptor&amp;gt;();
        CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), this.interceptorList);
        CollectionUtils.mergeArrayIntoCollection(interceptors, this.interceptorList);
    }
    else {
        this.handler = handler;
        this.interceptors = interceptors;
    }
}

public Object getHandler() {
    return this.handler;
}

public void addInterceptor(HandlerInterceptor interceptor) {
    initInterceptorList();
    this.interceptorList.add(interceptor);
}

public void addInterceptors(HandlerInterceptor[] interceptors) {
    if (interceptors != null) {
        initInterceptorList();
        this.interceptorList.addAll(Arrays.asList(interceptors));
    }
}

private void initInterceptorList() {
    if (this.interceptorList == null) {
        this.interceptorList = new ArrayList&amp;lt;HandlerInterceptor&amp;gt;();
    }
    if (this.interceptors != null) {
        this.interceptorList.addAll(Arrays.asList(this.interceptors));
        this.interceptors = null;
    }
}

public HandlerInterceptor[] getInterceptors() {
    if (this.interceptors == null &amp;amp;&amp;amp; this.interceptorList != null) {
        this.interceptors = this.interceptorList.toArray(new HandlerInterceptor[this.interceptorList.size()]);
    }
    return this.interceptors;
}

@Override
public String toString() {
    if (this.handler == null) {
        return &amp;quot;HandlerExecutionChain with no handler&amp;quot;;
    }
    StringBuilder sb = new StringBuilder();
    sb.append(&amp;quot;HandlerExecutionChain with handler [&amp;quot;).append(this.handler).append(&amp;quot;]&amp;quot;);
    if (!CollectionUtils.isEmpty(this.interceptorList)) {
        sb.append(&amp;quot; and &amp;quot;).append(this.interceptorList.size()).append(&amp;quot; interceptor&amp;quot;);
        if (this.interceptorList.size() &amp;gt; 1) {
            sb.append(&amp;quot;s&amp;quot;);
        }
    }
    return sb.toString();
}
</code></pre><p>}<br>[/java]<br>乱七八糟一大堆，相信你也没全看完，也没必要全看。其实只需要看两行足矣。<br>[java]<br>private final Object handler;</p>
<p>private HandlerInterceptor[] interceptors;<br>[/java]<br>不出我们所料，一个实质执行对象，还有一堆拦截器。这不就是Struts2中的实现么，SpringMVC没有避嫌，还是采用了这种封装。得到HandlerExecutionChain这个执行链（execution chain）之后，下一步的处理将围绕其展开。</p>
<p>HandlerInterceptor也是SpringMVC的核心接口，定义如下：<br>[java]<br>package org.springframework.web.servlet;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>public interface HandlerInterceptor {</p>
<pre><code>boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
    throws Exception;

void postHandle(
        HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)
        throws Exception;

void afterCompletion(
        HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
        throws Exception;
</code></pre><p>}[/java]<br>至此，HandlerExecutionChain整个执行脉络也就清楚了：在真正调用其handler对象前，HandlerInterceptor接口实现类组成的数组将会被遍历，其preHandle方法会被依次调用，然后真正的handler对象将被调用。</p>
<p>handler对象被调用后，就生成了需要的响应数据，在将处理结果写到HttpServletResponse对象之前（SpringMVC称为渲染视图），其postHandle方法会被依次调用。视图渲染完成后，最后afterCompletion方法会被依次调用，整个web请求的处理过程就结束了。</p>
<p>在一个处理对象执行之前，之后利用拦截器做文章，这已经成为一种经典的框架设计套路。Struts2中的拦截器会做诸如参数绑定这类复杂的工作，那么SpringMVC的拦截器具体做些什么呢？我们暂且不关心，虽然这是很重要的细节，但细节毕竟是细节，我们先来理解更重要的东西。</p>
<p>HandlerInterceptor，是SpringMVC的第二个扩展点的暴露，通过自定义拦截器，我们可以在一个请求被真正处理之前、请求被处理但还没输出到响应中、请求已经被输出到响应中之后这三个时间点去做任何我们想要做的事情。Struts2框架的成功，就是源于这种拦截器的设计，SpringMVC吸收了这种设计思想，并推陈出新，更合理的划分了三个不同的时间点，从而给web请求处理这个流程，提供了更大的扩展性。</p>
<p>这个HandlerExecutionChain类中以Object引用所声明的handler对象，到底是个什么东东？它是怎么被调用的？</p>
<p>回答这些问题之前，先看SpringMVC中的又一个核心接口，HandlerAdapter：</p>
<p>[java]<br>package org.springframework.web.servlet;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>public interface HandlerAdapter {</p>
<pre><code>boolean supports(Object handler); 

ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;

long getLastModified(HttpServletRequest request, Object handler);
</code></pre><p>}[/java]<br>在DispatcherServlet中，除了HandlerMapping实现类的列表，同样也注册了一个HandlerAdapter实现类组成的列表，有代码为证。<br>[java]<br>/<em>* List of HandlerMappings used by this servlet </em>/<br>private List&lt;HandlerMapping&gt; handlerMappings;</p>
<p>/<strong> List of HandlerAdapters used by this servlet */<br>private List&lt;HandlerAdapter&gt; handlerAdapters;[/java]<br>接下来，我们再以DispatcherServlet类中另外一段代码来回答上述的问题：<br>[java]<br>/</strong></p>
<ul>
<li>Return the HandlerAdapter for this handler object.</li>
<li>@param handler the handler object to find an adapter for</li>
<li>@throws ServletException if no HandlerAdapter can be found for the handler. This is a fatal error.<br>*/<br>protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {<br> for (HandlerAdapter ha : this.handlerAdapters) {<pre><code>if (logger.isTraceEnabled()) {
    logger.trace(&amp;quot;Testing handler adapter [&amp;quot; + ha + &amp;quot;]&amp;quot;);
}
if (ha.supports(handler)) {
    return ha;
}
</code></pre> }<br> throw new ServletException(&quot;No adapter for handler [&quot; + handler +<pre><code>&amp;quot;]: Does your handler implement a supported interface like Controller?&amp;quot;);
</code></pre>}[/java]<br>这段代码已经很明显了，HandlerExecutionChain中的handler对象会被作为参数传递进去，在DispatcherServlet类中注册的HandlerAdapter实现类列表会被遍历，然后返回第一个supports方法返回true的HandlerAdapter对象，用这个HandlerAdapter实现类中的handle方法处理handler对象，并返回ModelAndView这个包含了视图和数据的对象。HandlerAdapter就是SpringMVC提供的第三个扩展点，你可以提供自己的实现类来处理handler对象。</li>
</ul>
<p>ModelAndView对象的代码就不贴了，它是SpringMVC中对视图和数据的一个聚合类。其中的视图，就是由SpringMVC的最后一个核心接口View所抽象：<br>[java]<br>package org.springframework.web.servlet;</p>
<p>import java.util.Map;</p>
<p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p>
<p>public interface View {</p>
<pre><code>String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + &amp;quot;.responseStatus&amp;quot;;

String PATH_VARIABLES = View.class.getName() + &amp;quot;.pathVariables&amp;quot;;

String getContentType();

void render(Map&amp;lt;String, ?&amp;gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception;
</code></pre><p>}<br>[/java]<br>所有的数据，最后会作为一个Map对象传递到View实现类中的render方法，调用这个render方法，就完成了视图到响应的渲染。这个View实现类，就是来自HandlerAdapter中的handle方法的返回结果。当然从ModelAndView到真正的View实现类有一个解析的过程，ModelAndView中可以有真正的视图对象，也可以只是有一个视图的名字，SpringMVC会负责将视图名称解析为真正的视图对象。</p>
<p>至此，我们了解了一个典型的完整的web请求在SpringMVC中的处理过程和其中涉及到的核心类和接口。</p>
<p>在一个典型的SpringMVC调用中，HandlerExecutionChain中封装handler对象就是用@Controller注解标识的类的一个实例，根据类级别和方法级别的@RequestMapping注解，由默认注册的DefaultAnnotationHandlerMapping（3.1.3中更新为RequestMappingHandlerMapping类，但是为了向后兼容，DefaultAnnotationHandlerMapping也可以使用）生成HandlerExecutionChain对象，再由AnnotationMethodHandlerAdapter（3.1.3中更新为RequestMappingHandlerAdapter类，但是为了向后兼容，AnnotationMethodHandlerAdapter也可以使用）来执行这个HandlerExecutionChain对象，生成最终的ModelAndView对象后，再由具体的View对象的render方法渲染视图。</p>
<p>可以看到，作为一个表现层框架，SpringMVC没有像Struts2那样激进，并没有采用和Web容器完全解耦的设计思想，而是以原生的Servlet框架对象为依托，通过合理的抽象，制定了严谨的的处理流程。这样做的结果是，执行效率比Struts2要高，灵活性也上升了一个层次。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进程/线程操作]]></title>
      <url>http://yoursite.com/2015/04/13/%E8%BF%9B%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>1.为什么要进行线程/进程间的同步？<br>因为存在多个线程或者进程需要访问相同的资源。如果不进行同步，可能导致错误发生。比如因读写的不同步造成的数据错误，或者死锁的出现等，让系统和数据进入到一种错误或者不稳定的状态。</p>
<p>2.使用了多线程就必须要进行同步么？<br>大部分情况下是这样，但也不能绝对。 因为需要进行同步的情况需要满足两个条件：</p>
<p>a.存在多个线程/进程</p>
<p>b.多个线程/进程之间会相互的竞争资源</p>
<p>如果只是存在多个线程/进程，但只见并没有竟让共有资源，那也没必要进行同步。 如线程内的局部变量等数据</p>
<p>3.进行同步的机制都有什么？<br>比如加互斥锁，临界区，信号量等。</p>
<p>互斥锁： 一次只允许一个线程进入共享区域，在离开共享区域时释放锁。</p>
<p>临界区： 类似互斥锁</p>
<p>信号量： 维护一个数，允许特定数量的线程进入</p>
<p>4.什么是原子操作。</p>
<p>原子操作就是一组不可分离的操作。应该把它视为一个整体，要么全部成功，要么全部失败，不会出现部分成功，部分失败的现象。而且原子操作执行中间不会被打断。</p>
<p>5.原子操作的不会被打断是什么意思，是说线程不会被切换么？<br>不是的。</p>
<p>有的原子操作是由处理器本身所支持的。 如一条指令本身肯定是一个原子操作。</p>
<p>但有的原子操作是一个执行块，这时在这个执行块中间，是非常有可能发生线程间的切换的。</p>
<p>有时候，一条高级语言的语句可能会被编译成好几条对应的汇编语句（机器语句） 如 c = a+b； 很有可能还没有算出c的结果线程就被切换了。<br>但发生线程间的切换并不意味着数据就可以被其他的线程访问。因为我们可以通过加锁的办法，让其他线程不能进入到执行块内部。这样其他线程虽然获得了CPU时间，但如果要访问执行块，只有等待，别的什么也做不了。数据还是安全的。</p>
<p>6.锁和原子操作是一个概念么。<br>原子操作是一个不可被分割的单个或者多个操作。<br>锁是一种机制，让我们来协调各个线程，来实现原子操作。<br>原子操作 分为物理的  和 软件实现的两种<br>物理的比如一条单独的汇编语句。<br>软件实现的往往依赖于锁</p>
<p>7. 什么是死锁。<br>如在一个单轨的铁路上，两条火车向不同的方向开。 谁也动不了了</p>
<p>8.为什么会发生死锁<br>死锁一般都是由于对共享资源的竞争引起的。 但对共享资源的竞争又不一定就会发生死锁。 死锁的发生必须同时满足四个条件：互斥，持有/等待，非抢占， 形成等待环</p>
<p>9.什么是活锁<br>活锁和死锁很像似。 只是活锁的状态可以发生改变。不过虽然状态可以改变，却没有实质的进展。<br>活锁一般是由于对死锁的不正确处理引起的。由于处于死锁中的多个线程同时采取了行动。 而避免的方法也是只让一个线程释放资源。<br>比如两个人在一个很宅的胡同里。 一次只能并排过两个人。 两人比较礼貌，都要给对方让路。 结果一起要么让到左边，要么让到右边，结果仍然是谁也过不去。 类似于原地踏步或者震荡状态。</p>
<p>10. 什么是饿死<br>饿死（starvation） 是一个线程长时间得不到需要的资源而不能执行的现象。 有人饿死并不代表着出现了死锁。很有可能系统还能很好的进行。<br>所以，没有出现死锁并不能就认为系统是完好的。还要保证没有出现饿死的现象。<br>避免饿死就应该是采用队列的方式，保证每个人都有机会获得请求的资源。 当然实现方式可以很多个变化，比如优先级，时间片，等，都是“队列”的特殊形式</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RAID0、RAID1、RAID0+1、RAID5原理介绍]]></title>
      <url>http://yoursite.com/2015/04/13/RAID0%E3%80%81RAID1%E3%80%81RAID0+1%E3%80%81RAID5%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>RAID 0又称为Stripe或Striping，它代表了所有RAID级别中最高的存储性能。RAID 0提高存储性能的原理是把连续的数据分散到多个磁盘上存取，这样，系统有数据请求就可以被多个磁盘并行的执行，每个磁盘执行属于它自己的那部分数据请求。这种数据上的并行操作可以充分利用总线的带宽，显著提高磁盘整体存取性能<br>RAID 1又称为Mirror或Mirroring，它的宗旨是最大限度的保证用户数据的可用性和可修复性。 RAID 1的操作方式是把用户写入硬盘的数据百分之百地自动复制到另外一个硬盘上。由于对存储的数据进行百分之百的备份，在所有RAID级别中，RAID 1提供最高的数据安全保障。同样，由于数据的百分之百备份，备份数据占了总存储空间的一半，因而，Mirror的磁盘空间利用率低，存储成本高。<br>RAID 5 是一种存储性能、数据安全和存储成本兼顾的存储解决方案。RAID 5不对存储的数据进行备份，而是把数据和相对应的奇偶校验信息存储到组成RAID5的各个磁盘上，并且奇偶校验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，利用剩下的数据和相应的奇偶校验信息去恢复被损坏的数据。<br>RAID 5可以理解为是RAID 0和RAID 1的折衷方案。RAID 5可以为系统提供数据安全保障，但保障程度要比Mirror低而磁盘空间利用率要比Mirror高。RAID 5具有和RAID 0相近似的数据读取速度，只是多了一个奇偶校验信息，写入数据的速度比对单个磁盘进行写入操作稍慢。同时由于多个数据对应一个奇偶校验信息，RAID 5的磁盘空间利用率要比RAID 1高，存储成本相对较低。<br>在RAID 5中有“写损失”, 即每一次写操作,将产生四个实际的读/写操作, 其中两次读旧的数据及奇偶信息, 两次写新的数据及奇偶信息。</p>
<p>RAID是通过磁盘阵列与数据条块化方法相结合, 以提高数据可用率的一种结构。IBM早于1970年就开始研究此项技术 。RAID 可分为RAID级别1到RAID级别6, 通常称为： RAID 0, RAID 1, RAID 2, RAID 3,RAID 4,RAID 5,RAID6。每一个RAID级别都有自己的强项和弱项. “奇偶校验”定义为用户数据的冗余信息, 当硬盘失效时, 可以重新产生数据。</p>
<p>RAID 0： RAID 0 并不是真正的RAID结构, 没有数据冗余。 RAID 0 连续地分割数据并并行地读/写于多个磁盘上。 因此具有很高的数据传输率。 但RAID 0在提高性能的同时,并没有提供数据可靠性,如果一个磁盘失效, 将影响整个数据.因此RAID 0 不可应用于需要数据高可用性的关键应用。</p>
<p>RAID 1： RAID 1通过数据镜像实现数据冗余, 在两对分离的磁盘上产生互为备份的数据。 RAID 1可以提高读的性能,当原始数据繁忙时, 可直接从镜像拷贝中读取数据.RAID 1是磁盘阵列中费用最高的, 但提供了最高的数据可用率。当一个磁盘失效, 系统可以自动地交换到镜像磁盘上, 而不需要重组失效的数据。RAID 2：从概念上讲, RAID 2 同RAID 3类似, 两者都是将数据条块化分布于不同的硬盘上, 条块单位为位或字节。然而RAID 2 使用称为”加重平均纠错码”的编码技术来提供错误检查及恢复。 这种编码技术需要多个磁盘存放检查及恢复信息, 使得RAID 2技术实施更复杂。 因此,在商业环境中很少使用。</p>
<p>RAID 3：不同于RAID 2, RAID 3使用单块磁盘存放奇偶校验信息。 如果一块磁盘失效, 奇偶盘及其他数据盘可以重新产生数据。 如果奇偶盘失效,则不影响数据使用.RAID 3对于大量的连续数据可提供很好的传输率, 但对于随机数据, 奇偶盘会成为写操作的瓶颈。</p>
<p>RAID 4：同RAID 2, RAID 3一样, RAID 4, RAID 5也同样将数据条块化并分布于不同的磁盘上, 但条块单位为块或记录. RAID 4使用一块磁盘作为奇偶校验盘, 每次写操作都需要访问奇偶盘, 成为写操作的瓶颈。 在商业应用中很少使用。</p>
<p>RAID 5：RAID 5没有单独指定的奇偶盘, 而是交叉地存取数据及奇偶校验信息于所有磁盘上。 在RAID5 上, 读/写指针可同时对阵列设备进行操作, 提供了更高的数据流量。 RAID 5更适合于小数据块,随机读写的数据。RAID 3与RAID 5相比, 重要的区别在于RAID 3每进行一次数据传输,需涉及到所有的阵列盘。而对于RAID 5来说, 大部分数据传输只对一块磁盘操作, 可进行并行操作。在RAID 5中有”写损失”, 即每一次写操作,将产生四个实际的读/写操作, 其中两次读旧的数据及奇偶信息, 两次写新的数据及奇偶信息。</p>
<p>RAID 6：RAID 6 与RAID 5相比,增加了第二个独立的奇偶校验信息块。两个独立的奇偶系统使用不同的算法, 数据的可靠性非常高。 即使两块磁盘同时失效,也不会影响数据的使用。 但需要分配给奇偶校验信息更大的磁盘空间,相对于RAID 5有更大的“写损失”。 RAID 6 的写性能非常差, 较差的性能和复杂的实施使得RAID 6很少使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于java字节码框架ASM的学习]]></title>
      <url>http://yoursite.com/2015/04/13/%E5%85%B3%E4%BA%8Ejava%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6ASM%E7%9A%84%E5%AD%A6%E4%B9%A0'/</url>
      <content type="html"><![CDATA[<p>一、什么是ASM<br>　　ASM是一个java字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p>
<p>　　使用ASM框架需要导入asm的jar包，下载链接：<a href="http://files.cnblogs.com/liuling/asm-3.2.rar" target="_blank" rel="external">asm-3.2.jar</a>。<br>　　二、如何使用ASM<br>　　ASM框架中的核心类有以下几个：<br>　　①  ClassReader:该类用来解析编译过的class字节码文件。<br>　　②  ClassWriter:该类用来重新构建编译后的类，比如说修改类名、属性以及方法，甚至可以生成新的类的字节码文件。<br>　　③  ClassAdapter:该类也实现了ClassVisitor接口，它将对它的方法调用委托给另一个ClassVisitor对象。<br>　　示例1.通过asm生成类的字节码<br>[java]<br>package com.asm3;</p>
<p>import java.io.File;<br>import java.io.FileNotFoundException;<br>import java.io.FileOutputStream;<br>import java.io.IOException;</p>
<p>import org.objectweb.asm.ClassWriter;<br>import org.objectweb.asm.Opcodes;</p>
<p>/**</p>
<ul>
<li>通过asm生成类的字节码</li>
<li><p>@author Administrator<br><em>
</em>/<br>public class GeneratorClass {</p>
<p> public static void main(String[] args) throws IOException {</p>
<pre><code>//生成一个类只需要ClassWriter组件即可
ClassWriter cw = new ClassWriter(0);
//通过visit方法确定类的头部信息
cw.visit(Opcodes.V1_5, Opcodes.ACC_PUBLIC+Opcodes.ACC_ABSTRACT+Opcodes.ACC_INTERFACE,
        &amp;quot;com/asm3/Comparable&amp;quot;, null, &amp;quot;java/lang/Object&amp;quot;, new String[]{&amp;quot;com/asm3/Mesurable&amp;quot;});
//定义类的属性
cw.visitField(Opcodes.ACC_PUBLIC+Opcodes.ACC_FINAL+Opcodes.ACC_STATIC,
        &amp;quot;LESS&amp;quot;, &amp;quot;I&amp;quot;, null, new Integer(-1)).visitEnd();
cw.visitField(Opcodes.ACC_PUBLIC+Opcodes.ACC_FINAL+Opcodes.ACC_STATIC,
        &amp;quot;EQUAL&amp;quot;, &amp;quot;I&amp;quot;, null, new Integer(0)).visitEnd();
cw.visitField(Opcodes.ACC_PUBLIC+Opcodes.ACC_FINAL+Opcodes.ACC_STATIC,
        &amp;quot;GREATER&amp;quot;, &amp;quot;I&amp;quot;, null, new Integer(1)).visitEnd();
//定义类的方法
cw.visitMethod(Opcodes.ACC_PUBLIC+Opcodes.ACC_ABSTRACT, &amp;quot;compareTo&amp;quot;,
        &amp;quot;(Ljava/lang/Object;)I&amp;quot;, null, null).visitEnd();
cw.visitEnd(); //使cw类已经完成
//将cw转换成字节数组写到文件里面去
byte[] data = cw.toByteArray();
File file = new File(&amp;quot;D://Comparable.class&amp;quot;);
FileOutputStream fout = new FileOutputStream(file);
fout.write(data);
fout.close();
</code></pre><p> }<br>}<br>[/java]</p>
</li>
</ul>
<p>　生成一个类的字节码文件只需要用到ClassWriter类即可，生成Comparable.class后用javap指令对其进行反编译：javap -c Comparable.class &gt;test.txt  ,编译后的结果如下<br>[java]<br>public interface com.asm3.Comparable extends com.asm3.Mesurable {<br>  public static final int LESS;</p>
<p>  public static final int EQUAL;</p>
<p>  public static final int GREATER;</p>
<p>  public abstract int compareTo(java.lang.Object);<br>}<br>[/java]</p>
<p>　　示例2.修改类的字节码文件<br>[java]<br>package com.asm5;</p>
<p>public class C {<br>    public void m() throws InterruptedException{<br>        Thread.sleep(100);<br>    }<br>}<br>[/java]<br>将C.java类的内容改为如下：<br>[java]<br>package com.asm5;</p>
<p>public class C {<br>    public static long timer;<br>    public void m() throws InterruptedException{<br>        timer -= System.currentTimeMillis();<br>        Thread.sleep(100);<br>        timer += System.currentTimeMillis();<br>    }<br>}<br>[/java]<br>　为了弄清楚ASM是如何实现的，我们先编译这两个类，然后比对它们的TraceClassVisitor的输出，我们可以发现如下的不同（粗体表示）</p>
<p><strong>GETSTATIC C.timer : J<br>INVOKESTATIC java/lang/System.currentTimilis()J<br>LSUB<br>PUTSTATIC C.timer : J</strong><br>LDC 100<br>INVOKESTATIC java/lang/Thread.sleep(J)V<br><strong>GETSTATIC C.timer : J<br>INVOKESTATIC java/lang/System.currentTimilis()J<br>LADD<br>PUTSTATIC C.timer : J</strong><br>RETURN<br>MAXSTACK=4<br>MAXLOCALS=1</p>
<p>　　通过比对上面的指令，我们可以发现必须在m()方法的最前面增加四条指令，在RETURN指令前也增加四条指令，同时这四条必须位于xRETURN和ATHROW之前，因为这些指令都会结束方法的执行。</p>
<p>具体代码如下：</p>
<p>AddTimeClassAdapter.java<br>[java]<br>package com.asm5;</p>
<p>import org.objectweb.asm.ClassAdapter;<br>import org.objectweb.asm.ClassVisitor;<br>import org.objectweb.asm.FieldVisitor;<br>import org.objectweb.asm.MethodAdapter;<br>import org.objectweb.asm.MethodVisitor;<br>import org.objectweb.asm.Opcodes;</p>
<p>public class AddTimeClassAdapter extends ClassAdapter {<br>    private String owner;<br>    private boolean isInterface;<br>    public AddTimeClassAdapter(ClassVisitor cv) {<br>        super(cv);<br>    }<br>    @Override<br>    public void visit(int version, int access, String name, String signature,<br>            String superName, String[] interfaces) {<br>        cv.visit(version, access, name, signature, superName, interfaces);<br>        owner = name;<br>        isInterface = (access &amp; Opcodes.ACC_INTERFACE) != 0;<br>    }<br>    @Override<br>    public MethodVisitor visitMethod(int access, String name, String desc,<br>            String signature, String[] exceptions) {<br>        MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);<br>        if(!name.equals(&quot;&lt;init&gt;&quot;) &amp;&amp; !isInterface &amp;&amp; mv!=null){<br>            //为方法添加计时功能<br>            mv = new AddTimeMethodAdapter(mv);<br>        }<br>        return mv;<br>    }<br>    @Override<br>    public void visitEnd() {<br>        //添加字段<br>        if(!isInterface){<br>            FieldVisitor fv = cv.visitField(Opcodes.ACC_PUBLIC+Opcodes.ACC_STATIC, &quot;timer&quot;, &quot;J&quot;, null, null);<br>            if(fv!=null){<br>                fv.visitEnd();<br>            }<br>        }<br>        cv.visitEnd();<br>    }</p>
<pre><code>class AddTimeMethodAdapter extends MethodAdapter{
    public AddTimeMethodAdapter(MethodVisitor mv) {
        super(mv);
    }
    @Override
    public void visitCode() {
        mv.visitCode();
        mv.visitFieldInsn(Opcodes.GETSTATIC, owner, &amp;quot;timer&amp;quot;, &amp;quot;J&amp;quot;);
        mv.visitMethodInsn(Opcodes.INVOKESTATIC, &amp;quot;java/lang/System&amp;quot;, &amp;quot;currentTimeMillis&amp;quot;, &amp;quot;()J&amp;quot;);
        mv.visitInsn(Opcodes.LSUB);
        mv.visitFieldInsn(Opcodes.PUTSTATIC, owner, &amp;quot;timer&amp;quot;, &amp;quot;J&amp;quot;);
    }
    @Override
    public void visitInsn(int opcode) {
        if((opcode&amp;gt;=Opcodes.IRETURN &amp;amp;&amp;amp; opcode&amp;lt;=Opcodes.RETURN) || opcode==Opcodes.ATHROW){
            mv.visitFieldInsn(Opcodes.GETSTATIC, owner, &amp;quot;timer&amp;quot;, &amp;quot;J&amp;quot;);
            mv.visitMethodInsn(Opcodes.INVOKESTATIC, &amp;quot;java/lang/System&amp;quot;, &amp;quot;currentTimeMillis&amp;quot;, &amp;quot;()J&amp;quot;);
            mv.visitInsn(Opcodes.LADD);
            mv.visitFieldInsn(Opcodes.PUTSTATIC, owner, &amp;quot;timer&amp;quot;, &amp;quot;J&amp;quot;);
        }
        mv.visitInsn(opcode);
    }
    @Override
    public void visitMaxs(int maxStack, int maxLocal) {
        mv.visitMaxs(maxStack+4, maxLocal);
    }
}
</code></pre><p>}<br>[/java]<br>Generator.java<br>[java]<br>package com.asm5;</p>
<p>import java.io.File;<br>import java.io.FileNotFoundException;<br>import java.io.FileOutputStream;<br>import java.io.IOException;</p>
<p>import org.objectweb.asm.ClassAdapter;<br>import org.objectweb.asm.ClassReader;<br>import org.objectweb.asm.ClassWriter;</p>
<p>public class Generator {</p>
<pre><code>public static void main(String[] args){
    try {
        ClassReader cr = new ClassReader(&amp;quot;com/asm5/C&amp;quot;);
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        ClassAdapter classAdapter = new AddTimeClassAdapter(cw);
        //使给定的访问者访问Java类的ClassReader
        cr.accept(classAdapter, ClassReader.SKIP_DEBUG);
        byte[] data = cw.toByteArray();
        File file = new File(System.getProperty(&amp;quot;user.dir&amp;quot;) + &amp;quot;\\WebRoot\\WEB-INF\\classes\\com\\asm5\\C.class&amp;quot;);
        FileOutputStream fout = new FileOutputStream(file);
        fout.write(data);
        fout.close();
        System.out.println(&amp;quot;success!&amp;quot;);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre><p>}<br>[/java]<br>下面是一个测试类：<br>[java]<br>package com.asm5;</p>
<p>public class Test {<br>    public static void main(String[] args) throws InterruptedException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {<br>        C c = new C();<br>        c.m();<br>        Class cc = c.getClass();<br>        System.out.println(cc.getField(&quot;timer&quot;).get(c));<br>    }<br>}<br>[/java]<br>输出结果为：100</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring MVC源码分析——初始化过程]]></title>
      <url>http://yoursite.com/2015/04/08/%5B%E8%BD%AC%5DSpring%20MVC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>转载自<a href="http://www.jmatrix.org/" target="_blank" rel="external">jmatrix</a><br>本文链接地址: <a href="http://www.jmatrix.org/spring/453.html" target="_blank" rel="external">Spring MVC源码分析——初始化过程</a></p>
<p>1.<strong>概述</strong></p>
<p>对于Web开发者，MVC模型是大家再熟悉不过的了，SpringMVC中，满足条件的请求进入到负责请求分发的DispatcherServlet，DispatcherServlet根据请求url到控制器的映射（HandlerMapping中保存），HandlerMapping最终返回HandlerExecutionChain，其中包含了具体的处理对象handler（也即我们编程时写的controller）以及一系列的拦截器interceptors，此时DispatcherServlet会根据返回的HandlerExecutionChain中的handler找到支持这一处理器类型的适配器（handlerAdapter），在处理器适配器中最终会去调用控制器的请求响应方法并返回结果视图（ModelAndView），得到结果视图后，通过render方法完成结果的显示。</p>
<p>HanderMapping的继承体系：<br><img src="http://www.jmatrix.org/wp-content/uploads/2013/08/1.jpg" alt=""></p>
<p>HandlerAdapter的继承体系：<br><img src="http://www.jmatrix.org/wp-content/uploads/2013/08/2.jpg" alt=""></p>
<p>同样的视图解析器ViewResolver针对不同的输出格式也有一系列的实现类，具体可自己看。</p>
<p>2.<strong>实现分析</strong><br>以我自己的一个web项目中spring mvc的配置为例：<br>[xml]<br>&lt;context:component-scan base-package=&quot;cn.ds.log&quot; /&gt;<br>&lt;bean id=&quot;defaultHandlerMapping&quot;<br>    class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot; /&gt;<br>&lt;bean<br>    class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;<br>&lt;/bean&gt;<br>&lt;bean<br>    class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot;&gt;<br>&lt;/bean&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;&gt;<br>&lt;/bean&gt;<br>&lt;bean id=&quot;viewResolver&quot;<br>    class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;<br>    &lt;property name=&quot;prefix&quot;&gt;<br>        &lt;value&gt;/WEB-INF/jsp/&lt;/value&gt;<br>    &lt;/property&gt;<br>    &lt;property name=&quot;suffix&quot;&gt;<br>        &lt;value&gt;.jsp&lt;/value&gt;<br>    &lt;/property&gt;<br>&lt;/bean&gt;<br>[/xml]<br>这里因为是采用全注解的方式，所以先通过context:component-scan配置让spring自定扫描的包路径，接着配置handlerMapping、handlerAdapter及ViewResolver，几乎包含了SpringMVC的配置中需要涉及的所有元素。后面需要涉及具体的HanderMapping等的实现时，将以这里配置中的实现为例进行分析，其它的大家“同理可解”。</p>
<p>2.1 <strong>Spring MVC初始化流程</strong><br>DispatcherServlet的继承体系如：<br><img src="http://www.jmatrix.org/wp-content/uploads/2013/08/3.jpg" alt=""><br>看到它们继承自HttpServlet，你就知道初始化过程应该是从init方法开始了，整个初始化的流程为：<br><img src="http://www.jmatrix.org/wp-content/uploads/2013/08/4.jpg" alt=""></p>
<p>很简单是么？我也觉得是，至少从上面的时序图看来是这样，不过前提是你已经很了解Spring IOC的实现原理了。上面的时序图中，在5的initStragegies()中除了调用6,7的函数外，还有几个类似的初始化函数，因为这里主要是为了理解整个的流程，所以我都省略了。上面流程可能需要分析的地方就在于3,4步，我们看看initWebApplicationContext函数的实现：<br>[java]<br>protected WebApplicationContext initWebApplicationContext() {<br>        WebApplicationContext rootContext =<br>                WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>        WebApplicationContext wac = null;</p>
<pre><code>    if (this.webApplicationContext != null) {
        // A context instance was injected at construction time -&amp;amp;gt; use it
        wac = this.webApplicationContext;
        if (wac instanceof ConfigurableWebApplicationContext) {
            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
            if (!cwac.isActive()) {
                ……
                configureAndRefreshWebApplicationContext(cwac);
            }
        }
    }
    if (wac == null) {
        wac = findWebApplicationContext();
    }
    if (wac == null) {
        // No context instance is defined for this servlet -&amp;amp;gt; create a local one
        wac = createWebApplicationContext(rootContext);
    }

    if (!this.refreshEventReceived) {
        // Either the context is not a ConfigurableApplicationContext with refresh
        // support or the context injected at construction time had already been
        // refreshed -&amp;amp;gt; trigger initial onRefresh manually here.
        onRefresh(wac);
    }

    if (this.publishContext) {
        ……
    }

    return wac;
}
</code></pre><p>[/java]<br>看起来貌似有点复杂，其实理解了IOC容器的实现原理（可以看下“spring ioc源码分析”一文，⊙﹏⊙多年前弄的，这次暑假实习时又以读书报告的形式写了，感觉当年肿么可以写得这么乱……也是一种成长，不打算修改）就很简单，函数一开始会去获取WebApplicationContext对象，这个对象在ContextLoaderListener初始化IOC容器时就已经把它set到ServletContext的属性中，而且它也正是ConfigurableWebApplicationContext的实例，第一个if语句其实就是如果此时SpringIOC容器没有初始化的话就在这里启动IOC容器的初始化过程，因为看“省略（1）”中的代码你就知道，它会在这里调用refresh函数，“世人”都知道这就是IOC容器启动的入口，这里会解析配置文件springmvc-servlet.xml。</p>
<p>这里最终要执行onRefresh()，而这个就是SpringMVC初始化的入口。</p>
<p>（注：其实这里也可以配置log4j，通过其打印的info信息来看IOC与MVC的初始化顺序）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E9%9B%86%E6%88%90Bean%20Validation%201.1(JSR-349)%E5%88%B0SpringMVC/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1990081" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1990081</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>在之前的《跟我学SpringMVC》中的《第七章 注解式控制器的数据验证、类型转换及格式化》中已经介绍过SpringMVC集成Bean Validation 1.0（JSR-303），目前Bean Validation最新版本是Bean Validation 1.1（JSR-349），新特性可以到官网查看，笔者最喜欢的两个特性是：跨参数验证（比如密码和确认密码的验证）和支持在消息中使用EL表达式，其他的还有如方法参数/返回值验证、CDI和依赖注入、分组转换等。对于方法参数/返回值验证，大家可以参阅《Spring3.1 对Bean Validation规范的新支持(方法级别验证) 》。</p>
<p>Bean Validation 1.1当前实现是Hibernate validator 5，且spring4才支持。接下来我们从以下几个方法讲解Bean Validation 1.1，当然不一定是新特性：<br> 集成Bean Validation 1.1到SpringMVC<br> 分组验证、分组顺序及级联验证<br> 消息中使用EL表达式<br> 方法参数/返回值验证<br> 自定义验证规则<br> 类级别验证器<br> 脚本验证器<br> cross-parameter，跨参数验证<br>混合类级别验证器和跨参数验证器<br>组合多个验证注解<br>本地化<br>因为大多数时候验证都配合web框架使用，而且很多朋友都咨询过如分组/跨参数验证，所以本文介绍下这些，且是和SpringMVC框架集成的例子，其他使用方式（比如集成到JPA中）可以参考其官方文档：<br>规范：<a href="http://beanvalidation.org/1.1/spec/" target="_blank" rel="external">http://beanvalidation.org/1.1/spec/</a><br>hibernate validator文档：<a href="http://hibernate.org/validator/" target="_blank" rel="external">http://hibernate.org/validator/</a> </p>
<p> 1、集成Bean Validation 1.1到SpringMVC<br>1.1、项目搭建<br>首先添加hibernate validator 5依赖：<br>[java]<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;<br>    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;<br>    &lt;version&gt;5.0.2.Final&lt;/version&gt;<br>&lt;/dependency&gt;  [/java]<br>如果想在消息中使用EL表达式，请确保EL表达式版本是 2.2或以上，如使用Tomcat6，请到Tomcat7中拷贝相应的EL jar包到Tomcat6中。<br>[java]<br>&lt;dependency&gt;<br>    &lt;groupId&gt;javax.el&lt;/groupId&gt;<br>    &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;<br>    &lt;version&gt;2.2.4&lt;/version&gt;<br>    &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;  [/java]<br>请确保您使用的Web容器有相应版本的el jar包。</p>
<p>对于其他POM依赖请下载附件中的项目参考。</p>
<p>1.2、Spring MVC配置文件（spring-mvc.xml）：<br>[java]<br>&lt;!– 指定自己定义的validator –&gt;<br>&lt;mvc:annotation-driven validator=&quot;validator&quot;/&gt;  </p>
<p>&lt;!– 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册–&gt;<br>&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;<br>    &lt;property name=&quot;providerClass&quot; value=&quot;org.hibernate.validator.HibernateValidator&quot;/&gt;<br>    &lt;!– 如果不加默认到 使用classpath下的 ValidationMessages.properties –&gt;<br>    &lt;property name=&quot;validationMessageSource&quot; ref=&quot;messageSource&quot;/&gt;<br>&lt;/bean&gt;  </p>
<p>&lt;!– 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） –&gt;<br>&lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;<br>    &lt;property name=&quot;basenames&quot;&gt;<br>        &lt;list&gt;<br>            &lt;!– 在web环境中一定要定位到classpath 否则默认到当前web应用下找  –&gt;<br>            &lt;value&gt;classpath:messages&lt;/value&gt;<br>            &lt;value&gt;classpath:org/hibernate/validator/ValidationMessages&lt;/value&gt;<br>        &lt;/list&gt;<br>    &lt;/property&gt;<br>    &lt;property name=&quot;useCodeAsDefaultMessage&quot; value=&quot;false&quot;/&gt;<br>    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;<br>    &lt;property name=&quot;cacheSeconds&quot; value=&quot;60&quot;/&gt;<br>&lt;/bean&gt;  [/java]<br>此处主要把bean validation的消息查找委托给spring的messageSource。</p>
<p>1.3、实体验证注解：<br>[java]<br>public class User implements Serializable {<br>    @NotNull(message = &quot;{user.id.null}&quot;)<br>    private Long id;  </p>
<pre><code>@NotEmpty(message = &amp;quot;{user.name.null}&amp;quot;)  
@Length(min = 5, max = 20, message = &amp;quot;{user.name.length.illegal}&amp;quot;)  
@Pattern(regexp = &amp;quot;[a-zA-Z]{5,20}&amp;quot;, message = &amp;quot;{user.name.illegal}&amp;quot;)  
private String name;  

@NotNull(message = &amp;quot;{user.password.null}&amp;quot;)  
private String password;  
</code></pre><p>} [/java]<br>对于验证规则可以参考官方文档，或者《第七章 注解式控制器的数据验证、类型转换及格式化》。</p>
<p>1.4、错误消息文件messages.properties：<br>[java]<br>user.id.null=用户编号不能为空<br>user.name.null=用户名不能为空<br>user.name.length.illegal=用户名长度必须在5到20之间<br>user.name.illegal=用户名必须是字母<br>user.password.null=密码不能为空<br>[/java]<br>1.5、控制器<br>[java]<br>@Controller<br>public class UserController {  </p>
<pre><code>@RequestMapping(&amp;quot;/save&amp;quot;)  
public String save(@Valid User user, BindingResult result) {  
    if(result.hasErrors()) {  
        return &amp;quot;error&amp;quot;;  
    }  
    return &amp;quot;success&amp;quot;;  
}  
</code></pre><p>}<br>[/java]<br>1.6、错误页面：<br>[java]<br>&lt;spring:hasBindErrors name=&quot;user&quot;&gt;<br>    &lt;c:if test=&quot;${errors.fieldErrorCount &gt; 0}&quot;&gt;<br>        字段错误：&lt;br/&gt;<br>        &lt;c:forEach items=&quot;${errors.fieldErrors}&quot; var=&quot;error&quot;&gt;<br>            &lt;spring:message var=&quot;message&quot; code=&quot;${error.code}&quot; arguments=&quot;${error.arguments}&quot; text=&quot;${error.defaultMessage}&quot;/&gt;<br>            ${error.field}——${message}&lt;br/&gt;<br>        &lt;/c:forEach&gt;<br>    &lt;/c:if&gt;  </p>
<pre><code>&amp;lt;c:if test=&amp;quot;${errors.globalErrorCount &amp;gt; 0}&amp;quot;&amp;gt;  
    全局错误：&amp;lt;br/&amp;gt;  
    &amp;lt;c:forEach items=&amp;quot;${errors.globalErrors}&amp;quot; var=&amp;quot;error&amp;quot;&amp;gt;  
        &amp;lt;spring:message var=&amp;quot;message&amp;quot; code=&amp;quot;${error.code}&amp;quot; arguments=&amp;quot;${error.arguments}&amp;quot; text=&amp;quot;${error.defaultMessage}&amp;quot;/&amp;gt;  
        &amp;lt;c:if test=&amp;quot;${not empty message}&amp;quot;&amp;gt;  
            ${message}&amp;lt;br/&amp;gt;  
        &amp;lt;/c:if&amp;gt;  
    &amp;lt;/c:forEach&amp;gt;  
&amp;lt;/c:if&amp;gt;  
</code></pre><p>&lt;/spring:hasBindErrors&gt;<br>[/java]<br>大家以后可以根据这个做通用的错误消息显示规则。比如我前端页面使用validationEngine显示错误消息，那么我可以定义一个tag来通用化错误消息的显示：<a href="https://github.com/zhangkaitao/es/blob/master/web/src/main/webapp/WEB-INF/tags/showFieldError.tag" target="_blank" rel="external">showFieldError.tag</a>。  </p>
<p>1.7、测试<br>输入如：<a href="http://localhost:9080/spring4/save?name=123" target="_blank" rel="external">http://localhost:9080/spring4/save?name=123</a> ， 我们得到如下错误：<br>[java]<br>name——用户名必须是字母<br>name——用户名长度必须在5到20之间<br>password——密码不能为空<br>id——用户编号不能为空<br>[/java]<br>基本的集成就完成了。</p>
<p>如上测试有几个小问题：<br>1、错误消息顺序，大家可以看到name的错误消息顺序不是按照书写顺序的，即不确定；<br>2、我想显示如：用户名【zhangsan】必须在5到20之间；其中我们想动态显示：用户名、min，max；而不是写死了；<br>3、我想在修改的时候只验证用户名，其他的不验证怎么办。<br>接下来我们挨着试试吧。</p>
<p>2、分组验证及分组顺序<br>如果我们想在新增的情况验证id和name，而修改的情况验证name和password，怎么办？ 那么就需要分组了。<br>首先定义分组接口：<br>[java]<br>public interface First {<br>}  </p>
<p>public interface Second {<br>}  [/java]<br>分组接口就是两个普通的接口，用于标识，类似于java.io.Serializable。</p>
<p>接着我们使用分组接口标识实体：<br>[java]<br>public class User implements Serializable {  </p>
<pre><code>@NotNull(message = &amp;quot;{user.id.null}&amp;quot;, groups = {First.class})  
private Long id;  

@Length(min = 5, max = 20, message = &amp;quot;{user.name.length.illegal}&amp;quot;, groups = {Second.class})  
@Pattern(regexp = &amp;quot;[a-zA-Z]{5,20}&amp;quot;, message = &amp;quot;{user.name.illegal}&amp;quot;, groups = {Second.class})  
private String name;  

@NotNull(message = &amp;quot;{user.password.null}&amp;quot;, groups = {First.class, Second.class})  
private String password;  
</code></pre><p>}<br>[/java]<br>验证时使用如：<br>[java]<br>@RequestMapping(&quot;/save&quot;)<br>public String save(@Validated({Second.class}) User user, BindingResult result) {<br>    if(result.hasErrors()) {<br>        return &quot;error&quot;;<br>    }<br>    return &quot;success&quot;;<br>}  [/java]<br>即通过@Validate注解标识要验证的分组；如果要验证两个的话，可以这样@Validated({First.class, Second.class})。</p>
<p>接下来我们来看看通过分组来指定顺序；还记得之前的错误消息吗？ user.name会显示两个错误消息，而且顺序不确定；如果我们先验证一个消息；如果不通过再验证另一个怎么办？可以通过@GroupSequence指定分组验证顺序：</p>
<p>[java]<br>@GroupSequence({First.class, Second.class, User.class})<br>public class User implements Serializable {<br>    private Long id;  </p>
<pre><code>@Length(min = 5, max = 20, message = &amp;quot;{user.name.length.illegal}&amp;quot;, groups = {First.class})  
@Pattern(regexp = &amp;quot;[a-zA-Z]{5,20}&amp;quot;, message = &amp;quot;{user.name.illegal}&amp;quot;, groups = {Second.class})  
private String name;  

private String password;  
</code></pre><p>} [/java]<br>通过@GroupSequence指定验证顺序：先验证First分组，如果有错误立即返回而不会验证Second分组，接着如果First分组验证通过了，那么才去验证Second分组，最后指定User.class表示那些没有分组的在最后。这样我们就可以实现按顺序验证分组了。</p>
<p>另一个比较常见的就是级联验证：<br>如：<br>[java]<br>public class User {  </p>
<pre><code>@Valid   
@ConvertGroup(from=First.class, to=Second.class)  
private Organization o;  
</code></pre><p>} [/java]<br> 1、级联验证只要在相应的字段上加@Valid即可，会进行级联验证；@ConvertGroup的作用是当验证o的分组是First时，那么验证o的分组是Second，即分组验证的转换。</p>
<p>3、消息中使用EL表达式<br>假设我们需要显示如：用户名[NAME]长度必须在[MIN]到[MAX]之间，此处大家可以看到，我们不想把一些数据写死，如NAME、MIN、MAX；此时我们可以使用EL表达式。</p>
<p>如：<br>[java]<br>@Length(min = 5, max = 20, message = &quot;{user.name.length.illegal}&quot;, groups = {First.class})  [/java]<br>错误消息：<br>[java]<br>user.name.length.illegal=用户名长度必须在{min}到{max}之间  [/java]</p>
<p>其中我们可以使用{验证注解的属性}得到这些值；如{min}得到@Length中的min值；其他的也是类似的。</p>
<p>到此，我们还是无法得到出错的那个输入值，如name=zhangsan。此时就需要EL表达式的支持，首先确定引入EL jar包且版本正确。然后使用如：<br>[java]<br>user.name.length.illegal=用户名[${validatedValue}]长度必须在5到20之间  [/java]<br>使用如EL表达式：${validatedValue}得到输入的值，如zhangsan。当然我们还可以使用如${min &gt; 1 ? ‘大于1’ : ‘小于等于1’}，及在EL表达式中也能拿到如@Length的min等数据。</p>
<p>另外我们还可以拿到一个java.util.Formatter类型的formatter变量进行格式化：<br>[java]<br>${formatter.format(&quot;%04d&quot;, min)}<br>[/java]<br>4、方法参数/返回值验证<br>这个可以参考《Spring3.1 对Bean Validation规范的新支持(方法级别验证) 》，概念是类似的，具体可以参考Bean Validation 文档。</p>
<p>5、自定义验证规则<br>有时候默认的规则可能还不够，有时候还需要自定义规则，比如屏蔽关键词验证是非常常见的一个功能，比如在发帖时帖子中不允许出现admin等关键词。</p>
<p>1、定义验证注解<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import javax.validation.Constraint;<br>import javax.validation.Payload;<br>import java.lang.annotation.Documented;<br>import java.lang.annotation.Retention;<br>import java.lang.annotation.Target;<br>import static java.lang.annotation.ElementType.<em>;<br>import static java.lang.annotation.RetentionPolicy.</em>;<br>/** </p>
<ul>
<li>&lt;p&gt;User: Zhang Kaitao </li>
<li>&lt;p&gt;Date: 13-12-15 </li>
<li>&lt;p&gt;Version: 1.0<br>*/  </li>
</ul>
<p>@Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })<br>@Retention(RUNTIME)<br>//指定验证器<br>@Constraint(validatedBy = ForbiddenValidator.class)<br>@Documented<br>public @interface Forbidden {  </p>
<pre><code>//默认错误消息  
String message() default &amp;quot;{forbidden.word}&amp;quot;;  

//分组  
Class&amp;lt;?&amp;gt;[] groups() default { };  

//负载  
Class&amp;lt;? extends Payload&amp;gt;[] payload() default { };  

//指定多个时使用  
@Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })  
@Retention(RUNTIME)  
@Documented  
@interface List {  
    Forbidden[] value();  
}  
</code></pre><p>}<br>[/java]<br>2、 定义验证器<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorContextImpl;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.util.StringUtils;  </p>
<p>import javax.validation.ConstraintValidator;<br>import javax.validation.ConstraintValidatorContext;<br>import java.io.Serializable;  </p>
<p>/** </p>
<ul>
<li>&lt;p&gt;User: Zhang Kaitao </li>
<li>&lt;p&gt;Date: 13-12-15 </li>
<li><p>&lt;p&gt;Version: 1.0<br>*/<br>public class ForbiddenValidator implements ConstraintValidator&lt;Forbidden, String&gt; {  </p>
<p> private String[] forbiddenWords = {&quot;admin&quot;};  </p>
<p> @Override<br> public void initialize(Forbidden constraintAnnotation) {  </p>
<pre><code>//初始化，得到注解数据  
</code></pre><p> }  </p>
<p> @Override<br> public boolean isValid(String value, ConstraintValidatorContext context) {  </p>
<pre><code>if(StringUtils.isEmpty(value)) {  
    return true;  
}  

for(String word : forbiddenWords) {  
    if(value.contains(word)) {  
        return false;//验证失败  
    }  
}  
return true;  
</code></pre><p> }<br>} [/java]<br>验证器中可以使用spring的依赖注入，如注入：@Autowired  private ApplicationContext ctx; </p>
</li>
</ul>
<p>3、使用<br>[java]<br>public class User implements Serializable {<br>    @Forbidden()<br>    private String name;<br>}<br>[/java]<br>4、当我们在提交name中含有admin的时候会输出错误消息：<br>[java]<br>forbidden.word=您输入的数据中有非法关键词<br>[/java]<br>问题来了，哪个词是非法的呢？bean validation 和 hibernate validator都没有提供相应的api提供这个数据，怎么办呢？通过跟踪代码，发现一种不是特别好的方法：我们可以覆盖org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl实现（即复制一份代码放到我们的src中），然后覆盖buildAnnotationParameterMap方法；<br>[java]<br>private Map&lt;String, Object&gt; buildAnnotationParameterMap(Annotation annotation) {<br>    ……<br>    //将Collections.unmodifiableMap( parameters );替换为如下语句<br>    return parameters;<br>} [/java]<br> 即允许这个数据可以修改；然后在ForbiddenValidator中：<br>[java]<br>for(String word : forbiddenWords) {<br>    if(value.contains(word)) {<br>        ((ConstraintValidatorContextImpl)context).getConstraintDescriptor().getAttributes().put(&quot;word&quot;, word);<br>        return false;//验证失败<br>    }<br>} [/java]<br>通过((ConstraintValidatorContextImpl)context).getConstraintDescriptor().getAttributes().put(“word”, word);添加自己的属性；放到attributes中的数据可以通过${} 获取。然后消息就可以变成：<br>[java]<br>forbidden.word=您输入的数据中有非法关键词【{word}】  [/java]<br>这种方式不是很友好，但是可以解决我们的问题。</p>
<p>典型的如密码、确认密码的场景，非常常用；如果没有这个功能我们需要自己写代码来完成；而且经常重复自己。接下来看看bean validation 1.1如何实现的。</p>
<p>6、类级别验证器<br>6.1、定义验证注解<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import javax.validation.Constraint;<br>import javax.validation.Payload;<br>import javax.validation.constraints.NotNull;<br>import java.lang.annotation.Documented;<br>import java.lang.annotation.Retention;<br>import java.lang.annotation.Target;<br>import static java.lang.annotation.ElementType.<em>;<br>import static java.lang.annotation.RetentionPolicy.</em>;<br>/** </p>
<ul>
<li>&lt;p&gt;User: Zhang Kaitao </li>
<li>&lt;p&gt;Date: 13-12-15 </li>
<li>&lt;p&gt;Version: 1.0<br>*/  </li>
</ul>
<p>@Target({ TYPE, ANNOTATION_TYPE})<br>@Retention(RUNTIME)<br>//指定验证器<br>@Constraint(validatedBy = CheckPasswordValidator.class)<br>@Documented<br>public @interface CheckPassword {  </p>
<pre><code>//默认错误消息  
String message() default &amp;quot;&amp;quot;;  

//分组  
Class&amp;lt;?&amp;gt;[] groups() default { };  

//负载  
Class&amp;lt;? extends Payload&amp;gt;[] payload() default { };  

//指定多个时使用  
@Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })  
@Retention(RUNTIME)  
@Documented  
@interface List {  
    CheckPassword[] value();  
}  
</code></pre><p>} [/java]<br>6.2、 定义验证器<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import com.sishuok.spring4.entity.User;<br>import org.springframework.util.StringUtils;  </p>
<p>import javax.validation.ConstraintValidator;<br>import javax.validation.ConstraintValidatorContext;  </p>
<p>/** </p>
<ul>
<li>&lt;p&gt;User: Zhang Kaitao </li>
<li>&lt;p&gt;Date: 13-12-15 </li>
<li><p>&lt;p&gt;Version: 1.0<br>*/<br>public class CheckPasswordValidator implements ConstraintValidator&lt;CheckPassword, User&gt; {  </p>
<p> @Override<br> public void initialize(CheckPassword constraintAnnotation) {<br> }  </p>
<p> @Override<br> public boolean isValid(User user, ConstraintValidatorContext context) {  </p>
<pre><code>if(user == null) {  
    return true;  
}  

//没有填密码  
if(!StringUtils.hasText(user.getPassword())) {  
    context.disableDefaultConstraintViolation();  
    context.buildConstraintViolationWithTemplate(&amp;quot;{password.null}&amp;quot;)  
            .addPropertyNode(&amp;quot;password&amp;quot;)  
            .addConstraintViolation();  
    return false;  
}  

if(!StringUtils.hasText(user.getConfirmation())) {  
    context.disableDefaultConstraintViolation();  
    context.buildConstraintViolationWithTemplate(&amp;quot;{password.confirmation.null}&amp;quot;)  
            .addPropertyNode(&amp;quot;confirmation&amp;quot;)  
            .addConstraintViolation();  
    return false;  
}  

//两次密码不一样  
if (!user.getPassword().trim().equals(user.getConfirmation().trim())) {  
    context.disableDefaultConstraintViolation();  
    context.buildConstraintViolationWithTemplate(&amp;quot;{password.confirmation.error}&amp;quot;)  
            .addPropertyNode(&amp;quot;confirmation&amp;quot;)  
            .addConstraintViolation();  
    return false;  
}  
return true;  
</code></pre><p> }<br>}  [/java]<br>其中我们通过disableDefaultConstraintViolation禁用默认的约束；然后通过buildConstraintViolationWithTemplate(消息模板)/addPropertyNode(所属属性)/addConstraintViolation定义我们自己的约束。</p>
</li>
</ul>
<p>6.3、使用<br>[java]<br>@CheckPassword()<br>public class User implements Serializable {<br>} [/java]<br> 放到类头上即可。</p>
<p>7、通过脚本验证<br>[java]<br>@ScriptAssert(script = &quot;_this.password==_this.confirmation&quot;, lang = &quot;javascript&quot;, alias = &quot;_this&quot;, message = &quot;{password.confirmation.error}&quot;)<br>public class User implements Serializable {<br>}  [/java]<br>通过脚本验证是非常简单而且强大的，lang指定脚本语言（请参考javax.script.ScriptEngineManager JSR-223），alias是在脚本验证中User对象的名字，但是大家会发现一个问题：错误消息怎么显示呢？ 在springmvc 中会添加到全局错误消息中，这肯定不是我们想要的，我们改造下吧。</p>
<p>7.1、定义验证注解<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import org.hibernate.validator.internal.constraintvalidators.ScriptAssertValidator;  </p>
<p>import java.lang.annotation.Documented;<br>import java.lang.annotation.Retention;<br>import java.lang.annotation.Target;<br>import javax.validation.Constraint;<br>import javax.validation.Payload;  </p>
<p>import static java.lang.annotation.ElementType.TYPE;<br>import static java.lang.annotation.RetentionPolicy.RUNTIME;  </p>
<p>@Target({ TYPE })<br>@Retention(RUNTIME)<br>@Constraint(validatedBy = {PropertyScriptAssertValidator.class})<br>@Documented<br>public @interface PropertyScriptAssert {  </p>
<pre><code>String message() default &amp;quot;{org.hibernate.validator.constraints.ScriptAssert.message}&amp;quot;;  

Class&amp;lt;?&amp;gt;[] groups() default { };  

Class&amp;lt;? extends Payload&amp;gt;[] payload() default { };  

String lang();  

String script();  

String alias() default &amp;quot;_this&amp;quot;;  

String property();  

@Target({ TYPE })  
@Retention(RUNTIME)  
@Documented  
public @interface List {  
    PropertyScriptAssert[] value();  
}  
</code></pre><p>}  [/java]<br>和ScriptAssert没什么区别，只是多了个property用来指定出错后给实体的哪个属性。</p>
<p>7.2、验证器<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>import javax.script.ScriptException;<br>import javax.validation.ConstraintDeclarationException;<br>import javax.validation.ConstraintValidator;<br>import javax.validation.ConstraintValidatorContext;  </p>
<p>import com.sishuok.spring4.validator.PropertyScriptAssert;<br>import org.hibernate.validator.constraints.ScriptAssert;<br>import org.hibernate.validator.internal.util.Contracts;<br>import org.hibernate.validator.internal.util.logging.Log;<br>import org.hibernate.validator.internal.util.logging.LoggerFactory;<br>import org.hibernate.validator.internal.util.scriptengine.ScriptEvaluator;<br>import org.hibernate.validator.internal.util.scriptengine.ScriptEvaluatorFactory;  </p>
<p>import static org.hibernate.validator.internal.util.logging.Messages.MESSAGES;  </p>
<p>public class PropertyScriptAssertValidator implements ConstraintValidator&lt;PropertyScriptAssert, Object&gt; {  </p>
<pre><code>private static final Log log = LoggerFactory.make();  

private String script;  
private String languageName;  
private String alias;  
private String property;  
private String message;  

public void initialize(PropertyScriptAssert constraintAnnotation) {  
    validateParameters( constraintAnnotation );  

    this.script = constraintAnnotation.script();  
    this.languageName = constraintAnnotation.lang();  
    this.alias = constraintAnnotation.alias();  
    this.property = constraintAnnotation.property();  
    this.message = constraintAnnotation.message();  
}  

public boolean isValid(Object value, ConstraintValidatorContext constraintValidatorContext) {  

    Object evaluationResult;  
    ScriptEvaluator scriptEvaluator;  

    try {  
        ScriptEvaluatorFactory evaluatorFactory = ScriptEvaluatorFactory.getInstance();  
        scriptEvaluator = evaluatorFactory.getScriptEvaluatorByLanguageName( languageName );  
    }  
    catch ( ScriptException e ) {  
        throw new ConstraintDeclarationException( e );  
    }  

    try {  
        evaluationResult = scriptEvaluator.evaluate( script, value, alias );  
    }  
    catch ( ScriptException e ) {  
        throw log.getErrorDuringScriptExecutionException( script, e );  
    }  

    if ( evaluationResult == null ) {  
        throw log.getScriptMustReturnTrueOrFalseException( script );  
    }  
    if ( !( evaluationResult instanceof Boolean ) ) {  
        throw log.getScriptMustReturnTrueOrFalseException(  
                script,  
                evaluationResult,  
                evaluationResult.getClass().getCanonicalName()  
        );  
    }  

    if(Boolean.FALSE.equals(evaluationResult)) {  
        constraintValidatorContext.disableDefaultConstraintViolation();  
        constraintValidatorContext  
                .buildConstraintViolationWithTemplate(message)  
                .addPropertyNode(property)  
                .addConstraintViolation();  
    }  

    return Boolean.TRUE.equals( evaluationResult );  
}  

private void validateParameters(PropertyScriptAssert constraintAnnotation) {  
    Contracts.assertNotEmpty( constraintAnnotation.script(), MESSAGES.parameterMustNotBeEmpty( &amp;quot;script&amp;quot; ) );  
    Contracts.assertNotEmpty( constraintAnnotation.lang(), MESSAGES.parameterMustNotBeEmpty( &amp;quot;lang&amp;quot; ) );  
    Contracts.assertNotEmpty( constraintAnnotation.alias(), MESSAGES.parameterMustNotBeEmpty( &amp;quot;alias&amp;quot; ) );  
    Contracts.assertNotEmpty( constraintAnnotation.property(), MESSAGES.parameterMustNotBeEmpty( &amp;quot;property&amp;quot; ) );  
    Contracts.assertNotEmpty( constraintAnnotation.message(), MESSAGES.parameterMustNotBeEmpty( &amp;quot;message&amp;quot; ) );  
}  
</code></pre><p>}[/java]<br>和之前的类级别验证器类似，就不多解释了，其他代码全部拷贝自org.hibernate.validator.internal.constraintvalidators.ScriptAssertValidator。</p>
<p>7.3、使用<br>[java]<br>@PropertyScriptAssert(property = &quot;confirmation&quot;, script = &quot;_this.password==_this.confirmation&quot;, lang = &quot;javascript&quot;, alias = &quot;_this&quot;, message = &quot;{password.confirmation.error}&quot;)  [/java]<br>和之前的区别就是多了个property，用来指定出错时给哪个字段。 这个相对之前的类级别验证器更通用一点。</p>
<p>8、cross-parameter，跨参数验证<br>直接看示例；</p>
<p>8.1、首先注册MethodValidationPostProcessor，起作用请参考<a href="http://jinnianshilongnian.iteye.com/blog/1495594" target="_blank" rel="external">《Spring3.1 对Bean Validation规范的新支持(方法级别验证) 》</a><br>[java]<br>&lt;bean class=&quot;org.springframework.validation.beanvalidation.MethodValidationPostProcessor&quot;&gt;<br>    &lt;property name=&quot;validator&quot; ref=&quot;validator&quot;/&gt;<br>&lt;/bean&gt;<br>[/java]<br>8.2、Service<br>[java]<br>@Validated<br>@Service<br>public class UserService {  </p>
<pre><code>@CrossParameter  
public void changePassword(String password, String confirmation) {  

}  
</code></pre><p>} [/java]<br>通过@Validated注解UserService表示该类中有需要进行方法参数/返回值验证；   @CrossParameter注解方法表示要进行跨参数验证；即验证password和confirmation是否相等。</p>
<p>8.3、验证注解<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>//省略import  </p>
<p>@Constraint(validatedBy = CrossParameterValidator.class)<br>@Target({ METHOD, CONSTRUCTOR, ANNOTATION_TYPE })<br>@Retention(RUNTIME)<br>@Documented<br>public @interface CrossParameter {  </p>
<pre><code>String message() default &amp;quot;{password.confirmation.error}&amp;quot;;  
Class&amp;lt;?&amp;gt;[] groups() default { };  
Class&amp;lt;? extends Payload&amp;gt;[] payload() default { };  
</code></pre><p>}<br>[/java]<br>8.4、验证器<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>//省略import  </p>
<p>@SupportedValidationTarget(ValidationTarget.PARAMETERS)<br>public class CrossParameterValidator implements ConstraintValidator&lt;CrossParameter, Object[]&gt; {  </p>
<pre><code>@Override  
public void initialize(CrossParameter constraintAnnotation) {  
}  

@Override  
public boolean isValid(Object[] value, ConstraintValidatorContext context) {  
    if(value == null || value.length != 2) {  
        throw new IllegalArgumentException(&amp;quot;must have two args&amp;quot;);  
    }  
    if(value[0] == null || value[1] == null) {  
        return true;  
    }  
    if(value[0].equals(value[1])) {  
        return true;  
    }  
    return false;  
}  
</code></pre><p>}[/java]<br>其中@SupportedValidationTarget(ValidationTarget.PARAMETERS)表示验证参数； value将是参数列表。 </p>
<p>8.5、使用<br>[java]<br>@RequestMapping(&quot;/changePassword&quot;)<br>public String changePassword(<br>        @RequestParam(&quot;password&quot;) String password,<br>        @RequestParam(&quot;confirmation&quot;) String confirmation, Model model) {<br>    try {<br>        userService.changePassword(password, confirmation);<br>    } catch (ConstraintViolationException e) {<br>        for(ConstraintViolation violation : e.getConstraintViolations()) {<br>            System.out.println(violation.getMessage());<br>        }<br>    }<br>    return &quot;success&quot;;<br>}[/java]<br>调用userService.changePassword方法，如果验证失败将抛出ConstraintViolationException异常，然后得到ConstraintViolation，调用getMessage即可得到错误消息；然后到前台显示即可。</p>
<p>从以上来看，不如之前的使用方便，需要自己对错误消息进行处理。 下一节我们也写个脚本方式的跨参数验证器。</p>
<p>9、混合类级别验证器和跨参数验证器<br>9.1、验证注解<br>[java]<br>package com.sishuok.spring4.validator;  </p>
<p>//省略import  </p>
<p>@Constraint(validatedBy = {<br>        CrossParameterScriptAssertClassValidator.class,<br>        CrossParameterScriptAssertParameterValidator.class<br>})<br>@Target({ TYPE, FIELD, PARAMETER, METHOD, CONSTRUCTOR, ANNOTATION_TYPE })<br>@Retention(RUNTIME)<br>@Documented<br>public @interface CrossParameterScriptAssert {<br>    String message() default &quot;error&quot;;<br>    Class&lt;?&gt;[] groups() default { };<br>    Class&lt;? extends Payload&gt;[] payload() default { };<br>    String script();<br>    String lang();<br>    String alias() default &quot;_this&quot;;<br>    String property() default &quot;&quot;;<br>    ConstraintTarget validationAppliesTo() default ConstraintTarget.IMPLICIT;<br>}<br>[/java]<br>此处我们通过@Constraint指定了两个验证器，一个类级别的，一个跨参数的。validationAppliesTo指定为ConstraintTarget.IMPLICIT，表示隐式自动判断。</p>
<p>9.2、验证器<br>请下载源码查看</p>
<p>9.3、使用<br>9.3.1、类级别使用<br>[java]<br>@CrossParameterScriptAssert(property = &quot;confirmation&quot;, script = &quot;_this.password==_this.confirmation&quot;, lang = &quot;javascript&quot;, alias = &quot;_this&quot;, message = &quot;{password.confirmation.error}&quot;)  [/java]<br>指定property即可，其他和之前的一样。<br>9.3.2、跨参数验证<br>[java]<br>@CrossParameterScriptAssert(script = &quot;args[0] == args[1]&quot;, lang = &quot;javascript&quot;, alias = &quot;args&quot;, message = &quot;{password.confirmation.error}&quot;)<br>public void changePassword(String password, String confirmation) {  </p>
<p>}  [/java]<br>通过args[0]==args[1] 来判断是否相等。</p>
<p>这样，我们的验证注解就自动适应两种验证规则了。  </p>
<p>10、组合验证注解<br>有时候，可能有好几个注解需要一起使用，此时就可以使用组合验证注解<br>[java]<br>@Target({ FIELD})<br>@Retention(RUNTIME)<br>@Documented<br>@NotNull(message = &quot;{user.name.null}&quot;)<br>@Length(min = 5, max = 20, message = &quot;{user.name.length.illegal}&quot;)<br>@Pattern(regexp = &quot;[a-zA-Z]{5,20}&quot;, message = &quot;{user.name.length.illegal}&quot;)<br>@Constraint(validatedBy = { })<br>public @interface Composition {<br>    String message() default &quot;&quot;;<br>    Class&lt;?&gt;[] groups() default { };<br>    Class&lt;? extends Payload&gt;[] payload() default { };<br>}  [/java]<br>这样我们验证时只需要：<br>[java]<br>@Composition()<br>private String name;[/java]<br>简洁多了。 </p>
<p>11、本地化<br>即根据不同的语言选择不同的错误消息显示。<br>1、本地化解析器<br>[java]<br>&lt;bean id=&quot;localeResolver&quot; class=&quot;org.springframework.web.servlet.i18n.CookieLocaleResolver&quot;&gt;<br>    &lt;property name=&quot;cookieName&quot; value=&quot;locale&quot;/&gt;<br>    &lt;property name=&quot;cookieMaxAge&quot; value=&quot;-1&quot;/&gt;<br>    &lt;property name=&quot;defaultLocale&quot; value=&quot;zh_CN&quot;/&gt;<br>&lt;/bean&gt; [/java]<br>此处使用cookie存储本地化信息，当然也可以选择其他的，如Session存储。</p>
<p>2、设置本地化信息的拦截器<br>[java]<br>&lt;mvc:interceptors&gt;<br>    &lt;bean class=&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;&gt;<br>        &lt;property name=&quot;paramName&quot; value=&quot;language&quot;/&gt;<br>    &lt;/bean&gt;<br>&lt;/mvc:interceptors&gt;  [/java]<br>即请求参数中通过language设置语言。</p>
<p>3、消息文件<br><img src="http://dl2.iteye.com/upload/attachment/0092/1724/318b49d8-4039-3524-ae09-31ed784a1dc4.jpg" alt=""></p>
<p>4、 浏览器输入<br><a href="http://localhost:9080/spring4/changePassword?password=1&amp;confirmation=2&amp;language=en_US" target="_blank" rel="external">http://localhost:9080/spring4/changePassword?password=1&amp;confirmation=2&amp;language=en_US</a></p>
<p>到此，我们已经完成大部分Bean Validation的功能实验了。对于如XML配置、编程式验证API的使用等对于我们使用SpringMVC这种web环境用处不大，所以就不多介绍了，有兴趣可以自己下载官方文档学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——更好的Java泛型操作API]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%9B%B4%E5%A5%BD%E7%9A%84Java%E6%B3%9B%E5%9E%8B%E6%93%8D%E4%BD%9CAPI/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1993608" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1993608</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>随着泛型用的越来越多，获取泛型实际类型信息的需求也会出现，如果用原生API，需要很多步操作才能获取到泛型，比如：<br>[java]<br>ParameterizedType parameterizedType =<br>    (ParameterizedType) ABService.class.getGenericInterfaces()[0];<br>Type genericType = parameterizedType.getActualTypeArguments()[1];<br>[/java]<br>Spring提供的ResolvableType API，提供了更加简单易用的泛型操作支持，如：<br>[java]<br>ResolvableType resolvableType1 = ResolvableType.forClass(ABService.class);<br>resolvableType1.as(Service.class).getGeneric(1).resolve()<br>[/java]<br>对于获取更复杂的泛型操作ResolvableType更加简单。</p>
<p>假设我们的API是：<br>[java]<br>public interface Service&lt;N, M&gt; {<br>}  </p>
<p>@org.springframework.stereotype.Service<br>public class ABService implements Service&lt;A, B&gt; {<br>}  </p>
<p>@org.springframework.stereotype.Service<br>public class CDService implements Service&lt;C, D&gt; {<br>}<br>[/java]<br>如上泛型类非常简单。 </p>
<p>1、得到类型的泛型信息<br>[java]<br>ResolvableType resolvableType1 = ResolvableType.forClass(ABService.class);  [/java]<br>通过如上API，可以得到类型的ResolvableType，如果类型被Spring AOP进行了CGLIB代理，请使用ClassUtils.getUserClass(ABService.class)得到原始类型。</p>
<p>可以通过如下得到泛型参数的第1个位置（从0开始）的类型信息<br>[java]<br>resolvableType1.getInterfaces()[0].getGeneric(1).resolve()  [/java]<br>因为我们泛型信息放在 Service<a, b=""> 上，所以需要resolvableType1.getInterfaces()[0]得到；</a,></p>
<p>通过getGeneric（泛型参数索引）得到某个位置的泛型；<br>resolve()把实际泛型参数解析出来</p>
<p>2、得到字段级别的泛型信息<br>假设我们的字段如下：<br>[java]<br>@Autowired<br> private Service&lt;A, B&gt; abService;<br> @Autowired<br> private Service&lt;C, D&gt; cdService;  </p>
<p> private List&lt;List&lt;String&gt;&gt; list;  </p>
<p> private Map&lt;String, Map&lt;String, Integer&gt;&gt; map;  </p>
<p> private List&lt;String&gt;[] array;<br>[/java]<br>通过如下API可以得到字段级别的ResolvableType<br>[java]<br>ResolvableType resolvableType2 =<br>                ResolvableType.forField(ReflectionUtils.findField(GenricInjectTest.class, &quot;cdService&quot;));<br>[/java]<br>然后通过如下API得到Service<c, d="">的第0个位置上的泛型实参类型，即C<br>[java]<br>resolvableType2.getGeneric(0).resolve()<br>[/java]<br>比如 List<list<string>&gt; list;是一种嵌套的泛型用例，我们可以通过如下操作获取String类型：<br>[java]<br>ResolvableType resolvableType3 =<br>                ResolvableType.forField(ReflectionUtils.findField(GenricInjectTest.class, &quot;list&quot;));<br>resolvableType3.getGeneric(0).getGeneric(0).resolve();<br>[/java]<br>更简单的写法<br>[java]<br>resolvableType3.getGeneric(0, 0).resolve(); //List&lt;List&lt;String&gt;&gt; 即String<br>[/java]<br>比如Map<string, map<string,="" integer="">&gt; map;我们想得到Integer，可以使用：<br>[java]<br>ResolvableType resolvableType4 =<br>                ResolvableType.forField(ReflectionUtils.findField(GenricInjectTest.class, &quot;map&quot;));<br>resolvableType4.getGeneric(1).getGeneric(1).resolve();  [/java]<br>更简单的写法<br>[java]<br>resolvableType4.getGeneric(1, 1).resolve()<br>[/java]<br>3、得到方法返回值的泛型信息<br>假设我们的方法如下：<br>[java]<br>private HashMap&lt;String, List&lt;String&gt;&gt; method() {<br>    return null;<br>}<br>[/java]<br>得到Map中的List中的String泛型实参：<br>[java]<br>ResolvableType resolvableType5 =<br>                ResolvableType.forMethodReturnType(ReflectionUtils.findMethod(GenricInjectTest.class, &quot;method&quot;));<br>resolvableType5.getGeneric(1, 0).resolve();<br>[/java]<br>4、得到构造器参数的泛型信息<br>假设我们的构造器如下：<br>[java]<br>public Const(List&lt;List&lt;String&gt;&gt; list, Map&lt;String, Map&lt;String, Integer&gt;&gt; map) {<br>} [/java]<br>我们可以通过如下方式得到第1个参数（ Map<string, map<string,="" integer="">&gt;）中的Integer：<br>[java]<br>ResolvableType resolvableType6 =<br>                ResolvableType.forConstructorParameter(ClassUtils.getConstructorIfAvailable(Const.class, List.class, Map.class), 1);<br>resolvableType6.getGeneric(1, 0).resolve();<br>[/java]<br>5、得到数组组件类型的泛型信息<br>如对于private List<string>[] array; 可以通过如下方式获取List的泛型实参String：<br>[java]<br>ResolvableType resolvableType7 =<br>                ResolvableType.forField(ReflectionUtils.findField(GenricInjectTest.class, &quot;array&quot;));<br>resolvableType7.isArray();//判断是否是数组<br>resolvableType7.getComponentType().getGeneric(0).resolve();<br>[/java]<br>6、自定义泛型类型<br>[java]<br>ResolvableType resolvableType8 = ResolvableType.forClassWithGenerics(List.class, String.class);<br>        ResolvableType resolvableType9 = ResolvableType.forArrayComponent(resolvableType8);<br>resolvableType9.getComponentType().getGeneric(0).resolve();<br>ResolvableType.forClassWithGenerics(List.class, String.class)相当于创建一个List&lt;String&gt;类型；<br>ResolvableType.forArrayComponent(resolvableType8);：相当于创建一个List&lt;String&gt;[]数组；<br>resolvableType9.getComponentType().getGeneric(0).resolve()：得到相应的泛型信息；<br>[/java]<br>7、泛型等价比较：<br>[java]<br>resolvableType7.isAssignableFrom(resolvableType9)<br>[/java]<br>如下创建一个List<integer>[]数组，与之前的List<string>[]数组比较，将返回false。<br>[java]<br>ResolvableType resolvableType10 = ResolvableType.forClassWithGenerics(List.class, Integer.class);<br>ResolvableType resolvableType11= ResolvableType.forArrayComponent(resolvableType10);<br>resolvableType11.getComponentType().getGeneric(0).resolve();<br>resolvableType7.isAssignableFrom(resolvableType11);<br>[/java]<br>从如上操作可以看出其泛型操作功能十分完善，尤其在嵌套的泛型信息获取上相当简洁。目前整个Spring4环境都使用这个API来操作泛型信息。</string></integer></string></string,></string,></list<string></c,></p>
<p>如之前说的泛型注入：Spring4新特性——泛型限定式依赖注入，通过在依赖注入时使用如下类实现：<br>GenericTypeAwareAutowireCandidateResolver<br>QualifierAnnotationAutowireCandidateResolver<br>ContextAnnotationAutowireCandidateResolver</p>
<p>还有如Spring的核心BeanWrapperImpl，以及整个Spring/SpringWevMVC的泛型操作都是替换为这个API了：GenericCollectionTypeResolver和GenericTypeResolver都直接委托给ResolvableType这个API。</p>
<p>所以大家以后对泛型操作可以全部使用这个API了，非常好用。测试用例请参考<a href="https://github.com/zhangkaitao/spring4-showcase/blob/master/spring4-others/src/test/java/com/sishuok/spring4/generic/GenricInjectTest.java" target="_blank" rel="external">GenricInjectTest.java</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——JSR310日期时间API的支持]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94JSR310%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4API%E7%9A%84%E6%94%AF%E6%8C%81/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1994164" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1994164</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>JSR-310规范提供一个新的和改进的Java日期与时间API。从2007投票到2013年11月发布公共Review版本已经好多年了，会在Java8中包含，可以下载OpenJDK早期发布版本试用（Win XP不支持）：</p>
<p><a href="https://jdk8.java.net/download.html" target="_blank" rel="external">https://jdk8.java.net/download.html</a></p>
<p>JSR 310规范领导者Stephen Colebourne就是joda-time作者，其主要思想也是借鉴了joda-time，而不是直接把joda-time移植到Java平台中，API是类似的，但做了改进，具体的改进请参考其2009年的一篇文章和InfoQ对他的采访：<br><a href="http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html" target="_blank" rel="external">http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html</a><br><a href="http://www.infoq.com/cn/news/2010/05/jsr-310" target="_blank" rel="external">http://www.infoq.com/cn/news/2010/05/jsr-310</a><br><a href="http://blog.joda.org/2010/12/what-about-jsr-310_153.html" target="_blank" rel="external">http://blog.joda.org/2010/12/what-about-jsr-310_153.html</a></p>
<p>规范请前往如下地址下载：<br><a href="https://jcp.org/en/jsr/detail?id=310" target="_blank" rel="external">https://jcp.org/en/jsr/detail?id=310</a></p>
<p>JSR310 日期与时间规范主要API如下：<br>Clock<br>时钟，类似于钟表的概念，提供了如系统时钟、固定时钟、特定时区的时钟<br>[java]<br>//时钟提供给我们用于访问某个特定 时区的 瞬时时间、日期 和 时间的。<br>Clock c1 = Clock.systemUTC(); //系统默认UTC时钟（当前瞬时时间 System.currentTimeMillis()）<br>System.out.println(c1.millis()); //每次调用将返回当前瞬时时间（UTC）  </p>
<p>Clock c2 = Clock.systemDefaultZone(); //系统默认时区时钟（当前瞬时时间）  </p>
<p>Clock c31 = Clock.system(ZoneId.of(&quot;Europe/Paris&quot;)); //巴黎时区<br>System.out.println(c31.millis()); //每次调用将返回当前瞬时时间（UTC）  </p>
<p>Clock c32 = Clock.system(ZoneId.of(&quot;Asia/Shanghai&quot;));//上海时区<br>System.out.println(c32.millis());//每次调用将返回当前瞬时时间（UTC）  </p>
<p>Clock c4 = Clock.fixed(Instant.now(), ZoneId.of(&quot;Asia/Shanghai&quot;));//固定上海时区时钟<br>System.out.println(c4.millis());<br>Thread.sleep(1000);<br>System.out.println(c4.millis()); //不变 即时钟时钟在那一个点不动  </p>
<p>Clock c5 = Clock.offset(c1, Duration.ofSeconds(2)); //相对于系统默认时钟两秒的时钟<br>System.out.println(c1.millis());<br>System.out.println(c5.millis());<br>[/java] </p>
<p>Instant<br>瞬时时间，等价于以前的System.currentTimeMillis()<br>[java]<br>//瞬时时间 相当于以前的System.currentTimeMillis()<br>Instant instant1 = Instant.now();<br>System.out.println(instant1.getEpochSecond());//精确到秒 得到相对于1970-01-01 00:00:00 UTC的一个时间<br>System.out.println(instant1.toEpochMilli()); //精确到毫秒  </p>
<p>Clock clock1 = Clock.systemUTC(); //获取系统UTC默认时钟<br>Instant instant2 = Instant.now(clock1);//得到时钟的瞬时时间<br>System.out.println(instant2.toEpochMilli());  </p>
<p>Clock clock2 = Clock.fixed(instant1, ZoneId.systemDefault()); //固定瞬时时间时钟<br>Instant instant3 = Instant.now(clock2);//得到时钟的瞬时时间<br>System.out.println(instant3.toEpochMilli());//equals instant1<br>[/java]<br>LocalDateTime、LocalDate、LocalTime<br>提供了对java.util.Date的替代，另外还提供了新的DateTimeFormatter用于对格式化/解析的支持<br>[java]<br>//使用默认时区时钟瞬时时间创建 Clock.systemDefaultZone() –&gt;即相对于 ZoneId.systemDefault()默认时区<br>LocalDateTime now = LocalDateTime.now();<br>System.out.println(now);  </p>
<p>//自定义时区<br>LocalDateTime now2= LocalDateTime.now(ZoneId.of(&quot;Europe/Paris&quot;));<br>System.out.println(now2);//会以相应的时区显示日期  </p>
<p>//自定义时钟<br>Clock clock = Clock.system(ZoneId.of(&quot;Asia/Dhaka&quot;));<br>LocalDateTime now3= LocalDateTime.now(clock);<br>System.out.println(now3);//会以相应的时区显示日期  </p>
<p>//不需要写什么相对时间 如java.util.Date 年是相对于1900 月是从0开始<br>//2013-12-31 23:59<br>LocalDateTime d1 = LocalDateTime.of(2013, 12, 31, 23, 59);  </p>
<p>//年月日 时分秒 纳秒<br>LocalDateTime d2 = LocalDateTime.of(2013, 12, 31, 23, 59,59, 11);  </p>
<p>//使用瞬时时间 + 时区<br>Instant instant = Instant.now();<br>LocalDateTime d3 = LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault());<br>System.out.println(d3);  </p>
<p>//解析String—&gt;LocalDateTime<br>LocalDateTime d4 = LocalDateTime.parse(&quot;2013-12-31T23:59&quot;);<br>System.out.println(d4);  </p>
<p>LocalDateTime d5 = LocalDateTime.parse(&quot;2013-12-31T23:59:59.999&quot;);//999毫秒 等价于999000000纳秒<br>System.out.println(d5);  </p>
<p>//使用DateTimeFormatter API 解析 和 格式化<br>DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd HH:mm:ss&quot;);<br>LocalDateTime d6 = LocalDateTime.parse(&quot;2013/12/31 23:59:59&quot;, formatter);<br>System.out.println(formatter.format(d6));  </p>
<p>//时间获取<br>System.out.println(d6.getYear());<br>System.out.println(d6.getMonth());<br>System.out.println(d6.getDayOfYear());<br>System.out.println(d6.getDayOfMonth());<br>System.out.println(d6.getDayOfWeek());<br>System.out.println(d6.getHour());<br>System.out.println(d6.getMinute());<br>System.out.println(d6.getSecond());<br>System.out.println(d6.getNano());<br>//时间增减<br>LocalDateTime d7 = d6.minusDays(1);<br>LocalDateTime d8 = d7.plus(1, IsoFields.QUARTER_YEARS);  </p>
<p>//LocalDate 即年月日 无时分秒<br>//LocalTime即时分秒 无年月日<br>//API和LocalDateTime类似就不演示了<br>[/java]<br>ZonedDateTime<br>带有时区的date-time 存储纳秒、时区和时差（避免与本地date-time歧义）；API和LocalDateTime类似，只是多了时差(如2013-12-20T10:35:50.711+08:00[Asia/Shanghai])<br>[java]<br>//即带有时区的date-time 存储纳秒、时区和时差（避免与本地date-time歧义）。<br>//API和LocalDateTime类似，只是多了时差(如2013-12-20T10:35:50.711+08:00[Asia/Shanghai])<br>ZonedDateTime now = ZonedDateTime.now();<br>System.out.println(now);  </p>
<p>ZonedDateTime now2= ZonedDateTime.now(ZoneId.of(&quot;Europe/Paris&quot;));<br>System.out.println(now2);  </p>
<p>//其他的用法也是类似的 就不介绍了  </p>
<p>ZonedDateTime z1 = ZonedDateTime.parse(&quot;2013-12-31T23:59:59Z[Europe/Paris]&quot;);<br>System.out.println(z1);<br>[/java] </p>
<p>Duration<br>表示两个瞬时时间的时间段 </p>
<p>[java]<br>//表示两个瞬时时间的时间段<br>Duration d1 = Duration.between(Instant.ofEpochMilli(System.currentTimeMillis() - 12323123), Instant.now());<br>//得到相应的时差<br>System.out.println(d1.toDays());<br>System.out.println(d1.toHours());<br>System.out.println(d1.toMinutes());<br>System.out.println(d1.toMillis());<br>System.out.println(d1.toNanos());  </p>
<p>//1天时差 类似的还有如ofHours()<br>Duration d2 = Duration.ofDays(1);<br>System.out.println(d2.toDays());<br>[/java] </p>
<p>Chronology<br>用于对年历系统的支持，是java.util.Calendar的替代者<br>[java]<br>//提供对java.util.Calendar的替换，提供对年历系统的支持<br>Chronology c  = HijrahChronology.INSTANCE;<br>ChronoLocalDateTime d = c.localDateTime(LocalDateTime.now());<br>System.out.println(d);<br>[/java]<br>其他<br>如果提供了年、年月、月日、周期的API支持<br>[java]<br>Year year = Year.now();<br>YearMonth yearMonth = YearMonth.now();<br>MonthDay monthDay = MonthDay.now();  </p>
<p>System.out.println(year);//年<br>System.out.println(yearMonth); //年-月<br>System.out.println(monthDay); // 月-日  </p>
<p>//周期，如表示10天前  3年5个月钱<br>Period period1 = Period.ofDays(10);<br>System.out.println(period1);<br>Period period2 = Period.of(3, 5, 0);<br>System.out.println(period2);<br>[/java]<br>代码示例请参考：TimeTest.java</p>
<p>从以上来看，JSR310提供了更好、更强大的、更易使用的API。另外有三篇对joda-time和jsr310 使用的介绍文章：<br><a href="http://www.codedata.com.tw/java/jodatime-jsr310-1-date-calendar/" target="_blank" rel="external">http://www.codedata.com.tw/java/jodatime-jsr310-1-date-calendar/</a><br><a href="http://www.codedata.com.tw/java/jodatime-jsr310-2-time-abc/" target="_blank" rel="external">http://www.codedata.com.tw/java/jodatime-jsr310-2-time-abc/</a><br><a href="http://www.codedata.com.tw/java/jodatime-jsr310-3-using-jodatime/" target="_blank" rel="external">http://www.codedata.com.tw/java/jodatime-jsr310-3-using-jodatime/</a></p>
<p>spring4提供了对jsr310的支持，只要能发现如java.time.LocalDate，DefaultFormattingConversionService就会自动注册对jsr310的支持；对于ConversionService请参考：<br>SpringMVC数据格式化——第七章 注解式控制器的数据验证、类型转换及格式化——跟着开涛学SpringMVC </p>
<p>我们只需要在实体/Bean上使用DateTimeFormat注解：<br>[java]<br>@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)<br>private LocalDateTime dateTime;  </p>
<p>@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)<br>private LocalDate date;  </p>
<p>@DateTimeFormat(pattern = &quot;HH:mm:ss&quot;)<br>private LocalTime time;<br>[/java]<br>比如我们在springmvc中：<br>[java]<br>@RequestMapping(&quot;/test&quot;)<br>public String test(@ModelAttribute(&quot;entity&quot;) Entity entity) {<br>    return &quot;test&quot;;<br>}<br>[/java]<br>当前端页面请求：<br>localhost:9080/spring4/test?dateTime=2013-11-11 11:11:11&amp;date=2013-11-11&amp;time=12:12:12<br>会自动进行类型转换。</p>
<p>另外spring4也提供了对TimeZone的支持；比如在springmvc中注册了LocaleContextResolver相应实现的话（如CookieLocaleResolver），我们就可以使用如下两种方式得到相应的TimeZone：<br>RequestContextUtils.getTimeZone(request)<br>LocaleContextHolder.getTimeZone()</p>
<p>不过目前的缺点是不能像Local那样自动的根据当前请求得到相应的TimeZone，如果需要这种功能需要覆盖相应的如CookieLocaleResolver中的如下方法来得到：<br>[java]<br>protected TimeZone determineDefaultTimeZone(HttpServletRequest request) {<br>    return getDefaultTimeZone();<br>}<br>[/java]<br>另外还提供了DateTimeContextHolder，其用于线程绑定DateTimeContext；而DateTimeContext提供了如：Chronology、ZoneId、DateTimeFormatter等上下文数据，如果需要这种上下文信息的话，可以使用这个API进行绑定。比如在进行日期格式化时，就会去查找相应的DateTimeFormatter，因此如果想自定义相应的格式化格式，那么使用DateTimeContextHolder绑定即可。</p>
<p>源代码请参考github项目：spring4-datetime-jsr310 </p>
<p>spring4只是简单的对jsr310提供了相应的支持，没有太多的增强。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——注解、脚本、任务、MVC等其他特性改进]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%B3%A8%E8%A7%A3%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E4%BB%BB%E5%8A%A1%E3%80%81MVC%E7%AD%89%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7%E6%94%B9%E8%BF%9B/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1995111" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1995111</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>一、注解方面的改进<br>spring4对注解API和ApplicationContext获取注解Bean做了一点改进。<br>获取注解的注解，如@Service是被@Compent注解的注解，可以通过如下方式获取@Componet注解实例：<br>[java]<br>Annotation service = AnnotationUtils.findAnnotation(ABService.class, org.springframework.stereotype.Service.class);<br>Annotation component = AnnotationUtils.getAnnotation(service, org.springframework.stereotype.Component.class);<br>[/java]<br>获取重复注解：<br>比如在使用hibernate validation时，我们想在一个方法上加相同的注解多个，需要使用如下方式：<br>[java]<br>@Length.List(<br>        value = {<br>                @Length(min = 1, max = 2, groups = A.class),<br>                @Length(min = 3, max = 4, groups = B.class)<br>        }<br>)<br>public void test() {  [/java]<br>可以通过如下方式获取@Length：<br>[java]<br>Method method = ClassUtils.getMethod(AnnotationUtilsTest.class, &quot;test&quot;);<br>Set&lt;Length&gt; set = AnnotationUtils.getRepeatableAnnotation(method, Length.List.class, Length.class);<br>[/java]<br>当然，如果你使用Java8，那么本身就支持重复注解，比如spring的任务调度注解，<br>[java]<br>@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>@Repeatable(Schedules.class)<br>public @interface Scheduled {<br>[/java]<br>[java]<br>@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>public @interface Schedules {  </p>
<pre><code>Scheduled[] value();  
</code></pre><p>}<br>[/java]<br>这样的话，我们可以直接同时注解相同的多个注解：<br>[java]<br>@Scheduled(cron = &quot;123&quot;)<br>@Scheduled(cron = &quot;234&quot;)<br>public void test<br>[/java]<br>但是获取的时候还是需要使用如下方式：<br>[java]<br>AnnotationUtils.getRepeatableAnnotation(ClassUtils.getMethod(TimeTest.class, &quot;test&quot;), Schedules.class, Scheduled.class)<br>[/java]<br>ApplicationContext和BeanFactory提供了直接通过注解获取Bean的方法：<br>[java]<br>@Test<br>public void test() {<br>    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();<br>    ctx.register(GenericConfig.class);<br>    ctx.refresh();  </p>
<pre><code>Map&amp;lt;String, Object&amp;gt; beans = ctx.getBeansWithAnnotation(org.springframework.stereotype.Service.class);  
System.out.println(beans);  
</code></pre><p>}<br>[/java]<br>这样可以实现一些特殊功能。</p>
<p>另外和提供了一个AnnotatedElementUtils用于简化java.lang.reflect.AnnotatedElement的操作，具体请参考其javadoc。   </p>
<p>二、脚本的支持<br>spring4也提供了类似于javax.script的简单封装，用于支持一些脚本语言，核心接口是：<br>[java]<br>public interface ScriptEvaluator {<br>    Object evaluate(ScriptSource script) throws ScriptCompilationException;<br>    Object evaluate(ScriptSource script, Map&lt;String, Object&gt; arguments) throws ScriptCompilationException;<br>}<br>[/java]<br>比如我们使用groovy脚本的话，可以这样：<br>[java]<br>@Test<br>public void test() throws ExecutionException, InterruptedException {<br>    ScriptEvaluator scriptEvaluator = new GroovyScriptEvaluator();  </p>
<pre><code>//ResourceScriptSource 外部的  
ScriptSource source = new StaticScriptSource(&amp;quot;i+j&amp;quot;);  
Map&amp;lt;String, Object&amp;gt; args = new HashMap&amp;lt;&amp;gt;();  
args.put(&amp;quot;i&amp;quot;, 1);  
args.put(&amp;quot;j&amp;quot;, 2);  
System.out.println(scriptEvaluator.evaluate(source, args));  
</code></pre><p>} [/java]<br>没什么很特别的地方。另外还提供了BeanShell（BshScriptEvaluator）和javax.script（StandardScriptEvaluator）的简单封装。</p>
<p>三、Future增强<br>提供了一个ListenableFuture，其是jdk的Future的封装，用来支持回调（成功/失败），其借鉴了com.google.common.util.concurrent.ListenableFuture。<br>[java]<br>@Test<br>public void test() throws Exception {<br>    ListenableFutureTask&lt;String&gt; task = new ListenableFutureTask&lt;String&gt;(new Callable() {<br>        @Override<br>        public Object call() throws Exception {<br>            Thread.sleep(10 * 1000L);<br>            System.out.println(&quot;=======task execute&quot;);<br>            return &quot;hello&quot;;<br>        }<br>    });  </p>
<pre><code>task.addCallback(new ListenableFutureCallback&amp;lt;String&amp;gt;() {  
    @Override  
    public void onSuccess(String result) {  
        System.out.println(&amp;quot;===success callback 1&amp;quot;);  
    }  

    @Override  
    public void onFailure(Throwable t) {  
    }  
});  

task.addCallback(new ListenableFutureCallback&amp;lt;String&amp;gt;() {  
    @Override  
    public void onSuccess(String result) {  
        System.out.println(&amp;quot;===success callback 2&amp;quot;);  
    }  

    @Override  
    public void onFailure(Throwable t) {  
    }  
});  

ExecutorService executorService = Executors.newSingleThreadExecutor();  
executorService.submit(task);  
String result = task.get();  
System.out.println(result);  
</code></pre><p>}[/java]<br>可以通过addCallback添加一些回调，当执行成功/失败时会自动调用。</p>
<p>四、MvcUriComponentsBuilder<br>MvcUriComponentsBuilder类似于ServletUriComponentsBuilder，但是可以直接从控制器获取URI信息，如下所示：<br>假设我们的控制器是：<br>[java]<br>@Controller<br>@RequestMapping(&quot;/user&quot;)<br>public class UserController {  </p>
<pre><code>@RequestMapping(&amp;quot;/{id}&amp;quot;)  
public String view(@PathVariable(&amp;quot;id&amp;quot;) Long id) {  
    return &amp;quot;view&amp;quot;;  
}  

@RequestMapping(&amp;quot;/{id}&amp;quot;)  
public A getUser(@PathVariable(&amp;quot;id&amp;quot;) Long id) {  
    return new A();  
}  
</code></pre><p>} [/java]<br>注：如果在真实mvc环境，存在两个@RequestMapping(“/{id}”)是错误的。当前只是为了测试。</p>
<p>我们可以通过如下方式得到<br>[java]<br>//需要静态导入 import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.*;<br>@Test<br>public void test() {<br>    MockHttpServletRequest req = new MockHttpServletRequest();<br>    RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(req));  </p>
<pre><code>//MvcUriComponentsBuilder类似于ServletUriComponentsBuilder，但是直接从控制器获取  
//类级别的  
System.out.println(  
        fromController(UserController.class).build().toString()  
);  

//方法级别的  
System.out.println(  
        fromMethodName(UserController.class, &amp;quot;view&amp;quot;, 1L).build().toString()  
);  

//通过Mock方法调用得到  
System.out.println(  
        fromMethodCall(on(UserController.class).getUser(2L)).build()  
);  
</code></pre><p>} [/java]<br>注意：当前MvcUriComponentsBuilder实现有问题，只有JDK环境支持，大家可以复制一份，然后修改：<br>method.getParameterCount() （Java 8才支持）<br>到<br>method.getParameterTypes().length</p>
<p>五、Socket支持<br>提供了获取Socket TCP/UDP可用端口的工具，如<br>[java]<br>SocketUtils.findAvailableTcpPort()<br>SocketUtils.findAvailableTcpPort(min, max)<br>SocketUtils.findAvailableUdpPort()<br>[/java]<br>非常简单，就不用特别说明了。</p>
<p>示例代码请参考：spring4-others</p>
<p>到此，spring4新特性就介绍完了，此处没有介绍websocket，后续有时间考虑写一个websocket完整系列，对于spring4除了websocket，其他方面并没有特别吸引人的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——Groovy Bean定义DSL]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94Groovy%20Bean%E5%AE%9A%E4%B9%89DSL/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1991830" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1991830</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>Spring4支持使用Groovy DSL来进行Bean定义配置，其类似于XML，不过因为是Groovy DSL，可以实现任何复杂的语法配置，但是对于配置，我们需要那么复杂吗？本着学习的态度试用了下其Groovy DSL定义Bean，其主要缺点：<br>1、DSL语法规则不足，需要其后续维护；<br>2、编辑器的代码补全需要跟进，否则没有代码补全，写这个很痛苦；<br>3、出错提示不友好，排错难；<br>4、当前对于一些配置还是需要XML的支持，所以还不是100%的纯Groovy DSL；<br>5、目前对整个Spring生态支持还是不够的，比如Web，需要观望。</p>
<p>其优点就是其本质是Groovy脚本，所以可以做非常复杂的配置，如果以上问题能够解决，其也是一个不错的选择。在Groovy中的话使用这种配置感觉不会有什么问题，但是在纯Java开发环境下也是有它，给我的感觉是这个功能其目的是去推广它的groovy。比较怀疑它的动机。</p>
<p>接下来我们来看看Spring配置的发展：<br>Spring 2时代是XML风格配置  可以参考《跟我学Spring3》的前几章<br>Spring 3时代引入注解风格配置  可以参考《跟我学Spring3》的第12章<br>Spring 4时代引入Groovy DSL风格来配置 后续讲解</p>
<p>一、对比<br>对于我来说，没有哪个好/坏，只有适用不适用；开发方便不方便。接下来我们来看一下各种类型的配置吧：<br>XML风格配置<br>[java]<br>&lt;context:component-scan base-package=&quot;com.sishuok.spring4&quot;/&gt;<br>&lt;bean class=&quot;org.springframework.validation.beanvalidation.MethodValidationPostProcessor&quot;&gt;<br>    &lt;property name=&quot;validator&quot; ref=&quot;validator&quot;/&gt;<br>&lt;/bean&gt;<br>&lt;mvc:annotation-driven validator=&quot;validator&quot;/&gt;  </p>
<p>&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;<br>    &lt;property name=&quot;providerClass&quot; value=&quot;org.hibernate.validator.HibernateValidator&quot;/&gt;<br>    &lt;property name=&quot;validationMessageSource&quot; ref=&quot;messageSource&quot;/&gt;<br>&lt;/bean&gt;<br>[/java]<br>注解风格配置<br>[java]<br>@Configuration<br>@EnableWebMvc<br>@ComponentScan(basePackages = &quot;com.sishuok.spring4&quot;)<br>public class MvcConfiguration extends WebMvcConfigurationSupport {<br>    @Override<br>    protected Validator getValidator() {<br>        LocalValidatorFactoryBean localValidatorFactoryBean =<br>                new LocalValidatorFactoryBean();<br>        localValidatorFactoryBean.setProviderClass(HibernateValidator.class);<br>        localValidatorFactoryBean.setValidationMessageSource(messageSource());<br>        return localValidatorFactoryBean;<br>    }<br>}<br>[/java]<br>Groovy DSL风格配置<br>[java]<br>import org.hibernate.validator.HibernateValidator<br>import org.springframework.context.support.ReloadableResourceBundleMessageSource<br>import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean  </p>
<p>beans {<br>    xmlns context: &quot;<a href="http://www.springframework.org/schema/context&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/context&amp;quot</a>;<br>    xmlns mvc: &quot;<a href="http://www.springframework.org/schema/mvc&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/mvc&amp;quot</a>;  </p>
<pre><code>context.&apos;component-scan&apos;(&apos;base-package&apos;: &amp;quot;com,sishuok.spring4&amp;quot;)  
mvc.&apos;annotation-driven&apos;(&apos;validator&apos;: &amp;quot;validator&amp;quot;)  

validator(LocalValidatorFactoryBean) {  
    providerClass = HibernateValidator.class  
    validationMessageSource = ref(&amp;quot;messageSource&amp;quot;)  
}  
</code></pre><p>}<br>[/java]<br>因为Spring4 webmvc没有提供用于Web环境的Groovy DSL实现的WebApplicationContext，所以为了在web环境使用，单独写了一个WebGenricGroovyApplicationContext，可以到源码中查找。</p>
<p>可以看到，它们之前差别不是特别大；以上只提取了部分配置，完整的配置可以参考我的github：spring4-showcase</p>
<p>对于注解风格的配置，如果在Servlet3容器中使用的话，可以借助WebApplicationInitializer实现无配置：<br>[java]<br>public class AppInitializer implements WebApplicationInitializer {  </p>
<pre><code>@Override  
public void onStartup(javax.servlet.ServletContext sc) throws ServletException {  
</code></pre><p>//        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();<br>//        rootContext.register(AppConfig.class);<br>//        sc.addListener(new ContextLoaderListener(rootContext));  </p>
<pre><code>    //2、springmvc上下文  
    AnnotationConfigWebApplicationContext springMvcContext = new AnnotationConfigWebApplicationContext();  
    springMvcContext.register(MvcConfiguration.class);  

    //3、DispatcherServlet  
    DispatcherServlet dispatcherServlet = new DispatcherServlet(springMvcContext);  
    ServletRegistration.Dynamic dynamic = sc.addServlet(&amp;quot;dispatcherServlet&amp;quot;, dispatcherServlet);  
    dynamic.setLoadOnStartup(1);  
    dynamic.addMapping(&amp;quot;/&amp;quot;);  

    //4、CharacterEncodingFilter  
    FilterRegistration filterRegistration =  
            sc.addFilter(&amp;quot;characterEncodingFilter&amp;quot;, CharacterEncodingFilter.class);  
    filterRegistration.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, &amp;quot;/*&amp;quot;);  

}  
</code></pre><p>}<br>[/java]<br>到底好还是不好，需要根据自己项目大小等一些因素来衡量。对于Servlet3可以参考我github的示例：servlet3-showcase  </p>
<p>对于Groovy风格配置，如果语法足够丰富、Spring内部支持完善，且编辑器支持也非常好的话，也是不错的选择。</p>
<p>二、Groovy Bean定义<br>接下来我们来看下groovy DSL的具体使用吧：<br>1、安装环境<br>[java]<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;<br>    &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;<br>    &lt;version&gt;${groovy.version}&lt;/version&gt;<br>&lt;/dependency&gt;<br>[/java]<br>我使用的groovy版本是2.2.1</p>
<p>2、相关组件类<br>此处使用Spring Framework官网的hello world，可以前往<a href="http://projects.spring.io/spring-framework/" target="_blank" rel="external">http://projects.spring.io/spring-framework/</a> 主页查看 </p>
<p>3、Groovy Bean定义配置文件<br>[java]<br>import com.sishuok.spring4.xml.MessageServiceImpl<br>import com.sishuok.spring4.xml.MessagePrinter  </p>
<p>beans {<br>    messageService(MessageServiceImpl) {//名字(类型)<br>        message = &quot;hello&quot;  //注入的属性<br>    }  </p>
<pre><code>messagePrinter(MessagePrinter, messageService) //名字（类型，构造器参数列表）  
</code></pre><p>}<br>[/java]<br>从此处可以看到 如果仅仅是简单的Bean定义，确实比XML简洁。</p>
<p>4、测试<br>如果不测试环境可以这样测试：<br>[java]<br>public class XmlGroovyBeanDefinitionTest1 {<br>    @Test<br>    public void test() {<br>        ApplicationContext ctx = new GenericGroovyApplicationContext(&quot;classpath:spring-config-xml.groovy&quot;);<br>        MessagePrinter messagePrinter = (MessagePrinter) ctx.getBean(&quot;messagePrinter&quot;);<br>        messagePrinter.printMessage();<br>    }<br>}<br>[/java]<br>使用GenericGroovyApplicationContext加载groovy配置文件。 </p>
<p>如果想集成到Spring Test中，可以这样：<br>[java]<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(locations = &quot;classpath:spring-config-xml.groovy&quot;, loader = GenericGroovyContextLoader.class)<br>public class XmlGroovyBeanDefinitionTest2 {  </p>
<pre><code>@Autowired  
private MessagePrinter messagePrinter;  

@Test  
public void test() {  
    messagePrinter.printMessage();  
}  
</code></pre><p>}<br>[/java]<br>此处需要定义我们自己的bean loader，即从groovy配置文件加载：<br>[java]<br>public class GenericGroovyContextLoader extends AbstractGenericContextLoader {  </p>
<pre><code>@Override  
protected String getResourceSuffix() {  
    throw new UnsupportedOperationException(  
            &amp;quot;GenericGroovyContextLoader does not support the getResourceSuffix() method&amp;quot;);  
}  
@Override  
protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {  
    return new GroovyBeanDefinitionReader(context);  
}  
</code></pre><p>}<br>[/java]<br>使用GroovyBeanDefinitionReader来加载groovy配置文件。  </p>
<p>到此基本的使用就结束了，还算是比较简洁，但是我们已经注意到了，在纯Java环境做测试还是比较麻烦的。 比如没有给我们写好相关的测试支撑类。另外大家可以前往Spring的github看看在groovy中的单元测试：GroovyBeanDefinitionReaderTests.groovy</p>
<p>再看一下我们使用注解方式呢：<br>[java]<br>@Component<br>public class MessageServiceImpl implements MessageService {<br>    @Autowired<br>    @Qualifier(&quot;message&quot;)<br>    private String message;<br>    ……<br>}<br>[/java]<br>[java]<br>@Component<br>public class MessagePrinter {<br>    private MessageService messageService;<br>    @Autowired<br>    public MessagePrinter(MessageService messageService) {<br>        this.messageService = messageService;<br>    }<br>……<br>}<br>[/java]<br>此处省略无关代码，需要的话直接去github查看 。点击前往 </p>
<p>Groovy配置文件：</p>
<p>[java]<br>beans {<br>    xmlns context: &quot;<a href="http://www.springframework.org/schema/context&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/context&amp;quot</a>;    //导入命名空间  </p>
<pre><code>context.&apos;component-scan&apos;(&apos;base-package&apos;: &amp;quot;com.sishuok.spring4&amp;quot;) {  
    &apos;exclude-filter&apos;(&apos;type&apos;: &amp;quot;aspectj&amp;quot;, &apos;expression&apos;: &amp;quot;com.sishuok.spring4.xml.*&amp;quot;)  
}  

message(String, &amp;quot;hello&amp;quot;) {}  
</code></pre><p>}<br>[/java]<br>在该配置文件中支持导入xml命名空间， 其中context.’component-scan’部分等价于XML中的：<br>[java]<br>&lt;context:component-scan base-package=&quot;com.sishuok.spring4&quot;&gt;<br>    &lt;context:exclude-filter type=&quot;aspectj&quot; expression=&quot;com.sishuok.spring4.xml.*&quot;/&gt;<br>&lt;/context:component-scan&gt; [/java]<br> 从这里可以看出，其还没能完全从XML风格配置中走出来，不是纯Groovy DSL。</p>
<p>测试方式和之前的一样就不重复了，可以查看XmlGroovyBeanDefinitionTest2.java。</p>
<p>三、Groovy Bean定义 DSL语法</p>
<p>到目前为止，基本的helloworld就搞定了；接下来看看Groovy DSL都支持哪些配置吧：<br>创建Bean</p>
<p>构造器<br>[java]<br>validator(LocalValidatorFactoryBean) { //名字（类型）<br>    providerClass = HibernateValidator.class  //属性=值<br>    validationMessageSource = ref(&quot;messageSource&quot;) //属性 = 引用，当然也支持如 validationMessageSource=messageSource 但是这种方式缺点是messageSource必须在validator之前声明<br>}[/java]<br>静态工厂方法<br>[java]<br>def bean = factory(StaticFactory) {<br>    prop = 1<br>}<br>bean.factoryMethod = &quot;getInstance&quot;  [/java]<br>或者<br>[java]<br>bean(StaticFactory) { bean -&gt;<br>    bean.factoryMethod = &quot;getInstance&quot;<br>    prop = 1<br>}  [/java]</p>
<p>实例工厂方法<br>[java]<br>beanFactory(Factory)<br>bean(beanFactory : &quot;newInstance&quot;, &quot;args&quot;) {<br>    prop = 1<br>} [/java]<br>或者<br>[java]<br>beanFactory(Factory)<br>bean(&quot;bean&quot;){bean -&gt;<br>    bean.factoryBean=&quot;beanFactory&quot;<br>    bean.factoryMethod=&quot;newInstance&quot;<br>    prop = 1<br>}[/java]  </p>
<p>依赖注入</p>
<p>属性注入<br>[java]<br>beanName(BeanClass) { //名字（类型）<br>    str = &quot;123&quot; // 常量直接注入<br>    bean = ref(&quot;bean&quot;) //属性 = 引用 ref(&quot;bean&quot;, true) 这样的话是引用父容器的<br>    beans = [bean1, bean2] //数组/集合<br>    props = [key1:&quot;value1&quot;, key2:&quot;value2&quot;] // Properties / Map<br>}  [/java]</p>
<p>构造器注入<br>[java]<br>bean(Bean, &quot;args1&quot;, &quot;args2&quot;)<br>[/java]<br>静态工厂注入/实例工厂注入，请参考创建bean部分</p>
<p>匿名内部Bean<br>[java]<br>outer(OuterBean) {<br>   prop = 1<br>   inner =  { InnerBean bean -&gt;  //匿名内部Bean<br>                          prop =2<br>            }<br>}[/java]<br>[java]<br>outer(OuterBean) {<br>   prop = 1<br>   inner =  { bean -&gt;  //匿名内部Bean 通过实例工厂方法创建<br>                          bean.factoryBean = &quot;innerBean&quot;<br>                          bean.factoryMethod = &quot;create&quot;<br>                          prop = 2<br>            }<br>} [/java]<br>单例/非单例/作用域<br>[java]<br>singletonBean(Bean1) { bean -&gt;<br>    bean.singleton = true<br>}<br>nonSingletonBean(Bean1) { bean -&gt;<br>    bean.singleton = false<br>}<br>prototypeBean(Bean1) { bean -&gt;<br>    bean.scope = &quot;prototype&quot;<br>}<br>[/java]<br>其中bean可以理解为xml中的<bean> 标签，即bean定义。</bean></p>
<p>父子Bean<br>[java]<br>parent(Bean1){ bean -&gt;<br>    bean.’abstract’ = true //抽象的<br>    prop = 123<br>}<br>child { bean -&gt;<br>    bean.parent = parent //指定父bean<br>}<br>[/java] </p>
<p>命名空间<br>[java]<br>xmlns aop:&quot;<a href="http://www.springframework.org/schema/aop&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/aop&amp;quot</a>;<br>myAspect(MyAspect)<br>aop {<br>    config(&quot;proxy-target-class&quot;:true) {<br>        aspect( id:&quot;test&quot;,ref:&quot;myAspect&quot; ) {<br>            before method:&quot;before&quot;, pointcut: &quot;execution(void com.sishuok.spring4..<em>.</em>(..))&quot;<br>        }<br>    }<br>} [/java]<br>以上是AOP的，可以自己推到其他相关的配置； </p>
<p>[java]<br>xmlns context: &quot;<a href="http://www.springframework.org/schema/context&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/context&amp;quot</a>;<br>context.’component-scan’(‘base-package’: &quot;com.sishuok.spring4&quot;) {<br>    ‘exclude-filter’(‘type’: &quot;aspectj&quot;, ‘expression’: &quot;com.sishuok.spring4.xml.*&quot;)<br>} [/java]<br>以上是component-scan，之前介绍过了。</p>
<p>[java]<br>xmlns aop:&quot;<a href="http://www.springframework.org/schema/aop&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/aop&amp;quot</a>;<br>scopedList(ArrayList) { bean -&gt;<br>    bean.scope = &quot;haha&quot;<br>    aop.’scoped-proxy’()<br>} [/java]<br> 等价于<br>[java]<br>&lt;bean id=&quot;scopedList&quot; class=&quot;java.util.ArrayList&quot; scope=&quot;haha&quot;&gt;<br>    &lt;aop:scoped-proxy/&gt;<br>&lt;/bean&gt;  [/java]</p>
<p>[java]<br>xmlns util:&quot;<a href="http://www.springframework.org/schema/util&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/util&amp;quot</a>;<br>util.list(id : ‘list’) {<br>    value 1<br>    value 2<br>}  [/java]<br>等价于XML：<br>[java]<br>&lt;util:list id=&quot;list&quot;&gt;<br>    &lt;value&gt;1&lt;/value&gt;<br>    &lt;value&gt;2&lt;/value&gt;<br>&lt;/util:list&gt;<br> [/java]<br>[java]<br>xmlns util:&quot;<a href="http://www.springframework.org/schema/util&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/util&amp;quot</a>;<br>util.map(id : ‘map’) {<br>    entry(key : 1, value :1)<br>    entry(‘key-ref’ : &quot;messageService&quot;, ‘value-ref’ : &quot;messageService&quot;)<br>}[/java]<br> 等价于<br>[java]<br>&lt;util:map id=&quot;map&quot;&gt;<br>    &lt;entry key=&quot;1&quot; value=&quot;1&quot;/&gt;<br>    &lt;entry key-ref=&quot;messageService&quot; value-ref=&quot;messageService&quot;/&gt;<br>&lt;/util:map&gt;<br>[/java]<br>引入其他配置文件<br>[java]<br>importBeans &quot;classpath:org/springframework/context/groovy/test.xml&quot;<br>[/java]<br>当然也能引入XML的。 </p>
<p>对于DSL新的更新大家可以关注：GroovyBeanDefinitionReaderTests.groovy，本文也是根据其编写的。</p>
<p>再来看看groovy bean定义的另一个好处：<br>我们可以直接在groovy bean定义文件中声明类，然后使用<br>[java]<br>@Controller<br>def class GroovyController {<br>    @RequestMapping(&quot;/groovy&quot;)<br>    @ResponseBody<br>    public String hello() {<br>        return &quot;hello&quot;;<br>    }<br>}  </p>
<p>beans {  </p>
<pre><code>groovyController(GroovyController)  
</code></pre><p>}<br>[/java]<br> 另一种Spring很早就支持的方式是引入外部groovy文件，如：<br>[java]<br>xmlns lang: &quot;<a href="http://www.springframework.org/schema/lang&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/lang&amp;quot</a>;<br>lang.’groovy’(id: ‘groovyController2’, ‘script-source’: ‘classpath:com/sishuok/spring4/controller/GroovyController2.groovy’)<br>[/java]<br>使用其lang命名空间引入外部脚本文件。 </p>
<p>到此，Groovy Bean定义DSL就介绍完了，其没有什么特别之处，只是换了种写法而已，我认为目前试试即可，还不能用到真实环境。</p>
<p>示例代码：<br><a href="https://github.com/zhangkaitao/spring4-showcase" target="_blank" rel="external">https://github.com/zhangkaitao/spring4-showcase</a><br><a href="https://github.com/zhangkaitao/servlet3-showcase" target="_blank" rel="external">https://github.com/zhangkaitao/servlet3-showcase</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——Web开发的增强]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94Web%E5%BC%80%E5%8F%91%E7%9A%84%E5%A2%9E%E5%BC%BA/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1989381" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1989381</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>从Spring4开始，Spring以Servlet3为进行开发，如果用Spring MVC 测试框架的话需要指定Servlet3兼容的jar包（因为其Mock的对象都是基于Servlet3的）。另外为了方便Rest开发，通过新的@RestController指定在控制器上，这样就不需要在每个@RequestMapping方法上加 @ResponseBody了。而且添加了一个AsyncRestTemplate ，支持REST客户端的异步无阻塞支持。</p>
<p>1、@RestController<br>[java]<br>@RestController<br>public class UserController {<br>    private UserService userService;<br>    @Autowired<br>    public UserController(UserService userService) {<br>        this.userService = userService;<br>    }<br>    @RequestMapping(&quot;/test&quot;)<br>      public User view() {<br>        User user = new User();<br>        user.setId(1L);<br>        user.setName(&quot;haha&quot;);<br>        return user;<br>    }  </p>
<pre><code>@RequestMapping(&amp;quot;/test2&amp;quot;)  
public String view2() {  
    return &amp;quot;{\&amp;quot;id\&amp;quot; : 1}&amp;quot;;  
}  
</code></pre><p>}<br>[/java]<br> 其实现就是在@@RestController中加入@ResponseBody：<br>[java]<br>@org.springframework.stereotype.Controller<br>@org.springframework.web.bind.annotation.ResponseBody<br>public @interface RestController {<br>}<br>[/java]<br>这样当你开发Rest服务器端的时候，spring-mvc配置文件需要的代码极少，可能就仅需如下一行：<br>[java]<br>&lt;context:component-scan base-package=&quot;com.sishuok.spring4&quot;/&gt;<br>&lt;mvc:annotation-driven/&gt;<br>[/java]<br>2、mvc:annotation-driven配置变化<br>统一风格；将 enableMatrixVariables改为enable-matrix-variables属性；将ignoreDefaultModelOnRedirect改为ignore-default-model-on-redirect。</p>
<p>3、提供AsyncRestTemplate用于客户端非阻塞异步支持。<br>3.1、服务器端<br>对于服务器端的springmvc开发可以参考<a href="https://github.com/zhangkaitao/servlet3-showcase中的chapter3-springmvc" target="_blank" rel="external">https://github.com/zhangkaitao/servlet3-showcase中的chapter3-springmvc</a><br>[java]<br>@RestController<br>public class UserController {<br>    private UserService userService;<br>    @Autowired<br>    public UserController(UserService userService) {<br>        this.userService = userService;<br>    }<br>    @RequestMapping(&quot;/api&quot;)<br>      public Callable&lt;User&gt; api() {<br>        System.out.println(&quot;=====hello&quot;);<br>        return new Callable&lt;User&gt;() {<br>            @Override<br>            public User call() throws Exception {<br>                Thread.sleep(10L * 1000); //暂停两秒<br>                User user = new User();<br>                user.setId(1L);<br>                user.setName(&quot;haha&quot;);<br>                return user;<br>            }<br>        };<br>    }<br>}<br>[/java]<br>非常简单，服务器端暂停10秒再返回结果（但是服务器也是非阻塞的）。具体参考我github上的代码。</p>
<p>3.2、客户端<br>[java]<br>public static void main(String[] args) {<br>    AsyncRestTemplate template = new AsyncRestTemplate();<br>    //调用完后立即返回（没有阻塞）<br>    ListenableFuture&lt;ResponseEntity&lt;User&gt;&gt; future = template.getForEntity(&quot;<a href="http://localhost:9080/spring4/api&amp;quot" target="_blank" rel="external">http://localhost:9080/spring4/api&amp;quot</a>;, User.class);<br>    //设置异步回调<br>    future.addCallback(new ListenableFutureCallback&lt;ResponseEntity&lt;User&gt;&gt;() {<br>        @Override<br>        public void onSuccess(ResponseEntity&lt;User&gt; result) {<br>            System.out.println(&quot;======client get result : &quot; + result.getBody());<br>        }  </p>
<pre><code>    @Override  
    public void onFailure(Throwable t) {  
        System.out.println(&amp;quot;======client failure : &amp;quot; + t);  
    }  
});  
System.out.println(&amp;quot;==no wait&amp;quot;);  
</code></pre><p>}<br>[/java]<br> 此处使用Future来完成非阻塞，这样的话我们也需要给它一个回调接口来拿结果； Future和Callable是一对，一个消费结果，一个产生结果。调用完模板后会立即返回，不会阻塞；有结果时会调用其回调。</p>
<p>AsyncRestTemplate默认使用SimpleClientHttpRequestFactory，即通过java.net.HttpURLConnection实现；另外我们也可以使用apache的http components；使用template.setAsyncRequestFactory(new HttpComponentsAsyncClientHttpRequestFactory());设置即可。</p>
<p>另外在开发时尽量不要自己注册如：<br>[java]<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;<br>[/java]<br>尽量使用<br>[java]<br>&lt;mvc:annotation-driven/&gt;<br>[/java]<br>它设计的已经足够好，使用子元素可以配置我们需要的配置。</p>
<p>且不要使用老版本的：<br>[java]<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot;/&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;<br>[/java]<br>否则可能得到如下异常：<br>写道<br>[text]<br>Circular view path [login]: would dispatch back to the current handler URL [/spring4/login] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)<br>[/text]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——核心容器的其他改进]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B6%E4%BB%96%E6%94%B9%E8%BF%9B/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1989379" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1989379</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>1、Map依赖注入：<br>[java]<br>@Autowired<br>private Map&lt;String, BaseService&gt; map;<br>[/java]<br>这样会注入：key是bean名字；value就是所有实现了BaseService的Bean，假设使用上一篇的例子，则会得到：<br>[java]<br>{organizationService=com.sishuok.spring4.service.OrganizationService@617029, userService=com.sishuok.spring4.service.UserService@10ac73b}<br>[/java]</p>
<p>2、List/数组注入：<br>[java]<br>@Autowired<br>private List&lt;BaseService&gt; list;<br>[/java]<br> 这样会注入所有实现了BaseService的Bean；但是顺序是不确定的，如果我们想要按照某个顺序获取；在Spring4中可以使用@Order或实现Ordered接口来实现，如：<br>[java]<br>@Order(value = 1)<br>@Service<br>public class UserService extends BaseService&lt;User&gt; {<br>}<br>[/java]<br>这种方式在一些需要多态的场景下是非常有用的。</p>
<p>3、@Lazy可以延迟依赖注入：<br>[java]<br>@Lazy<br>@Service<br>public class UserService extends BaseService&lt;User&gt; {<br>}<br>[/java]<br>[java]<br>@Lazy<br>@Autowired<br>private UserService userService;<br>[/java]<br> 我们可以把@Lazy放在@Autowired之上，即依赖注入也是延迟的；当我们调用userService时才会注入。即延迟依赖注入到使用时。同样适用于@Bean。</p>
<p>4、@Conditional<br>@Conditional类似于@Profile（一般用于如我们有开发环境、测试环境、正式机环境，为了方便切换不同的环境可以使用@Profile指定各个环境的配置，然后通过某个配置来开启某一个环境，方便切换），但是@Conditional的优点是允许自己定义规则。可以指定在如@Component、@Bean、@Configuration等注解的类上，以绝对Bean是否创建等。首先来看看使用@Profile的用例，假设我们有个用户模块：<br>1、在测试/开发期间调用本机的模拟接口方便开发；<br>2、在部署到正式机时换成调用远程接口；<br>[java]<br>public abstract class UserService extends BaseService&lt;User&gt; {<br>}  </p>
<p>@Profile(&quot;local&quot;)<br>@Service<br>public class LocalUserService extends UserService {<br>}  </p>
<p>@Profile(&quot;remote&quot;)<br>@Service<br>public class RemoteUserService extends UserService {<br>}<br>[/java]<br>我们在写测试用例时，可以指定我们使用哪个Profile：<br>[java]<br>@ActiveProfiles(&quot;remote&quot;)<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(locations =  &quot;classpath:spring-config.xml&quot;)<br>public class ServiceTest {  </p>
<pre><code>@Autowired  
private UserService userService;  
</code></pre><p>}<br>[/java]<br>  这种方式非常简单。如果想自定义如@Profile之类的注解等，那么@Conditional就派上用场了；假设我们系统中有好多本地/远程接口，那么我们定义两个注解@Local和@Remote注解要比使用@Profile方便的多；如：</p>
<p>[java]<br>@Retention(RetentionPolicy.RUNTIME)<br>@Target({ElementType.TYPE, ElementType.METHOD})<br>@Conditional(CustomCondition.class)<br>public @interface Local {<br>}  </p>
<p>@Retention(RetentionPolicy.RUNTIME)<br>@Target({ElementType.TYPE, ElementType.METHOD})<br>@Conditional(CustomCondition.class)<br>public @interface Remote {<br>}<br>[/java]<br>[java]<br>public class CustomCondition implements Condition {  </p>
<pre><code>@Override  
public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {  
    boolean isLocalBean = metadata.isAnnotated(&amp;quot;com.sishuok.spring4.annotation.Local&amp;quot;);  
    boolean isRemoteBean = metadata.isAnnotated(&amp;quot;com.sishuok.spring4.annotation.Remote&amp;quot;);  
    //如果bean没有注解@Local或@Remote，返回true，表示创建Bean  
    if(!isLocalBean &amp;amp;&amp;amp; !isRemoteBean) {  
        return true;  
    }  

    boolean isLocalProfile = context.getEnvironment().acceptsProfiles(&amp;quot;local&amp;quot;);  

    //如果profile=local 且 bean注解了@Local，则返回true 表示创建bean；  
    if(isLocalProfile) {  
        return isLocalBean;  
    }  

    //否则默认返回注解了@Remote或没有注解@Remote的Bean  
    return isRemoteBean;  
}  
</code></pre><p>}<br>[/java]<br> 然后我们使用这两个注解分别注解我们的Service：<br>[java]<br>@Local<br>@Service<br>public class LocalUserService extends UserService {<br>}<br>[/java]<br>[java]<br>@Remote<br>@Service<br>public class RemoteUserService extends UserService {<br>}<br>[/java]<br>首先在@Local和@Remote注解上使用@Conditional(CustomCondition.class)指定条件，然后使用@Local和@Remote注解我们的Service，这样当加载Service时，会先执行条件然后判断是否加载为Bean。@Profile就是这样实现的，其Condition是：org.springframework.context.annotation.ProfileCondition。可以去看下源码，很简单。</p>
<p>5、基于CGLIB的类代理不再要求类必须有空参构造器了：<br>这是一个很好的特性，使用构造器注入有很多好处，比如可以只在创建Bean时注入依赖，然后就不变了，如果使用setter注入，是允许别人改的。当然我们可以使用spring的字段级别注入。如果大家使用过如Shiro，我们可能要对Controller加代理。如果是类级别代理，此时要求Controller必须有空参构造器，有时候挺烦人的。spring如何实现的呢？其内联了objenesis类库，通过它来实现，可以去其官网看看介绍。这样就支持如下方式的构造器注入了：</p>
<p>[java]<br>@Controller<br>public class UserController {<br>    private UserService userService;<br>    @Autowired<br>    public UserController(UserService userService) {<br>        this.userService = userService;<br>    }<br>}<br>[/java]<br>org.springframework.cglib.proxy.Enhancer在其github和maven仓库中的source中竟然木有，其github：<a href="https://github.com/spring-projects/spring-framework/tree/master/spring-core/src/main/java/org/springframework/cglib；难道忘了吗？" target="_blank" rel="external">https://github.com/spring-projects/spring-framework/tree/master/spring-core/src/main/java/org/springframework/cglib；难道忘了吗？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring4新特性——泛型限定式依赖注入]]></title>
      <url>http://yoursite.com/2015/04/06/%5B%E8%BD%AC%5DSpring4%E6%96%B0%E7%89%B9%E6%80%A7%E2%80%94%E2%80%94%E6%B3%9B%E5%9E%8B%E9%99%90%E5%AE%9A%E5%BC%8F%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>原文地址 <a href="http://jinnianshilongnian.iteye.com/blog/1989330" title="http://jinnianshilongnian.iteye.com/blog/1989330" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/blog/1989330</a></p>
<p><a href="http://www.bugpointer.com/archives/420.html" target="_blank" rel="external">Spring4新特性——泛型限定式依赖注入</a><br><a href="http://www.bugpointer.com/archives/423.html" target="_blank" rel="external">Spring4新特性——核心容器的其他改进</a><br><a href="http://www.bugpointer.com/archives/425.html" target="_blank" rel="external">Spring4新特性——Web开发的增强</a><br><a href="http://www.bugpointer.com/archives/427.html" target="_blank" rel="external">Spring4新特性——Groovy Bean定义DSL</a><br><a href="http://www.bugpointer.com/archives/429.html" target="_blank" rel="external">Spring4新特性——注解、脚本、任务、MVC等其他特性改进</a><br><a href="http://www.bugpointer.com/archives/431.html" target="_blank" rel="external">Spring4新特性——JSR310日期时间API的支持</a><br><a href="http://www.bugpointer.com/archives/433.html" target="_blank" rel="external">Spring4新特性——更好的Java泛型操作API</a><br><a href="http://www.bugpointer.com/archives/435.html" target="_blank" rel="external">Spring4新特性——集成Bean Validation 1.1(JSR-349)到SpringMVC</a></p>
<p>Spring 4.0已经发布RELEASE版本，不仅支持Java8，而且向下兼容到JavaSE6/JavaEE6，并移出了相关废弃类，新添加如Java8的支持、Groovy式Bean定义DSL、对核心容器进行增强、对Web框架的增强、Websocket模块的实现、测试的增强等。其中两个我一直想要的增强就是：支持泛型依赖注入、对cglib类代理不再要求必须有空参构造器了。具体更新请参考：<br><a href="http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.0" target="_blank" rel="external">http://docs.spring.io/spring/docs/4.0.0.RELEASE/spring-framework-reference/htmlsingle/#new-in-4.0</a></p>
<p>1、相关代码：<br>1.1、实体<br>[java]<br>public class User implements Serializable {<br>    private Long id;<br>    private String name;<br>}  </p>
<p>public class Organization implements Serializable {<br>    private Long id;<br>    private String name;<br>}<br>[/java]<br> 1.2、Repository<br>[java]<br>public abstract class BaseRepository&lt;M extends Serializable&gt; {<br>    public void save(M m) {<br>        System.out.println(&quot;=====repository save:&quot; + m);<br>    }<br>}  </p>
<p>@Repository<br>public class UserRepository extends BaseRepository&lt;User&gt; {<br>}  </p>
<p>@Repository<br>public class OrganizationRepository extends BaseRepository&lt;Organization&gt; {<br>}<br>[/java]<br> 对于Repository，我们一般是这样实现的：首先写一个模板父类，把通用的crud等代码放在BaseRepository；然后子类继承后，只需要添加额外的实现。</p>
<p>1.3、Service<br>1.3.1、以前Service写法<br>[java]<br>public abstract class BaseService&lt;M extends Serializable&gt; {<br>    private BaseRepository&lt;M&gt; repository;<br>    public void setRepository(BaseRepository&lt;M&gt; repository) {<br>        this.repository = repository;<br>    }<br>    public void save(M m) {<br>        repository.save(m);<br>    }<br>}<br>@Service<br>public class UserService extends BaseService&lt;User&gt; {<br>    @Autowired<br>    public void setUserRepository(UserRepository userRepository) {<br>        setRepository(userRepository);<br>    }<br>}  </p>
<p>@Service<br>public class OrganizationService extends BaseService&lt;Organization&gt; {<br>    @Autowired<br>    public void setOrganizationRepository(OrganizationRepository organizationRepository) {<br>        setRepository(organizationRepository);<br>    }<br>}<br>[/java]<br>可以看到，以前必须再写一个setter方法，然后指定注入的具体类型，然后进行注入；</p>
<p>1.3.2、泛型Service的写法<br>[java]<br>public abstract class BaseService&lt;M extends Serializable&gt; {<br>    @Autowired<br>    protected BaseRepository&lt;M&gt; repository;  </p>
<pre><code>public void save(M m) {  
    repository.save(m);  
}  
</code></pre><p>}  </p>
<p>@Service<br>public class UserService extends BaseService&lt;User&gt; {<br>}  </p>
<p>@Service<br>public class OrganizationService extends BaseService&lt;Organization&gt; {<br>}<br>[/java]<br> 大家可以看到，现在的写法非常简洁。支持泛型式依赖注入。</p>
<p>这个也是我之前非常想要的一个功能，这样对于那些基本的CRUD式代码，可以简化更多的代码。</p>
<p>如果大家用过Spring data jpa的话，以后注入的话也可以使用泛型限定式依赖注入 ：<br>[java]<br>@Autowired<br>private Repository&lt;User&gt; userRepository;<br>[/java]<br> 对于泛型依赖注入，最好使用setter注入，这样万一子类想变，比较容易切换。比如<a href="https://github.com/zhangkaitao/es，如果有多个实现时，子类可以使用@Qualifier指定使用哪一个。" target="_blank" rel="external">https://github.com/zhangkaitao/es，如果有多个实现时，子类可以使用@Qualifier指定使用哪一个。</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC使用@ResponseBody时返回json的日期格式、@DatetimeFormat使用注意]]></title>
      <url>http://yoursite.com/2015/04/05/SpringMVC%E4%BD%BF%E7%94%A8@ResponseBody%E6%97%B6%E8%BF%94%E5%9B%9Ejson%E7%9A%84%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E3%80%81@DatetimeFormat%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
      <content type="html"><![CDATA[<p> 一、SpringMVC使用@ResponseBody时返回json的日期格式</p>
<pre><code> @ResponseBody 返回json字符串的核心类是org.springframework.http.converter.json.MappingJacksonHttpMessageConverter，它使用了Jackson 这个开源的第三方类库。主要是以下两个jar包：jackson-core-asl-1.6.4.jar；jackson-mapper-asl-1.6.4.jar。
出现问题： 使用@ResponseBody时返回json字符串的日期格式。Date类型属性默认返回一个Long型的时间戳，怎样能够返回自定义的日期格式？
解决方案：目前有两种方式实现,
         1、局部修改(网上较多，但不推荐)；
      继承Jackson的抽象类：JsonSerializer&lt;T&gt;，然后在javabean的属性getter()上添加注解@JsonSerialize即可实现。
     代码如下：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;  </div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"></div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonGenerator;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonProcessingException;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.JsonSerializer;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.SerializerProvider;  </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> * <span class="doctag">@description</span> 自定义返回JSON 数据格中日期格式化处理 </div><div class="line"> * <span class="doctag">@author</span> aokunsang </div><div class="line"> * <span class="doctag">@date</span> 2013-5-28 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&amp;<span class="title">lt</span></span>;Date&amp;gt; &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date value,   </span></span></div><div class="line">            JsonGenerator jsonGenerator,   </div><div class="line">            SerializerProvider provider)  </div><div class="line">            <span class="keyword">throws</span> IOException, JsonProcessingException &#123;  </div><div class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);  </div><div class="line">        jsonGenerator.writeString(sdf.format(value));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonSerialize</span>(using = CustomDateSerializer.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> createDate;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>     2、全局修改(强烈推荐)：
 MappingJacksonHttpMessageConverter主要通过ObjectMapper来实现返回json字符串。这里我们继承该类，注册一个JsonSerializer&lt;T&gt;。然后在配置文件中注入自定义的ObjectMapper。
代码如下：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;  </div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"></div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonGenerator;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonProcessingException;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.JsonSerializer;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ObjectMapper;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.SerializerProvider;  </div><div class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ser.CustomSerializerFactory;  </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> * <span class="doctag">@description</span> 解决Date类型返回json格式为自定义格式 </div><div class="line"> * <span class="doctag">@author</span> aokunsang </div><div class="line"> * <span class="doctag">@date</span> 2013-5-28 </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomObjectMapper</span><span class="params">()</span></span>&#123;  </div><div class="line">        CustomSerializerFactory factory = <span class="keyword">new</span> CustomSerializerFactory();  </div><div class="line">        factory.addGenericMapping(Date.class, <span class="keyword">new</span> JsonSerializer&amp;lt;Date&amp;gt;()&#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date value,   </span></span></div><div class="line">                    JsonGenerator jsonGenerator,   </div><div class="line">                    SerializerProvider provider)  </div><div class="line">                    <span class="keyword">throws</span> IOException, JsonProcessingException &#123;  </div><div class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;);  </div><div class="line">                jsonGenerator.writeString(sdf.format(value));  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">        <span class="keyword">this</span>.setSerializerFactory(factory);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   spring-servlet.xml中配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&amp;lt;mvc:annotation-driven&amp;gt;  </div><div class="line">        &amp;lt;mvc:message-converters&amp;gt;  </div><div class="line">            &amp;lt;bean <span class="class"><span class="keyword">class</span></span>=&amp;quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&amp;quot;&amp;gt;  </div><div class="line">                &amp;lt;property name=&amp;quot;objectMapper&amp;quot; ref=&amp;quot;customObjectMapper&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;  </div><div class="line">            &amp;lt;/bean&amp;gt;  </div><div class="line">        &amp;lt;/mvc:message-converters&amp;gt;  </div><div class="line">    &amp;lt;/mvc:annotation-driven&amp;gt;  </div><div class="line">   &amp;lt;bean id=&amp;quot;customObjectMapper&amp;quot; <span class="class"><span class="keyword">class</span></span>=&amp;quot;com.pmc.dwa.common.custom.CustomObjectMapper&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;</div></pre></td></tr></table></figure></p>
<p> 二、@DatetimeFormat使用注意<br>     1、 使用@DatetimeFormat很简单，这里需要注意的是：使用时要引入一个类库joda-time-1.3.jar，否则会无法访问相应路径(400错误)。<br>ps：该注解可以作用在METHOD，FIELD以及PARAMETER级别上。<br>使用介绍参考：<a href="http://www.captaindebug.com/2011/08/using-spring-3-datetimeformat.html#.UaR3mWWZk0k" target="_blank" rel="external">http://www.captaindebug.com/2011/08/using-spring-3-datetimeformat.html#.UaR3mWWZk0k</a><br>   2、因为springMVC没有提供默认的日期转换器，前段页面传递过来日期字符串怎么转换为日期类型，如果没有提供全局日期转换器或者数据绑定的基础上，可以使用@DatetimeFormat注解完成。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于spring 3.0.5的 标签的使用]]></title>
      <url>http://yoursite.com/2015/04/05/%E5%85%B3%E4%BA%8Espring%203.0.5%E7%9A%84%20%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>spring mvc 的<mvc;resources mapping="***" location="***">标签是在spring3.0.4出现的，主要是用来进行静态资源的访问。在spring3.0.4出来的时候spring还没有更新其schema所以在配置文件中有可能找不到<mvc:resources>标签，这个问题在spring3.0.5中已经解决，而且网上也有很多其他的解决方案，我在这里就不记录了。 </mvc:resources></mvc;resources></p>
<p>首先使用spring mvc需要配置其使用的servlet.在web.xml中:<br>[xml]<br>&lt;servlet&gt;<br>    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;<br>    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>    &lt;/servlet&gt;  </p>
<pre><code>&amp;lt;servlet-mapping&amp;gt;  
    &amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;  
    &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;  
&amp;lt;/servlet-mapping&amp;gt;  
</code></pre><p>[/xml]<br>这里给 servlet-name定义的名称是springMVC,这样的话会在web-inf下spring会自动扫描一个XML文件名叫springMVC-servlet.xml文件，这里都是spring自动扫描的，如果你没有提供，将会报一个文件查找不到的异常。看了下org.springframework.web.servlet.DispatcherServlet加载这个文件的过程，貌似这个文件存放的地址也是可以进行设置的，具体怎么搞我还没有研究。 </p>
<p>由于spring mvc拦截了所有请求，所以当你设置<br>[xml]<br>&lt;servlet-mapping&gt;<br>&lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;<br>&lt;url-pattern&gt;/&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br>[/xml]<br>的时候会影响到静态资源文件的获取，这样就需要有这个标签来帮你分类完成获取静态资源的责任。 </p>
<p>springMVC-servlet.xml文件<br>[xml]<br>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns=&quot;<a href="http://www.springframework.org/schema/beans&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/beans&amp;quot</a>;<br>    xmlns:xsi=&quot;<a href="http://www.w3.org/2001/XMLSchema-instance&amp;quot" target="_blank" rel="external">http://www.w3.org/2001/XMLSchema-instance&amp;quot</a>;<br>    xmlns:mvc=&quot;<a href="http://www.springframework.org/schema/mvc&amp;quot" target="_blank" rel="external">http://www.springframework.org/schema/mvc&amp;quot</a>;<br>    xsi:schemaLocation=&quot;<a href="http://www.springframework.org/schema/beans" target="_blank" rel="external">http://www.springframework.org/schema/beans</a> <a href="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd" target="_blank" rel="external">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</a><br>    <a href="http://www.springframework.org/schema/mvc" target="_blank" rel="external">http://www.springframework.org/schema/mvc</a> <a href="http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&amp;gt" target="_blank" rel="external">http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&amp;gt</a>;     </p>
<pre><code>&amp;lt;mvc:resources mapping=&amp;quot;/javascript/**&amp;quot; location=&amp;quot;/static_resources/javascript/&amp;quot;/&amp;gt;  
&amp;lt;mvc:resources mapping=&amp;quot;/styles/**&amp;quot; location=&amp;quot;/static_resources/css/&amp;quot;/&amp;gt;  
&amp;lt;mvc:resources mapping=&amp;quot;/images/**&amp;quot; location=&amp;quot;/static_resources/images/&amp;quot;/&amp;gt;  
&amp;lt;mvc:default-servlet-handler /&amp;gt;  

&amp;lt;bean class=&amp;quot;org.springframework.web.servlet.view.InternalResourceViewResolver&amp;quot;&amp;gt;  
    &amp;lt;property name=&amp;quot;prefix&amp;quot; value=&amp;quot;/WEB-INF/views/&amp;quot;/&amp;gt;  
    &amp;lt;property name=&amp;quot;suffix&amp;quot; value=&amp;quot;.jsp&amp;quot;/&amp;gt;  
&amp;lt;/bean&amp;gt;  
</code></pre><p>&lt;/beans&gt;<br>[/xml]<br>这里可以看到我所有的页面引用到/styles/**的资源都从/static_resources/css里面进行查找。 </p>
<p>页面的一段静态资源访问的代码。<br>[html]<br>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;<a href="http://java.sun.com/jstl/core&quot;%&amp;gt" target="_blank" rel="external">http://java.sun.com/jstl/core&quot;%&amp;gt</a>;<br>&lt;HTML&gt;<br>&lt;HEAD&gt;<br>  &lt;TITLE&gt; ABCDEFG &lt;/TITLE&gt;<br>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;&lt;c:url value=’/styles/siteboard.css’/&gt;&quot;&gt;<br>…<br>…<br>…<br>[/html]</p>
<p>可能这个标签的真谛就是为了引用资源的访问不会类似CONTROLLER一样被拦截，区分出关注的资源的访问，一般我们在springMVC里面的拦截都会配置为”/“，拦截所有的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]第二章 Spring MVC入门 —— 跟开涛学SpringMVC]]></title>
      <url>http://yoursite.com/2015/04/05/%5B%E8%BD%AC%5D%E7%AC%AC%E4%BA%8C%E7%AB%A0%20Spring%20MVC%E5%85%A5%E9%97%A8%20%E2%80%94%E2%80%94%20%E8%B7%9F%E5%BC%80%E6%B6%9B%E5%AD%A6SpringMVC/</url>
      <content type="html"><![CDATA[<p>2．1、Spring Web MVC是什么<br>Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，Spring Web MVC也是要简化我们日常Web开发的。</p>
<p>另外还有一种基于组件的、事件驱动的Web框架在此就不介绍了，如Tapestry、JSF等。</p>
<p>Spring Web MVC也是服务到工作者模式的实现，但进行可优化。前端控制器是DispatcherServlet；应用控制器其实拆为处理器映射器(Handler Mapping)进行处理器管理和视图解析器(View Resolver)进行视图管理；页面控制器/动作/处理器为Controller接口（仅包含ModelAndView handleRequest(request, response) 方法）的实现（也可以是任何的POJO类）；支持本地化（Locale）解析、主题（Theme）解析及文件上传等；提供了非常灵活的数据验证、格式化和数据绑定机制；提供了强大的约定大于配置（惯例优先原则）的契约式编程支持。<br>2．2、Spring Web MVC能帮我们做什么<br>√让我们能非常简单的设计出干净的Web层和薄薄的Web层；<br>√进行更简洁的Web层的开发；<br>√天生与Spring框架集成（如IoC容器、AOP等）；<br>√提供强大的约定大于配置的契约式编程支持；<br>√能简单的进行Web层的单元测试；<br>√支持灵活的URL到页面控制器的映射；<br>√非常容易与其他视图技术集成，如Velocity、FreeMarker等等，因为模型数据不放在特定的API里，而是放在一个Model里（Map数据结构实现，因此很容易被其他框架使用）；<br>√非常灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架的API；<br>√提供一套强大的JSP标签库，简化JSP开发；<br>√支持灵活的本地化、主题等解析；<br>√更加简单的异常处理；<br>√对静态资源的支持；<br>√支持Restful风格。<br>2．3、Spring Web MVC架构<br>Spring Web MVC框架也是一个基于请求驱动的Web框架，并且也使用了前端控制器模式来进行设计，再根据请求映射规则分发给相应的页面控制器（动作/处理器）进行处理。首先让我们整体看一下Spring Web MVC处理请求的流程：</p>
<p>2.3.1、Spring Web MVC处理请求的流程<br>如图2-1<br><img src="http://sishuok.com/forum/upload/2012/7/14/529024df9d2b0d1e62d8054a86d866c9__1.JPG" alt=""><br>图2-1<br>具体执行步骤如下：<br>1、  首先用户发送请求————&gt;前端控制器，前端控制器根据请求信息（如URL）来决定选择哪一个页面控制器进行处理并把请求委托给它，即以前的控制器的控制逻辑部分；图2-1中的1、2步骤；<br>2、  页面控制器接收到请求后，进行功能处理，首先需要收集和绑定请求参数到一个对象，这个对象在Spring Web MVC中叫命令对象，并进行验证，然后将命令对象委托给业务对象进行处理；处理完毕后返回一个ModelAndView（模型数据和逻辑视图名）；图2-1中的3、4、5步骤；<br>3、  前端控制器收回控制权，然后根据返回的逻辑视图名，选择相应的视图进行渲染，并把模型数据传入以便视图渲染；图2-1中的步骤6、7；<br>4、  前端控制器再次收回控制权，将响应返回给用户，图2-1中的步骤8；至此整个结束。</p>
<p>问题：<br>1、  请求如何给前端控制器？<br>2、  前端控制器如何根据请求信息选择页面控制器进行功能处理？<br>3、  如何支持多种页面控制器呢？<br>4、  如何页面控制器如何使用业务对象？<br>5、  页面控制器如何返回模型数据？<br>6、  前端控制器如何根据页面控制器返回的逻辑视图名选择具体的视图进行渲染？<br>7、  不同的视图技术如何使用相应的模型数据？</p>
<p>首先我们知道有如上问题，那这些问题如何解决呢？请让我们先继续，在后边依次回答。</p>
<p>2.3.2、Spring Web MVC架构<br>1、Spring Web MVC核心架构图，如图2-2<br><img src="http://sishuok.com/forum/upload/2012/7/14/57ea9e7edeebd5ee2ec0cf27313c5fb6__2.JPG" alt=""><br>图2-2<br>架构图对应的DispatcherServlet核心代码如下：</p>
<p>[java]<br>//前端控制器分派方法<br>protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {<br>        HttpServletRequest processedRequest = request;<br>        HandlerExecutionChain mappedHandler = null;<br>        int interceptorIndex = -1;  </p>
<pre><code>try {  
    ModelAndView mv;  
    boolean errorView = false;  

    try {  
           //检查是否是请求是否是multipart（如文件上传），如果是将通过MultipartResolver解析  
        processedRequest = checkMultipart(request);  
           //步骤2、请求到处理器（页面控制器）的映射，通过HandlerMapping进行映射  
        mappedHandler = getHandler(processedRequest, false);  
        if (mappedHandler == null || mappedHandler.getHandler() == null) {  
            noHandlerFound(processedRequest, response);  
            return;  
        }  
           //步骤3、处理器适配，即将我们的处理器包装成相应的适配器（从而支持多种类型的处理器）  
        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());  

          // 304 Not Modified缓存支持  
        //此处省略具体代码  

        // 执行处理器相关的拦截器的预处理（HandlerInterceptor.preHandle）  
        //此处省略具体代码  

        // 步骤4、由适配器执行处理器（调用处理器相应功能处理方法）  
        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());  

        // Do we need view name translation?  
        if (mv != null &amp;amp;&amp;amp; !mv.hasView()) {  
            mv.setViewName(getDefaultViewName(request));  
        }  

        // 执行处理器相关的拦截器的后处理（HandlerInterceptor.postHandle）  
        //此处省略具体代码  
    }  
    catch (ModelAndViewDefiningException ex) {  
        logger.debug(&amp;quot;ModelAndViewDefiningException encountered&amp;quot;, ex);  
        mv = ex.getModelAndView();  
    }  
    catch (Exception ex) {  
        Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);  
        mv = processHandlerException(processedRequest, response, handler, ex);  
        errorView = (mv != null);  
    }  

    //步骤5 步骤6、解析视图并进行视图的渲染  
</code></pre><p>//步骤5 由ViewResolver解析View（viewResolver.resolveViewName(viewName, locale)）<br>//步骤6 视图在渲染时会把Model传入（view.render(mv.getModelInternal(), request, response);）<br>            if (mv != null &amp;&amp; !mv.wasCleared()) {<br>                render(mv, processedRequest, response);<br>                if (errorView) {<br>                    WebUtils.clearErrorRequestAttributes(request);<br>                }<br>            }<br>            else {<br>                if (logger.isDebugEnabled()) {<br>                    logger.debug(&quot;Null ModelAndView returned to DispatcherServlet with name ‘&quot; + getServletName() +<br>                            &quot;’: assuming HandlerAdapter completed request handling&quot;);<br>                }<br>            }  </p>
<pre><code>        // 执行处理器相关的拦截器的完成后处理（HandlerInterceptor.afterCompletion）  
        //此处省略具体代码  

    catch (Exception ex) {  
        // Trigger after-completion for thrown exception.  
        triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);  
        throw ex;  
    }  
    catch (Error err) {  
        ServletException ex = new NestedServletException(&amp;quot;Handler processing failed&amp;quot;, err);  
        // Trigger after-completion for thrown exception.  
        triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);  
        throw ex;  
    }  

    finally {  
        // Clean up any resources used by a multipart request.  
        if (processedRequest != request) {  
            cleanupMultipart(processedRequest);  
        }  
    }  
}  
</code></pre><p>[/java]<br>核心架构的具体流程步骤如下：<br>1、  首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；<br>2、  DispatcherServlet——&gt;HandlerMapping， HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象，通过这种策略模式，很容易添加新的映射策略；<br>3、  DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；<br>4、  HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；<br>5、  ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；<br>6、  View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；<br>7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>
<p>此处我们只是讲了核心流程，没有考虑拦截器、本地解析、文件上传解析等，后边再细述。</p>
<p>到此，再来看我们前边提出的问题： </p>
<p>1、  请求如何给前端控制器？这个应该在web.xml中进行部署描述，在HelloWorld中详细讲解。<br>2、  前端控制器如何根据请求信息选择页面控制器进行功能处理？ 我们需要配置HandlerMapping进行映射<br>3、  如何支持多种页面控制器呢？配置HandlerAdapter从而支持多种类型的页面控制器<br>4、  如何页面控制器如何使用业务对象？可以预料到，肯定利用Spring IoC容器的依赖注入功能<br>5、  页面控制器如何返回模型数据？使用ModelAndView返回<br>6、  前端控制器如何根据页面控制器返回的逻辑视图名选择具体的视图进行渲染？ 使用ViewResolver进行解析<br>7、  不同的视图技术如何使用相应的模型数据？ 因为Model是一个Map数据结构，很容易支持其他视图技术</p>
<p>在此我们可以看出具体的核心开发步骤：<br>1、  DispatcherServlet在web.xml中的部署描述，从而拦截请求到Spring Web MVC<br>2、  HandlerMapping的配置，从而将请求映射到处理器<br>3、  HandlerAdapter的配置，从而支持多种类型的处理器<br>4、  ViewResolver的配置，从而将逻辑视图名解析为具体视图技术<br>5、处理器（页面控制器）的配置，从而进行功能处理</p>
<p>上边的开发步骤我们会在Hello World中详细验证。</p>
<p>2．4、Spring Web MVC优势<br>1、清晰的角色划分：前端控制器（DispatcherServlet）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（   Validator）、命令对象（Command  请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。<br>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；<br>3、由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；<br>4、和Spring 其他框架无缝集成，是其它Web框架所不具备的；<br>5、可适配，通过HandlerAdapter可以支持任意的类作为处理器；<br>6、可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；<br>7、功能强大的数据验证、格式化、绑定机制；<br>8、利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；<br>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。<br>10、强大的JSP标签库，使JSP编写更容易。<br>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p>
<p>到此我们已经简单的了解了Spring Web MVC，接下来让我们来个实例来具体使用下这个框架。<br>2．5、Hello World入门<br>2.5.1、准备开发环境和运行环境：<br>☆开发工具：eclipse<br>☆运行环境：tomcat6.0.20<br>☆工程：动态web工程（springmvc-chapter2）<br>☆spring框架下载：<br>spring-framework-3.1.1.RELEASE-with-docs.zip<br>☆依赖jar包：<br>1、  Spring框架jar包：<br>为了简单，将spring-framework-3.1.1.RELEASE-with-docs.zip/dist/下的所有jar包拷贝到项目的WEB-INF/lib目录下；<br>2、  Spring框架依赖的jar包：<br>需要添加Apache commons logging日志，此处使用的是commons.logging-1.1.1.jar；<br>需要添加jstl标签库支持，此处使用的是jstl-1.1.2.jar和standard-1.1.2.jar；<br>2.5.2、前端控制器的配置<br>在我们的web.xml中添加如下配置：</p>
<p>[xml]<br>&lt;servlet&gt;<br>    &lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;<br>    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>&lt;/servlet&gt;<br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;chapter2&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br>[/xml]<br>load-on-startup：表示启动容器时初始化该Servlet；<br>url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p>
<p>自此请求已交给Spring Web MVC框架处理，因此我们需要配置Spring的配置文件，默认DispatcherServlet会加载WEB-INF/[DispatcherServlet的Servlet名字]-servlet.xml配置文件。本示例为WEB-INF/ chapter2-servlet.xml。</p>
<p>2.5.3、在Spring配置文件中配置HandlerMapping、HandlerAdapter<br>具体配置在WEB-INF/ chapter2-servlet.xml文件中：</p>
<p>[xml]<br>&lt;!– HandlerMapping –&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;  </p>
<p>&lt;!– HandlerAdapter –&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;<br>[/xml]<br>BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。<br>SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。<br>2.5.4、在Spring配置文件中配置ViewResolver<br>具体配置在WEB-INF/ chapter2-servlet.xml文件中：</p>
<p>[xml]<br>&lt;!– ViewResolver –&gt;<br>&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;<br>    &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;<br>    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;<br>    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;<br>&lt;/bean&gt;<br>[/xml]<br>InternalResourceViewResolver：用于支持Servlet、JSP视图解析；<br>    viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；<br>    prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”；</p>
<p>2.5.5、开发处理器/页面控制器</p>
<p>[java]<br>package cn.javass.chapter2.web.controller;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import org.springframework.web.servlet.ModelAndView;<br>import org.springframework.web.servlet.mvc.Controller;<br>public class HelloWorldController implements Controller {<br>    @Override<br>    public ModelAndView handleRequest(HttpServletRequest req, HttpServletResponse resp) throws Exception {<br>       //1、收集参数、验证参数<br>       //2、绑定参数到命令对象<br>       //3、将命令对象传入业务对象进行业务处理<br>       //4、选择下一个页面<br>       ModelAndView mv = new ModelAndView();<br>       //添加模型数据 可以是任意的POJO对象<br>       mv.addObject(&quot;message&quot;, &quot;Hello World!&quot;);<br>       //设置逻辑视图名，视图解析器会根据该名字解析到具体的视图页面<br>       mv.setViewName(&quot;hello&quot;);<br>       return mv;<br>    }<br>}<br>[/java]<br>org.springframework.web.servlet.mvc.Controller：页面控制器/处理器必须实现Controller接口，注意别选错了；后边我们会学习其他的处理器实现方式；<br>public ModelAndView handleRequest(HttpServletRequest req, HttpServletResponse resp) ：功能处理方法，实现相应的功能处理，比如收集参数、验证参数、绑定参数到命令对象、将命令对象传入业务对象进行业务处理、最后返回ModelAndView对象；<br>ModelAndView：包含了视图要实现的模型数据和逻辑视图名；“mv.addObject(“message”, “Hello World!”);<br>”表示添加模型数据，此处可以是任意POJO对象；“mv.setViewName(“hello”);”表示设置逻辑视图名为“hello”，视图解析器会将其解析为具体的视图，如前边的视图解析器InternalResourceVi。wResolver会将其解析为“WEB-INF/jsp/hello.jsp”。</p>
<p>我们需要将其添加到Spring配置文件(WEB-INF/chapter2-servlet.xml)，让其接受Spring IoC容器管理:<br>[xml]<br>&lt;!– 处理器 –&gt;<br>&lt;bean name=&quot;/hello&quot; class=&quot;cn.javass.chapter2.web.controller.HelloWorldController&quot;/&gt;  </p>
<p>name=&quot;/hello&quot;：前边配置的BeanNameUrlHandlerMapping，表示如过请求的URL为 “上下文/hello”，则将会交给该Bean进行处理。<br>[/xml]<br>2.5.6、开发视图页面<br>创建 /WEB-INF/jsp/hello.jsp视图页面：</p>
<p>[html]<br>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;<br>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;<a href="http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt" target="_blank" rel="external">http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt</a>;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>&lt;title&gt;Hello World&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>${message}<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[/html]<br>${message}：表示显示由HelloWorldController处理器传过来的模型数据。<br>2.5.6、启动服务器运行测试<br>通过请求：<a href="http://localhost:9080/springmvc-chapter2/hello，如果页面输出“Hello" target="_blank" rel="external">http://localhost:9080/springmvc-chapter2/hello，如果页面输出“Hello</a> World! ”就表明我们成功了！</p>
<p>2.5.7、运行流程分析<br>如图2-3</p>
<p>图2-3<br>运行步骤：<br>1、  首先用户发送请求<a href="http://localhost:9080/springmvc-chapter2/hello——&gt;web容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；" target="_blank" rel="external">http://localhost:9080/springmvc-chapter2/hello——&gt;web容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；</a><br>2、  DispatcherServlet——&gt;BeanNameUrlHandlerMapping进行请求到处理的映射，BeanNameUrlHandlerMapping将“/hello”路径直接映射到名字为“/hello”的Bean进行处理，即HelloWorldController，BeanNameUrlHandlerMapping将其包装为HandlerExecutionChain（只包括HelloWorldController处理器，没有拦截器）；<br>3、  DispatcherServlet——&gt; SimpleControllerHandlerAdapter，SimpleControllerHandlerAdapter将HandlerExecutionChain中的处理器（HelloWorldController）适配为SimpleControllerHandlerAdapter；<br>4、  SimpleControllerHandlerAdapter——&gt; HelloWorldController处理器功能处理方法的调用，SimpleControllerHandlerAdapter将会调用处理器的handleRequest方法进行功能处理，该处理方法返回一个ModelAndView给DispatcherServlet；<br>5、  hello（ModelAndView的逻辑视图名）——&gt;InternalResourceViewResolver， InternalResourceViewResolver使用JstlView，具体视图页面在/WEB-INF/jsp/hello.jsp；<br>6、  JstlView（/WEB-INF/jsp/hello.jsp）——&gt;渲染，将在处理器传入的模型数据(message=HelloWorld！)在视图中展示出来；<br>7、  返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</p>
<p>到此HelloWorld就完成了，步骤是不是有点多？而且回忆下我们主要进行了如下配置：</p>
<p>1、  前端控制器DispatcherServlet；<br>2、  HandlerMapping<br>3、  HandlerAdapter<br>4、  ViewResolver<br>5、  处理器/页面控制器<br>6、  视图</p>
<p>因此，接下来几章让我们详细看看这些配置，先从DispatcherServlet开始吧。</p>
<p>2．6、POST中文乱码解决方案<br>spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题，具体配置如下：</p>
<p>[xml]<br>&lt;filter&gt;<br>    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;<br>    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;<br>    &lt;init-param&gt;<br>        &lt;param-name&gt;encoding&lt;/param-name&gt;<br>        &lt;param-value&gt;utf-8&lt;/param-value&gt;<br>    &lt;/init-param&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;<br>    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;<br>[/xml]<br>以后我们项目及所有页面的编码均为UTF-8。</p>
<p>2.7、Spring3.1新特性<br>一、Spring2.5之前，我们都是通过实现Controller接口或其实现来定义我们的处理器类。</p>
<p>二、Spring2.5引入注解式处理器支持，通过@Controller 和 @RequestMapping注解定义我们的处理器类。并且提供了一组强大的注解：</p>
<p>需要通过处理器映射DefaultAnnotationHandlerMapping和处理器适配器AnnotationMethodHandlerAdapter来开启支持@Controller 和 @RequestMapping注解的处理器。</p>
<p>@Controller：用于标识是处理器类；<br>@RequestMapping：请求到处理器功能方法的映射规则；<br>@RequestParam：请求参数到处理器功能处理方法的方法参数上的绑定；<br>@ModelAttribute：请求参数到命令对象的绑定；<br>@SessionAttributes：用于声明session级别存储的属性，放置在处理器类上，通常列出模型属性（如@ModelAttribute）对应的名称，则这些属性会透明的保存到session中；<br>@InitBinder：自定义数据绑定注册支持，用于将请求参数转换到命令对象属性的对应类型；</p>
<p>三、Spring3.0引入RESTful架构风格支持(通过@PathVariable注解和一些其他特性支持),且又引入了更多的注解支持：<br>@CookieValue：cookie数据到处理器功能处理方法的方法参数上的绑定；<br>@RequestHeader：请求头（header）数据到处理器功能处理方法的方法参数上的绑定；<br>@RequestBody：请求的body体的绑定（通过HttpMessageConverter进行类型转换）；<br>@ResponseBody：处理器功能处理方法的返回值作为响应体（通过HttpMessageConverter进行类型转换）；<br>@ResponseStatus：定义处理器功能处理方法/异常处理器返回的状态码和原因；<br>@ExceptionHandler：注解式声明异常处理器；<br>@PathVariable：请求URI中的模板变量部分到处理器功能处理方法的方法参数上的绑定，从而支持RESTful架构风格的URI；</p>
<p>四、还有比如：<br>JSR-303验证框架的无缝支持（通过@Valid注解定义验证元数据）；<br>使用Spring 3开始的ConversionService进行类型转换（PropertyEditor依然有效），支持使用@NumberFormat 和 @DateTimeFormat来进行数字和日期的格式化；<br>HttpMessageConverter（Http输入/输出转换器，比如JSON、XML等的数据输出转换器）；<br>ContentNegotiatingViewResolver，内容协商视图解析器，它还是视图解析器，只是它支持根据请求信息将同一模型数据以不同的视图方式展示（如json、xml、html等），RESTful架构风格中很重要的概念（同一资源，多种表现形式）；<br>Spring 3 引入 一个  mvc XML的命名空间用于支持mvc配置，包括如：<br>    <mvc:annotation-driven>：<br>      自动注册基于注解风格的处理器需要的DefaultAnnotationHandlerMapping、AnnotationMethodHandlerAdapter<br>      支持Spring3的ConversionService自动注册<br>      支持JSR-303验证框架的自动探测并注册（只需把JSR-303实现放置到classpath）<br>      自动注册相应的HttpMessageConverter（用于支持@RequestBody  和 @ResponseBody）（如XML输入输出转换器（只需将JAXP实现放置到classpath）、JSON输入输出转换器（只需将Jackson实现放置到classpath））等。<br>    <mvc:interceptors>：注册自定义的处理器拦截器；<br>    <mvc:view-controller>：和ParameterizableViewController类似，收到相应请求后直接选择相应的视图；<br>    <mvc:resources>：逻辑静态资源路径到物理静态资源路径的支持；<br>    <mvc:default-servlet-handler>：当在web.xml 中DispatcherServlet使用<url-pattern>/</url-pattern> 映射时，能映射静态资源（当Spring Web MVC框架没有处理请求对应的控制器时（如一些静态资源），转交给默认的Servlet来响应静态文件，否则报404找不到资源错误，）。</mvc:default-servlet-handler></mvc:resources></mvc:view-controller></mvc:interceptors></mvc:annotation-driven></p>
<p>……等等。</p>
<p>五、Spring3.1新特性：<br>对Servlet 3.0的全面支持。</p>
<p>@EnableWebMvc：用于在基于Java类定义Bean配置中开启MVC支持，和XML中的<mvc:annotation-driven>功能一样；</mvc:annotation-driven></p>
<p>新的@Contoller和@RequestMapping注解支持类：处理器映射RequestMappingHandlerMapping 和 处理器适配器RequestMappingHandlerAdapter组合来代替Spring2.5开始的处理器映射DefaultAnnotationHandlerMapping和处理器适配器AnnotationMethodHandlerAdapter，提供更多的扩展点，它们之间的区别我们在处理器映射一章介绍。</p>
<p>新的@ExceptionHandler 注解支持类：ExceptionHandlerExceptionResolver来代替Spring3.0的AnnotationMethodHandlerExceptionResolver，在异常处理器一章我们再详细讲解它们的区别。</p>
<p>@RequestMapping的”consumes” 和 “produces” 条件支持：用于支持@RequestBody 和 @ResponseBody，<br>1consumes指定请求的内容是什么类型的内容，即本处理方法消费什么类型的数据，如consumes=”application/json”表示JSON类型的内容，Spring会根据相应的HttpMessageConverter进行请求内容区数据到@RequestBody注解的命令对象的转换；<br>2produces指定生产什么类型的内容，如produces=”application/json”表示JSON类型的内容，Spring的根据相应的HttpMessageConverter进行请求内容区数据到@RequestBody注解的命令对象的转换，Spring会根据相应的HttpMessageConverter进行模型数据（返回值）到JSON响应内容的转换<br>3以上内容，本章第×××节详述。</p>
<p>URI模板变量增强：URI模板变量可以直接绑定到@ModelAttribute指定的命令对象、@PathVariable方法参数在视图渲染之前被合并到模型数据中（除JSON序列化、XML混搭场景下）。</p>
<p>@Validated：JSR-303的javax.validation.Valid一种变体（非JSR-303规范定义的，而是Spring自定义的），用于提供对Spring的验证器（org.springframework.validation.Validator）支持，需要Hibernate Validator 4.2及更高版本支持；</p>
<p>@RequestPart：提供对“multipart/form-data”请求的全面支持，支持Servlet 3.0文件上传（javax.servlet.http.Part）、支持内容的HttpMessageConverter（即根据请求头的Content-Type，来判断内容区数据是什么类型，如JSON、XML，能自动转换为命令对象），比@RequestParam更强大（只能对请求参数数据绑定，key-alue格式），而@RequestPart支持如JSON、XML内容区数据的绑定；详见本章的第×××节；</p>
<p>Flash 属性 和 RedirectAttribute：通过FlashMap存储一个请求的输出，当进入另一个请求时作为该请求的输入，典型场景如重定向（POST-REDIRECT-GET模式，1、POST时将下一次需要的数据放在FlashMap；2、重定向；3、通过GET访问重定向的地址，此时FlashMap会把1放到FlashMap的数据取出放到请求中，并从FlashMap中删除；从而支持在两次请求之间保存数据并防止了重复表单提交）。<br>Spring Web MVC提供FlashMapManager用于管理FlashMap，默认使用SessionFlashMapManager，即数据默认存储在session中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring4.1.x源码GroovyDynamicElementReader报错问题解决]]></title>
      <url>http://yoursite.com/2015/04/05/spring4.1.x%E6%BA%90%E7%A0%81GroovyDynamicElementReader%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>从github上下载spring4源码后，只有spring-bean-groovy项目报错，提示GroovyDynamicElementReader这个类不存在。<br>解决方式为安装一个eclipse的groovy插件。</p>
<p>在eclipse的Help-&gt;Eclipse Marketplace中，搜索groovy然后安装，如下图：</p>
<p><img src="/images/groovy1-206x300.png" alt="groovy1"><br><img src="/images/groovy2-207x300.png" alt="groovy2"></p>
<p>安装完成后clean一下spring-bean-groovy项目就OK了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++中得运算符重载]]></title>
      <url>http://yoursite.com/2015/04/03/C++%E4%B8%AD%E5%BE%97%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>(一) C++不允许用户自己定义新的运算符，只能对已有的C++运算符进行重载。<br>(二) C++允许重载的运算符C++中绝大部分的运算符允许重载.<br>不能重载的运算符只有5个：<br>(1) 成员访问运算符.<br>(2) 作用域运算符∷<br>(3) 条件运算符?:<br>(4) 成员指针运算符<em><br>(5) 编译预处理命令的开始符号#<br>(三) 重载不能改变运算符运算对象(即操作数)的个数。<br>(四) 重载不能改变运算符的优先级别。<br>(五) 重载运算符的函数不能有默认的参数，否则就改变了运算符参数个数<br>(六) 重载的运算符必须和用户定义的自定义类型的对象一起使用，其参数至少应有一个是类对象(或类对象的引用)。也就是说，参数不能全部是C++的标准类型，以防止用户修改用于标准类型数据的运算符的性质。<br>(七) 用于类对象的运算符一般必须重载，但有两个例外，运算符“=”和“&amp;”不必用户重载。<br>① 赋值运算符(=)可以用于每一个类对象，可以利用它在同类对象之间相互赋值。<br>② 地址运算符&amp;也不必重载，它能返回类对象在内存中的起始地址。<br>// 前面已经说过，C++内置运算符只能计算内置的数据类型 。所以当我们要使用自定义类型时 就必须要进行重载..<br>总之，当C++语言原有的一个运算符被重载之后，它原先所具有的语义并没有消失，只相当于针对一个特定的类定义了一个新的运算符。<br>运算符重载可以使用成员函数和友元函数两种形式。可以参考以下的经验：<br>(1)只能使用成员函数重载的运算符有：=、()、[]、-&gt;、new、delete。<br>(2)单目运算符最好重载为成员函数。<br>(3) 对于复合的赋值运算符如+=、-=、</em>=、/=、&amp;=、!=、~=、%=、&gt;&gt;=、&lt;&lt;=建议重载为成员函数。<br>(4) 对于其它运算符，建议重载为友元函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DAS vs NAS vs SAN]]></title>
      <url>http://yoursite.com/2015/04/03/das-vs-nas-vs-san/</url>
      <content type="html"><![CDATA[<p>企业随着公司的业务量成长，对于迅速增长的资料要如何储存以及分享的问题也就接踵而来，此时企业唯一的选择大概就是不断的采购及更新资料的储存设备，但应该采购那一种的储存设备，对于将来资料不断的增加这个问题会有较好的扩充性呢？便是企业今天需要思考的一个重要课题。</p>
<p>DAS<br>早期的资料储存方式，大都是采用硬盘为主要的储存媒体，对于网络上的档案共享及资料的存取，皆需透过档案服务器 (File Server) 这个角色，此种资料的储存架构，我们称之为直接附加储存装置 ( DAS，Direct Attached Storage) 架构。这种架构当初发展的目的就是希望透过这种架构将资源共享给网络上的使用者，但这种方式的主要缺点是在于目前所谓的档案服务器，皆需要透过一般常用的操作系统 (例 : Windows2000) 来达到资源共享的目的，而通常操作系统的设计是为了多功能用途而规划的，并不是只针对档案的 I / O 部份去做最佳化处理，因此档案服务器这个角色，常常会因为不必要的驱动程序或服务占据了系统资源，而导致资料存取的效能大打折扣。<br>换个讲法来说，就是《将计算机上硬盘的资料分享出来给网络上的使用者去存取的这种模式就是 DAS》，现行企业大部份也都是采用此模式在管理资料的分享及储存。</p>
<p>NAS<br>为了解决上述所谓扩充及效能的问题，网络附加式储存装置 (NAS，Network Attached Storage) 架构因运而生，这是一种透过网络连结的方式，以提供不同的计算机系统间进行档案的存取与共享的储存设备。其设计理念主要是将 NAS 做成是一个只专门负责档案I/O的高效能储存设备，将不必要的服务程序、工具软件统统去除，并且针对档案I/O的存取功能做了最佳化的处理，使得对档案存取的效率上较传统的档案服务器大为提升。这也正符合了所谓『学业有专精、术业有专攻』的理念，当你想兼顾所有的事情时，则反而所有的事都会做不好，成效不彰。<br>对网络上的使用者而言，其实NAS就像是一个大型的档案服务器一样，其会以档案分享的型态在网络上出现，NAS 是必须依附在网络上而运作的储存装置，企业将资料集中摆放在 NAS 装置上，利用共通的网络传输协议(例: TCP / IP)来与网络上的服务器或工作站沟通，并将储存空间分配给网络上的服务器或使用者使用。同时资料集中摆放在NAS装置上，控管容易，并可提升IT人员的管理效能。NAS尚可对应到储存设备的采购愿景 =『需要多少，就买多少』的扩充性，以达到经济效益的运用，更进而降低整体拥有成本 (TCO)，何乐而不为呢？</p>
<p>SAN<br>那储存局域网络 (SAN，Storage Area Network) 架构又是什么呢？其实 SAN 和 NAS 两者皆是用在负责资料的储存与管理方面的系统，两者最主要的差别在于NAS的运作是可让使用者透过原有的网络架构 (以太网络) 连接到 NAS 装置，因 NAS 最主要在强调其是一个可提供档案共享的高效能储存装置；而 SAN 则是一个储存架构，其主要概念是将服务器与储存设备分开，然后利用高速的光纤网络来将二者连接在一起，这样一来，服务器可将其资料储存这件事完全丢给储存装置处理﹐而服务器只要专心于资料的处理工作﹐同时尚可降低服务器与服务器之间的资料流通量﹐服务器跟储存装置两者各司其职﹐然后再利用光纤信道来传输资料﹐以达到一个服务器与储存装置之间多对多的高效能、高稳定度的储存环境﹐当然其建置成本不容小看。<br>再换个角度来看，NAS 可看做是一个以产品为导向的小型企业储存架构之解决方案，而 SAN 则是以中大型企业为主的规划与建置其储存架构之解决方案。再白话一点, 就是 NAS 比较容易建置及便宜，而 SAN 则架构困难及成本贵，但 SAN 有一个最大的好处，就是效能比 NAS 好很多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]第一章 Web MVC简介 —— 跟开涛学SpringMVC]]></title>
      <url>http://yoursite.com/2015/04/03/%5B%E8%BD%AC%5D%E7%AC%AC%E4%B8%80%E7%AB%A0%20Web%20MVC%E7%AE%80%E4%BB%8B%20%E2%80%94%E2%80%94%20%E8%B7%9F%E5%BC%80%E6%B6%9B%E5%AD%A6SpringMVC/</url>
      <content type="html"><![CDATA[<p>私塾在线学习网原创内容（<a href="http://sishuok.com）" target="_blank" rel="external">http://sishuok.com）</a><br>原创内容，转载请注明私塾在线【<a href="http://sishuok.com/forum/blogPost/list/5050.html】" target="_blank" rel="external">http://sishuok.com/forum/blogPost/list/5050.html】</a></p>
<p>Web MVC简介<br>1.1、Web开发中的请求-响应模型：<br><img src="http://sishuok.com/forum/upload/2012/7/1/2fc5edc55fa262fddccecc1816f5ff7b__1.JPG" alt=""><br>在Web世界里，具体步骤如下：<br>1、  Web浏览器（如IE）发起请求，如访问<a href="http://sishuok.com" target="_blank" rel="external">http://sishuok.com</a><br>2、  Web服务器（如Tomcat）接收请求，处理请求（比如用户新增，则将把用户保存一下），最后产生响应（一般为html）。<br>3、web服务器处理完成后，返回内容给web客户端（一般就是我们的浏览器），客户端对接收的内容进行处理（如web浏览器将会对接收到的html内容进行渲染以展示给客户）。</p>
<p>因此，在Web世界里：<br>都是Web客户端发起请求，Web服务器接收、处理并产生响应。<br>一般Web服务器是不能主动通知Web客户端更新内容。虽然现在有些技术如服务器推（如Comet）、还有现在的HTML5 websocket可以实现Web服务器主动通知Web客户端。<br>到此我们了解了在web开发时的请求/响应模型，接下来我们看一下标准的MVC模型是什么。</p>
<p>1.2、标准MVC模型概述<br>MVC模型：是一种架构型的模式，本身不引入新功能，只是帮助我们将开发的结构组织的更加合理，使展示与模型分离、流程控制逻辑、业务逻辑调用与展示逻辑分离。如图1-2<br><img src="http://sishuok.com/forum/upload/2012/7/1/a633b31a42f0224c9bf66cd3cc886e04__2.JPG" alt=""><br>图1-2</p>
<p>首先让我们了解下MVC（Model-View-Controller）三元组的概念：</p>
<p><strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据） 和 服务层（行为）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。 </p>
<p><strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。 </p>
<p><strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作，。 </p>
<p>从图1-1我们还看到，在标准的MVC中模型能主动推数据给视图进行更新（观察者设计模式，在模型上注册视图，当模型更新时自动更新视图），但在Web开发中模型是无法主动推给视图（无法主动更新用户界面），因为在Web开发是请求-响应模型。 </p>
<p>那接下来我们看一下在Web里MVC是什么样子，我们称其为 Web MVC 来区别标准的MVC。<br>1.3、Web MVC概述</p>
<p>模型-视图-控制器概念和标准MVC概念一样，请参考1.2，我们再看一下Web MVC标准架构，如图1-3：<br><img src="http://sishuok.com/forum/upload/2012/7/1/baa1df353ed98b79231b535bc1f73dea__3.JPG" alt=""><br>如图1-3，在Web MVC模式下，模型无法主动推数据给视图，如果用户想要视图更新，需要再发送一次请求（即请求-响应模型）。<br>概念差不多了，我们接下来了解下Web端开发的发展历程，和使用代码来演示一下Web MVC是如何实现的，还有为什么要使用MVC这个模式呢？</p>
<p>1.4、Web端开发发展历程<br>此处我们只是简单的叙述比较核心的历程，如图1-4<br><img src="http://sishuok.com/forum/upload/2012/7/1/41f193e4f961be27d511789df2ee7680__4.JPG" alt=""><br>图1-4</p>
<p>1.4.1、<strong>CGI</strong>：（Common Gateway Interface）公共网关接口，一种在web服务端使用的脚本技术，使用C或Perl语言编写，用于接收web用户请求并处理，最后动态产生响应给用户，但每次请求将产生一个进程，重量级。<br>1.4.2、<strong>Servlet</strong>：一种JavaEE web组件技术，是一种在服务器端执行的web组件，用于接收web用户请求并处理，最后动态产生响应给用户。但每次请求只产生一个线程（而且有线程池），轻量级。而且能利用许多JavaEE技术（如JDBC等）。本质就是在java代码里面 输出 html流。但表现逻辑、控制逻辑、业务逻辑调用混杂。如图1-5<br><img src="http://sishuok.com/forum/upload/2012/7/1/799db5c79c85cb59b68b915916f8dddc__5.JPG" alt=""><br>图1-5<br>如图1-5，这种做法是绝对不可取的，控制逻辑、表现代码、业务逻辑对象调用混杂在一起，最大的问题是直接在Java代码里面输出Html，这样前端开发人员无法进行页面风格等的设计与修改，即使修改也是很麻烦，因此实际项目这种做法不可取。</p>
<p>1.4.3、<strong>JSP</strong>：（Java Server Page）：一种在服务器端执行的web组件，是一种运行在标准的HTML页面中嵌入脚本语言（现在只支持Java）的模板页面技术。本质就是在html代码中嵌入java代码。JSP最终还是会被编译为Servlet，只不过比纯Servlet开发页面更简单、方便。但表现逻辑、控制逻辑、业务逻辑调用还是混杂。如图1-6<br><img src="http://sishuok.com/forum/upload/2012/7/1/7486df5510b6068a360d8f0c6bbb706c__6.JPG" alt=""><br>图1-6<br>如图1-6，这种做法也是绝对不可取的，控制逻辑、表现代码、业务逻辑对象调用混杂在一起，但比直接在servlet里输出html要好一点，前端开发人员可以进行简单的页面风格等的设计与修改（但如果嵌入的java脚本太多也是很难修改的），因此实际项目这种做法不可取。<br><img src="http://sishuok.com/forum/upload/2012/7/1/c59e61daa2ed98f75aab1ae3397fb235__7.JPG" alt=""><br>JSP本质还是Servlet，最终在运行时会生成一个Servlet（如tomcat，将在tomcat\work\Catalina\web应用名\org\apache\jsp下生成），但这种使得写html简单点，但仍是控制逻辑、表现代码、业务逻辑对象调用混杂在一起。</p>
<p>1.4.4、<strong>Model1</strong>：可以认为是JSP的增强版，可以认为是jsp+javabean如图1-7<br>特点：使用<jsp:usebean>标准动作，自动将请求参数封装为JavaBean组件；还必须使用java脚本执行控制逻辑。<br><img src="http://sishuok.com/forum/upload/2012/7/1/c25b9ce9064a37ab93ffe02711b3ecc7__8.JPG" alt=""><br>图1-7</jsp:usebean></p>
<p>此处我们可以看出，使用<jsp:usebean>标准动作可以简化javabean的获取/创建，及将请求参数封装到javabean，再看一下Model1架构，如图1-8。<br><img src="http://sishuok.com/forum/upload/2012/7/1/d3b5b2ec88706fff7ef4b98d110837d1__9.JPG" alt=""><br>图1-8 Model1架构<br>Model1架构中，JSP负责控制逻辑、表现逻辑、业务对象（javabean）的调用，只是比纯JSP简化了获取请求参数和封装请求参数。同样是不好的，在项目中应该严禁使用（或最多再demo里使用）。<br>1.4.5、<strong>Model2</strong>：在JavaEE世界里，它可以认为就是Web MVC模型<br>Model2架构其实可以认为就是我们所说的Web MVC模型，只是控制器采用Servlet、模型采用JavaBean、视图采用JSP，如图1-9<br><img src="http://sishuok.com/forum/upload/2012/7/1/a6b7b2ca293e610a7a2b32e47a16d718__10.JPG" alt=""><br>图1-9 Model2架构<br>具体代码事例如下：<br><img src="http://sishuok.com/forum/upload/2012/7/1/254a61cd5c20f1e8f0e1012f02cdaa31__11.JPG" alt=""><br><img src="http://sishuok.com/forum/upload/2012/7/1/0ec4c098750790295eaad2f1b3a4dc82__12.JPG" alt=""><br>从Model2架构可以看出，视图和模型分离了，控制逻辑和展示逻辑分离了。</jsp:usebean></p>
<p>但我们也看到严重的缺点：</p>
<p>1．  1、控制器：<br>1．1．1、控制逻辑可能比较复杂，其实我们可以按照规约，如请求参数submitFlag=toAdd，我们其实可以直接调用toAdd方法，来简化控制逻辑；而且每个模块基本需要一个控制器，造成控制逻辑可能很复杂；<br>1．1．2、请求参数到模型的封装比较麻烦，如果能交给框架来做这件事情，我们可以从中得到解放；<br>1．1．3、选择下一个视图，严重依赖Servlet API，这样很难或基本不可能更换视图；<br>1．1．4、给视图传输要展示的模型数据，使用Servlet API，更换视图技术也要一起更换，很麻烦。 </p>
<p>1.2、模型：<br>1．2．1、此处模型使用JavaBean，可能造成JavaBean组件类很庞大，一般现在项目都是采用三层架构，而不采用JavaBean。<br><img src="http://sishuok.com/forum/upload/2012/7/1/1570f54f6a52301d8ea58fe8fa9efb29__14.JPG" alt=""><br>1.3、视图<br>1．3．1、现在被绑定在JSP，很难更换视图，比如Velocity、FreeMarker；比如我要支持Excel、PDF视图等等。<br>1.4.5、<strong>服务到工作者</strong>：Front Controller + Application Controller + Page Controller + Context<br>即，前端控制器+应用控制器+页面控制器（也有称其为动作）+上下文，也是Web MVC，只是责任更加明确，详情请参考《核心J2EE设计模式》和《企业应用架构模式》如图1-10：<br><img src="http://sishuok.com/forum/upload/2012/7/1/e7fae17e52bb3664d0d3f4ea8db7ae55__15.JPG" alt=""><br>图1-10<br>运行流程如下：<br><img src="http://sishuok.com/forum/upload/2012/7/1/925c5ff2cc8613c898b05a4817db1f56__16.JPG" alt=""><br>职责：<br><strong>Front Controller</strong>：前端控制器，负责为表现层提供统一访问点，从而避免Model2中出现的重复的控制逻辑（由前端控制器统一回调相应的功能方法，如前边的根据submitFlag=login转调login方法）；并且可以为多个请求提供共用的逻辑（如准备上下文等等），将选择具体视图和具体的功能处理（如login里边封装请求参数到模型，并调用业务逻辑对象）分离。<br><strong>Application Controller</strong>：应用控制器，前端控制器分离选择具体视图和具体的功能处理之后，需要有人来管理，应用控制器就是用来选择具体视图技术（视图的管理）和具体的功能处理（页面控制器/命令对象/动作管理），一种策略设计模式的应用，可以很容易的切换视图/页面控制器，相互不产生影响。<br><strong>Page Controller(Command)</strong>：页面控制器/动作/处理器：功能处理代码，收集参数、封装参数到模型，转调业务对象处理模型，返回逻辑视图名交给前端控制器（和具体的视图技术解耦），由前端控制器委托给应用控制器选择具体的视图来展示，可以是命令设计模式的实现。页面控制器也被称为处理器或动作。<br><strong>Context</strong>：上下文，还记得Model2中为视图准备要展示的模型数据吗，我们直接放在request中（Servlet API相关），有了上下文之后，我们就可以将相关数据放置在上下文，从而与协议无关（如Servlet API）的访问/设置模型数据，一般通过ThreadLocal模式实现。 </p>
<p>到此，我们回顾了整个web开发架构的发展历程，可能不同的web层框架在细节处理方面不同，但的目的是一样的：<br>干净的web表现层：<br>    模型和视图的分离；<br>控制器中的控制逻辑与功能处理分离（收集并封装参数到模型对象、业务对象调用）；<br>控制器中的视图选择与具体视图技术分离。<br>轻薄的web表现层：<br>    做的事情越少越好，薄薄的，不应该包含无关代码；<br>       只负责收集并组织参数到模型对象，启动业务对象的调用；<br>       控制器只返回逻辑视图名并由相应的应用控制器来选择具体使用的视图策略；<br>       尽量少使用框架特定API，保证容易测试。</p>
<p>到此我们了解Web MVC的发展历程，接下来让我们了解下Spring MVC到底是什么、架构及来个HelloWorld了解下具体怎么使用吧。<br>本章具体代码请参考 springmvc-chapter1工程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各种树的平均查找效率]]></title>
      <url>http://yoursite.com/2015/04/02/%E5%90%84%E7%A7%8D%E6%A0%91%E7%9A%84%E5%B9%B3%E5%9D%87%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87/</url>
      <content type="html"><![CDATA[<p>BST：二叉搜索树<br>查找最好时间复杂度为O(lgn),最坏为O(n);<br>删除和插入的时间复杂度与查找差不多</p>
<p>AVL：二叉平衡树<br>查找时间复杂度为O(lgn)<br>插入的时候做多需要一次旋转，时间复杂度为O(lgn)<br>删除的时候需要的时间复杂度为O(2lgn)</p>
<p>红黑树：<br>查找时间复杂度为2O(lg(n+1))<br>删除和插入的时间复杂度为O(lgn)</p>
<p>B树：<br>从叶节点插入心的节点，<br>从磁盘读写效率上讲，查找、删除和插入的时间复杂度要小于任何二叉树</p>
<p>B+树<br>非叶节点只是为了索引第一个节点<br>之后叶节点之间可以相互索引，大型数据库采用的结构</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[同一进程中的线程究竟共享哪些资源]]></title>
      <url>http://yoursite.com/2015/04/02/%E5%90%8C%E4%B8%80%E8%BF%9B%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%A9%B6%E7%AB%9F%E5%85%B1%E4%BA%AB%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>线程共享的环境包括：进程代码段、进程的公有数据(利用这些共享的数据，线程很容易的实现相互之间的通讯)、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。<br>进程拥有这许多共性的同时，还拥有自己的个性。有了这些个性，线程才能实现并发性。这些个性包括：</p>
<p>1.线程ID<br>每个线程都有自己的线程ID，这个ID在本进程中是唯一的。进程用此来标<br>识线程。<br>2.寄存器组的值<br>由于线程间是并发运行的，每个线程有自己不同的运行线索，当从一个线<br>程切换到另一个线程上时，必须将原有的线程的寄存器集合的状态保存，以便<br>将来该线程在被重新切换到时能得以恢复。<br>3.线程的堆栈<br>堆栈是保证线程独立运行所必须的。<br>线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程<br>必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影<br>响。</p>
<p>4.错误返回码<br>由于同一个进程中有很多个线程在同时运行，可能某个线程进行系统调用<br>后设置了errno值，而在该线程还没有处理这个错误，另外一个线程就在此时<br>被调度器投入运行，这样错误值就有可能被修改。<br>所以，不同的线程应该拥有自己的错误返回码变量。</p>
<p>5.线程的信号屏蔽码<br>由于每个线程所感兴趣的信号不同，所以线程的信号屏蔽码应该由线程自<br>己管理。但所有的线程都共享同样的信号处理器。</p>
<p>6.线程的优先级<br>由于线程需要像进程那样能够被调度，那么就必须要有可供调度使用的参<br>数，这个参数就是线程的优先级。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++ public , protected, private]]></title>
      <url>http://yoursite.com/2015/03/30/c-public-protected-private/</url>
      <content type="html"><![CDATA[<p>当private,public,protected单纯的作为一个类中的成员权限设置时：<br>private: 只能由该类中的函数、其友元函数访问,不能被任何其他访问，该类的对象也不能访问.</p>
<p>protected: 可以被该类中的函数、子类的函数、以及其友元函数访问,但不能被该类的对象访问</p>
<p>public: 可以被该类中的函数、子类的函数、其友元函数访问,也可以由该类的对象访问<br>注：友元函数包括两种：设为友元的全局函数，设为友元类中的成员函数</p>
<p>当private,public,protected作为继承方式时：</p>
<p>对于公有继承方式：<br>(1)父类的public成员成为子类的public成员，允许类以外的代码访问这些成员；<br>(2)父类的private成员仍旧是父类的private成员，子类成员不可以访问这些成员；<br>(3)父类的protected成员成为子类的protected成员，只允许子类成员访问；</p>
<p>(1) 基类成员对其对象的可见性：</p>
<p>公有成员可见，其他不可见。这里保护成员同于私有成员。</p>
<p>(2) 基类成员对派生类的可见性：</p>
<p>公有成员和保护成员可见，而私有成员不可见。这里保护成员同于公有成员。</p>
<p>(3) 基类成员对派生类对象的可见性：</p>
<p>公有成员可见，其他成员不可见。</p>
<p>所以，在公有继承时，派生类的对象可以访问基类中的公有成员；派生类的成员函数可以访问基类中的公有成员和保护成员。这里，一定要区分清楚派生类的对象和派生类中的成员函数对基类的访问是不同的。</p>
<p>对于私有继承方式：</p>
<p>(1)父类的public成员成为子类的private成员，只允许子类成员访问；<br>(2)父类的private成员仍旧是父类的private成员，子类成员不可以访问这些成员；<br>(3)父类的protected成员成为子类的private成员，只允许子类成员访问；</p>
<p>(1) 基类成员对其对象的可见性：</p>
<p>公有成员可见，其他成员不可见。</p>
<p>(2) 基类成员对派生类的可见性：</p>
<p>公有成员和保护成员是可见的，而私有成员是不可见的。</p>
<p>(3) 基类成员对派生类对象的可见性：</p>
<p>所有成员都是不可见的。</p>
<p>所以，在私有继承时，基类的成员只能由直接派生类访问，而无法再往下继承。</p>
<p>对于保护继承方式：</p>
<p>(1)父类的public成员成为子类的protected成员，只允许子类成员访问；<br>(2)父类的private成员仍旧是父类的private成员，子类成员不可以访问这些成员；<br>(3)父类的public成员成为子类的protected成员，只允许子类成员访问；</p>
<p>这种继承方式与私有继承方式的情况相同。两者的区别仅在于对派生类的成员而言，对基类成员有不同的可见性。</p>
<p>上述所说的可见性也就是可访问性。关于可访问性还有另的一种说法。这种规则中，称派生类的对象对基类访问为水平访问，称派生类的派生类对基类的访问为垂直访问。</p>
<p>一般规则如下：</p>
<p>公有继承时，水平访问和垂直访问对基类中的公有成员不受限制；<br>私有继承时，水平访问和垂直访问对基类中的公有成员也不能访问；<br>保护继承时，对于垂直访问同于公有继承，对于水平访问同于私有继承。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http返回码]]></title>
      <url>http://yoursite.com/2015/03/30/http%E8%BF%94%E5%9B%9E%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>HTTP协议状态码表示的意思主要分为五类 ,大体是 :<br><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>~~~<br>1×× 　　保留<br>2×× 　　表示请求成功地接收<br>3×× 　　为完成请求客户需进一步细化请求<br>4×× 　　客户错误<br>5×× 　　服务器错误</p>
<p>100 Continue<br>指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。<br>客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送<br>最后的回送在请求之后。</p>
<p>101 Switching Protocols<br>服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议<br>在101回送以空行结束的时候。</p>
<h1 id="Successful"><a href="#Successful" class="headerlink" title="Successful"></a>Successful</h1><p>200 OK<br>指示客服端的请求已经成功收到，解析，接受。</p>
<p>201 Created<br>请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据<br>并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器<br>必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。</p>
<p>202 Accepted<br>请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。</p>
<p>203 Non-Authoritative Information</p>
<p>204 No Content<br>服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。</p>
<p>205 Reset Content<br>服务器已经接受请求并且用户代理应该重新设置文档视图。</p>
<p>206 Partial Content<br>服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。</p>
<h1 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h1><p>300 Multiple Choices<br>请求资源符合任何一个呈现方式。</p>
<p>301 Moved Permanently<br>请求的资源已经被赋予一个新的URI。</p>
<p>302 Found<br>通过不同的URI请求资源的临时文件。<br>303 See Other</p>
<p>304 Not Modified<br>如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304<br>状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。</p>
<p>305 Use Proxy<br>请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。</p>
<p>306 Unused</p>
<p>307 Temporary Redirect</p>
<h1 id="Client-Error"><a href="#Client-Error" class="headerlink" title="Client Error"></a>Client Error</h1><p>400 Bad Request<br>因为错误的语法导致服务器无法理解请求信息。</p>
<p>401 Unauthorized<br>如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。</p>
<p>402 Payment Required<br>保留状态码</p>
<p>403 Forbidden<br>服务器接受请求，但是被拒绝处理。</p>
<p>404 Not Found<br>服务器已经找到任何匹配Request-URI的资源。</p>
<p>405 Menthod Not Allowed<br>Request-Line 请求的方法不被允许通过指定的URI。</p>
<p>406 Not Acceptable</p>
<p>407 Proxy Authentication Required</p>
<p>408 Reqeust Timeout<br>客服端没有提交任何请求在服务器等待处理时间内。</p>
<p>409 Conflict</p>
<p>410 Gone</p>
<p>411 Length Required<br>服务器拒绝接受请求在没有定义Content-Length字段的情况下。</p>
<p>412 Precondition Failed</p>
<p>413 Request Entity Too Large<br>服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。</p>
<p>414 Request-URI Too Long<br>服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。</p>
<p>415 Unsupported Media Type<br>服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。</p>
<p>416 Request Range Not Satisfialbe</p>
<p>417 Expectation Failed</p>
<h1 id="Server-Error"><a href="#Server-Error" class="headerlink" title="Server Error"></a>Server Error</h1><p>500 Internal Server Error<br>服务器遭遇异常阻止了当前请求的执行</p>
<p>501 Not Implemented<br>服务器没有相应的执行动作来完成当前请求。</p>
<p>502 Bad Gateway</p>
<p>503 Service Unavailable<br>因为临时文件超载导致服务器不能处理当前请求。</p>
<p>504 Gateway Timeout</p>
<p>505 Http Version Not Supported</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remember that ordinal parameters are 1-based!]]></title>
      <url>http://yoursite.com/2015/03/30/Remember%20that%20ordinal%20parameters%20are%201-based!/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">exception</div><div class="line"></div><div class="line">javax.servlet.ServletException: java.lang.IndexOutOfBoundsException:</div><div class="line"></div><div class="line">        Remember that ordinal parameters are <span class="number">1</span>-based!</div></pre></td></tr></table></figure>
<p>是因为在HQL语句中出错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Java进行3DES加密解]]></title>
      <url>http://yoursite.com/2015/03/26/%E7%94%A8Java%E8%BF%9B%E8%A1%8C3DES%E5%8A%A0%E5%AF%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>最近一个合作商提出使用3DES交换数据，本来他们有现成的代码，可惜只有.net版本，我们的服务器都是Linux，而且应用都是Java。于是对照他们提供的代码改了一个Java的版本出来，主要是不熟悉3DES，折腾了一天，终于搞定。</p>
<p>所谓3DES，就是把DES做三次，当然不是简单地DES DES DES就行了，中途有些特定的排列。这个我可不关心，呵呵，我的目的是使用它。</p>
<p>在网上搜索了一下3DES，找到很少资料。经过朋友介绍，找到GNU Crypto和Bouncy Castle两个Java扩充包，里面应该有3DES的实现吧。</p>
<p>从GNU Crypto入手，找到一个TripleDES的实现类，发现原来3DES还有一个名字叫DESede，在网上搜索TripleDES和DESede，呵呵，终于发现更多的资料了。</p>
<p>Java的安全API始终那么难用，先创建一个cipher看看算法在不在吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cipher cipher = Cipher.getInstance(&amp;quot;DESede&amp;quot;);</div></pre></td></tr></table></figure></p>
<p>如果没有抛异常的话，就证明这个算法是有效的</p>
<p>突然想看看JDK有没有内置DESede，于是撇开Crypto，直接测试，发现可以正确运行。在jce.jar里面找到相关的类，JDK内置了。</p>
<p>于是直接用DES的代码来改&amp;测试，最后代码变成这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SecureRandom sr = <span class="keyword">new</span> SecureRandom();</div><div class="line">DESedeKeySpec dks = <span class="keyword">new</span> DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());</div><div class="line">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&amp;quot;DESede&amp;quot;);</div><div class="line">SecretKey securekey = keyFactory.generateSecret(dks);</div><div class="line">Cipher cipher = Cipher.getInstance(&amp;quot;DESede&amp;quot;);</div><div class="line">cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(Hex.encodeHex(cipher.doFinal(str.getBytes())));</div></pre></td></tr></table></figure>
<p>需要留意的是，要使用DESede的Spec、Factory和Cipher才行</p>
<p>事情还没完结，合作商给过来的除了密钥之外，还有一个IV向量。搜索了一下，发现有一个IvParameterSpec类，于是代码变成这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SecureRandom sr = <span class="keyword">new</span> SecureRandom();</div><div class="line">DESedeKeySpec dks = <span class="keyword">new</span> DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());</div><div class="line">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&amp;quot;DESede&amp;quot;);</div><div class="line">SecretKey securekey = keyFactory.generateSecret(dks);</div><div class="line">IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(PASSWORD_IV.getBytes());</div><div class="line">Cipher cipher = Cipher.getInstance(&amp;quot;DESede&amp;quot;);</div><div class="line">cipher.init(Cipher.ENCRYPT_MODE, securekey, iv, sr);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(Hex.encodeHex(cipher.doFinal(str.getBytes())));</div></pre></td></tr></table></figure>
<p>但是，运行报错了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.security.InvalidAlgorithmParameterException: ECB mode cannot use IV</div></pre></td></tr></table></figure>
<p>ECB是什么呢？我的代码完全没有写ECB什么的</p>
<p>又上网搜索，结果把DES的来龙去脉都搞清楚了</p>
<p><a href="http://www.tropsoft.com/strongenc/des.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des.htm</a></p>
<p>ECB是其中一种字串分割方式，除了DES以外，其他加密方式也会使用这种分割方式的，而Java默认产生的DES算法就是用ECB方法，ECB不需要向量，当然也就不支持向量了</p>
<p>除了ECB，DES还支持CBC、CFB、OFB，而3DES只支持ECB和CBC两种</p>
<p><a href="http://www.tropsoft.com/strongenc/des3.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des3.htm</a></p>
<p>CBC支持并且必须有向量，具体算法这里就不说了。合作商给的.net代码没有声明CBC模式，似乎是.net默认的方式就是CBC的</p>
<p>于是把模式改成CBC</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cipher cipher = Cipher.getInstance(&amp;quot;DESede/CBC/PKCS5Padding&amp;quot;);</div></pre></td></tr></table></figure>
<p>成功运行了</p>
<p>后话：</p>
<p>搜索的过程中，找到一个不错的讨论</p>
<p><a href="http://www.lslnet.com/linux/dosc1/21/linux-197579.htm" target="_blank" rel="external">http://www.lslnet.com/linux/dosc1/21/linux-197579.htm</a> 在CBC（不光是DES算法）模式下，iv通过随机数（或伪随机）机制产生是一种比较常见的方法。iv的作用主要是用于产生密文的第一个block，以使最终生成的密文产生差异（明文相同的情况下），使密码攻击变得更为困难，除此之外iv并无其它用途。因此iv通过随机方式产生是一种十分简便、有效的途径。此外，在IPsec中采用了DES-CBC作为缺省的加密方式，其使用的iv是通讯包的时间戳。从原理上来说，这与随机数机制并无二致。</p>
<p>看来，向量的作用其实就是salt</p>
<p>最大的好处是，可以令到即使相同的明文，相同的密钥，能产生不同的密文</p>
<p>例如，我们用DES方式在数据保存用户密码的时候，可以另外增加一列，把向量同时保存下来，并且每次用不同的向量。这样的好处是，即使两个用户的密码是一样的，数据库保存的密文，也会不一样，就能降低猜测的可能性</p>
<p>另外一种用法，就是类似IPsec的做法，两部主机互传数据，保证两部机的时钟同步的前提下（可以取样到分钟或更高的单位避免偏差），用时钟的变化值作为向量，就能增加被sniffer数据的解密难度</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]使用JAVA实现AES加密]]></title>
      <url>http://yoursite.com/2015/03/26/%5B%E8%BD%AC%5D%E4%BD%BF%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0AES%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/hbcui1984/article/details/5201247" target="_blank" rel="external">原文地址</a><br>1. 因子<br>       上次介绍了《JAVA实现AES加密》，中间提到近些年DES使用越来越少，原因就在于其使用56位密钥，比较容易被破解，近些年来逐渐被AES替代，AES已经变成目前对称加密中最流行算法之一；AES可以使用128、192、和256位密钥，并且用128位分组加密和解密数据。本文就简单介绍如何通过JAVA实现AES加密。<br>2. JAVA实现<br>闲话少许，掠过AES加密原理及算法，关于这些直接搜索专业网站吧，我们直接看JAVA的具体实现。<br>2.1 加密<br>代码有详细解释，不多废话。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 加密</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> content 需要加密的内容</div><div class="line"> * <span class="doctag">@param</span> password  加密密码</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String content, String password) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;           </div><div class="line">                KeyGenerator kgen = KeyGenerator.getInstance(&amp;quot;AES&amp;quot;);</div><div class="line">                kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</div><div class="line">                SecretKey secretKey = kgen.generateKey();</div><div class="line">                <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</div><div class="line">                SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, &amp;quot;AES&amp;quot;);</div><div class="line">                Cipher cipher = Cipher.getInstance(&amp;quot;AES&amp;quot;);<span class="comment">// 创建密码器</span></div><div class="line">                <span class="keyword">byte</span>[] byteContent = content.getBytes(&amp;quot;utf-<span class="number">8</span>&amp;quot;);</div><div class="line">                cipher.init(Cipher.ENCRYPT_MODE, key);<span class="comment">// 初始化</span></div><div class="line">                <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</div><div class="line">                <span class="keyword">return</span> result; <span class="comment">// 加密</span></div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.2 解密<br>代码有详细注释，不多废话<br>注意：解密的时候要传入byte数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**解密 </span></div><div class="line"> * <span class="doctag">@param</span> content  待解密内容 </div><div class="line"> * <span class="doctag">@param</span> password 解密密钥 </div><div class="line"> * <span class="doctag">@return</span> </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] content, String password) &#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">                 KeyGenerator kgen = KeyGenerator.getInstance(&amp;quot;AES&amp;quot;);  </div><div class="line">                 kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));  </div><div class="line">                 SecretKey secretKey = kgen.generateKey();  </div><div class="line">                 <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();  </div><div class="line">                 SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, &amp;quot;AES&amp;quot;);              </div><div class="line">                 Cipher cipher = Cipher.getInstance(&amp;quot;AES&amp;quot;);<span class="comment">// 创建密码器  </span></div><div class="line">                cipher.init(Cipher.DECRYPT_MODE, key);<span class="comment">// 初始化  </span></div><div class="line">                <span class="keyword">byte</span>[] result = cipher.doFinal(content);  </div><div class="line">                <span class="keyword">return</span> result; <span class="comment">// 加密  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.3 测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String content = &amp;quot;test&amp;quot;;  </div><div class="line">String password = &amp;quot;<span class="number">12345678</span>&amp;quot;;  </div><div class="line"><span class="comment">//加密  </span></div><div class="line">System.out.println(&amp;quot;加密前：&amp;quot; + content);  </div><div class="line"><span class="keyword">byte</span>[] encryptResult = encrypt(content, password);  </div><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">        String encryptResultStr = <span class="keyword">new</span> String(encryptResult,&amp;quot;utf-<span class="number">8</span>&amp;quot;);  </div><div class="line">        <span class="comment">//解密  </span></div><div class="line">        <span class="keyword">byte</span>[] decryptResult = decrypt(encryptResultStr.getBytes(&amp;quot;utf-<span class="number">8</span>&amp;quot;),password);  </div><div class="line">        System.out.println(&amp;quot;解密后：&amp;quot; + <span class="keyword">new</span> String(decryptResult));  </div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;  </div><div class="line">        e.printStackTrace();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则，系统会报出如下异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">javax.crypto.IllegalBlockSizeException: Input length must be multiple of <span class="number">16</span> when decrypting with padded cipher</div><div class="line">        at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)</div><div class="line">        at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)</div><div class="line">        at com.sun.crypto.provider.AESCipher.engineDoFinal(DashoA13*..)</div><div class="line">        at javax.crypto.Cipher.doFinal(DashoA13*..)</div></pre></td></tr></table></figure></p>
<p>这主要是因为加密后的byte数组是不能强制转换成字符串的，换言之：字符串和byte数组在这种情况下不是互逆的；要避免这种情况，我们需要做一些修订，可以考虑将二进制数据转换成十六进制表示，主要有如下两个方法：</p>
<p>2.4.1将二进制转换成16进制<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**将二进制转换成16进制 </span></div><div class="line"> * <span class="doctag">@param</span> buf </div><div class="line"> * <span class="doctag">@return</span> </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseByte2HexStr</span><span class="params">(<span class="keyword">byte</span> buf[])</span> </span>&#123;  </div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; buf.length; i++) &#123;  </div><div class="line">                String hex = Integer.toHexString(buf[i] &amp;amp; <span class="number">0xFF</span>);  </div><div class="line">                <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;  </div><div class="line">                        hex = <span class="string">'0'</span> + hex;  </div><div class="line">                &#125;  </div><div class="line">                sb.append(hex.toUpperCase());  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> sb.toString();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.4.2 将16进制转换为二进制<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**将16进制转换为二进制 </span></div><div class="line"> * <span class="doctag">@param</span> hexStr </div><div class="line"> * <span class="doctag">@return</span> </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] parseHexStr2Byte(String hexStr) &#123;  </div><div class="line">        <span class="keyword">if</span> (hexStr.length() &amp;lt; <span class="number">1</span>)  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[hexStr.length()/<span class="number">2</span>];  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&amp;lt; hexStr.length()/<span class="number">2</span>; i++) &#123;  </div><div class="line">                <span class="keyword">int</span> high = Integer.parseInt(hexStr.substring(i*<span class="number">2</span>, i*<span class="number">2</span>+<span class="number">1</span>), <span class="number">16</span>);  </div><div class="line">                <span class="keyword">int</span> low = Integer.parseInt(hexStr.substring(i*<span class="number">2</span>+<span class="number">1</span>, i*<span class="number">2</span>+<span class="number">2</span>), <span class="number">16</span>);  </div><div class="line">                result[i] = (<span class="keyword">byte</span>) (high * <span class="number">16</span> + low);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> result;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，我们再修订以上测试代码，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String content = &amp;quot;test&amp;quot;;  </div><div class="line">String password = &amp;quot;<span class="number">12345678</span>&amp;quot;;  </div><div class="line"><span class="comment">//加密  </span></div><div class="line">System.out.println(&amp;quot;加密前：&amp;quot; + content);  </div><div class="line"><span class="keyword">byte</span>[] encryptResult = encrypt(content, password);  </div><div class="line">String encryptResultStr = parseByte2HexStr(encryptResult);  </div><div class="line">System.out.println(&amp;quot;加密后：&amp;quot; + encryptResultStr);  </div><div class="line"><span class="comment">//解密  </span></div><div class="line"><span class="keyword">byte</span>[] decryptFrom = parseHexStr2Byte(encryptResultStr);  </div><div class="line"><span class="keyword">byte</span>[] decryptResult = decrypt(decryptFrom,password);  </div><div class="line">System.out.println(&amp;quot;解密后：&amp;quot; + <span class="keyword">new</span> String(decryptResult));</div></pre></td></tr></table></figure></p>
<p>测试结果如下：<br>加密前：test<br>加密后：73C58BAFE578C59366D8C995CD0B9D6D<br>解密后：test</p>
<p>2.5 另外一种加密方式<br>还有一种加密方式，大家可以参考如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">      * 加密 </div><div class="line">      * </div><div class="line">      * <span class="doctag">@param</span> content 需要加密的内容 </div><div class="line">      * <span class="doctag">@param</span> password  加密密码 </div><div class="line">      * <span class="doctag">@return</span> </div><div class="line">      */  </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt2(String content, String password) &#123;  </div><div class="line">             <span class="keyword">try</span> &#123;  </div><div class="line">                     SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(password.getBytes(), &amp;quot;AES&amp;quot;);  </div><div class="line">                     Cipher cipher = Cipher.getInstance(&amp;quot;AES/ECB/NoPadding&amp;quot;);  </div><div class="line">                     <span class="keyword">byte</span>[] byteContent = content.getBytes(&amp;quot;utf-<span class="number">8</span>&amp;quot;);  </div><div class="line">                     cipher.init(Cipher.ENCRYPT_MODE, key);<span class="comment">// 初始化  </span></div><div class="line">                     <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);  </div><div class="line">                     <span class="keyword">return</span> result; <span class="comment">// 加密  </span></div><div class="line">             &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </div><div class="line">                     e.printStackTrace();  </div><div class="line">             &#125;  </div><div class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>这种加密方式有两种限制<br>密钥必须是16位的<br>待加密内容的长度必须是16的倍数，如果不是16的倍数，就会出如下异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">javax.crypto.IllegalBlockSizeException: Input length not multiple of <span class="number">16</span> bytes</div><div class="line">        at com.sun.crypto.provider.SunJCE_f.a(DashoA13*..)</div><div class="line">        at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)</div><div class="line">        at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)</div><div class="line">        at com.sun.crypto.provider.AESCipher.engineDoFinal(DashoA13*..)</div><div class="line">        at javax.crypto.Cipher.doFinal(DashoA13*..)</div></pre></td></tr></table></figure></p>
<p>要解决如上异常，可以通过补全传入加密内容等方式进行避免。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]日期字符串解析--SimpleDateFormat严格限制日期转换setLenient(false)]]></title>
      <url>http://yoursite.com/2015/03/25/%5B%E8%BD%AC%5D%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90--SimpleDateFormat%E4%B8%A5%E6%A0%BC%E9%99%90%E5%88%B6%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2setLenient(false)/</url>
      <content type="html"><![CDATA[<p><a href="http://wjlvivid.iteye.com/blog/2017955" target="_blank" rel="external">原文地址</a></p>
<p>输入“33/12/2011”，用SimpleDateFormat parse()方法,转化为Date(2012,01,02).这样处理相当“33/12/2011”是正常输入，如果需要”33/12/2011”报错，即把”33/12/2011”当作错误格式，刚开始自己写了段逻辑判断：</p>
<p>把转成的日期再反转回来，再比较是否一致，即使用format方法再转换成字符串，和传入的那个串作比较，如果不相等，则证明传入的那个日期格式是错误的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getDestDateStrFromSrcDateStr</span><span class="params">(String dateStr,</span></span></div><div class="line">        String srcDateFormat, String descDateFormat)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> SimpleDateFormat src_sdf = <span class="keyword">new</span> SimpleDateFormat(srcDateFormat);</div><div class="line">        <span class="keyword">final</span> Date date = src_sdf.parse(dateStr);</div><div class="line"></div><div class="line">        <span class="comment">//把转成的日期再反转回来，再比较是否一致</span></div><div class="line">        <span class="keyword">if</span> (srcDateFormat.length() != dateStr.length()</div><div class="line">                || !dateStr.equals(src_sdf.format(date)))</div><div class="line">        &#123;</div><div class="line">            LOGGER.error(&amp;quot;the src date format is &#123;&#125; , but input the date string value is &#123;&#125;, input illegal&amp;quot;,</div><div class="line">                    srcDateFormat,</div><div class="line">                    dateStr);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseMessageException(</div><div class="line">                    ErrorKeys.PAYMENT_AG_CONFIG_SERVICE_PARAM_VALIDATE_FAILED);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//把转成的date类型转换为目标格式日期字符串（yyyyMMdd)</span></div><div class="line">        <span class="keyword">final</span> SimpleDateFormat dest_sdf = <span class="keyword">new</span> SimpleDateFormat(</div><div class="line">                descDateFormat);</div><div class="line">        LOGGER.info(&amp;quot;the converted dest date str:&#123;&#125;&amp;quot;</div><div class="line">                + dest_sdf.format(date));</div><div class="line">        <span class="keyword">return</span> dest_sdf.format(date);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (java.text.ParseException e)</div><div class="line">    &#123;</div><div class="line">        LOGGER.error(&amp;quot;the src date format is &#123;&#125; , but input the date string value is &#123;&#125;, input illegal&amp;quot;,</div><div class="line">                srcDateFormat,</div><div class="line">                dateStr);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParseMessageException(</div><div class="line">                ErrorKeys.PAYMENT_AG_CONFIG_SERVICE_PARAM_VALIDATE_FAILED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总觉得这种方法显得很笨拙，后来找找API，发现有一个方法：setLenient(false)可以直接使用。哎~何必费这么大劲呢<br>测试方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</div><div class="line">		DateFormat format = <span class="keyword">new</span> SimpleDateFormat(&amp;quot;dd/MM/yyyy&amp;quot;);</div><div class="line">		format.setLenient(<span class="keyword">false</span>);</div><div class="line">		Date date = format.parse(&amp;quot;<span class="number">33</span>/<span class="number">12</span>/<span class="number">2011</span>&amp;quot;);</div><div class="line">		System.out.println(date);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下DateFormat的parse方法出现ParseException异常]]></title>
      <url>http://yoursite.com/2015/03/25/Linux%E4%B8%8BDateFormat%E7%9A%84parse%E6%96%B9%E6%B3%95%E5%87%BA%E7%8E%B0ParseException%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DateFormat.getInstance().parse(&amp;quot;<span class="number">2014</span>-<span class="number">01</span>-<span class="number">01</span> <span class="number">01</span>:<span class="number">01</span>:<span class="number">01</span>&amp;quot;);</div></pre></td></tr></table></figure>
<p>这句代码 放在windows下可以 在linux下就会有异常 </p>
<p>解决方法是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat.getInstance().parse(&amp;quot;<span class="number">2014</span>-<span class="number">1</span>-<span class="number">1</span> <span class="number">1</span>:<span class="number">1</span>:<span class="number">1</span>&amp;quot;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算两个日期相差的天数,Calendar用法]]></title>
      <url>http://yoursite.com/2015/03/22/%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%B7%AE%E7%9A%84%E5%A4%A9%E6%95%B0,Calendar%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**   </span></div><div class="line">     * 计算两个日期之间相差的天数   </div><div class="line">     * <span class="doctag">@param</span> date1   </div><div class="line">     * <span class="doctag">@param</span> date2   </div><div class="line">     * <span class="doctag">@return</span>   </div><div class="line">     */    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">daysBetween</span><span class="params">(Date date1,Date date2)</span>     </span></div><div class="line">    &#123;     </div><div class="line">        Calendar cal = Calendar.getInstance();     </div><div class="line">        cal.setTime(date1);     </div><div class="line">        <span class="keyword">long</span> time1 = cal.getTimeInMillis();                  </div><div class="line">        cal.setTime(date2);     </div><div class="line">        <span class="keyword">long</span> time2 = cal.getTimeInMillis();          </div><div class="line">        <span class="keyword">long</span> between_days=(time2-time1)/(<span class="number">1000</span>*<span class="number">3600</span>*<span class="number">24</span>);     </div><div class="line"></div><div class="line">       <span class="keyword">return</span> Integer.parseInt(String.valueOf(between_days));            </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.如何知道某个月有多少天？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDayByMonth</span><span class="params">(String datetime)</span></span>&#123;  </div><div class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();  </div><div class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat( &amp;quot;yyyy-MM&amp;quot;);   </div><div class="line">    Calendar calendar = <span class="keyword">new</span> GregorianCalendar();   </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        Date date = sdf.parse(datetime);  </div><div class="line">        calendar.setTime(date);   </div><div class="line">        <span class="keyword">int</span> day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  </div><div class="line">        <span class="keyword">if</span>(day &amp;lt; <span class="number">10</span>)&#123;  </div><div class="line">            buffer = buffer.append(&amp;quot;-&amp;quot;).append(&amp;quot;<span class="number">0</span>&amp;quot;).append(String.valueOf(day));  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">            buffer = buffer.append(&amp;quot;-&amp;quot;).append(String.valueOf(day));  </div><div class="line">        &#125;  </div><div class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;  </div><div class="line">        e.printStackTrace();  </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">return</span> buffer.toString();  </div><div class="line">&#125;  </div><div class="line">``` </div><div class="line"></div><div class="line"><span class="number">3</span>\. Calendar 的add用法：  </div><div class="line">add() 的功能非常强大，add 可以对 Calendar 的字段进行计算。如果需要减去值，那么使用负数值就可以了，如 add(field, -value)。  </div><div class="line"></div><div class="line">add() 有两条规则：  </div><div class="line"></div><div class="line">当被修改的字段超出它可以的范围时，那么比它大的字段会自动修正。如：  </div><div class="line">```java</div><div class="line">Calendar cal1 = Calendar.getInstance();  </div><div class="line">cal1.set(<span class="number">2000</span>, <span class="number">7</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span> , <span class="number">0</span>); <span class="comment">//2000-8-31  </span></div><div class="line">cal1.add(Calendar.MONTH, <span class="number">1</span>); <span class="comment">//2000-9-31 =&amp;gt; 2000-10-1，对吗？  </span></div><div class="line">System.out.println(cal1.getTime()); <span class="comment">//结果是 2000-9-30  </span></div><div class="line">[/java]</div><div class="line">另一个规则是，如果比它小的字段是不可变的（由 Calendar 的实现类决定），那么该小字段会修正到变化最小的值。  </div><div class="line"></div><div class="line">以上面的例子，<span class="number">9</span>-<span class="number">31</span> 就会变成 <span class="number">9</span>-<span class="number">30</span>，因为变化最小。  </div><div class="line"></div><div class="line">```java</div><div class="line">Calendar calendar = Calendar.getInstance();  </div><div class="line"><span class="comment">// 从一个 Calendar 对象中获取 Date 对象  </span></div><div class="line">Date date = calendar.getTime();  </div><div class="line">calendar.add(Calendar.DAY_OF_YEAR,<span class="number">2</span>);  </div><div class="line">System.out.println(&amp;quot;date=&amp;quot;+date);  </div><div class="line">System.out.println(calendar.getTime());  </div><div class="line"></div><div class="line">结果：  </div><div class="line">date=Thu Aug <span class="number">26</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">42</span> CST <span class="number">2010</span>  </div><div class="line">Sat Aug <span class="number">28</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">42</span> CST <span class="number">2010</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Spring 实现数据库读写分离]]></title>
      <url>http://yoursite.com/2015/03/22/%5B%E8%BD%AC%5DSpring%20%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/surge/p/3582248.html" target="_blank" rel="external">原文地址</a><br>现在大型的电子商务系统，在数据库层面大都采用读写分离技术，就是一个Master数据库，多个Slave数据库。Master库负责数据更新和实时数据查询，Slave库当然负责非实时数据查询。因为在实际的应用中，数据库都是读多写少（读取数据的频率高，更新数据的频率相对较少），而读取数据通常耗时比较长，占用数据库服务器的CPU较多，从而影响用户体验。我们通常的做法就是把查询从主库中抽取出来，采用多个从库，使用负载均衡，减轻每个从库的查询压力。</p>
<p>　　采用读写分离技术的目标：有效减轻Master库的压力，又可以把用户查询数据的请求分发到不同的Slave库，从而保证系统的健壮性。我们看下采用读写分离的背景。</p>
<p>　　随着网站的业务不断扩展，数据不断增加，用户越来越多，数据库的压力也就越来越大，采用传统的方式，比如：数据库或者SQL的优化基本已达不到要求，这个时候可以采用读写分离的策 略来改变现状。</p>
<p>　　具体到开发中，如何方便的实现读写分离呢?目前常用的有两种方式：</p>
<p>　　1 第一种方式是我们最常用的方式，就是定义2个数据库连接，一个是MasterDataSource,另一个是SlaveDataSource。更新数据时我们读取MasterDataSource，查询数据时我们读取SlaveDataSource。这种方式很简单，我就不赘述了。</p>
<p>　　2 第二种方式动态数据源切换，就是在程序运行时，把数据源动态织入到程序中，从而选择读取主库还是从库。主要使用的技术是：annotation，Spring AOP ，反射。下面会详细的介绍实现方式。</p>
<p>　　　在介绍实现方式之前，我们先准备一些必要的知识，spring 的AbstractRoutingDataSource 类</p>
<p>　　   AbstractRoutingDataSource这个类 是spring2.0以后增加的，我们先来看下AbstractRoutingDataSource的定义：</p>
<p>　　　　public abstract class AbstractRoutingDataSource extends AbstractDataSource implements InitializingBean  {}</p>
<p>　　  AbstractRoutingDataSource继承了AbstractDataSource ，而AbstractDataSource 又是DataSource 的子类。DataSource   是javax.sql 的数据源接口，定义如下：</p>
<p>[java]<br>public interface DataSource  extends CommonDataSource,Wrapper {</p>
<p>  /**</p>
<ul>
<li>&lt;p&gt;Attempts to establish a connection with the data source that</li>
<li>this &lt;code&gt;DataSource&lt;/code&gt; object represents.<br>*</li>
<li>@return  a connection to the data source</li>
<li><p>@exception SQLException if a database access error occurs<br>*/<br>Connection getConnection() throws SQLException;</p>
<p>/**</p>
</li>
<li>&lt;p&gt;Attempts to establish a connection with the data source that</li>
<li>this &lt;code&gt;DataSource&lt;/code&gt; object represents.<br>*</li>
<li>@param username the database user on whose behalf the connection is</li>
<li>being made</li>
<li>@param password the user’s password</li>
<li>@return  a connection to the data source</li>
<li>@exception SQLException if a database access error occurs</li>
<li>@since 1.4<br>*/<br>Connection getConnection(String username, String password)<br>throws SQLException;</li>
</ul>
<p>}<br>[/java]<br>　DataSource 接口定义了2个方法，都是获取数据库连接。我们在看下AbstractRoutingDataSource 如何实现了DataSource接口：<br>[java]<br>public Connection getConnection() throws SQLException {<br>        return determineTargetDataSource().getConnection();<br>    }</p>
<pre><code>public Connection getConnection(String username, String password) throws SQLException {
    return determineTargetDataSource().getConnection(username, password);
}
</code></pre><p>[/java]</p>
<p>很显然就是调用自己的determineTargetDataSource()  方法获取到connection。determineTargetDataSource方法定义如下：<br>[java]<br>protected DataSource determineTargetDataSource() {<br>        Assert.notNull(this.resolvedDataSources, &quot;DataSource router not initialized&quot;);<br>        Object lookupKey = determineCurrentLookupKey();<br>        DataSource dataSource = this.resolvedDataSources.get(lookupKey);<br>        if (dataSource == null &amp;&amp; (this.lenientFallback || lookupKey == null)) {<br>            dataSource = this.resolvedDefaultDataSource;<br>        }<br>        if (dataSource == null) {<br>            throw new IllegalStateException(&quot;Cannot determine target DataSource for lookup key [&quot; + lookupKey + &quot;]&quot;);<br>        }<br>        return dataSource;<br>    }<br>[/java]</p>
<p>　我们最关心的还是下面2句话：</p>
<p>　　  Object lookupKey = determineCurrentLookupKey();<br>        DataSource dataSource = this.resolvedDataSources.get(lookupKey);</p>
<pre><code>determineCurrentLookupKey方法返回lookupKey,resolvedDataSources方法就是根据lookupKey从Map中获得数据源。resolvedDataSources 和determineCurrentLookupKey定义如下：
</code></pre><p>　　private Map<object, datasource=""> resolvedDataSources;</object,></p>
<p>　　protected abstract Object determineCurrentLookupKey()</p>
<p>　　看到以上定义，我们是不是有点思路了，resolvedDataSources是Map类型，我们可以把MasterDataSource和SlaveDataSource存到Map中，如下：</p>
<p>　　　　key　　　　　　　　value</p>
<p>　　　　master　　           MasterDataSource</p>
<p>　　　　slave                  SlaveDataSource</p>
<p>　　我们在写一个类DynamicDataSource  继承AbstractRoutingDataSource，实现其determineCurrentLookupKey() 方法，该方法返回Map的key，master或slave。</p>
<p>　　好了，说了这么多，有点烦了，下面我们看下怎么实现。</p>
<p> 　　上面已经提到了我们要使用的技术，我们先看下annotation的定义：<br>[java]<br>@Retention(RetentionPolicy.RUNTIME)<br>@Target(ElementType.METHOD)<br>public @interface DataSource {<br>    String value();<br>}<br>[/java]</p>
<p>我们还需要实现spring的抽象类AbstractRoutingDataSource，就是实现determineCurrentLookupKey方法：<br>[java]<br>public class DynamicDataSource extends AbstractRoutingDataSource {</p>
<pre><code>@Override
protected Object determineCurrentLookupKey() {
    // TODO Auto-generated method stub
    return DynamicDataSourceHolder.getDataSouce();
}
</code></pre><p>}</p>
<p>public class DynamicDataSourceHolder {<br>    public static final ThreadLocal&lt;String&gt; holder = new ThreadLocal&lt;String&gt;();</p>
<pre><code>public static void putDataSource(String name) {
    holder.set(name);
}

public static String getDataSouce() {
    return holder.get();
}
</code></pre><p>}<br>[/java]</p>
<p> 从DynamicDataSource 的定义看出，他返回的是DynamicDataSourceHolder.getDataSouce()值，我们需要在程序运行时调用DynamicDataSourceHolder.putDataSource()方法，对其赋值。下面是我们实现的核心部分，也就是AOP部分，DataSourceAspect定义如下:<br>[java]<br>public class DataSourceAspect {</p>
<pre><code>public void before(JoinPoint point)
{
    Object target = point.getTarget();
    String method = point.getSignature().getName();

    Class&amp;lt;?&amp;gt;[] classz = target.getClass().getInterfaces();

    Class&amp;lt;?&amp;gt;[] parameterTypes = ((MethodSignature) point.getSignature())
            .getMethod().getParameterTypes();
    try {
        Method m = classz[0].getMethod(method, parameterTypes);
        if (m != null &amp;amp;&amp;amp; m.isAnnotationPresent(DataSource.class)) {
            DataSource data = m
                    .getAnnotation(DataSource.class);
            DynamicDataSourceHolder.putDataSource(data.value());
            System.out.println(data.value());
        }

    } catch (Exception e) {
        // TODO: handle exception
    }
}
</code></pre><p>}<br>[/java]</p>
<p>   为了方便测试，我定义了2个数据库，shop模拟Master库，test模拟Slave库，shop和test的表结构一致，但数据不同，数据库配置如下：<br>[java]<br>&lt;bean id=&quot;masterdataSource&quot;<br>        class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;<br>        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;<br>        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/shop&quot; /&gt;<br>        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;<br>        &lt;property name=&quot;password&quot; value=&quot;yangyanping0615&quot; /&gt;<br>    &lt;/bean&gt;</p>
<pre><code>&amp;lt;bean id=&amp;quot;slavedataSource&amp;quot;
    class=&amp;quot;org.springframework.jdbc.datasource.DriverManagerDataSource&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://127.0.0.1:3306/test&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;yangyanping0615&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

    &amp;lt;beans:bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.air.shop.common.db.DynamicDataSource&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;targetDataSources&amp;quot;&amp;gt;  
          &amp;lt;map key-type=&amp;quot;java.lang.String&amp;quot;&amp;gt;  
              &amp;lt;!-- write --&amp;gt;
             &amp;lt;entry key=&amp;quot;master&amp;quot; value-ref=&amp;quot;masterdataSource&amp;quot;/&amp;gt;  
             &amp;lt;!-- read --&amp;gt;
             &amp;lt;entry key=&amp;quot;slave&amp;quot; value-ref=&amp;quot;slavedataSource&amp;quot;/&amp;gt;  
          &amp;lt;/map&amp;gt;  

    &amp;lt;/property&amp;gt;  
    &amp;lt;property name=&amp;quot;defaultTargetDataSource&amp;quot; ref=&amp;quot;masterdataSource&amp;quot;/&amp;gt;  
&amp;lt;/beans:bean&amp;gt;

&amp;lt;bean id=&amp;quot;transactionManager&amp;quot;
    class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!-- 配置SqlSessionFactoryBean --&amp;gt;
&amp;lt;bean id=&amp;quot;sqlSessionFactory&amp;quot; class=&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;configLocation&amp;quot; value=&amp;quot;classpath:config/mybatis-config.xml&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
</code></pre><p>[/java]</p>
<p>在spring的配置中增加aop配置<br>[java]<br>&lt;!– 配置数据库注解aop –&gt;<br>    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;<br>    &lt;beans:bean id=&quot;manyDataSourceAspect&quot; class=&quot;com.air.shop.proxy.DataSourceAspect&quot; /&gt;<br>    &lt;aop:config&gt;<br>        &lt;aop:aspect id=&quot;c&quot; ref=&quot;manyDataSourceAspect&quot;&gt;<br>            &lt;aop:pointcut id=&quot;tx&quot; expression=&quot;execution(<em> com.air.shop.mapper.</em>.*(..))&quot;/&gt;<br>            &lt;aop:before pointcut-ref=&quot;tx&quot; method=&quot;before&quot;/&gt;<br>        &lt;/aop:aspect&gt;<br>    &lt;/aop:config&gt;<br>    &lt;!– 配置数据库注解aop –&gt;<br>[/java]</p>
<p>下面是MyBatis的UserMapper的定义，为了方便测试，登录读取的是Master库，用户列表读取Slave库<br>[java]<br>public interface UserMapper {<br>    @DataSource(&quot;master&quot;)<br>    public void add(User user);</p>
<pre><code>@DataSource(&amp;quot;master&amp;quot;)
public void update(User user);

@DataSource(&amp;quot;master&amp;quot;)
public void delete(int id);

@DataSource(&amp;quot;slave&amp;quot;)
public User loadbyid(int id);

@DataSource(&amp;quot;master&amp;quot;)
public User loadbyname(String name);

@DataSource(&amp;quot;slave&amp;quot;)
public List&amp;lt;User&amp;gt; list();
</code></pre><p>}<br>[/java]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate中使用count(*)取得表中记录总数]]></title>
      <url>http://yoursite.com/2015/03/11/Hibernate%E4%B8%AD%E4%BD%BF%E7%94%A8count%E5%8F%96%E5%BE%97%E8%A1%A8%E4%B8%AD%E8%AE%B0%E5%BD%95%E6%80%BB%E6%95%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种方法：</span></div><div class="line">  String hql = &amp;quot;<span class="function">select <span class="title">count</span><span class="params">(*)</span> from User as user&amp;quot</span>;;</div><div class="line">  Integer count = (Integer)getHibernateTemplate().find(hql).listIterator().next();</div><div class="line">  <span class="keyword">return</span> count.intValue();</div><div class="line"></div><div class="line"><span class="comment">//第二种方法：</span></div><div class="line"> String hql = &amp;quot;<span class="function">select <span class="title">count</span><span class="params">(*)</span> from User as user&amp;quot</span>;;</div><div class="line">  <span class="keyword">return</span> ((Integer)getHibernateTemplate().iterate(hql).next()).intValue();</div><div class="line"></div><div class="line"><span class="comment">//第三种方法：</span></div><div class="line"> String hql = &amp;quot;<span class="function">select <span class="title">count</span><span class="params">(*)</span> from User as user&amp;quot</span>;;</div><div class="line"> Query query =  getHibernateTemplate().createQuery( getSession(),hql);</div><div class="line"> <span class="keyword">return</span> ((Integer)query.uniqueResult()).intValue();</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]获得每日，每周，每月的0点和24点的时间戳]]></title>
      <url>http://yoursite.com/2015/03/05/%5B%E8%BD%AC%5D%E8%8E%B7%E5%BE%97%E6%AF%8F%E6%97%A5%EF%BC%8C%E6%AF%8F%E5%91%A8%EF%BC%8C%E6%AF%8F%E6%9C%88%E7%9A%840%E7%82%B9%E5%92%8C24%E7%82%B9%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      <content type="html"><![CDATA[<p><a href="http://chenp1111.iteye.com/blog/744259" target="_blank" rel="external">原文地址</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获得当天0点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesmorning</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>); </div><div class="line">cal.set(Calendar.SECOND, <span class="number">0</span>); </div><div class="line">cal.set(Calendar.MINUTE, <span class="number">0</span>); </div><div class="line">cal.set(Calendar.MILLISECOND, <span class="number">0</span>); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (cal.getTimeInMillis()/<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="comment">//获得当天24点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesnight</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(Calendar.HOUR_OF_DAY, <span class="number">24</span>); </div><div class="line">cal.set(Calendar.SECOND, <span class="number">0</span>); </div><div class="line">cal.set(Calendar.MINUTE, <span class="number">0</span>); </div><div class="line">cal.set(Calendar.MILLISECOND, <span class="number">0</span>); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (cal.getTimeInMillis()/<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="comment">//获得本周一0点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesWeekmorning</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(cal.get(Calendar.YEAR),cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>); </div><div class="line">cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (cal.getTimeInMillis()/<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="comment">//获得本周日24点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesWeeknight</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(cal.get(Calendar.YEAR),cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>); </div><div class="line">cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) ((cal.getTime().getTime()+ (<span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>))/<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="comment">//获得本月第一天0点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesMonthmorning</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(cal.get(Calendar.YEAR),cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>); </div><div class="line">cal.set(Calendar.DAY_OF_MONTH,cal.getActualMinimum(Calendar.DAY_OF_MONTH)); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (cal.getTimeInMillis()/<span class="number">1000</span>); </div><div class="line">&#125; </div><div class="line"><span class="comment">//获得本月最后一天24点时间 </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTimesMonthnight</span><span class="params">()</span></span>&#123; </div><div class="line">Calendar cal = Calendar.getInstance(); </div><div class="line">cal.set(cal.get(Calendar.YEAR),cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>); </div><div class="line">cal.set(Calendar.DAY_OF_MONTH,cal.getActualMaximum(Calendar.DAY_OF_MONTH)); </div><div class="line">cal.set(Calendar.HOUR_OF_DAY, <span class="number">24</span>); </div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (cal.getTimeInMillis()/<span class="number">1000</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中Date,Calendar,Timestamp的区别以及相互转换与使用]]></title>
      <url>http://yoursite.com/2015/03/05/Java%E4%B8%ADDate,Calendar,Timestamp%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>1 Java.util.Date<br>包含年、月、日、时、分、秒信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String转换为Date</span></div><div class="line">String dateStr=&amp;quot;<span class="number">2013</span>-<span class="number">8</span>-<span class="number">13</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">23</span>&amp;quot;;</div><div class="line">String pattern=&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;;</div><div class="line">DateFormate dateFormat=<span class="keyword">new</span> SimpleDateFormat(pattern);</div><div class="line">Date date=dateFormat.parse(dateStr);</div><div class="line">date=dateFormat.format(date);</div></pre></td></tr></table></figure></p>
<p>2 Java.sql.Date<br>包含年、月、日信息。<br>继承自java.util.Date。在数据库相关操作中使用，如rs.getDate，ps.setDate等。rs是指ResultSet，ps是指PreparedStatement。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Date转换为java.sql.Date</span></div><div class="line"><span class="keyword">new</span> java.sql.Date(utilDate.getTime());<span class="comment">// 其中utilDate为java.util.Date类型的对象</span></div></pre></td></tr></table></figure></p>
<p>3 Java.util.Calendar<br>包含年、月、日、时、分、秒、毫秒信息。<br>JDK1.1引入，用以代替java.util.Date。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Date转为Calendar</span></div><div class="line">Date date=<span class="keyword">new</span> Date();</div><div class="line">Calendar calendar=Calendar.getInstance();</div><div class="line">calendar.setTime(date);</div><div class="line"><span class="comment">// Calendar转为Date</span></div><div class="line">Calendar ca=Calendar.getInstance();  </div><div class="line">Date d =(Date) ca.getTime();</div></pre></td></tr></table></figure></p>
<p>4 Java.sql.Timestamp<br>包含年、月、日、时、分、秒、纳秒（nano）信息。<br>继承自java.util.Date。比java.sql.Date包含更多信息。在数据库相关操作中使用，如rs.getTimestamp，ps.setTimeStamp等。例如：若数据库中某字段hireDate为Oracle的Date类型，则使用getTimestamp时能够将年、月、日、时、分、秒信息取出；但使用getDate时则只能取出年、月、日信息。因此，一般推荐使用getTimestamp。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Calendar转换为java.sql.Timestamp</span></div><div class="line"><span class="keyword">new</span> Timestamp(Calendar.getInstance().getTimeInMillis());</div><div class="line"><span class="comment">// java.util.Date转换为java.sql.Timestamp</span></div><div class="line"><span class="keyword">new</span> Timestamp(date.getTime());</div><div class="line"><span class="comment">// String转换为java.sql.Timestamp，String格式：yyyy-mm-dd hh:mm:ss[.f...] ，方括号表示可选</span></div><div class="line">Timestamp.valueOf(&amp;quot;<span class="number">2013</span>-<span class="number">07</span>-<span class="number">06</span> <span class="number">01</span>:<span class="number">49</span>:<span class="number">30</span>&amp;quot;);</div></pre></td></tr></table></figure></p>
<p>5 Oracle数据库提供的日期和时间类型<br>Oracle数据库提供了DATE，TIMESTAMP，TIMESTAMP WITH TIME ZONE和TIMESTAMP WITH LOCAL TIME ZONE四种类型。<br>DATE包含世纪、年、月、日、时、分、秒信息。<br>TIMESTAMP是DATE的扩展，包含年、月、日、时、分、秒和fractional seconds信息。定义TIMESTAMP的格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TIMESTAMP [(fractional_seconds_precision)]</div><div class="line"><span class="comment">// 格式</span></div><div class="line">TIMESTAMP <span class="string">'YYYY-MM-DD HH24:MI:SS.FF'</span></div><div class="line"><span class="comment">// 一个例子</span></div><div class="line">TIMESTAMP <span class="string">'1997-01-31 09:26:50.12'</span></div></pre></td></tr></table></figure></p>
<p>其中fractional_seconds_precision是可选的，用于指定秒使用含几位小数的浮点数表示，它的取值范围是0到9，默认是6。上述例子中表示采用两位小数，它的秒值是50.12。注意：12不是毫秒值，也不是微秒值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java日期前推一个月]]></title>
      <url>http://yoursite.com/2015/03/05/Java%E6%97%A5%E6%9C%9F%E5%89%8D%E6%8E%A8%E4%B8%80%E4%B8%AA%E6%9C%88/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">计算离当前日期之前或之后任意天的日期 </div><div class="line"><span class="comment">/** </span></div><div class="line">* 日期计算 </div><div class="line">* </div><div class="line">* <span class="doctag">@author</span> zhangmingxue </div><div class="line">* </div><div class="line">*/ </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeDateUtils</span> </span>&#123; </div><div class="line">  <span class="comment">/** </span></div><div class="line">   * 计算出离当前日期datas天的日期,若datas小于0表示当前日期之前datas天，若datas大于0表当前日期之后datas天 </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> 要计算的天数 </div><div class="line">   * <span class="doctag">@return</span> 得到日期 </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">(<span class="keyword">int</span> datas)</span> </span>&#123; </div><div class="line">    GregorianCalendar calendar = <span class="keyword">new</span> GregorianCalendar(); </div><div class="line">    calendar.add(GregorianCalendar.DATE, datas); </div><div class="line">    String begin = <span class="keyword">new</span> java.sql.Date(calendar.getTime().getTime()).toString(); </div><div class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(&amp;quot;yyyy-MM-dd&amp;quot;); </div><div class="line">    Date beginDate = <span class="keyword">null</span>; </div><div class="line">    <span class="keyword">try</span> &#123; </div><div class="line">      beginDate = sdf.parse(begin); </div><div class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123; </div><div class="line">      e.printStackTrace(); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> beginDate; </div><div class="line">  &#125; </div><div class="line"></div><div class="line">  <span class="comment">/** </span></div><div class="line">   * 计算出离beginDate日期datas天的日期,若datas小于0表示当前日期之前datas天，若datas大于0表当前日期之后datas天 </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> 要计算的天数 </div><div class="line">   * <span class="doctag">@return</span> 得到日期 </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">(Date beginDate, <span class="keyword">int</span> datas)</span> </span>&#123; </div><div class="line">    Calendar beginCal=Calendar.getInstance(); </div><div class="line">    beginCal.setTime(beginDate); </div><div class="line">    GregorianCalendar calendar = <span class="keyword">new</span> GregorianCalendar(beginCal.get(Calendar.YEAR),beginCal.get(Calendar.MONTH),beginCal.get(Calendar.DATE));</div><div class="line">    calendar.add(GregorianCalendar.DATE, datas); </div><div class="line">    String begin = <span class="keyword">new</span> java.sql.Date(calendar.getTime().getTime()).toString(); </div><div class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(&amp;quot;yyyy-MM-dd&amp;quot;); </div><div class="line">    Date endDate = <span class="keyword">null</span>; </div><div class="line">    <span class="keyword">try</span> &#123; </div><div class="line">      endDate = sdf.parse(begin); </div><div class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123; </div><div class="line">      e.printStackTrace(); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> endDate; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典算法题（五）——时针 分针重合]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E6%97%B6%E9%92%88%20%E5%88%86%E9%92%88%E9%87%8D%E5%90%88/</url>
      <content type="html"><![CDATA[<p>1、<br>时针旋转1周，即12小时内，时针和分针重合了11次，且连续两次重合相隔的时间相同；<br>所以可计算：60*12/11 = 720/11（分钟）<br>即：下次重合的时间是 1 点 60/11 分 ；<br>最少经过 720/11 分钟，时针和分针就能重合一次。</p>
<p>2、<br>还能解决的问题，如：<br>最少经过多长时间，时针和分针就能在同一直线上一次。<br>连续两次重合过程中，时针和分针在同一直线上的情况出现两次，夹角分别是0°和180°；<br>所以可求得：最少经过 360/11 分钟，时针和分针就能在同一直线上一次。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[百度笔试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%99%BE%E5%BA%A6%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1，当前计算机系统一般会采用层次结构存储数据，请介绍下典型计算机存储系统一般分为哪几个层次，为什么采用分层存储数据能有效提高程序的执行效率？（10分）</p>
<p>所谓存储系统的层次结构，就是把各种不同存储容量、存取速度和价格的存储器按层次结构组成多层存储器，并通过管理软件和辅助硬件有机组合成统一的整体，使所存放的程序和数据按层次分布在各种存储器中。目前，在计算机系统中通常采用三级层次结构来构成存储系统，主要由高速缓冲存储器Cache、主存储器和辅助存储器组成。<br>存储系统多级层次结构中，由上向下分三级，其容量逐渐增大，速度逐级降低，成本则逐次减少。整个结构又可以看成两个层次：它们分别是主存一辅存层次和cache一主存层次。这个层次系统中的每一种存储器都不再是孤立的存储器，而是一个有机的整体。它们在辅助硬件和计算机操作系统的管理下，可把主存一辅存层次作为一个存储整体，形成的可寻址存储空间比主存储器空间大得多。由于辅存容量大，价格低，使得存储系统的整体平均价格降低。由于Cache的存取速度可以和CPU的工作速度相媲美，故cache一主存层次可以缩小主存和cPu之间的速度差距，从整体上提高存储器系统的存取速度。尽管Cache成本高，但由于容量较小，故不会使存储系统的整体价格增加很多。<br>综上所述，一个较大的存储系统是由各种不同类型的存储设备构成，是一个具有多级层次结构的存储系统。该系统既有与CPU相近的速度，又有极大的容量，而成本又是较低的。其中高速缓存解决了存储系统的速度问题，辅助存储器则解决了存储系统的容量问题。采用多级层次结构的存储器系统可以有效的解决存储器的速度、容量和价格之间的矛盾。<br>2，Unix/Linux系统中僵尸进程是如何产生的？有什么危害？如何避免？(10分)</p>
<p>一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程（Zombie）的数据结构（系统调用exit，它的作用是使进程退出，但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁）。<br>在Linux进程的状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有任何内存空间。它需要它的父进程来为它收尸，如果他的父进程没安装SIGCHLD信号处理函数调用wait或waitpid()等待子进程结束，又没有显式忽略该信号，那么它就一直保持僵尸状态，如果这时父进程结束了，那么init进程自动会接手这个子进程，为它收尸，它还是能被清除的。但是如果如果父进程是一个循环，不会结束，那么子进程就会一直保持僵尸状态，这就是为什么系统中有时会有很多的僵尸进程。</p>
<p>避免zombie的方法：<br>1)在SVR4中，如果调用signal或sigset将SIGCHLD的配置设置为忽略,则不会产生僵死子进程。另外,使用SVR4版的sigaction,则可设置SA_NOCLDWAIT标志以避免子进程 僵死。<br>Linux中也可使用这个，在一个程序的开始调用这个函数 signal(SIGCHLD,SIG_IGN);<br>2)调用fork两次。<br>3)用waitpid等待子进程返回.</p>
<p>3，简述Unix/Linux系统中使用socket库编写服务器端程序的流程，请分别用对应的socket通信函数表示(10分)</p>
<p>TCP socket通信<br>服务器端流程如下：<br>1.创建serverSocket<br>2.初始化 serverAddr（服务器地址）<br>3.将socket和serverAddr 绑定 bind<br>4.开始监听 listen<br>5.进入while循环，不断的accept接入的客户端socket，进行读写操作write和read<br>6.关闭serverSocket<br>客户端流程：<br>1.创建clientSocket<br>2.初始化 serverAddr<br>3.链接到服务器 connect<br>4.利用write和read 进行读写操作<br>5.关闭clientSocket</p>
<p>这个列表是一个Berkeley套接字API库提供的函数或者方法的概要：<br>socket() 创建一个新的确定类型的套接字，类型用一个整型数值标识，并为它分配系统资源。<br>bind() 一般用于服务器端，将一个套接字与一个套接字地址结构相关联，比如，一个指定的本地端口和IP地址。<br>listen() 用于服务器端，使一个绑定的TCP套接字进入监听状态。<br>connect() 用于客户端，为一个套接字分配一个自由的本地端口号。 如果是TCP套接字的话，它会试图获得一个新的TCP连接。<br>accept() 用于服务器端。 它接受一个从远端客户端发出的创建一个新的TCP连接的接入请求，创建一个新的套接字，与该连接相应的套接字地址相关联。<br>send()和recv(),或者write()和read(),或者recvfrom()和sendto(), 用于往/从远程套接字发送和接受数据。<br>close() 用于系统释放分配给一个套接字的资源。 如果是TCP，连接会被中断。<br>gethostbyname()和gethostbyaddr() 用于解析主机名和地址。<br>select() 用于修整有如下情况的套接字列表： 准备读，准备写或者是有错误。<br>poll() 用于检查套接字的状态。 套接字可以被测试，看是否可以写入、读取或是有错误。<br>getsockopt() 用于查询指定的套接字一个特定的套接字选项的当前值。<br>setsockopt() 用于为指定的套接字设定一个特定的套接字选项。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典算法题（四）——利用 p, 1-p 随机数发生器知道等概率发生器]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20p,%201-p%20%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%8F%91%E7%94%9F%E5%99%A8%E7%9F%A5%E9%81%93%E7%AD%89%E6%A6%82%E7%8E%87%E5%8F%91%E7%94%9F%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>已有一个随机数发生器，生成0的概率为p,生成1的概率为1-p，求如何利用这个随机数发生器制作一个生成1~n的概率都是 1/n 的发生器</p>
<p>制作 1 2 发生概率都是 1 / 2 的发生器，连续发生2次，则发生00,11的概率为p*p,(1-p)(1-p),发生10,01的概率都为p(1-p),在发生10时返回1，发生01时返回2，则发生1，2的概率相等</p>
<p>制作 1 2 3 发生概率都是 1 / 3的发生器，连续发生3次，则发生001,010,100的概率都为p<em>p</em>(1-P),或者是110,101,011概率都为p<em>(1-p)</em>(1-p),则用001,010,100分别对应1,2,3返回，即可使得发生1,2,3的概率都为1/3</p>
<p><span style="color: #111111; font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21.0599994659424px; white-space: pre-wrap;"> </span></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典算法题（三）——Catalan数列]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Catalan%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p>1.四个人过河，用时间分别为1，2，5，10，最多只能两个人同时过河，且过河需要手电筒（只有一个），问怎样才能最快过河2.有一个函数intf(intn)，编写代码检测它是不是总是输出03.25匹马比赛，5匹马为一组，如何最快的比赛得到速度最快的前三名马，需要几次（无法计时，假设一马匹的速度保持不变）4，用两个栈模拟队列先进先出，模拟其add和romve功能，给出思路和代码<br>5.一景区需要门票5元，售票员没有零钱，假设这一天会来2N个人，其中N个人会给5元钱，N个人给10元，问所有人都不需要等待的概率是多少<br>属于卡特兰数列问题：<br>h(n)=C(2n,n)/(n+1)(n=0,1,2,…)（其前几项为:1,1,2,5,14,42,132,429,1430）<br>解：下列问题都是Catalan数列:<br>1.有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n人只有10元钞票，剧院无其它钞票，问有多少中方法使得只要有10元的人买票，售票处就有5元的钞票找零？2.一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街区去上班。如果他从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路<br>3.在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数?<br>4.n个结点可够造多少个不同的二叉树?<br>5.一个栈(无穷大)的进栈序列为1,2,3,..n,有多少个不同的出栈序列?</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[美团面试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1、Linux进程间的通信方式？两个进程是如何来共享内存的？两个进程如何通过信号量通信？<br>（1）Linux下进程间通信的方式有： 管道(有名/无名) 、消息、信号、信号量、共享内存、邮箱、socket。<br>（2）Linux下共享内存是进程间通信的方式之一，共享内存允许两个或多个进程访问同一块内存，比如像 malloc函数 向不同的进程返回执行同一块物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其他拥有这块物理内存指针的进程也会察觉到这个更改。在进程间的通信方式中，共享内存是通信效率最高的，访问共享内存区域和访问进程独有的内存区域一样快，并不需要通过系统调用或者其他通过内核的过程来完成，同时也避免了各种不必要的复制。对共享内存的操作涉及到多个进程间的同步问题，数据应该先写，在读，通常采用用信号量来协调这个过程。</p>
<p>进程与线程的区别？回答方式：<br>线程是进程中的一个逻辑执行单元，也是进程中可调度的实体；一个进程中可以包含多个线程，但是一个线程只能隶属于一个进程<br>与进程的区别：<br>1、CPU调度方面：CPU调度是以线程为基本单位进行的；<br>2、拥有资源方面：进程是拥有资源的基本单位，线程不拥有系统的资源，但是可以使用隶属于进程的资源；<br>3、并发方面： 线程 和 进程都支持并发；<br>4、系统开销方面： 创建进程的时候需要为进程分配资源，销毁进程时需要回收资源，所以使用进程的开销要大于使用线程的开销。</p>
<p>进程控制块?<br>操作系统通过进程控制块来对进程控制和管理的。PCB通常在系统内存中占用一块连续的分区，它存放着操作系统用于描述进程情况以及控制进程运行情况所需的全部信息，<br>为什么要CPU调度？<br>CPU调度的目标是在任何时候都有某些进程在运行，是CPU使用率最大化。 同一时刻 只有一个进程占有CPU资源，但一个进程在等待IO时等等一些阻塞进程的动作时，CPU就回空闲出来，这时候，我们应该让这个阻塞的进程让出CPU资源，让其他已经处于就绪状态的进程执行。这样就可以使CPU使用率最大化。<br>什么是死锁？<br>在多道程序环境下，多个进程可能竞争一定数量的资源，某个进程申请资源，如果这时这个资源不可用，那么这个进程就进入等待状态。如果所申请的资源被其他等待进程占有，那么该等待进程可能再也无法改变其状态，一直等待下去，这种情况称之为 死锁。</p>
<p>cache的作用？<br>cache是处于 CPU寄存器 和 内存之间的一层缓存，用来加快CPU的取指速率， 使用时： CPU需要数据时，首先会查找cache中有没有需要的数据，如果有，则取走，如果没有，则查询内存，并将数据更新到缓存中，以供下次取指。</p>
<p>2、DNS (Domain name system)域名系统，简单描述其工作原理。<br>DNS客户机需要在程序中使用名称时，它会查询DNS服务器来解析该名称。客户机发送的每条查询信息包括三条信息：包括：指定的DNS域名，指定的查询类型，DNS域名指定的类别。它是基于UDP的服务，端口是53，该应用一般不直接为用户使用，而是为其他应用服务 如 HTTP、SMTP等在其中需要完成主机名到IP地址转换。</p>
<p>在浏览器地址栏内敲 <a href="http://www.baidu.com/" target="_blank" rel="external">www.baidu.com</a> 到这个页面显示在浏览器上，这个过程中都发生了什么？<br>（1） 当我们在浏览器上敲入一个url是， 浏览器会解析出该url的域名，接下来的动作，是将域名转化为 ID 地址，依次查询 浏览器DNS缓存、系统缓存、路由器缓存、如果没有找到 则一直查询到 根域名服务器缓存，找到域名所对应的的 IP地址。<br>（2）向IP所对应的的服务器发送请求数据，<br>（3）服务器响应请求，发回网页内容；<br>（4）客户端浏览器获取网页内容，解析，并显示在浏览器上。<br>这就是我们所看到的的 百度页面显现的过程。</p>
<p>3、TCP/UDP的区别？<br>（1）TCP是面向连接的、可靠数据传输协议，UDP是不面向连接的，非可靠数据传输协议；（2） 从传输速度上考虑： TCP 由于要建立连接、保证数据传输的可靠性等造成数据传输速度比较慢，UDP不需要这些，数据传输速度相对比较快；（3）从安全方面考虑，TCP的安全性能更高，UDP的安全性能比较低 （4）从传输数据的格式来比较，TCP传输的单位称为报文段，UDP传输的数据单位被称为 数据报<br>4、ICMP协议<br>ICMP (Internet Control Message Protocol) ，因特网控制消息协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传输控制消息。控制消息包括：网络不同、主机是否可达、路由器是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但对用户数据的传递起着很重要的作用。ICMP报文格式两种： 差错报告报文和询问报文。</p>
<p>5、数据库<br>数据库 一个 逻辑执行单元 如何才能被称的上是一个事务？ 必须满足的性质？<br>数据库的事务是指 一个逻辑单元，这个逻辑单元可包含一系列的执行操作， 一个逻辑单元要想成为一个事务，必须满足所谓的 ACID （原子性、隔离性、一致性、持久性）；<br>原子性：指的是 一个事务执行，要么全部执行成功，要么执行失败回滚到执行之前的状态；<br>一致性：事务执行过后，数据库中数据的状态都必须是一致的，必须遵从数据库的完整性约束；<br>隔离性：对于多个事务并发的时候，<br>持久性： 事务的完成后对系统的影响是持久的，任何一个事务的操作不会对其他事务造成干扰；比如一个事务在读数据库，一个事务在写数据库，读数据库的这个事务读到的数据，要么是这个写数据库事务 写前的状态，要么为写后的状态，不存在 读到的数据是 另一个事务写的过程中的一个状态。<br>数据库索引？</p>
<p>6、内存管理<br>内存的段页式管理的优缺点？<br>分段：<br>在段式存储管理中，将程序的地址空间（进程地址空间）划分为若干个段(segment)，这样每个进程都有一个二维的地址空间，相互独立，互不干扰。程序通过分段来划分为多个模块，如代码段、数据段、共享段等，这样做的优点是：可以分别编译源程序的一个文件，并且可以针对不同类型的段采取不同的保护，也可以按段为单位进行共享。段式存储管理的优点是：没有内碎片，外碎片可以通过内存紧缩来消除，便于实现内存共享。</p>
<p>分页：将程序的逻辑地址空间划分为固定大小的页 (page)，而物理内存划分为同样大小的页框(pageframe)。程序加载时，可以将任意一页放入内存中的任意一个页框，这些页框不必连续，从而实现了离散分配。这种管理的优势是：没有外碎片，且一个程序不必连续存放，这样就便于更改程序占用的空间大小。<br>页式 和 段式系统有许多相似之处，比如，两者都采用离散的分配方式，都通过地址映射机构来实现地址变换。但概念上两者是有很多区别的，主要表现在：<br>[1]、页是信息的物理单位， 段是信息的逻辑单位，每个逻辑单元分为一个段。<br>[2]、页大小固定由系统决定，把逻辑地址划分为页号和页内地址两部分，段的长度不固定，且决定于用户编写的程序<br>[3]、页式系统地址空间是一维的，即为单一的线性地址空间，程序员只需利用一个标识符，即可表示一个地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。<br><a href="http://dongxicheng.org/os/linux-memory-management-basic/" target="_blank" rel="external">http://dongxicheng.org/os/linux-memory-management-basic/</a></p>
<p>内存：<br>（1）虚拟内存： 计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续可用的内存（一块连续完整的地址空间），而实际上，他/她通常被分割成多个物理内存碎片，还有部分占时存储在外部磁盘存储器上，在需要时进行交换数据。与没有虚拟内存技术的系统相比，使用这种技术的系统使得大型程序编写变得更容易，对真正的物理内存使用的更有效率。<br>（2）物理内存：实际的内存，物理地址被分成离散的单元，称为页，页面大小是跟操作系统的位数有关系，一般为4K</p>
<p>7、程序内存分区<br>5个分区：<br>堆区：用户在这进行动态内存分配区，<br>栈区：系统自动分配，自动回收，速度快，效率高，但是栈区比较小，小心 栈溢出<br>全局区： 存储全局变量和静态变量，<br>文字常量区：常量字符串就存储在这，程序结束后，由系统同一释放。<br>程序代码区：存放程序的二进制代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典算法题（二）——中序表达式转化成为逆波兰表达式]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E4%B8%AD%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%8C%96%E6%88%90%E4%B8%BA%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>一个中序表达式转化成为逆波兰表达式的方法其实很简单，也是一个成型的算法。通过逆波兰表达式求一个计算式子的值，也是很简单的，只要遇到过会用就行了。</p>
<p>1、将一个中序表达式转化成为逆波兰表达式。</p>
<p>首先维护的是两个栈，我们这里暂且称为S1和S2，S1中的结果最后存的就是逆波兰表达式，S2中将用于暂时存放运算符并且在最终形成逆波兰表达式的时候，该栈是会清空的。下面我们看看怎样具体的形成逆波兰表达式。</p>
<p>在此首先定义一下运算符的优先级关系，从小到达排序，相同优先级没有用逗号隔开：（，+-，*\，负号，）。</p>
<p>从左至右遍历一个给定的中序表达式，也就是我们常规的数学计算的表达式。</p>
<p>（1）如果遇到的是数字，我们直接加入到栈S1中；</p>
<p>（2）如果遇到的是左括号，则直接将该左括号加入到栈S2中；</p>
<p>（3）如果遇到的是右括号，那么将栈S2中的运算符一次出栈加入到栈S1中，直到遇到左括号，但是该左括号出栈S2并不加入到栈S1中；</p>
<p>（4）如果遇到的是运算符，包括单目运算符和双目运算符，我们按照下面的规则进行操作：</p>
<p>（1）如果此时栈S2为空，则直接将运算符加入到栈S2中；</p>
<p>（2）如果此时栈S2不为空，当前遍历的运算符的优先级大于等于栈顶运算符的优先级，那么直接入栈S2；</p>
<p>（3）如果此时栈S2不为空，当前遍历的运算符的优先级小于栈顶运算符的优先级，则将栈顶运算符一直出栈加入到栈S1中，直到栈为空或者遇到一个运算符的优先级小于等于当前遍历的运算符的优先级，此时将该运算符加入到栈S2中；</p>
<p>（5）直到遍历完整个中序表达式之后，栈S2中仍然存在运算符，那么将这些运算符依次出栈加入到栈S1中，直到栈为空。</p>
<p>按照上面的五条操作反复进行完成，那么栈S1中存放的就是逆波兰表达式。</p>
<p>2、利用逆波兰表达式求值</p>
<p>利用逆波兰表达式求计算式的值其实很简单，正式因为这一点，所以逆波兰表达式才在编译原理中被用于计算一个表达式的值。</p>
<p>下面来具体看看如何求一个逆波兰表达式的值：</p>
<p>我们此时维护一个数据结果栈S3，我们将会看到该栈中最后存放的是最终的表达式的值。我们从左至右的遍历栈S1，然后按照下面的规则进行操作栈S3.</p>
<p>（1）如果遇到的是数字，那么直接将数字压入到S3中；</p>
<p>（2）如果遇到的是单目运算符，那么取S3栈顶的一个元素进行单目运算之后，将结果再次压入到栈S3中；</p>
<p>（3）如果遇到的是双目运算符，那么取S3栈顶的两个元素进行，首先出栈的在左，后出栈的在右进行双目运算符的计算，将结果再次压入到S3中。</p>
<p>按照上面的三个规则，遍历完整个栈S1，那么最后S3中的值就是逆波兰表达式的值了，所以我们可以看出来使用逆波兰表达式进行求值是很简单的，只有两种操作要么是直接压栈，要么是运算之后将结果压栈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微策略智力题]]></title>
      <url>http://yoursite.com/2015/03/04/%E5%BE%AE%E7%AD%96%E7%95%A5%E6%99%BA%E5%8A%9B%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1、如果有三个房间，分别有三个人，编号为1、2、3，需要你选出个子最高的人（目测就能看出来），但是有个条件，当你看完1号房间的人后，你要决定是否看2号房间的人，一旦看了，就只能选2号房以后的人，既2号或3号，同理，看完2号房，如果想看3号房，就只能选3了，问题是，使用怎样的策略可以是你选到身高最高的人的概率最大，这个概率是多少。<br>答：分三种情况，全部看，看两个，看一个。一，三情况都是1/3，二是1/2. 即先看两个，然后挑高的和第三个之中选一个，成功概率是1/2，概率最大。</p>
<p>2、有两个沙漏，当把开关打开，沙漏里的沙子会从一头留到另一头里，转过来又会留回来，第一个沙漏从打开到把里面的沙子全部流入到下面花7分钟，第二个花4分钟，问如何准确度量出9分钟（注意，和两个水桶准确量出N桶水的题目不一样）</p>
<p>答：21（7<em>3）-12（4</em>3）=9</p>
<p>3、3：15时，时针分针成几度，引申题目，H：M时，成几度</p>
<p>答：四种情况，锐角，钝角，0度和180度分别考虑。</p>
<p>4、四个人过河，分别过用1，2，5，10分钟，每次只能过两个人，同时要有人把手电筒送回来，问最短多长时间能过去，引申题目，四个人分别用时间ta，tb，tc，td，并且满足Ta&lt;Tb&lt;Tc&lt;Td，怎么过河</p>
<p>答：（Tb+Ta）+（Tc+Ta）+Td</p>
<p>5、ABC-CBA=CAB，问A，B，C分别代表哪个数字，具体式子可能记错了，但是大概题目就是这样。</p>
<p>6、第一题：有三种颜色的球，红色13个，绿色16个，黄色 17个，有一个方法可以使球变色，拿出两个不同颜色的球，就能变成第三种颜色，如拿出一个红色，一个黄色，就会变成两个绿色的球。问有没有可能把这些球变成同一种颜色，如果可能，怎么做，如果不可能，为什么。引申，x个红球，y个绿球，z个黄球，当x，y，z满足什么关系时，一定有解决方案，否则无解。</p>
<p>答：取一黄一绿，变红，则红球数=绿球数，最后全部变成黄球。。只有当其中两项之差必须为三的倍数，且第三项数不小于倍数的大小，否则无解。</p>
<p>7、两个骰子，扔10次，至少有一次点数为12的概率是多少，引申，M个骰子，扔N次，至少有一次点数为6*M的概率是多少。</p>
<p>答：1-(35/36)^10, 1-(1-(1/6)^M)^N</p>
<p>8、三个baskets, 一个里面装满oranges,一个里面装满apples,一个里面装的是oranges+apples。三个baskets外面都贴有label，但是label都是错的。让你只从一个篮子里面拿一个水果，怎么判断三个baskets里面装的是什么</p>
<p>答：取出来两种情况：AOO或AOA进行分析</p>
<p>9、一个5 gallons buckets 一个3gallons buckets，如何如何取得4gallons water.8 y7 D, w3 `- [( P&amp; w&amp; I( m</p>
<p>答：2<em>（5-3）=4<br>10、有四张牌,牌的一面分别的E G 4 5，如果说牌的一面是元音字母,那个另一面是偶数,要验证这条原则是不是正确. o8 E7 v0 E% c# j</em> ^应该翻开哪张牌? 提示元音是EOAIU.</p>
<p>答：</p>
<p>11、一个立方体 六面涂了颜色,将它分成1000个小立方体,问至少有两面涂有颜色的小立方体有多少个。</p>
<p>答：1000-8×8×14=104</p>
<p>12、小船过河 有两组人三个M 三个C (单词不认识hoho) 小船最多可以载两个人,原则是河一边的M的人数不能多于另一边C人数</p>
<p>答：1、MM，2、C，3、CC，4、M</p>
<p>13、题目比较长,主要是说有个检验三个数是不是可以构成三角形的函数,每个选项中分别有四组数,问哪个选项中的几组数可以最好的检验这个函数</p>
<p>14、a b c 9 1 3</p>
<p>d 8</p>
<p>e f g 4 7 2</p>
<p>h 5</p>
<p>i 6</p>
<p>这9个字母分别唯一的表示1到9中的数字,且每行和每列的三个数之和为132 N4 h( Z! Z: i4 G F9 S’ M! e问c+e+g=? 14</p>
<p>14、有50个球，你和你的对手轮流取，你先开始，每次最多取6个，最少取1个，问你怎么可以保证自己一定可以得到最后一个球。</p>
<p>答：1+7×7，先拿一个，之后每次取对手个数x的7-x个。</p>
<p>13、有那么一堆牌：</p>
<p>方块 A Q 5</p>
<p>草花 2 4 7 8 J Q K</p>
<p>黑桃 4 5 9</p>
<p>红星 A 4</p>
<p>Jack从中抽了一张牌，把花色告诉了Tom，把字母告诉了Tracy</p>
<p>然后Tracy说：”I don’t know what the card is ！”</p>
<p>Tom说：”I knew it before you told me！”</p>
<p>接着Tracy又说：”Now I know！”</p>
<p>Tom又说：”I know it too！”</p>
<p>问这张牌是什么？</p>
<p>答：第一句：说明数字是重复的，第二句说明在只有重复数字的花色里，不再两个</p>
<p>14、5个囚犯，分别按1-5号在装有100颗绿豆的麻袋抓绿豆，规定每人至少抓一颗，而抓得最多和最少的人将被处死，而且，他们之间不能交流，但在抓的时候，可以摸出剩下的豆子数。问他们中谁的存活机率最大？</p>
<p>提示：1，他们都是很聪明的人<br>2，他们的原则是先求保命，再去多杀人<br>3，100颗不必都分完<br>4，若有重复的情况，则也算最大或最小，一并处死</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[经典算法（一）——如何判断图有环]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%9B%BE%E6%9C%89%E7%8E%AF/</url>
      <content type="html"><![CDATA[<p>1. 无向图</p>
<p>如果存在回路，则必存在一个子图，是一个环路。环路中所有顶点的度&gt;=2。<br>n算法：<br>第一步：删除所有度&lt;=1的顶点及相关的边，并将另外与这些边相关的其它顶点的度减一。</p>
<p>第二步：将度数变为1的顶点排入队列，并从该队列中取出一个顶点重复步骤一。</p>
<p>如果最后还有未删除顶点，则存在环，否则没有环。</p>
<p>n算法分析：<br>由于有m条边，n个顶点。</p>
<p>i)如果m&gt;=n，则根据图论知识可直接判断存在环路。（证明：如果没有环路，则该图必然是k棵树 k&gt;=1。根据树的性质，边的数目m = n-k。k&gt;=1，所以：m&lt;n）</p>
<p>ii)如果m&lt;n 则按照上面的算法每删除一个度为0的顶点操作一次（最多n次），或每删除一个度为1的顶点（同时删一条边）操作一次（最多m次）。这两种操作的总数不会超过m+n。由于m&lt;n，所以算法复杂度为O(n)。</p>
<p>注：<br>该方法，算法复杂度不止O(V)，首先初始时刻统计所有顶点的度的时候，复杂度为(V + E)，即使在后来的循环中E&gt;=V，这样算法的复杂度也只能为O(V + E)。其次，在每次循环时，删除度为1的顶点，那么就必须将与这个顶点相连的点的度减一，并且执行delete node from list[list[node］，这里查找的复杂度为list[list[node］的长度，只有这样才能保证当degree[i]=1时，list[i]里面只有一个点。这样最差的复杂度就为O(EV)了。</p>
<p>方法2：<br>DFS搜索图，图中的边只可能是树边或反向边，一旦发现反向边，则表明存在环。该算法的复杂度为O(V)。</p>
<p>接下来介绍有向图是否有环的判定算法，主要有深度优先和拓扑排序2中方法。</p>
<p>1、拓扑排序，如果能够用拓扑排序完成对图中所有节点的排序的话，就说明这个图中没有环，而如果不能完成，则说明有环。</p>
<p>2、可以用Strongly Connected Components来做，我们可以回忆一下强连通子图的概念，就是说对于一个图的某个子图，该子图中的任意u-&gt;v,必有v-&gt;u，则这是一个强连通子图。这个限定正好是环的概念。所以我想，通过寻找图的强连通子图的方法应该可以找出一个图中到底有没有环、有几个环。</p>
<p>3、就是用一个改进的DFS</p>
<p>刚看到这个问题的时候，我想单纯用DFS就可以解决问题了。但细想一下，是不能够的。如果题目给出的是一个无向图，那么OK，DFS是可以解决的。但无向图得不出正确结果的。比如：A-&gt;B,A-&gt;C-&gt;B,我们用DFS来处理这个图，我们会得出它有环，但其实没有。</p>
<p>我们可以对DFS稍加变化，来解决这个问题。解决的方法如下：</p>
<p>图中的一个节点，根据其C[N]的值，有三种状态：</p>
<p>0，此节点没有被访问过</p>
<p>-1，被访问过至少1次，其后代节点正在被访问中</p>
<p>1，其后代节点都被访问过。</p>
<p>按照这样的假设，当按照DFS进行搜索时，碰到一个节点时有三种可能：</p>
<p>1、如果C[V]=0，这是一个新的节点，不做处理</p>
<p>2、如果C[V]=-1，说明是在访问该节点的后代的过程中访问到该节点本身，则图中有环。</p>
<p>3、如果C[V]=1，类似于2的推导，没有环。 在程序中加上一些特殊的处理，即可以找出图中有几个环，并记录每个环的路径</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统笔试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1.基本知识点：<br>1) 操作系统是控制和管理计算机软硬件资源，以尽量合理有效的方法组织多个用户共享多种资源的程序集合。<br>2) 操作系统的基本功能：(1)处理机管理。主要功能包括进程控制、进程调度、进程同步和进程通信。(2)存储器管理。主要功能包括内存分配、地址映射、内存保护和内存扩充。(3)设备管，也叫I/O管理。主要功能包括缓冲区管理、设备分配、设备驱动和设备的无关性处理。(4)文件管理。主要功能包括文件存储空间的管理、文件操作的一般管理、目录管理、文件的读写管理和存取控制。(5)用户界面管理。操作系统的用户界面就是操作系统与用户的接口，包括控制接口和程序接口。<br>3) 现代操作系统的基本特征：并发性、共享性、虚拟性、异步性和不确定性。<br>4) 所谓中断是指系统发生某一事件后，CPU暂停正在执行的程序去执行处理该事件的程序过程，处理中断事件的程序称为中断处理程序，产生中断信号的那个部件称为中断源。中断处理具体过程：保存现场；分析原因，转中断处理程序；恢复现场。<br>5) 进程是一个具有独立功能的程序关于数据集合的一次可以并发执行的运行活动，其基本特征：动态特征、并发特征、独立性、相互制约性。进程的构成：程序、数据和进程控制块。进程有三种基本的调度状态：执行状态、就绪状态和等待状态。<br>6) 进程的引入大大地提高了资源的利用率和系统的吞吐量，而引入线程的目的是为了减少程序并发所付出的系统开销。进程是资源分配的单位，而线程是系统调度的单位。<br>7) 所谓死锁是多个进程间的一种僵持状态。进程死锁的原因:资源竞争及进程推进顺序非法。死锁的4个必要条件：互斥、占有等待、不可剥夺、环路。死锁的处理：鸵鸟策略、预防策略、避免策略、检测与解除死锁。<br>8) 临界资源是一次只允许一个进程使用的资源。临界区是在进程中操作临界资源的程序段。<br>2．进程和线程的区别？<br>答：线程是指进程内的一个执行单元,也是进程内的可调度实体.与进程的区别:(1)调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。(2)并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行。(3)拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源. (4)系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。<br>3.网络编程中设计并发服务器，使用多进程 与 多线程 ，请问有什么区别？<br>解析：(1)进程：子进程是父进程的复制品。子进程获得父进程数据空间、堆和栈的复制品<br>(2)线程：相对与进程而言，线程是一个更加接近与执行体的概念，它可以与同进程的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。<br>两者都可以提高程序的并发度，提高程序运行效率和响应时间。线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。<br>答:用多进程时每个进程有自己的地址空间，线程则共享地址空间。所有其他区别都是由此而来的：(1)速度：线程产生的速度快，线程间的通信快，切换快等，因为它们在同一个地址空间内。(2)资源利用率：线程的资源利用率比较好也是因为它们在同一个地址空间内。(3)同步问题：线程使用公共变量/内存时需要使用同步机制，还是因为它们在同一个地址空间内。<br>4. 操作系统中常见的进程调度策略有哪几种？<br>答：FCFS(先来先服务)，优先级，时间片轮转，多队列、多级反馈队列。<br>5.进程间的通信如何实现？<br>答：现在最常见的进程间通信的方式有：信号，信号量，消息队列，共享内存，管道。信号是使用信号处理器来进行的，信号量是使用P、V操作来实现的。消息队列是比较高级的一种进程间通信方法，因为它真的可以在进程间传送消息。<br>6.在Windows编程中互斥器(mutex)的作用和临界区(critical section)类似，请说一下二者间的主要区别。<br>答：两者的区别是mutex开业用于进程之间互斥，critical section是线程之间的互斥。<br>7.进程进入等待状态有哪几种方式？<br>答：CPU调度给优先级更高的Thread(线程)，原先Thread 进入Waiting(等待)状态。阻塞的Thread获得资源或者信号，进入Waiting状态。在时间片轮转的情况下，如果时间片到了，也将进入等待状态。<br>8.试说明进程在三个基本状态之间转换的典型原因。<br>答：a.处于就绪状态的进程，当进程调度程序为之分配了处理机后，该进程便由就绪状态变为执行状态。b.当前进程因发生某事件而无法执行，如访问已被占有的临界资源，就会使进程由执行状态变为阻塞状态。c.当前进程因事件片用完而被暂停执行，该进程便由执行状态变为就绪状态。<br>9.同步机构应遵循哪些基本准则？<br>答：a.空闲让进；b.忙则等待；c.有限等待；d.让权等待。<br>10.在单处理机环境下，进程间有哪几种通信方式？<br>答：a.共享存储器系统通信方式；b.消息传递系统通信方式；c.管道通信方式。<br>11.试比较消息队列与管道通信机制。<br>答：a.所谓管道，是指用于连接一个读进程和一个写进程，以实现它们之间通信的共享文件，又称pipe文件，管道通信是属于共享存储系统的。b.消息队列通信机制属于消息传递系统通信机制，存在通信链路，有消息的格式，有若干缓冲队列，采用独特的发送原语和接受原语。<br>12.在请求分页系统中，常采用哪几种页面置换算法？<br>答：a.最佳置换算法；b.先进先出算法；c.最近最久未使用LRU置换算法；d.Clock置换算法；e.此外，还有最少使用置换算法和页面缓冲算法。<br>13.内部碎片和外部碎片<br>为了有效的利用内存，使内存产生更少的碎片，要对内存分页，内存以页为单位来使用，最后一页往往装不满，于是形成了内部碎片。为了共享要分段，在段的换入换出时形成外部碎片，比如5K的段换出后，有一个4k的段进来放到原来5k的地方，于是形成1k的外部碎片。<br>1 虚地址的构成</p>
<p>一个进程中所包含的具有独立逻辑功能的程序或数据仍被划分为段，并有各自的段号s, 对于段s 中的程序或数据，则按照一定的大小将其划分为不同的页。段页式管理时的进程的虚拟地址空间中的虚拟地址由三部分组成：即段号s ，页号P 和页内相对地址d 。虚拟空间的最小单位是页而不是段，从而内存可用区也就被划分成为着干个大小相等的页面，且每段所拥有的程序和数据在内存中可以分开存放。分段的大小也不再受内存可用区的限制。</p>
<p>2 段表和页表</p>
<p>为了实现段页式管理，系统必须为每个作业或进程建立一张段表以管理内存分配与释放、缺段处理、存储保护相地址变换等。另外，由于一个段又被划分成了若干页，每个段又必须建立一张页表以把段中的虚页变换成内存中的实际页面。显然，与页式管理时相同，页表中也要有相应的实现缺页中断处理和页面保护等功能的表项。另外，由于在段页式管理中，页表不再是属于进程而是属于某个段，因此，段表中应有专项指出该段所对应页表的页表始址和页表长度。</p>
<p>3 动态地址变换过程</p>
<p>在一般使用段页式存储管理方式的计算机系统中，都在内存中辟出一块固定的区域存放进程的段表和页表。因此，在段页式管理系统中，要对内存中指令或数据进行一次存取的话，至少需要访问三次以上的内存：</p>
<p>第一次是由段表地址寄存器得段表始址后访问段表，由此取出对应段的页表在内存中的地址。第二次则是访问页表得到所要访问的物理地址。第三次才能访问真正需要访问的物理单元。</p>
<p>显然，这将使CPU 的执行指令速度大大降低。为了提高地址转换速度，设置快速联想寄存器就显得比段式管理或页式管理时更加需要。在快速联想寄存器中，存放当前最常用的段号s 、页号p 和对应的内存页面与其它控制用栏目。当要访问内存空间某一单元时，可在通过段表、页表进行内存地址查找的同时，根据快速联想寄存器查找其段号和页号。如果所要访问的段或页在快速联想寄存器中，则系统不再访问内存中的段表、页表而直接把快速联想寄存器中的值与页内相对地址d 拼接起来 得到内存地址。总之，因为段页式管理是段式管理的页式管理方案结合而成的，所以具有它们二者的优点。但反过来说，由于管理软件的增加，复杂性和开销也就随之增加了。另外，需要的硬件以及占用的内存也有所增加。更重要的是，如果不采用联想寄存器的方式提高CPU 的访问速度，将会使得执行速度大大下降。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统面试（二）]]></title>
      <url>http://yoursite.com/2015/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1．什么是进程（Process）和线程（Thread）？有何区别？<br>（1） 线程是进程的一部分，所以线程有的时候被称为是轻权进程或者轻量级进程。<br>（2） 一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的。<br>（3） 系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。那就是说，出了CPU之外（线程在运行的时候要占用CPU资源），计算机内部的软硬件资源的分配与线程无关，线程只能共享它所属进程的资源。<br>（4） 与进程的控制表PCB相似，线程也有自己的控制表TCB，但是TCB中所保存的线程状态比PCB表中少多了。<br>（5） 进程是系统所有资源分配时候的一个基本单位，拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。</p>
<p>2．Windows下的内存是如何管理的？<br>WIndows为每个进程分配了4GB的虚拟地址空间，让每个进程都认为自己拥有4GB的内存空间，4GB怎么来的？ 32位 CPU可以取地址的空间为2的32次方，就是4GB（正如16位CPU有20根寻址线所有拥有2的20次方的寻址空间一样）<br>当我们在Windows中双击一个应用程序图标后，系统为该应用程序创建一个进程，Windows使得每个进程都拥有2GB的地址空间，这2GB地址空间用于程序存放代码，数据，堆栈，自由存储区（堆），另外2GB用于共享系统使用<br>前面的这些地址并不是物理内存中的地址，而是该进程空间中的虚拟地址<br>虚拟空间只是Windows为该进程分配的一个虚拟的地址空间，只有当其和物理内存相关联后才有意义<br>进程被创建时会建立一个 虚拟内从到物理内存的映射表——–页表，根据页表可以将虚拟内存和物理内存关联起来<br>虚拟内存是什么？就是把磁盘拿来当内存用，虚拟内存是一些系统页文件，存放在磁盘上，每个系统页文件大小也为4K，物理内存也被分页，每个页大小也为4K，这样虚拟页文件和物理内存页就可以对应，实际上虚拟内存就是用于物理内存的临时存放的磁盘空间。<br>虚拟内存和物理内存的管理(Windows内存管理的核心)<br>Windows是多任务的系统，在每个进程创建时，系统为每个进程也创建了一个页表，用于虚拟地址到物理地址的转换。比如现在程序在执行进程A，用户切换到了另外一个进程B，则系统会将进程A在内存中的数据存放到页文件中，并更新进程A的页表（使虚拟地址和页文件形成映射）。然后读取进程B的页表，根据页表判断进程B的数据是在内存中还是在页文件中（通过页文件的类型来判断），如果在内存中就直接读取，如果在页面文件中，就将页面文件内容读入物理内存，然后更新页表（使虚拟地址和物理内存形成映射）。这样一看，虚拟内存实际上就是冒牌的物理内存了吧。<br>程序的执行<br>一个PE文件有数据区，代码区，堆栈区（由系统分配，用于管理局部变量），使用OD载入一个程序就可以知道这些都是以二进制的形式保存在文件中。<br>程序刚运行的时候，系统不直接将整个程序载入到物理内存中，也不将其载入到页文件中，而是以程序文件本身作为页文件形成映射（虚拟地址到页文件的映射），建立页表，然后随着程序的执行通过页表来将其虚拟地址转换成物理地址（将页文件读入内存），然后在读取内存中的指令或数据。当进程被切换时，将内存内容保存到页文件，更新页表，如此往复，实现多任务操作。<br>可以知道，程序的代码段，数据段，堆栈区（系统分配）这些虚拟地址区域已经是映射状态，即有相应的物理内存与之对应。系统为每个进程提供了2G的自己的虚拟地址空间，剩下的虚拟地址空间干什么用？<br>剩下的虚拟地址空间就是给程序运行时动态分配内存使用。C++中 new的功能就是动态分配地址空间：</p>
<p>3．存储过程是什么？有什么用？有什么优点？<br>存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程在运算时生成执行方式，所以，以后对其再运行时其执行速度很快。</p>
<p>4.你知道操作系统的内容分为几块吗？什么叫做虚拟内存？他和主存的关系如何？内存管理属于操作系统的内容吗？<br>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p>
<p>5.进程是一个比较重要的概念，那么进程有哪几种状态吗？<br>进程在其生存期内可能处于如下三种基本状态之一:<br>(1) 运行态(Run): 进程占有处理机资源，正在运行。 显然，在单处理机系统中任一时刻只能有一个进程处于此种状态;<br>(2) 就绪态(Ready): 进程本身具备运行条件，但由于处理机的个数少于可运行进程的个数，暂未投入运行。 即相当于等待处理机资源<br>(3) 等待态(Wait): 也称挂起态(Suspended)、封锁态(Blocked)、睡眠态(Sleep)。 进程本身不具备运行条件，即使分给它处理机也不能运行。 进程正等待某一个事件的发生，如等待某一资源被释放，等待与该进程相关的I/O传输的完成信号等。<br>进程的三个基本状态之间是可以相互转换的。具体地说，当一个就绪进程获得处理机时，其状态由就绪变为运行；当一个运行进程被剥夺处理机时，如用完系统分给它的时间片、出现更高优先级别的其它进程，其状态由运行变为就绪；当一个运行进程因某事件受阻时，如所申请资源被占用、启动I/O传输未完成，其状态由运行变为等待；当所等待事件发生时，如得到申请资源、I/O传输完成，其状态由等待变为就绪。</p>
<p>6. 说出你所知道的保持进程同步的方法?</p>
<p>为了能够有效的控制多个进程之间的沟通过程，保证沟通过程的有序和和谐，OS必须提供一定的同步机制保证进程之间不会自说自话而是有效的协同工作。比如在共享内存的通信方式中，两个或者多个进程都要对共享的内存进行数据写入，那么怎么才能保证一个进程在写入的过程中不被其它的进程打断，保证数据的完整性呢？又怎么保证读取进程在读取数据的过程中数据不会变动，保证读取出的数据是完整有效的呢？<br>常用的同步方式有： 互斥锁、条件变量、读写锁、记录锁(文件锁)和信号灯.<br>互斥锁<br>顾名思义，锁是用来锁住某种东西的，锁住之后只有有钥匙的人才能对锁住的东西拥有控制权(把锁砸了，把东西偷走的小偷不在我们的讨论范围了)。所谓互斥，从字面上理解就是互相排斥。因此互斥锁从字面上理解就是一点进程拥有了这个锁，它将排斥其它所有的进程访问被锁住的东西，其它的进程如果需要锁就只能等待，等待拥有锁的进程把锁打开后才能继续运行。<br>在实现中，锁并不是与某个具体的变量进行关联，它本身是一个独立的对象。进(线)程在有需要的时候获得此对象，用完不需要时就释放掉。<br>互斥锁的主要特点是互斥锁的释放必须由上锁的进(线)程释放，如果拥有锁的进(线)程不释放，那么其它的进(线)程永远也没有机会获得所需要的互斥锁。互斥锁主要用于线程之间的同步。<br>条件变量<br>上文中提到，对于互斥锁而言，如果拥有锁的进(线)程不释放锁，其它进(线)程永远没机会获得锁，也就永远没有机会继续执行后续的逻辑。在实际环境下，一个线程A需要改变一个共享变量X的值，为了保证在修改的过程中X不会被其它的线程修改，线程A必须首先获得对X的锁。现在假如A已经获得锁了，由于业务逻辑的需要，只有当X的值小于0时，线程A才能执行后续的逻辑，于是线程A必须把互斥锁释放掉，然后继续“忙等”。如下面的伪代码所示：</p>
<p>// get x lock<br>while(x &lt;= 0){<br>// unlock x ;<br>// wait some time<br>// get x lock<br>}<br>// unlock x<br>这种方式是比较消耗系统的资源的，因为进程必须不停的主动获得锁、检查X条件、释放锁、再获得锁、再检查、再释放，一直到满足运行的条件的时候才可以。因此我们需要另外一种不同的同步方式，当线程X发现被锁定的变量不满足条件时会自动的释放锁并把自身置于等待状态，让出CPU的控制权给其它线程。其它线程此时就有机会去修改X的值，当修改完成后再通知那些由于条件不满足而陷入等待状态的线程。这是一种通知模型的同步方式，大大的节省了CPU的计算资源，减少了线程之间的竞争，而且提高了线程之间的系统工作的效率。这种同步方式就是条件变量。<br>坦率的说，从字面意思上来将，“条件变量”这四个字是不太容易理解的。我们可以把“条件变量”看做是一个对象，一个铃铛，一个会响的铃铛。当一个线程在获得互斥锁之后，由于被锁定的变量不满足继续运行的条件时，该线程就释放互斥锁并把自己挂到这个“铃铛”上。其它的线程在修改完变量后，它就摇摇“铃铛”，告诉那些挂着的线程：“你们等待的东西已经变化了，都醒醒看看现在的它是否满足你们的要求。”于是那些挂着的线程就知道自己醒来看自己是否能继续跑下去了。<br>读写锁<br>互斥锁是排他性锁，条件变量出现后和互斥锁配合工作能够有效的节省系统资源并提高线程之间的协同工作效率。互斥锁的目的是为了独占，条件变量的目的是为了等待和通知。但是现实世界是很复杂di，我们要解决的问题也是多种多样di.从功能上来说，互斥锁和条件变量能够解决基本上所有的问题，但是性能上就不一定完全满足了。人的无休止的欲望促使人发明出针对性更强、性能更好的同步机制来。读写锁就是这么一个玩意儿。<br>考虑一个文件有多个进程要读取其中的内容，但只有1个进程有写的需求。我们知道读文件的内容不会改变文件的内容，这样即使多个进程同时读相同的文件也没什么问题，大家都能和谐共存。当写进程需要写数据时，为了保证数据的一致性，所有读的进程就都不能读数据了，否则很可能出现读出去的数据一半是旧的，一半是新的状况，逻辑就乱掉了。<br>为了防止读数据的时候被写入新的数据，读进程必须对文件加上锁。现在假如我们有2个进程都同时读，如果我们使用上面的互斥锁和条件变量，当其中一个进程在读取数据的时候，另一个进程只能等待，因为它得不到锁。从性能上考虑，等待进程所花费的时间是完全的浪费，因为这个进程完全可以读文件内容而不会影响第一个，但是这个进程没有锁，所以它什么也做不了，只能等，等到花儿都谢了。<br>所以呢，我们需要一种其它类型的同步方式来满足上面的需求，这就是读写锁。<br>读写锁的出现能够有效的解决多进程并行读的问题。每一个需要读取的进程都申请读锁，这样大家互不干扰。当有进程需要写如数据时，首先申请写锁。如果在申请时发现有读(或者写)锁存在，则该写进程必须等待，一直等到所有的读(写)锁完全释放为止。读进程在读取之前首先申请读锁，如果所读数据被写锁锁定，则该读进程也必须等待读锁被释放位置。<br>很自然的，多个读锁是可以共存的，但写锁是完全互相排斥的。<br>记录锁(文件锁)<br>为了增加并行性，我们可以在读写锁的基础上进一步细分被锁对象的粒度。比如一个文件中，读进程可能需要读取该文件的前1k个字节，写进程需要写该文件的最后1k个字节。我们可以对前1k个字节上读锁，对最后1k个自己上写锁，这样两个进程就可并发工作了。记录锁中的所谓“记录”其实是“内容”的概念。使用读写锁可以锁定一部分，而不是整个文件。<br>文件锁可以认为是记录锁的一个特例，当使用记录锁锁定文件的所有内容时，此时的记录锁就可以称为文件锁了。<br>信号灯<br>信号灯可以说是条件变量的升级版。条件变量相当于铃铛，铃铛响后每个挂起的进程还需要自己获得互斥锁并判断所需条件是否满足，信号灯把这两步操作糅合到一起。<br>在Posix.1基本原理一文声称，有了互斥锁和条件变量还提供信号灯的原因是：“本标准提供信号灯的而主要目的是提供一种进程间同步的方式；这些进程可能共享也可能不共享内存区。互斥锁和条件变量是作为线程间的同步机制说明的；这些线程总是共享(某个)内存区。这两者都是已广泛使用了多年的同步方式。每组原语都特别适合于特定的问题”。尽管信号灯的意图在于进程间同步，互斥锁和条件变量的意图在于线程间同步，但是信号灯也可用于线程间，互斥锁和条件变量也可用于进程见。应当根据实际的情况进行决定。<br>信号灯最有用的场景是用以指明可用资源的数量。比如含有10个元素的数组，我们可以创建一个信号灯，初始值为0.每当有进程需要读数组中元素时(假设每次仅能读取1个元素)，就申请使用该信号灯(信号灯的值减1)，当有进程需要写元素时，就申请挂出该信号等(信号灯值加1)。这样信号灯起到了可用资源数量的作用。如果我们限定信号灯的值只能取0和1，就和互斥锁的含义很相同了。<br>7. OS中如何实现物理地址到逻辑地址的转换?<br>在分页系统中页面大小由硬件决定。页表的作用是实现从页号到物理块号的地址映射。逻辑地址转换成物理地址的过程是：用页号p去检索页表，从页表中得到该页的物理块号，把它装人物理地址寄存器中。同时，将页内地址d直接送人物理地址寄存器的块内地址字段中。这样，物理地址寄存器中的内容就是由二者拼接成的实际访问内存的地址，从而完成了从逻辑地址到物理地址的转换。<br>8. 解释一下分页式管理。<br>页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统面试题（1）]]></title>
      <url>http://yoursite.com/2015/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1、什么是中断？中断时CPU做什么工作？</p>
<p>中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。<br>2、进程通信有哪些方式？<br>管道通信、消息通信、内存共享<br>3、 说说分段和分页。<br>页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。<br>段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。页的大小固定且由系统确定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。 段的长度却不固定，决定于用户所编写的程序，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。<br>分页的作业地址空间是维一的，即单一的线性空间，程序员只须利用一个记忆符，即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址<br>4、什么是进程和线程？有何区别？<br>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.<br>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.</p>
<p>5、Windows下的内存是如何管理的？<br>Window操纵内存可以分两个层面：物理内存和虚拟内存。<br>其中物理内存由系统管理，不允许应用程序直接访问，应用程序可见的只有一 个2G地址空间，而内存分配是通过堆进行的，对于每个进程都有自己的默认堆，当一个堆创建后，就通过虚拟内存操作保留了相应大小的地址块（不占有实际的内存，系统消耗很小），当在堆上分配一块内存时，系统在堆的地址表里找到一个空闲块（如果找不到，且堆创建属性是可扩充的，则扩充堆大小）为这个空闲块所包含的所有内存页提交物理对象（物理内存上或硬盘上的交换文件上）。这时可以就访问这部分地址了。提交时，系统将对所有进程的内存统一调配，如果物理内存不够，系统试图把一部分进程暂时不访问的页放入交换文件，以腾出部分物理内存。释放内存时，只在堆中将所在的页解除提交（相应的物理对象被解除），继续保留地址空间。<br>如果要知道某个地址是否被占用/可不可以访问，只要查询此地址的虚拟内存状VirtualQuery），如果是提交，则可以访问。如果仅仅保留，或没保留，则产生一 个 软件异常。此外有些内存页可以设置各种属性。如果是只读，向内写也会产生软件异常<br>6、操作系统的内容分为几块？什么叫做虚拟内存？优点管理属于操作系统的内容吗？<br>7、进程是一个比较重要的概念，那么进程有哪几种状态？<br>基本状态有3种,即ready(就绪),running(运行),wait(等待).<br>8、说出你所知道的保持进程同步的方法？<br>进程间同步的主要方法有内存屏障，互斥锁，信号量和锁，管程，消息，管道<br>7、OS中如何实现物理地址到逻辑志址的转换？<br>8、解释一下分页式管理。<br>用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配.<br>9、什么是死锁，其条件是什么？怎么避免死锁？<br>死锁是指,在两个或多个并发进程中,如果每个进程持有某种资源而又都等待别的进程释放它们现在保持着的资源,否则就不能向前推进.此时,每个进程都占用了一定的资源但是又不能向前推进,称这一组进程产生了死锁. 通俗的讲,就是两个或多个进程无止境的等候着永远不会成立的条件的一种系统状态. 其条件是为<br>1.互斥：存在这样一种资源，它在某个时刻只能被分配给一个执行绪使用；<br>2.持有：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但无需释放该资源，而且还可以继续请求更多资源；<br>3.不可剥夺：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；<br>4.环形等待：若干执行绪以不同的次序获取互斥资源，从而在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。<br>避免死锁：按顺序访问，事务最小化</p>
<p>10、什么是缓冲区溢出？有什么危害？其原因是什么？<br>缓冲区溢出是指当计算机向缓冲区内填充数据位数时超过了缓冲区本身的容量溢出的数据覆盖在合法数据上,<br>危害：在当前网络与分布式系统安全中，被广泛利用的50%以上都是缓冲区溢出，其中最著名的例子是1988年利用fingerd漏洞的蠕虫。而缓冲区溢出中，最为危险的是堆栈溢出，因为入侵者可以利用堆栈溢出，在函数返回时改变返回程序的地址，让其跳转到任意地址，带来的危害一种是程序崩溃导致拒绝服务，另外一种就是跳转并且执行一段恶意代码，比如得到shell，然后为所欲为。<br>通过往程序的缓冲区写超出其长度的内容，造成缓冲区的溢出，从而破坏程序的堆栈，使程序转而执行其它指令，以达到攻击的目的。造成缓冲区溢出的原因是程序中没有仔细检查用户输入的参数<br>11、什么是临界区？如何解决冲突？<br>每个进程中访问临界资源的那段程序称为临界区，每次只准许一个进程进入临界区，进入后不允许其他进程进入。<br>① 如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入。<br>② 任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待。<br>③ 进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区。<br>④ 如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。<br>12、解释一下P操作与V操作。<br>P就是请求资源，V就是释放资源<br>13、中断和轮询的特点。<br>轮询：polling， 效率低，等待时间很长，CPU利用率不高。<br>中断：interrupts，容易遗漏一些问题，分屏蔽中断和非屏蔽中断。<br>轮询(Polling)I／O方式或程序控制I／O方式，是让CPU以一定的周期按次序查询每一个外设，看它是否有数据输入或输出的要求，若有，则进行相应的输入／输出服务；若无，或I／O处理完毕柏，CPU就接着查询下一个外设。<br>所需硬件：外设接口提供状态端口、数据端口<br>软件机制：应用程序必须定时查询各个接口的状态端口，判断是否需要输入、输出数据，如果需要，则通过数据端口进行数据操作。<br>特点：CPU通过执行指令主动对外部设备进行查询，外部设备处于被动地位。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[百度面试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1.Linux中优先级和优先数有什么关系，如何判断一个进程的优先级和优先数；<br>2.什么是僵尸进程和孤儿进程，它们是否消耗系统资源；<br>僵尸进程：一个子进程在其父进程还没有调用wait()或waitpid()的情况下退出。这个子进程就是僵尸进程。<br>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。<br>注：<br>僵尸进程将会导致资源浪费，而孤儿则不会。<br>3.一个实时的、批处理的操作系统应该如何进行作业调度；<br>4.数据库表中索引的作用是什么，谈谈你对索引的认识。<br>可以利用索引快速访问数据库表中的特定信息。索引是对数据库表中一个或多个列（例如，employee 表的姓氏 (lname) 列）的值进行排序的结构。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。<br>索引提供指针以指向存储在表中指定列的数据值，然后根据指定的排序次序排列这些指针。数据库使用索引的方式与使用书的目录很相似：通过搜索索引找到特定的值，然后跟随指针到达包含该值的行。<br>在数据库关系图中，可以为选定的表创建、编辑或删除索引/键属性页中的每个索引类型。当保存附加在此索引上的表或包含此表的数据库关系图时，索引同时被保存。有关详细信息，请参见创建索引。<br>通常情况下，只有当经常查询索引列中的数据时，才需要在表上创建索引。索引将占用磁盘空间，并且降低添加、删除和更新行的速度。不过在多数情况下，索引所带来的数据检索速度的优势大大超过它的不足之处。然而，如果应用程序非常频繁地更新数据，或磁盘空间有限，那么最好限制索引的数量。<br>在创建索引前，必须确定要使用的列和要创建的索引类型。<br>3.简述LRU算法。<br>LRU是Least Recently Used 近期最少使用算法。<br>内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，Oracle会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。<br>4.操作系统中同一父进程中的子进程之间如何交互，不同父进程中的子进程之间如何交互，父进程与子进程之间如何交互。<br>5.选择一个你熟悉的磁盘调度算法进行简单描述。<br>1.先来先服务算法（First Come First Served，FCFS）</p>
<p>先来先服务（FCFS）调度:按先来后到次序服务，未作优化。</p>
<p>最简单的移臂调度算法是“先来先服务”调度算法，这个算法实际上不考虑访问者要求访问的物理位置，而只是考虑访问者提出访问请求的先后次序。例如，如果现在读写磁头正在50号柱面上执行输出操作，而等待访问者依次要访问的柱面为130、199、32、159、15、148、61、99，那么，当50号柱面上的操作结束后，移动臂将按请求的先后次序先移到130号柱面，最后到达99号柱面。</p>
<p>采用先来先服务算法决定等待访问者执行输入输出操作的次序时，移动臂来回地移动。先来先服务算法花费的寻找时间较长，所以执行输入输出操作的总时间也很长。</p>
<p>2.最短寻道时间优先算法（Shortest Seek Time First，SSTF）</p>
<p>最短寻找时间优先调度算法总是从等待访问者中挑选寻找时间最短的那个请求先执行的，而不管访问者到来的先后次序。现在仍利用同一个例子来讨论，现在当50 号柱面的操作结束后，应该先处理61号柱面的请求，然后到达32号柱面执行操作，随后处理15号柱面请求，后继操作的次序应该是99、130、148、 159、199。</p>
<p>采用最短寻找时间优先算法决定等待访问者执行操作的次序时，读写磁头总共移动了200多个柱面的距离，与先来先服务、算法比较，大幅度地减少了寻找时间，因而缩短了为各访问者请求服务的平均时间，也就提高了系统效率。</p>
<p>但最短查找时间优先（SSTF）调度，FCFS会引起读写头在盘面上的大范围移动，SSTF查找距离磁头最短（也就是查找时间最短）的请求作为下一次服务的对象。SSTF查找模式有高度局部化的倾向，会推迟一些请求的服务，甚至引起无限拖延（又称饥饿）。</p>
<p>3.扫描算法（SCAN）</p>
<p>SCAN 算法又称电梯调度算法。SCAN算法是磁头前进方向上的最短查找时间优先算法，它排除了磁头在盘面局部位置上的往复移动，SCAN算法在很大程度上消除了SSTF算法的不公平性，但仍有利于对中间磁道的请求。</p>
<p>“电梯调度”算法是从移动臂当前位置开始沿着臂的移动方向去选择离当前移动臂最近的那个柱访问者，如果沿臂的移动方向无请求访问时，就改变臂的移动方向再选择。这好比乘电梯，如果电梯已向上运动到4层时，依次有3位乘客陈生、伍生、张生在等候乘电梯。他们的要求是：陈生在2层等待去10层；伍生在5层等待去底层；张生在8层等待15层。由于电梯目前运动方向是向上，所以电梯的形成是先把乘客张生从8层带到15层，然后电梯换成下行方向，把乘客伍生从5层带到底层，电梯最后再调换方向，把乘客陈生从2层送到10层。</p>
<p>我们仍用前述的同一例子来讨论采用“电梯调度”算法的情况。由于磁盘移动臂的初始方向有两个，而该算法是与移动臂方向有关，所以分成两种情况来讨论。</p>
<p>〈1〉.移动臂由里向外移动</p>
<p>开始时在50号柱面执行操作的读写磁头的移动臂方向是由里向外，趋向32号柱面的位置，因此，当访问50号柱面的操作结束后，沿臂移动方向最近的柱面是 32号柱面。所以应先为32号柱面的访问者服务，然后是为15号柱面的访问者服务。之后，由于在向外移方向已无访问等待者，故改变移动臂的方向，由外向里依次为各访问者服务。在这种情况下为等待访问者服务的次序是61、99、130、148、159、199。</p>
<p>〈2〉.移动臂由外向里移动</p>
<p>开始时，正在50号柱面执行操作的读写磁头的移动臂是由外向里（即向柱面号增大的内圈方向）趋向61号柱面的位置，因此，当访问50号柱面的操作结束后，沿臂移动方向最近的柱面是61号柱面。所以，应先为61号柱面服务，然后按移动臂由外向里移动的方向，依次为99、130、148、159、199柱面的访问者服务。当201号柱面的操作结束后，向里移动的方向已经无访问等待者，所以改变移动臂的前进方向，由里向外依次为32、15柱面的访问者服务。</p>
<p>“电梯调度”与“最短寻找时间优先”都是要尽量减少移动臂时所花的时间。所不同的是：“最短寻找时间优先”不考虑臂的移动方向，总是选择离当前读写磁头最近的那个柱面，这种选择可能导致移动臂来回改变移动方向；“电梯调度”是沿着臂的移动方向去选择离当前读写词头最近的哪个柱面的访问者，仅当沿移动臂的前进移动方向无访问等待者时，才改变移动臂的前进方向。由于移动臂改变方向是机械动作，速度相对较慢，所以，电梯调度算法是一种简单、使用且高效的调度算法。</p>
<p>但是，“电梯调度”算法在实现时，不仅要记住读写磁头的当前位置，还必须记住移动臂的当前前进方向。</p>
<p>4.循环扫描算法（CSCAN）</p>
<p>单项扫描调度算法的基本思想是，不考虑访问者等待的先后次序，总是从0号柱面开始向里道扫描，按照各自所要访问的柱面位置的次序去选择访问者。在移动臂到达最后一个柱面后，立即快速返回到0号柱面，返回时不为任何的访问者等待服务。在返回到0号柱面后，再次进行扫描。</p>
<p>由于该例中已假定读写的当前位置在50号柱面，所以，指示了从50号柱面继续向里扫描，依次为61、99、130、148、159、199各柱面的访问者服务，此时移动臂已经是最内的柱面，于是立即返回到0号柱面，重新扫描，依次为15、32号柱面的访问者服务。</p>
<p>除了“先来先服务”调度算法外，其余三种调度算法都是根据欲访问的柱面位置来继续调度的。在调度过程中可能有新的请求访问者加入。在这些新的请求访问者加入时，如果读写已经超过了它们所要访问的柱面位置，则只能在以后的调度中被选择执行。</p>
<p>在多道程序设计系统中，在等待访问磁盘的若干访问者请求中，可能要求访问的柱面号相同，但在同一柱面上的不同磁道，或访问同一柱面中同一磁道上的不同扇区。所以，在进行移动调度时，在按照某种短法把移动臂定位到某个柱面后，应该在等待访问这个柱面的各个访问者的输入输出操作都完成之后，再改变移动臂的位置。<br>6.路由器工作于网络的哪一层，简述它的工作原理，它维护路由表的协议是什么。<br>传统地，路由器工作于OSI七层协议中的第三层，其主要任务是接收来自一个网络接口的数据包，根据其中所含的目的地址，决定转发到下一个目的地址。因此，路由器首先得在转发路由表中查找它的目的地址，若找到了目的地址，就在数据包的帧格前添加下一个MAC地址，同时IP数据包头的TTL（Time To Live）域也开始减数，并重新计算校验和。当数据包被送到输出端口时，它需要按顺序等待，以便被传送到输出链路上。 路由器在工作时能够按照某种路由通信协议查找设备中的路由表。如果到某一特定节点有一条以上的路径，则基本预先确定的路由准则是选择最优（或最经济）的传输路径。由于各种网络段和其相互连接情况可能会因环境变化而变化，因此路由情况的信息一般也按所使用的路由信息协议的规定而定时更新。 网络中，每个路由器的基本功能都是按照一定的规则来动态地更新它所保持的路由表，以便保持路由信息的有效性。为了便于在网络间传送报文，路由器总是先按照预定的规则把较大的数据分解成适当大小的数据包，再将这些数据包分别通过相同或不同路径发送出去。当这些数据包按先后秩序到达目的地后，再把分解的数据包按照一定顺序包装成原有的报文形式。路由器的分层寻址功能是路由器的重要功能之一，该功能可以帮助具有很多节点站的网络来存储寻址信息，同时还能在网络间截获发送到远地网段的报文，起转发作用；选择最合理的路由，引导通信也是路由器基本功能；多协议路由器还可以连接使用不同通信协议的网络段，成为不同通信协议网络段之间的通信平台。<br>7.路由器与交换机的区别是什么。<br>（1）工作层次不同<br>最初的的交换机是工作在OSI/RM开放体系结构的数据链路层，也就是第二层，而路由器一开始就设计工作在OSI模型的网络层。由于交换机工作在OSI的第二层（数据链路层），所以它的工作原理比较简单，而路由器工作在OSI的第三层（网络层），可以得到更多的协议信息，路由器可以做出更加智能的转发决策。<br>（2）数据转发所依据的对象不同<br>交换机是利用物理地址或者说MAC地址来确定转发数据的目的地址。而路由器则是利用不同网络的ID号（即IP地址）来确定数据转发的地址。IP地址是在软件中实现的，描述的是设备所在的网络，有时这些第三层的地址也称为协议地址或者网络地址。MAC地址通常是硬件自带的，由网卡生产商来分配的，而且已经固化到了网卡中去，一般来说是不可更改的。而IP地址则通常由网络管理员或系统自动分配。<br>（3）传统的交换机只能分割冲突域，不能分割广播域；而路由器可以分割广播域<br>由交换机连接的网段仍属于同一个广播域，广播数据包会在交换机连接的所有网段上传播，在某些情况下会导致通信拥挤和安全漏洞。连接到路由器上的网段会被分配成不同的广播域，广播数据不会穿过路由器。虽然第三层以上交换机具有VLAN功能，也可以分割广播域，但是各子广播域之间是不能通信交流的，它们之间的交流仍然需要路由器。<br>（4）路由器提供了防火墙的服务<br>路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。<br>交换机一般用于LAN-WAN的连接，交换机归于网桥，是数据链路层的设备，有些交换机也可实现第三层的交换。路由器用于WAN-WAN之间的连接，可以解决异性网络之间转发分组，作用于网络层。他们只是从一条线路上接受输入分组，然后向另一条线路转发。这两条线路可能分属于不同的网络，并采用不同协议。相比较而言，路由器的功能较交换机要强大，但速度相对也慢，价格昂贵，第三层交换机既有交换机线速转发报文能力，又有路由器良好的控制功能，因此得以广泛应用。<br>（5）总之，可以这么认为，交换机在具体的城域网中往往扮演着VLAN透传的角色，就是桥。而路由器默认的是不支持二层的，路由器的每一个端口都是一个独立的广播域和冲突域，而交换机是只有一个广播域和端口数量的冲突域，在二层交换机上存在MAC表，三层交换机上存在路由表.MAC.ARP表，在路由器上存在路由表和arp表。比如当一个路由器上有一个2层的vlan100和另外一个路由器上的3层vlan100对接的时候，是不通的，这时候我们需要借助L2VPN技术来进行互通，比较流行的就是VPLS技术。<br>8.路由器所在层的上一层是哪一层，都有哪些协议。<br>TCP/UDP<br>9.TCP与UDP的区别是什么。<br><a href="http://baike.baidu.com/link?url=F50rSmByNUgpJ_yQDwkrr0Y9fmld1ZHUZNBZLAI_xCYWRkpFVFt3se5bFceB6tDuXa-FNtUV_Ricrgp6mcAlUXvHi4GqWNT4yUA4bYbJqpO" target="_blank" rel="external">http://baike.baidu.com/link?url=F50rSmByNUgpJ_yQDwkrr0Y9fmld1ZHUZNBZLAI_xCYWRkpFVFt3se5bFceB6tDuXa-FNtUV_Ricrgp6mcAlUXvHi4GqWNT4yUA4bYbJqpO</a><br>10.画出TCP三次握手的过程，并说出TCP滑动窗口协议应用于三次握手的哪一步。<br>滑动窗口协议，是TCP使用的一种流量控制方法。该协议允许发送方在停止并等待确认前可以连续发送多个分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输。<br>11.画图详细逐步分析一下两个问题：滑动窗口过大和滑动窗口过小。<br>滑动窗口：是两台主机间传送数据时的缓冲区。每台TCP/IP主机支持两个滑动窗口：一个用于接收数据，另一个用于发送数据。窗口尺寸表示计算机可能缓冲的数据量大小。<br>滑动窗口的大小对网络性能有很大的影响。如果滑动窗口过小，则需要在网络上频繁的传输确认信息，占用了大量的网络带宽；如果滑动窗口过大，对于利用率较高，容易产生丢包现象的网络，则需要多次发送重复的数据，也同样耗费了网络带</p>
<p>为什么要有滑动窗口<br>1）H1第一次只发送出一个数据包。<br>2）为什么不一次发送完所有数据包？<br>在英特网中，可能同时存在着数百万条TCP连接。如果这些连接同时无节制的发送数据包，那么整个网络都会被堵死，没有数据包能到达目的地。<br>因此TCP需要根据网络状况，每次发送若干数据包。</p>
<p>窗口的移动<br>1）每收到一个（不重复的）确认，窗口的左边界就会向右移动一格<br>2）每收到一个新的确认，LAR(last ack received)就会增加1。而滑动窗口左边的数据包，序号就是LAR。<br><a href="http://histrory.visualland.net/tcp_swnd_tutorial.html" target="_blank" rel="external">http://histrory.visualland.net/tcp_swnd_tutorial.html</a><br>12.如果上网速度过慢，可能是哪里产生的问题。（我这道题回答的是：客户端、路由器或者服务器端出问题。于是他问了第13题）<br>13.用什么方法能够检测出是客户端，还是路由器，还是服务器端出了问题。<br>14.fork与clone有什么区别。<br><a href="http://blog.csdn.net/soundtravel/article/details/6835620" target="_blank" rel="external">http://blog.csdn.net/soundtravel/article/details/6835620</a><br>15.Oracle中冷启动与热启动有什么区别。<br>16.存储过程的概念以及优缺点是什么，写出一个存储过程的大概代码，你是如何在项目中应用的，又产生了什么问题，你是如何解决的。<br>35.truncate与delete的区别是什么。<br>从功能上区别，turncate,delete都是只删除表中的数据，而表结构，索引，约束等都保持不变；而 drop语句将删除表的结构以及被依赖的约束(constrain),触发器(trigger),索引(index); 依赖于该表的存储过程/函数将保留,但是变为invalid状态。<br>再分析turncate与delete异同：<br>相同点： turncate talbe 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。<br>不同点：<br>1 事务管理：delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;如果有相应的trigger,执行的时候将被触发.delele可以回滚。 truncate是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger.<br>2 速度：turncate table比delete速度快，且使用的系统和事务日志资源少。<br>原因是delete语句每次删除一行，并在事务日志中为删除的每一行记录一项；而turncate table通过释放存储表数据的数据页来删除数据，并且只在事务日志中记录页的释放。<br>3 对于由FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。<br>应用中，如果不再需要该表时，用drop<br>如果想要保留表结构，但要删除所有记录，用turncate<br>如果只删除部分记录，用带where条件的delete</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP协议面试题]]></title>
      <url>http://yoursite.com/2015/03/04/TCP%E5%8D%8F%E8%AE%AE%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="TCP报文到达确认机制"><a href="#TCP报文到达确认机制" class="headerlink" title="TCP报文到达确认机制"></a>TCP报文到达确认机制</h1><p>CP数据包中的序列号（Sequence Number）不是以报文段来进行编号的，而是将连接生存周期内传输的所有数据当作一个字节流，序列号就是整个字节流中每个字节的编号。一个TCP数据包中包含多个字节流的数据（即数据段），而且每个TCP数据包中的数据大小不一定相同。在建立TCP连接的三次握手过程中，通信双方各自已确定了初始的序号x和y，TCP每次传送的报文段中的序号字段值表示所要传送本报文中的第一个字节的序号。<br>TCP的报文到达确认（ACK），是对接收到的数据的最高序列号的确认，并向发送端返回一个下次接收时期望的TCP数据包的序列号（Ack Number）。例如，主机A发送的当前数据序号是400，数据长度是100，则接收端收到后会返回一个确认号是501的确认号给主机A。<br>TCP提供的确认机制，可以在通信过程中可以不对每一个TCP数据包发出单独的确认包（Delayed ACK机制），而是在传送数据时，顺便把确认信息传出，这样可以大大提高网络的利用率和传输效率。同时，TCP的确认机制，也可以一次确认多个数据报，例如，接收方收到了201，301，401的数据报，则只需要对401的数据包进行确认即可，对401的数据包的确认也意味着401之前的所有数据包都已经确认，这样也可以提高系统的效率。<br>若发送方在规定时间内没有收到接收方的确认信息，就要将未被确认的数据包重新发送。接收方如果收到一个有差错的报文，则丢弃此报文，并不向发送方发送确认信息。因此，TCP报文的重传机制是由设置的超时定时器来决定的，在定时的时间内没有收到确认信息，则进行重传。这个定时的时间值的设定非常重要，太大会使包重传的延时比较大，太小则可能没有来得及收到对方的确认包发送方就再次重传，会使网络陷入无休止的重传过程中。接收方如果收到了重复的报文，将会丢弃重复的报文，但是必须发回确认信息，否则对方会再次发送。<br>TCP协议应当保证数据报按序到达接收方。如果接收方收到的数据报文没有错误，只是未按序号，这种现象如何处理呢？TCP协议本身没有规定，而是由TCP协议的实现者自己去确定。通常有两种方法进行处理：一是对没有按序号到达的报文直接丢弃，二是将未按序号到达的数据包先放于缓冲区内，等待它前面的序号包到达后，再将它交给应用进程。后一种方法将会提高系统的效率。例如，发送方连续发送了每个报文中100个字节的TCP数据报，其序号分别是1，101，201，…,701。假如其它7个数据报都收到了，而201这个数据报没有收到，则接收端应当对1和101这两个数据报进行确认，并将数据递交给相关的应用进程，301至701这5个数据报则应当放于缓冲区，等到201这个数据报到达后，然后按序将201至701这些数据报递交给相关应用进程，并对701数据报进行确认，确保了应用进程级的TCP数据的按序到达。</p>
<h1 id="TCP-流量控制-差错控制"><a href="#TCP-流量控制-差错控制" class="headerlink" title="TCP 流量控制 差错控制"></a>TCP 流量控制 差错控制</h1><p>流量控制：<br>1、流量控制是管理两端的流量，以免会产生发送过块导致收端溢出，或者因收端处理太快而浪费时间的状态。用的是：滑动窗口，以字节为单位</p>
<p>2、窗口有3种动作：展开（右边向右），合拢（左边向右），收缩（右边向左）这三种动作受接收端的控制。<br>合拢：表示已经收到相应字节的确认了<br>展开：表示允许缓存发送更多的字节<br>收缩（非常不希望出现的，某些实现是禁止的）：表示本来可以发送的，现在不能发送；但是如果收缩的是那些已经发出的，就会有问题；为了避免，收端会等待到缓存中有更多缓存空间时才进行通信。<br>发端窗口的大小取决于收端的窗口大小rwnd（TCP报文的窗口大小字段）和拥塞窗口大小cwnd（见拥塞控制）<br>发端窗口大小 = min{ rwnd , cwnd };</p>
<p>3、关闭窗口：窗口缩回有个例外，就是发送rwnd=0表示暂时不愿意接收数据。这种情况下，发端不是把窗口收缩，二是停止发送数据。（为了比避免死锁，会用一些探测报定时发送试探，见定时器一节）</p>
<p>4、问题：某些时候，由于发端或收端的数据很慢，会引起大量的1字节数据痛惜，浪费很多资源。<br>（1）、发端的进程产生数据很慢时候，时不时的来个1字节数据，那么TCP就会1字节1字节的发送，效率很低。<br>解决方法（Nagle算法）：<br>a、将第一块数据发出去<br>b、然后等到发送缓存有足够多的数据（最大报文段长度），或者等到收端确认的ACK时再发送数据。<br>c、重复b的过程<br>（2）、收端进程由于消耗数据很慢，所以可能会有这么一种情况，收端会发送其窗口大小为1的信息，然后有是1字节的传输<br>解决办法（2种）<br>a、Clark方法：在接收缓存的一半变空，或者有足够空间放最大报文长度之前，宣告接收窗口大小为0<br>b、推迟确认：在对收到的报文段确认之前等待到足够的接收缓存，或者等待到一个时间段（现在一般定义500ms）</p>
<p>拥塞控制：<br>1、如果网络上的负载（发送到网络上的分组数）大于网络上的容量（网络同时能处理的分组数），就可能引起拥塞，判断网络拥塞的两个因素：延时和吞吐量。拥塞控制机制是：开环（预防）和闭环（消除）（见网络原理相关书籍，略）<br>tcp处理拥塞的三种策略：慢启动（指数增大），拥塞避免（加法增大），拥塞检测（除2减少，或叫做乘法减少）</p>
<p>2、慢启动：指数增大<br>/<em> ssthresh是慢开始门限，slow start threshold表示一个上限，一般的实现为65535B </em>/<br>cwnd = 1;(1表示一个MSS报文段，不是一个字节)<br>while （ cwnd &lt; ssthresh )<br>if（ 发出的报文段确认 ）<br>cwd *= 2;</p>
<p>3、拥塞避免：加法增大<br>当到达ssthresh之后，就是加法阶段了，每收到一个确认，cwd += 1；</p>
<p>4、拥塞检测：乘法减少（除2减少）<br>当报文需要重传时，说明拥塞可能发生了，由于重传有2种情况，所以也分两种处理<br>（1）、由于超时重传，这是拥塞的可能性比较大，如下做强反映调整<br>a、 ssthresh /= 2;<br>b、 cwnd = 1；<br>重新慢启动过程<br>（2）、由于收到3个重复的ACK的重传，采取弱反映：<br>a、ssthresh /= 2;<br>b、cwnd = ssthresh;<br>c、开始拥塞避免过程</p>
<p>差错控制：<br>1、TCP必须保证数据：按序，没有差错，没有部分丢失，没有重复的交给应用层。方法就是：校验和，确认，超时重传</p>
<p>2、校验和：和UDP的做法一样，也要伪首部，和UDP不同的是这个功能在TCP中是必须的</p>
<p>3、确认：ACK的确认机制（下面是一些原则）<br>a、ACK报文不需要确认，也不消耗序号<br>b、当一端发送数据时，尽量包含捎带确认。<br>c、收端推迟发送ACK报文段，如果仅有一个未确认的按序报文段；延迟到500ms，或者有第二个报文段接收时（转d），或者有数据要发送时（转b）<br>d、任何时候,不能有两个（以上）未确认的报文段（就是说如果收端有两个未确认的按序报文段，就马上发送ACK报文段进行确认）<br>e、当收到一个序号比期望序号还大的报文段时，马上发送ACK，让发端进行快重传<br>f、收到重复的报文段，就立即发送确认(解决ACK丢失问题)<br>g、丢失的报文段到达，发送确认，表示已经收到了丢失的报文</p>
<p>4、确认类型<br>累计确认：收端忽略掉所有失序报文，告知发端他期待下一个收到的序号，叫做肯定累计ACK。肯定是说：丢弃的，丢失的，重复的都不报告。<br>选择确认（SACK）：在某些新TCP实现里面实现了这个东西，报告失序和重复的数据，作伪TCP首部选项字段的一部分。</p>
<p>5、重传（两种情况） ： 重传定时器时间到，或者 发端收到重复的三个ACK（快重传）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络面试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1.网络结构<br>在OSI参考模型中，物理层的作用是透明的传输比特流。对等实体在一次交互作用中传送的信息单位称为协议数据单元，它包括控制信息和用户数据两部分。上下层实体之间的接口称为服务访问点(SAP)，网络层的服务访问点也称为网络地址，通常分为网络号和主机号。<br>OSI参考模型分为：物理层、数据链路层，网络层，传输层，会话层，表示层，应用层。<br>物理层涉及到在信道上传输的原始比特流。数据链路层的主要任务是加强物理层传输原始比特流的功能，使之对应的网络层显现为一条无错线路。发送包把输入数据封装在数据帧，按顺序传送出去并处理接受方回送的确认帧。网络层关系到子网的运行控制，其中一个关键问题是确认从源端到目的端如何选择路由。传输层的基本功能是从会话层接受数据而且把其分成较小的单元传递给网络层。会话层允许不同机器上的用户建立会话关系。<br>TCP/IP的五层结构图：物理层、数据链路层、网络层、运输层，应用层。<br>2．请你详细地解释一下IP协议的定义，在哪个层上面？主要有什么作用？TCP与UDP呢？<br>答：IP是Internet Protocol的简称，是网络层的主要协议，作用是提供不可靠、无连接的数据报传送。TCP是Transmit Control Protocol（传输控制协议）的缩写，在运输层，TCP提供一种面向连接的，可靠的字节流服务；UDP是User Datagram Protocol（用户数据报协议）的缩写，在运输层，UDP提供不可靠的传输数据服务。<br>3．请问交换机和路由器各自的实现原理是什么？分别在哪个层次上面实现的？<br>答：交换机属于ＯＳＩ第二层即数据链路层设备。它根据ＭＡＣ地址寻址，通过站表选择路由，站表的建立和维护由交换机自动进行。路由器属于ＯＳＩ第三层即网络层设备，它根据ＩＰ地址进行寻址，通过路由表路由协议产生。交换机最大的好处是快速，路由器最大的好处是控制能力强。<br>4.交换和路由的区别是什么？VLAN有什么特点？<br>交换是指转发和过滤帧，是交换机的工作，它在OSI参考模型的第二层。而路由是指网络线路当中非直连的链路，它是路由器的工作，在OSI参考模型的第三层。交换和路由的区别很多。首先，交换是不需要IP的，而路由需要，因为IP就是第三层的协议，第二层需要的是MAC地址；再有，第二层的技术和第三层不一样，第二层可以做VLAN、端口捆绑等，第三层可以做NAT、ACL、QOS等。<br>VLAN是虚拟局域网的英文缩写，它是一个纯二层的技术，它的特点有三：控制广播，安全，灵活性和可扩展性。<br>5.什么是SNMP协议？它有什么特点？SNMP协议需要专门的连接么？<br>答：SNMP(Simple Network Manager Protocol)即简单网络管理协议，它为网络管理系统提供了底层网络管理的框架。SNMP的特点是：SNMP易于实现；SNMP协议是开放的免费产品；<br>SNMP协议有很多详细的文档资料，网络业界对这个协议也有较深入的了解，这些都是SNMP协议进一步发展和改进的基础；SNMP协议可用于控制各种设备。<br>SNMP是一种无连接协议。无连接的意思是它不支持像TELNET或FTP这种专门的连接。通过使用请求报文和返回响应的方式，SNMP在管理代理和管理员之间传送消息。<br>6.路由表是做什么用的？在Linux环境中怎么配置一条默认路由？<br>答：路由表是用来决定如何将包从一个子网传送到另一个子网的，换句话说就是用来决定从一个网卡接受到的包应该送到哪一个网卡上去。路由表的每一行至少由目标网络号、netmask、到这个子网应该使用的网卡这3条信息。当路由器从一个网卡接受到一个包时，它扫描路由表的每一行，用里面的netmask和包里的目标IP地址做并逻辑运算(&amp;)找出目标网络号。如果此网络号和这一行里的网络号相同，就将这条路由保留下来作为备用路由。如果已经有备用路由了，就在这两条路由里将网络号最长的留下来，另一条丢掉。如此接着扫描下一行直到结束。如果扫描结束仍没有找到任何路由，就用默认路由。确定路由后，直接将包送到对应的网卡上去。<br>在Linux上可以用“route add default gw&lt;默认路由器IP&gt;”命令配置一条默认路由。<br>7.在网络中有两台主机A和B，通过路由器和其他交换机设备连接起来，已经确认物理连接正确无误，怎么来测试这两台机器是否连通？如果不通，怎么判断故障点？怎么排除故障？<br>答：测试这两台机器是否连通：从一台机器ping另一台机器。如果ping不同，用traceroute命令可以确定是哪个路由器不能连通，然后再找问题是否在交换设备或HUB或网线等。<br>8.每个路由器在寻找路由器时需要直到哪5部分信息？<br>答：所有的路由器需要如下信息为报文寻找路由：目的地址 报文发送的目的主机。邻站的确定 指明谁直接连接到路由器的接口上。路由的发现 发现邻站知道哪些网络。 选择路由 通过从邻站学习到的信息，提供最优的到达目的地的路径。 保持路由信息 路由器保存一张路由表，它存储所知道的所有路由信息。<br>9.什么是BGP?<br>答：BGP(Border Gateway Protocol,边界网关协议)是一种在自治系统之间动态交换路由器信息的路由协议。一个自治系统的经典定义是一个管理机制控制之下的一组路由器，它使用IGP和普通度量值向其他自治系统转发报文。<br>10.自适应网卡只有红灯闪烁，绿灯不亮，这种情况正常？<br>答：自适应网卡红灯代表Link/Act(连通/工作)，即连通时红灯长亮，传输数据时闪烁；绿灯代表FDX(全双工)，即全双工状态时亮，半双工状态时灭。如果一个半双工的网络设备和自适应网卡相连，由于这张网卡是自适应网卡，它就会工作在半双工状态，所以绿灯不亮也属于正常情况。<br>11.两台笔记本电脑连起来后ping不通，你觉得可能存在哪些问题？<br>答：(1)首先想到的就是你的网线问题。确认网线是否正确，电脑之间连的线和电脑与HUB之间连的线分正线、反线，是不同的。但是对于使用千兆位网卡的除外，千兆位网卡有自动识别的功能，既可以是正线也可以是反线。(2)局域网设置问题。电脑互连是要设置的。看看是否安装了必要的网络协议，最重要的是，IP地址是否设置正确。互连的时候，最好一台为主，一台为副，主的设为网关。(3)网卡驱动未正确安装。(4)防火墙设置有问题。(5)是否有什么软件阻止ping包。<br>12.解释什么叫“透明”？什么叫“网格”？<br>答：透明即向高层隐蔽其具体实现。网格就是有规律的方格集，是虚拟的。网格是把整个因特网整合一台巨大的超级计算机，实现各种资源的全面共享。网格的根本特征不是它的规模，而是资源共享，消除资源孤岛。在不同地区的计算机各自分析某一项计算的一部分，综合起来计算出同一项东西。<br>13.我们在南京，与深圳的网络是通的，但和北京的网络不通，你以怎样的顺序查找问题所在？<br>答：查找路由器是否可以测试到目的地、所经过的路由器及路由延迟状态。通过这个命令看最后的一个数据包是在哪儿被丢弃或中断的。<br>14.香农定理是什么？<br>答：香农定理：香农定理描述了有限带宽、有随机热噪声信道的最大传输速率与信道带宽、信号噪声功率比之间的关系。在有随机热噪声的信道上传输数据信号时，数据传输率Rmax与信道带宽B、信噪比S/N的关系为：Rmax=B<em>log2(1+S/N)。<br>香农定理由如下的公式给出：C=B</em>log2(1+S/N)，其中C是可得到的链路速度，B是链路的带宽，S是平均信号功率，N是平均噪声功率，信噪比(S/N)通常用分贝(dB)表示，分贝数＝10*lg(S/N)。<br>15.IP地址的分类<br>A类、B类和C类地址的网络号字段net-id分别为1，2和3字节长，而在网络号字段的最前面有1～3bit的类别比特，其数值分别规定为0，10，110。A类、B类和C类地址的主机号字段分别为3个、2个和1个字节长。<br>IP地址的使用范围<br>网络类别<br>最大网络数<br>第一个可用的网络号<br>最后一个可用的网络号<br>每个网络中的最大主机数<br>A<br>126(27-2)<br>1<br>126<br>16777214(224-2)<br>B<br>16384(214)<br>128.0<br>191.255<br>65534(216-2)<br>C<br>2097152(221)<br>192.0.0<br>223.255.255<br>254(28-2)<br>一般不使用的特殊IP地址<br>net-id<br>host-id<br>源地址使用<br>目的地址使用<br>代表的意思<br>0<br>0<br>可以<br>不可<br>在本网络上的主机<br>0<br>host-id<br>可以<br>不可<br>在本网络上的某个主机<br>全1<br>全1<br>不可<br>可以<br>只在本网络上进行广播<br>net-id<br>全1<br>不可<br>可以<br>对net-id上的所有主机进行广播<br>127<br>任何数<br>可以<br>可以<br>用作本地软件环回测试之用<br>16.TCP/IP 建立连接的过程?(3-way shake)<br>答：在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>17. IP组播有那些好处?<br>答：Internet上产生的许多新的应用，特别是高带宽的多媒体应用，带来了带宽的急剧<br>消耗和网络拥挤问题。组播是一种允许一个或多个发送者（组播源）发送单一的数据包<br>到多个接收者（一次的，同时的）的网络技术。组播可以大大的节省网络带宽，因为无<br>论有多少个目标地址，在整个网络的任何一条链路上只传送单一的数据包。所以说组播<br>技术的核心就是针对如何节约网络资源的前提下保证服务质量。<br>18.基础知识<br>1) 计算机网络：利用各种通信手段，把分散的计算机有机的连在一起，达到互相通信而且共享软件、硬件和数据等资源的系统。<br>2) 组成数据通信网络的基本要素为信源、信宿、传输系统3项。<br>3) 通信模型：信源(工作站)-&gt;发送器(调制解调器) -&gt;传输系统(公用电话网) -&gt;接收机(调制解调器) -&gt;信宿(服务器)<br>4) 10BASE-T标准规定的网络的网络拓扑结构是星形,网络速率是10Mb/S,网络所采用的网络介质是双绞线。<br>5) 传统的加密方法可以分成两类：替代密码和换位密码。现代密码学采用的算法主要有：秘密密钥算法和公开密钥算法。<br>6) 数据传输通常可以分成5个阶段：(1)建立通信链路;(2)建立数据传输链路；(3)传送通信控制信号和传输数据信息；(4)数据传输结束，双方通过控制信息确认传输结束;(5)切断数据传输链路。<br>7) 在WWW中，使用统一资源定位器URL来唯一地标识和定位因特网中的资源，它由3部分组成：客户与服务器之间所使用的通信协议和主机域名（或IP地址）和文件路径和文件名。<br>8) 第一代网络以单计算机为中心的联机系统，第二代网络以远程大规模互联为主要特点。<br>9) 单工是只能有一个方向的通信而没有反方向的交互；半双工是通信的双方都可以发送信息。但不能双方同时发送信息。全双工是通信的双方都可以同时发送信息和接受信息。<br>10)计算机通信子网技术发展的顺序是线路交换－报文组交换－帧中继－ATM。<br>11)使用同样网络操作系统的两个局域网络连接时，为使连接的网络从网络层到应用层都能一致，连接时必须使用网桥。<br>12)IEEE　802将数据链路层划分为两个子层，上子层是逻辑链路控制LLC，下子层是媒体接入控制MAC。<br>13)涉及OSI模型层次最多的设备是网关。<br>14)FTP工作时使用2条TCP连接来完成文件传输。<br>15)ICMP是Internet控制报文协议，处于网络层（IP层）。<br>16)主要拓扑结构：总线、星形、树形，环形。<br>17)异步传输模式(ATM)本质上一种高速分组交换模式，用固定大小的分组单元传送信息,支持多媒体通信，包括音频、视频和数据,结合了线路交换和分组交换的优点，被用于B-ISDN。<br>18)分组交换：以分组为单位，在网络层上进行；帧中继：以帧为单位，在数据链路层上进行；异步传输：以信元为单位，在数据链路层上进行，建立在大容量光纤介质基础上的，适用于LAN和WAN。<br>19)有线传输介质：同轴电缆，双绞线和光纤。<br>20)转发器将信号放大并整形后再转发出去，转发器又称为中继器，转发器的作用是消除信号由于经过一长段电缆而造成的失真和哀减，使信号的波形和强度达到所要求的指标，它工作在物理层，中继器获取衰减或损失的信号并重新生成它。<br>21)Internet采用TCP/IP协议;Internet物理地址和IP地址转换采用ARP (Address Resolution Protocol)（地址解析协议;IP地址由两部分组成，网络号和主机号。不过是要和“子网掩码”按位与之后才能区分哪些是网络位哪些是主机位。<br>19.试题(选择题，只是答案中之一。)：<br>1) 如果把一个网络40.15.0.0分为两个子网，第一个子网是40.15.0.0/17，那么第二个子网将会是40.15.128.0/17。解析：让主网分成两个网段，子网掩码分别是0xff 0xff 0x80 0x00和0xff 0xff 0x00 0x00。<br>2) 如果一个蠕虫病毒攻击了一个家用PC机的A类地址主机的话，这个地址最有可能接受很多ICMP目的无法抵达包。 解析：大量发出IP请求，肯定很多不可达，返回不可达错误。<br>3) 在一个IP数据包到达目的地址之前，它可能成为碎片，而且不会重组。 解析：网络问题，包未达到终点不可能重组，但可以分散成碎片。<br>4) 在TCP/IP协议栈里，如果出现阻塞情况，下面哪种情况最有可能发生?丢包 解析：网络阻塞问题，拥塞导致丢包。<br>5) 文件传输是基于哪种协议？TCP 解析：FTP是有连接的服务，所以必须基于TCP协议。<br>6) 一个C类网络最多能容纳多少台主机？ 254 解析：子网中IP为0～255，其中0和255不能用，所以是254个。<br>7) SMTP的全称是“Simple Mail Transfer Protocol”,即简单邮件传输协议。 SMTP 协议属于TCP/IP协议族，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP服务器就是遵循SMTP协议的邮件发送服务器。<br>8) 以太网转换控制包是基于目的IP地址。<br>9) 如果TCP服务器在客户端发出数据报之前已经崩溃了，TCP/IP栈可能返回一个SYN。解析：SYN包是TCP连接的第一个包，是非常小的一种数据包。SYN攻击包括大量此类的包。由于这些包看上去来自实际不存在的站点，因此无法有效地进行处理。SYN攻击就是利用TCP 连接的3次握手机制，但发起攻击端只来一两次握手，而被攻击端一直在试图完成TCP连接，因此造成资源不足。<br>10)在Windows2000操作系统中，配置IP地址的命令是ipconfig。若用ping命令来测试本机是否安装了TCP/IP协议，则正确的命令是ping 127.0.0.1。如果要列出本机当前建立的连接，可以使用的命令是netstat –a。</p>
<p>操作系统<br>1.基本知识点：<br>1) 操作系统是控制和管理计算机软硬件资源，以尽量合理有效的方法组织多个用户共享多种资源的程序集合。<br>2) 操作系统的基本功能：(1)处理机管理。主要功能包括进程控制、进程调度、进程同步和进程通信。(2)存储器管理。主要功能包括内存分配、地址映射、内存保护和内存扩充。(3)设备管，也叫I/O管理。主要功能包括缓冲区管理、设备分配、设备驱动和设备的无关性处理。(4)文件管理。主要功能包括文件存储空间的管理、文件操作的一般管理、目录管理、文件的读写管理和存取控制。(5)用户界面管理。操作系统的用户界面就是操作系统与用户的接口，包括控制接口和程序接口。<br>3) 现代操作系统的基本特征：并发性、共享性、虚拟性、异步性和不确定性。<br>4) 所谓中断是指系统发生某一事件后，CPU暂停正在执行的程序去执行处理该事件的程序过程，处理中断事件的程序称为中断处理程序，产生中断信号的那个部件称为中断源。中断处理具体过程：保存现场；分析原因，转中断处理程序；恢复现场。<br>5) 进程是一个具有独立功能的程序关于数据集合的一次可以并发执行的运行活动，其基本特征：动态特征、并发特征、独立性、相互制约性。进程的构成：程序、数据和进程控制块。进程有三种基本的调度状态：执行状态、就绪状态和等待状态。<br>6) 进程的引入大大地提高了资源的利用率和系统的吞吐量，而引入线程的目的是为了减少程序并发所付出的系统开销。进程是资源分配的单位，而线程是系统调度的单位。<br>7) 所谓死锁是多个进程间的一种僵持状态。进程死锁的原因:资源竞争及进程推进顺序非法。死锁的4个必要条件：互斥、占有等待、不可剥夺、环路。死锁的处理：鸵鸟策略、预防策略、避免策略、检测与解除死锁。<br>8) 临界资源是一次只允许一个进程使用的资源。临界区是在进程中操作临界资源的程序段。<br>2．进程和线程的区别？<br>答：线程是指进程内的一个执行单元,也是进程内的可调度实体.与进程的区别:(1)调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。(2)并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行。(3)拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源. (4)系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。<br>3.网络编程中设计并发服务器，使用多进程 与 多线程 ，请问有什么区别？<br>解析：(1)进程：子进程是父进程的复制品。子进程获得父进程数据空间、堆和栈的复制品<br>(2)线程：相对与进程而言，线程是一个更加接近与执行体的概念，它可以与同进程的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。<br>两者都可以提高程序的并发度，提高程序运行效率和响应时间。线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。<br>答:用多进程时每个进程有自己的地址空间，线程则共享地址空间。所有其他区别都是由此而来的：(1)速度：线程产生的速度快，线程间的通信快，切换快等，因为它们在同一个地址空间内。(2)资源利用率：线程的资源利用率比较好也是因为它们在同一个地址空间内。(3)同步问题：线程使用公共变量/内存时需要使用同步机制，还是因为它们在同一个地址空间内。<br>4. 操作系统中常见的进程调度策略有哪几种？<br>答：FCFS(先来先服务)，优先级，时间片轮转，多队列、多级反馈队列。<br>5.进程间的通信如何实现？<br>答：现在最常见的进程间通信的方式有：信号，信号量，消息队列，共享内存，管道。信号是使用信号处理器来进行的，信号量是使用P、V操作来实现的。消息队列是比较高级的一种进程间通信方法，因为它真的可以在进程间传送消息。<br>6.在Windows编程中互斥器(mutex)的作用和临界区(critical section)类似，请说一下二者间的主要区别。<br>答：两者的区别是mutex开业用于进程之间互斥，critical section是线程之间的互斥。<br>7.进程进入等待状态有哪几种方式？<br>答：CPU调度给优先级更高的Thread(线程)，原先Thread 进入Waiting(等待)状态。阻塞的Thread获得资源或者信号，进入Waiting状态。在时间片轮转的情况下，如果时间片到了，也将进入等待状态。<br>8.试说明进程在三个基本状态之间转换的典型原因。<br>答：a.处于就绪状态的进程，当进程调度程序为之分配了处理机后，该进程便由就绪状态变为执行状态。b.当前进程因发生某事件而无法执行，如访问已被占有的临界资源，就会使进程由执行状态变为阻塞状态。c.当前进程因事件片用完而被暂停执行，该进程便由执行状态变为就绪状态。<br>9.同步机构应遵循哪些基本准则？<br>答：a.空闲让进；b.忙则等待；c.有限等待；d.让权等待。<br>10.在单处理机环境下，进程间有哪几种通信方式？<br>答：a.共享存储器系统通信方式；b.消息传递系统通信方式；c.管道通信方式。<br>11.试比较消息队列与管道通信机制。<br>答：a.所谓管道，是指用于连接一个读进程和一个写进程，以实现它们之间通信的共享文件，又称pipe文件，管道通信是属于共享存储系统的。b.消息队列通信机制属于消息传递系统通信机制，存在通信链路，有消息的格式，有若干缓冲队列，采用独特的发送原语和接受原语。<br>12.在请求分页系统中，常采用哪几种页面置换算法？<br>答：a.最佳置换算法；b.先进先出算法；c.最近最久未使用LRU置换算法；d.Clock置换算法；e.此外，还有最少使用置换算法和页面缓冲算法。</p>
<p>数据库<br>1.基础知识点：<br>1NF:第一范式。如果关系模式R的所有属性的值域中每一个值都是不可再分解的值，则称R属于第一范式模式。第一范式的模式要求属性值不可再分裂成更小部分，即属性项不能是属性组合或由组属性组成。2NF:第二范式。如果关系模式R为第一范式，并且R中每一个非主属性完全函数依赖于R的某个候选键，则称R为第二范式模式。(如果A是关系模式R的候选键的一个属性，则称A是R的主属性，否则称A是R的非主属性。) 3NF:第三范式。如果关系模式R是第二范式，且每个非主属性都不传递依赖于R的候选键，则称R是第三范式的模式。 BCNF：BC模式。如果关系模式R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R为BCNF的模式。4NF:第四范式。设R是一个关系模式，D是R上的多值依赖集合。如果 D中成立非平凡多值依赖X→→Y时，X必是R的超键，那么称R是第四范式的模式。<br>2.试题<br>1) 设有关系R(S,D,M)，其函数依赖集F={S→D,D→M}。则关系R至多满足2NF。 解析：属于依赖关系，所有至多满足第二范式。<br>2) 找出表ppp里面num最小的数，不能使用min函数。 答：select <em> from ppp where num&lt;=all(select num from ppp) 或者：select top 1 num from ppp order by num。<br>3) 找出表ppp里面最小的数，可以使用min函数。 答：select </em> from ppp where num=（select Min(num) from ppp）。<br>4) 选择表ppp2中num重复的记录。 答： select <em> from ppp2 where num in(select num from ppp2 group by num having(count(num)&gt;1))。<br>5) 写出复制表、拷贝表和四表联合的SQL语句。 答：复制表(只复制结构，源表名：A,新表名：B): select </em> into B from A where 1=0 拷贝表(拷贝结构，源表名：A,新表名：B): select <em> into B from A 四表联查： select </em> from A,B,C,D where 关联条件<br>6) 在SQL Server中如何用SQL语句建立一张临时表？ 答： create table #Temp(字段1 类型，字段2 类型…) 注意，临时表要在表名前面加 “＃”。<br>7) %代表任意长度(长度可以为0)的字符串，<em> 代表任意单个字符。如果用户要查询的语句本身就含有%或</em>，这时就要使用escape’&lt;换码字符&gt;’短语对通配符进行转义了。<br>8) 集函数SUM,AVG中的列必须是数值型。<br>综合的是选择题<br>9) 每一个部门的每个工种的工资最大值？ select dept_id,job_cat,max(salary)from employee group by dept_id,job_cat;<br>10)在primary 和unique两种约束的情况下，Oracle数据库会隐形创建一个唯一索引。<br>11)在select语句中包含一个where关键词，group by关键词一般在where关键词之后，order by 关键词一般在select语句中所有关键词之后。<br>12)select last_name,salary from employees order by salary; select last_name,salary from employees order by 2 asc; 这两个SQL语句是相同的结果。<br>13)如果你想把时间显示成像“2005111014：44： 17”这样的格式，SQL语句： select to_char(sydate,’yyyymmdd hh24:mi:ss’)from dual;<br>14)select语句中用来连接字符串的符号是+。<br>15)如果要从字符串“Hello world”中提取出“ello world”这样的结果，SQL语句： select lower(trim(‘H’from ‘Hello world’))from dual;<br>3.存储过程和函数的区别是什么？<br>答：存储过程是用户定义的一系列SQL语句的集合，涉及特定表或其他对象的任务，用户可以调用存储过程。而函数通常是数据库已定义的方法，它接受参数并返回某种类型的值，并且不涉及特定用户表。<br>4.事务是什么？<br>答：事务是作为一个逻辑单元执行的一系列操作。一个逻辑工作单元必须有4个属性，称为ACID(原子性、一致性、隔离性和持久性)属性，只有这样才能称为一个事务。<br>5.游标的作用是什么？如何知道游标已经到了最后？<br>答：游标用于定位结果集的行。通过判断全局变量@@FETCH_STATUS可以判断其是否到了最后。通常此变量不等于0表示出错或到了最后。<br>6.触发器分为事前触发和事后触发，这两种触发有何区别？语句级触发和行级触发有何区别？<br>答：事前触发器运行于触发事件发生之前，而事后触发器运行于触发事件发生之后。语句级触发器可以在语句执行前或后执行，而行级触发在触发器所影响的每一行触发一次。<br>7.什么叫做SQL注入式攻击？如何防范？<br>答：所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域页面请求的查询字符串中，欺骗服务器执行恶意的SQL命令。在某些表单中，用户输入的内容直接用来构造动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。防范SQL注入式攻击闯入：只要在利用表单输入的内容构造SQL命令之前，把所有输入内容过滤一番就可以了。过滤输入内容可以按多种方式进行。第一，替换单引号，即把所有单独出现的单引号改成两个单引号，防止攻击者修改SQL命令的含义。第二，删除用户输入内容中的所有连字符，防止攻击者顺利获得访问权限。第三，对于用来执行查询的数据库账户，限制其权限。第四，用存储过程来执行所有的查询。第五，检查用户输入的合法性，确信输入的内容只包含合法的数据。数据检查应当在客户端和服务器端都执行。第六，将用户登录名称、密码等数据加密保存。第七，检查提取数据的查询所返回的记录数量。<br>8.为了防止在查询记录的时候被其他用户更改记录，应该采用什么方法？如何用查询语句实现该方法？<br>答: 添加一个“时间戳”类型的字段就可以了。timestamp这种数据类型会根据当前时间自动产生一个时间字符串，确保这些数在数据库中是唯一的。timestamp一般用做给表行加版本戳的机制，存储大小为8个字节。一个表只能有一个timestamp列。每次插入或更新包含timestamp列的行时，timestamp列中的值均会更新。这一属性使timestamp列不适合作为键使用，尤其是不能作为主键使用。对行的任何更新都会更改timestamp值，从而更改键值。<br>9.有一个数据库，只有一个表，包含着1000个记录，你能想出一种解决方案来把第五行到第七行的记录取出来么？不要使用航标和索引。<br>答：第一步建立数据库：<br>declare @i int<br>set @i=1<br>create table #T(userid int)<br>while (@i&lt;=10)<br>begin<br>insert into #T<br>select @i<br>set @i=@i+1<br>end<br>select userid from<br>(select top 3 userid from(selec top 7 userid from #T order by userid)Ta order by userid desc<br>)TB order by userid<br>删除数据库: drop table #T<br>提取数据：<br>select top 3 userid from T where userid not in(select top 4 userid from T order by userid)order by userid<br>或者：select top 7 userid from T where userid &gt;ANY(select top 4 userid from T order by userid)order by userid<br>或者：select top 7 userid from T where userid &gt;ALL(select top 4 userid from T order by userid)order by userid<br>10.什么是聚集索引？什么是非聚集索引？什么是主键？<br>答：表中经常有一个列或列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键。聚集索引确定表中数据的物理顺序。一个表中只能包含一个聚集索引。非聚集索引与课本中的索引类似。数据存储在一个地方，索引存储在另一个地方，索引带有指针指向数据的存储位置。索引中的项目按索引键值的顺序存储，而表中的信息按另一种顺序存储。<br>11.现有一张表，有两个字段：ID,NAME。ID为主键。如果希望查询出所有拥有2个或更多ID 的NAME，查询语句应该如何写？<br>答：select [Name] from [table] group by(name) having(count([ID]&gt;=2)。<br>12.设供应商供应零件的关系模式为SP(Sno,Pno,Qty),其中Sno表示供应商号，Pno表示零件号，Qty表示零件数量。整个数据库如下表：<br>Sno Pno Qty<br>168 r1 3<br>168 r2 4<br>168 r3 7<br>169 r2 1<br>169 r3 5<br>170 r4 8<br>171 r7 5<br>172 r2 1<br>172 r7 3<br>请问下面的SQL语句返回值是什么？<br>Select <em> from SP SPY where exists (select </em> from SP SPZ where Sno)<br>解析：在exists 中的子查询在这个例子中只返回一个值。因为从子查询中返回的行数至少有一行exits返回为true,这使得表中的所有记录都被显示了出来。<br>请问下面的SQL语句返回值是什么？<br>Select <em> from SP SPY where exists (select </em> from SP SPZ where Sno=’168’ and SPZ.Pno=SPY.Pno);<br>解析：返回与168号供应商所提供零件相同编号的情况。<br>若想得到与168号供应上所提供零件相同的全部供应商的全部产品情况？<br>解析：Select <em> from SP where Sno in (select Sno from SP where Pno in (select Pno from SP from SP where Sno=’168’));<br>或者：Select </em> from SP SPX where exists (select <em> from SP SPY where SPY.Sno=’168’ and exists (select </em> from SP SPZ where SPZ.Sno=SPX.Sno and SPZ.Pno=SPY.Pno));<br>13. 触发器怎么工作的?<br>答：触发器主要是通过事件进行触发而被执行的，当对某一表进行诸如UPDATE、 INSERT、 DELETE 这些操作时，数据库就会自动执行触发器所定义的SQL 语句，从而确保对数据的处理必须符合由这些SQL 语句所定义的规则。<br>14.在一个文件中有 10G 个整数，乱序排列，要求找出中位数。内存限制为 2G。只写出思路即可。(腾讯笔试题)<br>答：(1)把整数分成256M段，每段可以用64位整数保存该段数据个数，256M<em>8 = 2G内存，先清0。(2)读10G整数，把整数映射到256M段中，增加相应段的记数。(3)扫描256M段的记数，找到中位数的段和中位数的段前面所有段的记数，可以把其他段的内存释放。(4)因中位数段的可能整数取值已经比较小(如果是32bit整数，当然如果是64bit整数的话，可以再次分段)，对每个整数做一个记数，再读一次10G整数，只读取中位数段对应的整数，并设置记数。(5)对新的记数扫描一次，即可找到中位数。<br>如果是32bit整数，读10G整数2次，扫描256M记数一次，后一次记数因数量很小，可以忽略不记。<br>解释一下：假设是32bit整数，按无符号整数处理整数分成256M段? 整数范围是0 - 2^32 - 1 一共有4G种取值，4G/256M = 16，每16个数算一段 0-15是1段，16-31是一段，…整数映射到256M段中? 如果整数是0-15，则增加第一段记数，如果整数是16-31，则增加第二段记数，…其实可以不用分256M段，可以分的段数少一些，这样在扫描记数段时会快一些，还能节省一些内存。<br>15.一般数据库若出现日志满了，会出现什么情况，是否还能使用？<br>答：只能执行查询等读操作，不能执行更改，备份等写操作，原因是任何写操作都要记录日志。也就是说基本上处于不能使用的状态。<br>16.SQL Server是否支持行级锁，有什么好处？<br>答：支持，设立封锁机制主要是为了对并发操作进行控制，对干扰进行封锁，保证数据<br>的一致性和准确性，行级封锁确保在用户取得被更新的行到该行进行更新这段时间内不<br>被其它用户所修改。因而行级锁即可保证数据的一致性又能提高数据操作的并发性。<br>17.磁盘柜上有14块73G的磁盘， 数据库为200G 大小包括日志文件，如何设置磁盘（要说明这14磁盘是怎么用的）？<br>答：这个问题应该是考察硬件知识和数据库物理部署。首先需要知道这些磁盘是否要用于存放数据库备份文件和数据库性能（读/写）要求。来决定raid的级别。1）、如果偏重于性能考虑，而且不用存放数据库备份文件的话，考虑使用raid0+1，这样可使用的磁盘容量为：14</em>73<em>50%=511G。2）、如果读/写性能要求不高，而且还比较抠门的话，可以考虑raid5，这样可使用的磁盘容量为：13</em>73=949G。至于如何使用应该是说数据库物理文件的部署。注意说出将tempdb,data file,log file分开存放以减少I/O竞争即可。其实现在的条带化磁盘一般都会自动将文件分存，人为的分布已经越来越不重要了。<br>18..有两服务器群集，分别为node1和node2 现在要打win200系统补丁，打完后，要重新启动，如何打补丁，不能影响用户使用（要用群集的术语详细说明）。<br>答：这个具体操作有点忘了。大致是：首先看哪个节点正在使用，通过节点IP（私有）访问另一个空闲节点，为其打上补丁，然后在群集管理器中停止该节点（也可以用命令行方式），重新启动。等到启动完毕，将切换使用节点，为另一个节点打补丁。然后重新启动。<br>19.有一个A 数据库，分别复制到B和C， B 要求 每次数据更新 也同时更新，C 每天更新一次就行，如何制定复制策略!<br>答：这个应该考察的是复制知识。a-&gt;b 1）、如果使用SQL Server复制功能，那么让a-&gt;b使用事务性复制方式（同步复制）。2）、如果表不多，也可以自己写触发器，利用linkserver+distribute transaction。 a-&gt;c 1）、如果使用SQL Server复制功能，那么让a-&gt;b使用快照复制方式，在某一时间点进行一次性复制。2）、也可以自己写bat，将a备份后，通过ftp传输备份介质，恢复c。（比较麻烦，不推荐）<br>20.有一个order 表，有90个字段，20个索引，15个复合索引，其中有3个索引字段超过10个，如何进行优化<br>答：这个问题问的比较没水平。你不详细说明这个表的使用方式（读写类的，还是几乎是静态表），就问人家怎么优化？！！还不如问问索引的分布访问原理更好。<br>看得出他就想让你说：那三个索引超过10个，B树遍例效率很低，适当减少字段数目。如果是SQL2005，可以将选择性不好的字段放在“索引附加字段”中，以保证索引覆盖。而且SQL Server由于有锁升级的毛病，可以考虑拆开表。<br>21..有一个数据库200G大小，每天增加50M 允许用户随时访问，制定备份策略（详细说明）。<br>答：这种情况可以采用增量备份方式。每周日做一次全备份，周一到周六作增量备份（由于数据量较少，可以考虑每30分钟增量备份一次）。这样可以尽量减少性能消耗，而且如果transaction log丢失的情况下，可以保证最多丢失30分钟数据。<br>22..管理50台数据库，日常工作是检查数据库作业是否完成，你该如何完成这项检查工作？<br>答：这个比较简单。在每台机器上建立linkserver，然后在DBA管理服务器上做个分布式视图，每次查询该视图，各个机器上的作业情况一目了然。分布式视图写法：<br>create view vw_job<br>as<br>select ‘机器一’ as MName,<em> from linkserver1..sysjobactivity<br>union all<br>select ‘机器二’ as MName,</em> from linkserver2..sysjobactivity<br>union all<br>select ‘机器三’ as MName,* from linkserver3..sysjobactivity<br>…<br>23.自定义函数和存储过程的区别是什么，什么情况下只能用自定义函数，什么情况下只能用存储过程<br>答：这个应该是考察存储过程编写经验。一般自定义函数主要用于其他sql中的调用，如：<br>select yourfunc(…) from table 这种情况下，一般只能通过函数实现。存储过程的功能要远远强于函数，例如动态执行sql（sp_executesql）的使用和一些特殊的功能，自定义函数中是不支持的，只能用存储过程实现。<br>24.如果想配置SQL Mail 应该在服务器安装哪些软件！<br>答：需要哪些软件？安个outlook express就可以了。sql server提供接口存储过程，非常简单。<br>25.学生其存放在Student表中，学生选课情况存放在SC表中，课程情况存放在Course表中。<br>(1)查询与“刘晨”在同一个系学习的学生。<br>答：SELECT Sno,Sname,Sdept FROM Student WHERE Sdept IN(SELECT Sdept FROM Student WHERE Sname=’刘晨’)；<br>或者：SELECT S1.Sno,S1.Sname,S1.Sdept FROM Student S1,Student S2 WHERE S1.Sdept=S2.Sdept AND S2.Sname=’刘晨’；<br>(2)查询选修了课程名为“信息系统”的学生学号和姓名<br>答：SELECT Sno,Sname FROM Student WHERE Sno IN(SELECT Sno FROM SC) WHERE Cno IN(SELECT Cno FROM Course WHERE Cname=’信息系统’)；<br>或者：SELECT Sno,Sname FROM Student,SC,Course WHERE Student.Sno=SC.Sno AND SC.Cno=Course.Cno AND Course.Cname=’信息系统’；</p>
<p>COM<br>1.什么是COM?你怎么理解COM?<br>答：Components Object Model(COM)是软件组件互相通信的一种方式。它是一种二进制和网络标准，允许任意两个组件互相通信，而不管它们是在什么计算机上运行(只要计算机是相连的)，不管各计算机运行的是什么操作系统(只要该系统支持COM),也不管该组件是用什么语言编写的。COM还提供了位置透明性：当你编写组件时，其他组件是进程内DLL、本地EXE，还是位于其他计算机上的组件，对用户而言都无所谓。<br>首先，COM对象被很好地封装起来。你无法访问对象的内部实现细节，你无法知道对象使用了什么数据结构，但是我们可以通过接口来访问COM对象里面的方法。<br>概括地说，COM具有如下一些优越性：(1)编程技术难度和工作量降低，开发周期变短，开发成本降低。(2)实现分层次的编程，从而促进了软件的专业化生产。(3)软件的复用率提高，使软件的使用效率得到提高并延长了使用寿命。<br>2.COM是接口么？<br>答：(1)COM不是接口，也不是对象，它是一种标准。(2)符合COM标准的对象就是COM对象。其实COM对象无非是实现了很多接口的对象而已。(3)COM对象必须实现IUnKnown接口,这个接口是管理COM对象生命周期的。当COM对象不使用的时候，这个接口定义的方法负责释放内存。(4)QueryInterface(QI)，即所谓查询接口。由于COM对象有很多个接口，不同的接口管理着COM的不同类型的方法。因此从一个接口可以使用的方法转到另一个接口可以使用的方法的过程称为QI,这个过程是由Idispatch接口管理的。(5)GUIDs每个组件都有一个独一无二的标识，这个标识符就是COM组件的身份，它是一个128位的数字，由系统自由分配。(6)一个COM对象可以有多个接口，一个接口也完全可以被多个COM 对象实现。(7)接口分为两种：内置接口和外置接口。前一种定义的是COM对象的方法和属性，用implements实现，COM对象必须实现所有的接口内容；后一种定义的是COM对象的事件，用withEvents实现，这种接口在实现的时候不必实现所有的内容。(8)COM组件必须被注册后才能使用，它得到注册表那里去登记“户口”。<br>3.COM有什么缺陷？<br>答：COM组件很不错，可是它也有致命的缺陷，这个缺陷就来自它本身。COM是可以被重用的，COM对象的实现过程也可以被修改升级(定义是不能修改的)。如果两个程序都使用一个COM对象，而这个COM组件升级的话，很可能会出现某个程序无非使用新组件的情况，这被称为“DLL HELL”（DLL灾难）。有时候我们安装了新软件后很多别的软件就无法使用了，很大程度上就是因为这个DLL HELL。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[豌豆荚面试题]]></title>
      <url>http://yoursite.com/2015/03/04/%E8%B1%8C%E8%B1%86%E8%8D%9A%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1. 字节对齐<br>现代计算机中内存空间都是按照byte划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。<br>对齐的作用和原因：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。比如有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误,那么在这种架构下编程必须保证字节对齐.其他平台可能没有这种情况，但是最常见的是如果不按照适合其平台要求对 数据存放进行对齐，会在存取效率上带来损失。比如有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那 么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数 据。显然在读取效率上下降很多。<br>2.虚函数原理<br>虚函数是为了实现多态。多态的实现需要虚函数和动态绑定技术。实现方式：基类使用虚函数；<br>子类覆盖该函数；用一个基类的指针或引用只想子类对象，在运行的过程中，通过查找该对象的虚函数表实现多态。虚函数表在每个对象最开始的地方。<br>3.函数指针<br>int(<em>f)(int) 函数指针<br>int(</em>f[10])(int) 函数指针数组<br>4.编译器和连接器和加载器的问题<br>编译器和汇编器创建了目标文件（包含由源程序生成的二进制代码和数据）。链接器<br>将多个目标文件合并成一个，加载器读取这些目标文件并将它们加载到内存中（在一个集成<br>编程环境中<br>一个目标文件包含五类信息。<br>● 头信息：关于文件的整体信息，诸如代码大小，翻译成该目标文件的源文件名称，<br>和创建日期等。<br>● 目标代码：由编译器或汇编器产生的二进制指令和数据。<br>● 重定位信息：目标代码中的一个位置列表，链接器在修改目标代码的地址时会对它<br>进行调整。<br>● 符号：该模块中定义的全局符号，以及从其它模块导入的或者由链接器定义的符号。<br>● 调试信息：目标代码中与链接无关但会被调试器使用到的其它信息<br>5. select, poll 和epoll的原理和区别<br>在Linux Socket服务器短编程时，为了处理大量客户的连接请求，需要使用非阻塞I/O和复用，select、poll和epoll是Linux API提供的I/O复用方式<br>（1）select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。<br>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。<br>（3）不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。<br>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。<br>从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。<br>（3）主要是epoll_create,epoll_ctl和epoll_wait三个函数。epoll_create函数创建epoll文件描述符，参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。返回是epoll描述符。-1表示创建失败。epoll_ctl 控制对指定描述符fd执行op操作，event是与fd关联的监听事件。op操作有三种：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。epoll_wait 等待epfd上的io事件，最多返回maxevents个事件。<br>在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。<br>epoll的优点主要是一下几个方面：<br>a. 监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左 右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也 不是一种完美的方案。<br>b. IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。<br>c. 支持电平触发和边沿触发（只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发）两种方式，理论上边缘触发的性能要更高一些，但是代码实现相当复杂。<br>d. mmap加速内核与用户空间的信息传递。epoll是通过内核于用户空间mmap同一块内存，避免了无畏的内存拷贝。<br>6.stl的sort是如何实现的<br>STL的sort()算法，数据量大时采用Quick Sort，分段递归排序，一旦分段后的数据量小于某个门槛，为避免Quick Sort的递归调用带来过大的额外负荷，就改用Insertion Sort。如果递归层次过深，还会改用Heap Sort。<br>为什么是Insertion Sort，而不是Bubble Sort。<br>选择排序(Selection sort)，插入排序(Insertion Sort)，冒泡排序(Bubble Sort)。这三个排序是初学者必须知道的三个基本排序方式，且他们速度都不快 – O(N^2)。选择排序就不说了，最好情况复杂度也得O(N^2)，且还是个不稳定的排序算法，直接淘汰。<br>可冒泡排序和插入排序相比较呢？<br>首先，他们都是稳定的排序算法，且最好情况下都是O(N^2)。那么我就来对他们的比较次数和移动元素次数做一次对比（最好情况下），如下：<br>插入排序：比较次数N-1，移动元素次数2N-1。<br>冒泡排序：比较次数N-1，无需移动元素。(注：我所说的冒泡排序在最基本的冒泡排序基础上还利用了一下旗帜的方式，即寻访完序列未发生数据交换时则表示排序已完成，无需再进行之后的比较与交换动作）<br>那么，这样看来冒泡岂不是是更快，我可以把上述的<strong>final_insertion_sort()函数改成一个</strong>final_bubble_sort()，把每个子序列分别进行冒泡排序，岂不是更好？<br>事实上，具体实现时，我才发现这个想法错了，因为写这么一个<strong>final_bubble_sort()，我没有办法确定每个子序列的大小，可我还是不甘心呐，就把bubble_sort()插在</strong>introsort_loop()最后，这样确实是每个子序列都用bubble_sort()又排序了一次，可是测试结果太惨了，由此可以看书Bubble Sort在“几近排序但尚未完成”的情况下是没多少改进作用的。<br>为什么不直接用Heap Sort<br>堆排序将所有的数据建成一个堆，最大的数据在堆顶，它不需要递归或者多维的暂存数组。算法最优最差都是O(NlogN)，不像快排，如果你人品够差还能恶化到O(N^2)。当数据量非常大时（百万数据），因为快排是使用递归设计算法的，还可能发出堆栈溢出错误呢。<br>那么为什么不直接用Heap Sort？或者说给一个最低元素阈值（__stl_threshold)时也给一个最大元素阈值（100W），即当元素数目超过这个值时，直接用Heap Sort，避免堆栈溢出呢？<br>对于第一个问题，我测试了一下，发现直接用Heap Sort，有时还没有Quick Sort快呢，查阅《算法导论》发现，原来虽然Quick和Heap的时间复杂性是一样的，但堆排序的常熟因子还是大些的，并且堆排序过程中重组堆其实也不是个省时的事。<br>7.c++11中引入的各种新特性<br>8. linux的线程同步原语<br>9.linux查看一个进程打开了哪些句柄<br>lsof<br>10. linux下得内存泄露<br>vargrind检查内存泄露</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java和C的区别]]></title>
      <url>http://yoursite.com/2015/03/04/Java%E5%92%8CC%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>这是Java与C++区别的一个比较完整的答案，大家可以学习一下。</p>
<p>JAVA和C++都是面向对象语言。也就是说，它们都能够实现面向对象思想（封装，继乘，多态）。而由于c++为了照顾大量的C语言使用者，<br>而兼容了C，使得自身仅仅成为了带类的C语言，多多少少影响了其面向对象的彻底性！JAVA则是完全的面向对象语言，它句法更清晰，规模更小，更易学。它是在对多种程序设计语言进行了深入细致研究的基础上，据弃了其他语言的不足之处，从根本上解决了c++的固有缺陷。<br>Java和c++的相似之处多于不同之处，但两种语言问几处主要的不同使得Java更容易学习，并且编程环境更为简单。<br>我在这里不能完全列出不同之处，仅列出比较显著的区别：<br>1．指针<br>JAVA语言让编程者无法找到指针来直接访问内存无指针，并且增添了自动的内存管理功能，从而有效地防止了c／c++语言中指针操作失误，如野指针所造成的系统崩溃。但也不是说JAVA没有指针，虚拟机内部还是使用了指针，只是外人不得使用而已。这有利于Java程序的安全。<br>2．多重继承<br>c++支持多重继承，这是c++的一个特征，它允许多父类派生一个类。尽管多重继承功能很强，但使用复杂，而且会引起许多麻烦，编译程序实现它也很不容易。Java不支持多重继承，但允许一个类继承多个接口(extends+implement)，实现了c++多重继承的功能，又避免了c++中的多重继承实现方式带来的诸多不便。<br>3．数据类型及类<br>Java是完全面向对象的语言，所有函数和变量部必须是类的一部分。除了基本数据类型之外，其余的都作为类对象，包括数组。对象将数据和方法结合起来，把它们封装在类中，这样每个对象都可实现自己的特点和行为。而c++允许将函数和变量定义为全局的。此外，Java中取消了c／c++中的结构和联合，消除了不必要的麻烦。<br>4．自动内存管理<br>Java程序中所有的对象都是用new操作符建立在内存堆栈上，这个操作符类似于c++的new操作符。下面的语句由一个建立了一个类Read的对象，然后调用该对象的work方法：<br>Read r＝new Read()；<br>r.work()；<br>语句Read r＝new Read()；在堆栈结构上建立了一个Read的实例。Java自动进行无用内存回收操作，不需要程序员进行删除。而c十十中必须由程序贝释放内存资源，增加了程序设计者的负扔。Java中当一个对象不被再用到时，无用内存回收器将给它加上标签以示删除。JAVA里无用内存回收程序是以线程方式在后台运行的，利用空闲时间工作。<br>5．操作符重载<br>Java不支持操作符重载。操作符重载被认为是c十十的突出特征，在Java中虽然类大体上可以实现这样的功能，但操作符重载的方便性仍然丢失了不少。Java语言不支持操作符重载是为了保持Java语言尽可能简单。<br>6．预处理功能<br>Java不支持预处理功能。c／c十十在编译过程中都有一个预编泽阶段，即众所周知的预处理器。预处理器为开发人员提供了方便，但增加丁编译的复杂性。JAVA虚拟机没有预处理器，但它提供的引入语句(import)与c十十预处理器的功能类似。<br>7. Java不支持缺省函数参数，而c十十支持<br>在c中，代码组织在函数中，函数可以访问程序的全局变量。c十十增加了类，提供了类算法，该算法是与类相连的函数，c十十类方法与Java类方法十分相似，然而，由于c十十仍然支持c，所以不能阻止c十十开发人员使用函数，结果函数和方法混合使用使得程序比较混乱。<br>Java没有函数，作为一个比c十十更纯的面向对象的语言，Java强迫开发人员把所有例行程序包括在类中，事实上，用方法实现例行程序可激励开发人员更好地组织编码。<br>8 字符串<br>c和c十十不支持字符串变量，在c和c十十程序中使用Null终止符代表字符串的结束，在Java中字符串是用类对象(strinR和stringBuffer)来实现的，这些类对象是Java语言的核心，用类对象实现字符串有以下几个优点：<br>(1)在整个系统中建立字符串和访问字符串元素的方法是一致的；<br>(2)J3阳字符串类是作为Java语言的一部分定义的，而不是作为外加的延伸部分；<br>(3)Java字符串执行运行时检空，可帮助排除一些运行时发生的错误；<br>(4)可对字符串用“十”进行连接操作。<br>9“goto语句<br>“可怕”的goto语句是c和c++的“遗物”，它是该语言技术上的合法部分，引用goto语句引起了程序结构的混乱，不易理解，goto语句子要用于无条件转移子程序和多结构分支技术。鉴于以广理由，Java不提供goto语句，它虽然指定goto作为关键字，但不支持它的使用，使程序简洁易读。<br>l0．类型转换<br>在c和c十十中有时出现数据类型的隐含转换，这就涉及了自动强制类型转换问题。例如，在c十十中可将一浮点值赋予整型变量，并去掉其尾数。Java不支持c十十中的自动强制类型转换，如果需要，必须由程序显式进行强制类型转换。<br>11.异常<br>JAVA中的异常机制用于捕获例外事件，增强系统容错能力<br>try{／／可能产生例外的代码<br>}catch(exceptionType name){<br>//处理<br>}<br>其中exceptionType表示异常类型。而C++则没有如此方便的机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 面试题]]></title>
      <url>http://yoursite.com/2015/03/04/Python%20%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>1、Python是如何进行内存管理的？</p>
<p>Python引用了一个内存池(memory pool)机制，即Pymalloc机制(malloc:n.分配内存)，用于管理对小块内存的申请和释放。</p>
<p>内存池（memory pool）的概念：</p>
<p>当 创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，致使效率降低。内存池的概念就是预先在内存中申请一定数量的，大小相等 的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了之后再申请新的内存。这样做最显著的优势就是能够减少内存碎片，提升效率。<br>内存池的实现方式有很多，性能和适用范围也不一样。</p>
<p>python中的内存管理机制——Pymalloc：<br>python中的内存管理机制都有两套实现，一套是针对小对象，就是大小小于256bits时,pymalloc会在内存池中申请内存空间；当大于256bits，则会直接执行new/malloc的行为来申请内存空间。<br>关于释放内存方面，当一个对象的 引用计数变为0时，python就会调用它的析构函数。在析构时，也采用了内存池机制，从内存池来的内存会被归还到内存池中，以避免频繁地释放动作。<br>参考：<a href="http://www.360doc.com/content/13/0121/18/9934052_261604074.shtml" target="_blank" rel="external">http://www.360doc.com/content/13/0121/18/9934052_261604074.shtml</a></p>
<p><a href="http://developer.51cto.com/art/201007/213585.htm" target="_blank" rel="external">http://developer.51cto.com/art/201007/213585.htm</a></p>
<p>2、什么是lambda函数？它有什么好处?</p>
<p>这涉及到函数式编程，关于lambda。lambda函数也叫匿名函数，返回可调用的函数对象。</p>
<p>复制代码<br>“””lambda表达式的定义体必须和声明放在同一行”””<br>print lambda x:True #&lt;function &lt;lambda&gt; at 0x012E10B0&gt;<br>print lambda y:y<em>2 #&lt;function &lt;lambda&gt; at 0x012B10B0&gt;<br>“””该对象的引用计数在函数创建时被设置为True，但是因为没有引用保存下来，计数又回到了零，然后被垃圾回收掉<br>为了保存该对象，需要放在一个变量里，随时调用<br>这也是为啥叫做匿名<br>“””<br>test = lambda y:y</em>2<br>print test(10) #20<br>复制代码<br>好处：</p>
<p>个人认为有以下：</p>
<p>1、对于单行函数，使用lambda可以省去定义函数的过程，让代码更加精简。</p>
<p>2、在非多次调用的函数的情况下，lambda表达式即用既得，提高性能</p>
<p>3、解释一下python的 and-or 语法？</p>
<p>关于and-or语法在《Dive Into Python》一书中有讲解，在《Python核心编程2》并没有提及，只是提到and、or语法，我想关于and-or，或许并没有约定俗成的，而是一种衍生或扩展吧。</p>
<p>and-or主要是用来模仿 三目运算符 bool?a:b的，即当表达式bool为真，则取a否则取b。如下面用js实现：</p>
<p>var s1=2;<br>var s2=3;<br>max = s1 &gt; s2 ? s1:s2;//max = 3<br>但是Python并不支持这个语法，所以就衍生出了and-or</p>
<p>见：<a href="http://www.cnblogs.com/BeginMan/p/3197123.html" target="_blank" rel="external">www.cnblogs.com/BeginMan/p/3197123.html</a></p>
<p>4、Python是如何进行类型转换的？</p>
<p>第一点要知道：Python是动态类型，而且是强类型的编程语言。</p>
<p>第二点要知道：Python内建函数的实现类型转换</p>
<p>复制代码<br>函数 描述<br>int(x [,base ]) 将x转换为一个整数<br>long(x [,base ]) 将x转换为一个长整数<br>float(x ) 将x转换到一个浮点数<br>complex(real [,imag ]) 创建一个复数<br>str(x ) 将对象 x 转换为字符串<br>repr(x ) 将对象 x 转换为表达式字符串<br>eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象<br>tuple(s ) 将序列 s 转换为一个元组<br>list(s ) 将序列 s 转换为一个列表<br>chr(x ) 将一个整数转换为一个字符<br>unichr(x ) 将一个整数转换为Unicode字符<br>ord(x ) 将一个字符转换为它的整数值<br>hex(x ) 将一个整数转换为一个十六进制字符串<br>oct(x ) 将一个整数转换为一个八进制字符串<br>复制代码<br>5、Python里面如何拷贝一个对象？</p>
<p>这个详见我这篇博客【点击阅读】</p>
<p>6、Python中pass语句的作用是什么？</p>
<p>pass语句什么也不做，一般作为占位符或者创建占位程序，pass语句不会执行任何操作。</p>
<p>7、如何知道一个python对象的类型？</p>
<p>复制代码<br>&gt;&gt;&gt; lis = [1,2,3]<br>&gt;&gt;&gt; lis.<strong>class</strong> #获得已知对象的类 ： 对象.<strong>class</strong><br>&lt;type ‘list’&gt;<br>&gt;&gt;&gt; type(lis)<br>&lt;type ‘list’&gt;<br>复制代码<br>8、介绍一下Python下range()函数的用法？</p>
<p>range(start, stop[, step])<br>返回列表<br>复制代码<br>&gt;&gt;&gt; range(10)<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>&gt;&gt;&gt; range(1, 11)<br>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>&gt;&gt;&gt; range(0, 30, 5)<br>[0, 5, 10, 15, 20, 25]<br>&gt;&gt;&gt; range(0, 10, 3)<br>[0, 3, 6, 9]<br>&gt;&gt;&gt; range(0, -10, -1)<br>[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]<br>&gt;&gt;&gt; range(0)<br>[]<br>&gt;&gt;&gt; range(1, 0)<br>[]<br>复制代码<br><a href="http://docs.python.org/2/library/functions.html#range" target="_blank" rel="external">http://docs.python.org/2/library/functions.html#range</a></p>
<p>9、其他</p>
<p>如何用Python来进行查询和替换一个文本字符串？</p>
<p>Python里面search()和match()的区别？</p>
<p>用Python匹配HTML tag的时候，&lt;.<em>&gt;和&lt;.</em>?&gt;有什么区别？</p>
<p>Python里面如何生成随机数？</p>
<p>如何用Python来发送邮件？</p>
<p>有两个序列a,b，大小都为n,序列元素的值任意整形数，无序；<br>要求：通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。<br>1. 将两序列合并为一个序列，并排序，为序列Source<br>2. 拿出最大元素Big，次大的元素Small<br>3. 在余下的序列S[:-2]进行平分，得到序列max，min<br>4. 将Small加到max序列，将Big加大min序列，重新计算新序列和，和大的为max，小的为min。</p>
<p>Python如何定义一个函数?</p>
<p>有没有一个工具可以帮助查找python的bug和进行静态的代码分析？</p>
<p>如何在一个function里面设置一个全局的变量？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows缓存文件清理]]></title>
      <url>http://yoursite.com/2015/03/04/Windows%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E6%B8%85%E7%90%86/</url>
      <content type="html"><![CDATA[<p>盘space 都被占满，但是自己实际使用的空间只占1/3，这时候就要考虑是否是缓存文件过大的问题了。<br>手动编辑如下文件，文件名保存为”清除系统.bat”,单击即可运行。<br>@echo off<br>echo 正在清除系统垃圾文件，请稍等……<br>del /f /s /q “%USERPROFILE%\AppData\Local\Temp”<br>del /f /s /q %systemdrive%*.tmp<br>del /f /s /q %systemdrive%*._mp<br>del /f /s /q %systemdrive%*.log<br>del /f /s /q %systemdrive%*.gid<br>del /f /s /q %systemdrive%*.chk<br>del /f /s /q %systemdrive%*.old<br>del /f /s /q %systemdrive%\recycled*.<em><br>del /f /s /q %windir%\</em>.bak<br>del /f /s /q %windir%\prefetch*.<em><br>rd /s /q %windir%\temp &amp; md %windir%\temp<br>del /f /q %userprofile%\COOKIES s\</em>.<em><br>del /f /q %userprofile%\recent\</em>.<em><br>del /f /s /q “%userprofile%\Local Settings\Temporary Internet Files\</em>.<em>“<br>del /f /s /q “%userprofile%\Local Settings\Temp\</em>.<em>“<br>del /f /s /q “%userprofile%\recent\</em>.*”<br>del /f /s /q “%USERPROFILE%\AppData\Local\Temp”<br>sfc /purgecache ‘清理系统盘无用文件<br>defrag %systemdrive% -b ‘优化预读信息<br>echo 清除系统LJ完成！<br>echo. &amp; pause</p>
<p>如果删除结果还不满意，可参考一下方法：<br><a href="http://www.to8to.com/yezhu/v2737.html" target="_blank" rel="external">http://www.to8to.com/yezhu/v2737.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Can't create handler inside thread that has not called Looper.prepare()解决办法]]></title>
      <url>http://yoursite.com/2015/02/27/Can't%20create%20handler%20inside%20thread%20that%20has%20not%20called%20Looper.prepare()%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>首先要确定的是Android中不能在子线程中来刷新UI线程。所以必须使用android的handler机制。即：<br>在主activity中定一个Handler的成员，然后实现handlemassage函数，创建线程后在runable的run函数里new一个message，然后指定message对象的what成员，这个是指定message的一个id，然后在run中调用Handler的成员，使用其成员方法中的sendmessage(好像是叫这个)，handlemassage函数中参数有个massage，根据该message参数中的what来对你发送message时指定的what来处理UI的功能。Handler的实现实例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;              </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;  </div><div class="line">                    <span class="keyword">case</span> CASE1:  </div><div class="line">                         <span class="comment">//获取传递的数据</span></div><div class="line">                         <span class="comment">//Bundle data = msg.getData();</span></div><div class="line">                         &amp;lt;strong&amp;gt;<span class="comment">//处理UI更新等操作</span></div><div class="line">                         <span class="comment">//......&amp;lt;/strong&amp;gt;</span></div><div class="line">                &#125;  </div><div class="line">            &#125;;  </div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>然后可以在任何地方调用这个handler，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message();     </div><div class="line">msg.what = CASE1;</div><div class="line"><span class="comment">//这三句可以传递数据</span></div><div class="line"><span class="comment">//Bundle data = new Bundle();</span></div><div class="line"><span class="comment">//data.putInt(&amp;quot;COUNT&amp;quot;, 100);//COUNT是标签,handleMessage中使用</span></div><div class="line"><span class="comment">//msg.setData(data);</span></div><div class="line">handler.sendMessage(msg); <span class="comment">// 向Handler发送消息,更新UI</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Google开源C/C++版MapReduce框架]]></title>
      <url>http://yoursite.com/2015/02/25/%5B%E8%BD%AC%5DGoogle%E5%BC%80%E6%BA%90C%20C++%E7%89%88MapReduce%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><a href="http://www.36kr.com/p/219960.html" target="_blank" rel="external">原文地址</a></p>
<p>据 GigaOM<a href="https://gigaom.com/2015/02/18/google-open-sources-a-mapreduce-framework-for-c/?utm_medium=social&amp;utm_campaign=socialflow&amp;utm_source=twitter&amp;utm_content=google-open-sources-a-mapreduce-framework-for-c_915606" target="_blank" rel="external">消息</a>，Google 上周<a href="http://google-opensource.blogspot.com/2015/02/mapreduce-for-c-run-native-code-in.html" target="_blank" rel="external">宣布</a>，将自己用 C++ 开发的 MapReduce 框架<a href="https://github.com/google/mr4c" target="_blank" rel="external">MapReduce for C（MR4C）</a>开源，此举可给 Hadoop 社区带来福音，因为这样用户就可以在自己的 Hadoop 环境中运行原生的 C 及 C++ 代码了。</p>
<p>Hadoop 是许多大数据应用的基础，它是由 Apache 基金会所开发的分布式系统基础架构，主要由分布式文件系统 HDFS 和计算框架 MapReduce 组成。由于原先的 MapReduce 是用 Java 编写的，与 C++ 相比，在性能上要略逊一筹，因此，许多处理大规模数据集的软件公司都开发了自己的专有系统来在 MapReduce 框架之内执行其原生代码。Facebook 的 HipHop（将 PHP 转换为 C++）以及 MemSQL 执行前将 SQL 转为 C++ 代码也都是出于同样的性能考虑。</p>
<p><img src="http://a.36krcnd.com/photo/2015/a1606cc91578093cd2643eb78d28688c.png" alt=""><br>MR4C 原先由卫星影像公司 Skybox Imaging 开发，目的是为了优化其地理空间数据及计算机视觉代码库。MR4C 围绕着几个简单概念开发而成，其目标是将 MapReduce 的重要细节抽象化，允许用户专注于开发有价值的算法。去年 6 月，Google 收购了 Skybox。半年之后的现在，又将 MR4C 开源出来。这对于没有能力开发专有系统或者对 Java 不感冒的开发者来说无疑是一个福音。</p>
<p>当然，MR4C 的受欢迎程度仍有待观察。因为在数据处理方面，Apache Spark 是一个速度比 Mapreduce 更快的框架，它支持 Scala、Python 和 Java（但不支持 C/C++），已经引起了开发社区极大的兴趣。</p>
<p>[消息来源：<a href="https://gigaom.com/2015/02/18/google-open-sources-a-mapreduce-framework-for-c/?utm_medium=social&amp;utm_campaign=socialflow&amp;utm_source=twitter&amp;utm_content=google-open-sources-a-mapreduce-framework-for-c_915606" target="_blank" rel="external">gigaom.com</a>, <a href="http://google-opensource.blogspot.com/2015/02/mapreduce-for-c-run-native-code-in.html" target="_blank" rel="external">google-opensource.blogspot.com</a>]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Java开发者易犯错误Top10]]></title>
      <url>http://yoursite.com/2015/02/20/%5B%E8%BD%AC%5DJava%E5%BC%80%E5%8F%91%E8%80%85%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AFTop10/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/exceptional_derek/article/details/43888641" target="_blank" rel="external">原文地址</a></p>
<p>Top1. 数组转换为数组列表</p>
<p>将数组转换为数组列表，开发者经常会这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&amp;lt;String&amp;gt; list = Arrays.asList(arr);</div></pre></td></tr></table></figure>
<p>Arrays.asList()将返回一个数组内部是私有静态类的ArrayList，这不是java.util.ArrayList类，java.util.Arrays.ArrayList类有set()、 get()、 contains()方法，但是没有任何加元素的方法，因此它的大小是固定的。你应该这么做来创建一个真正的数组：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&amp;lt;String&amp;gt; arrayList = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;(Arrays.asList(arr));</div></pre></td></tr></table></figure>
<p>ArrayList的构造函数能够接受一个集合类型，这也是java.util.Arrays.ArrayList的超级类型。</p>
<p>Top2. 检查一个数组包含一个值</p>
<p>开发者经常这么做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&amp;lt;String&amp;gt; set = <span class="keyword">new</span> HashSet&amp;lt;String&amp;gt;(Arrays.asList(arr));  </div><div class="line"><span class="keyword">return</span> set.contains(targetValue);</div></pre></td></tr></table></figure>
<p>代码可以工作，但是没有必要首先转换列表到Set，转换一个列表到一个Set需要额外的时间。因此你可以把它简化为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(arr).contains(targetValue);</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(String s: arr)&#123;  </div><div class="line">    <span class="keyword">if</span>(s.equals(targetValue))  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">`</div></pre></td></tr></table></figure>
<p>第一个比第二个更具可读性</p>
<p>Top3. 在一个循环中从一个列表里删除一个元素</p>
<p>考虑下面删除元素的代码在迭代中的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&amp;lt;String&amp;gt; list = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;));  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; list.size(); i++) &#123;  </div><div class="line">    list.remove(i);  </div><div class="line">&#125;  </div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure>
<p>输出是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[b, d]</div></pre></td></tr></table></figure>
<p>该方法有一个严重的问题，当一个元素被删除时，列表收缩的大小以及指针改变了。所以想要在循环内利用指针删除多个元素是无法正常进行的。</p>
<p>这种情况下使用迭代器才是正确的方法，foreach循环在Java中的工作像是一个迭代器，但实际上并不是，考虑下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&amp;lt;String&amp;gt; list = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;));  </div><div class="line"></div><div class="line"><span class="keyword">for</span> (String s : list) &#123;  </div><div class="line">    <span class="keyword">if</span> (s.equals(&amp;quot;a&amp;quot;))  </div><div class="line">        list.remove(s);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它会报出<a href="http://www.programcreek.com/2014/01/java-util-concurrentmodificationexception/" target="_blank" rel="external">ConcurrentModificationException</a>异常。</p>
<p>相反下面这个就可以正常工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ArrayList&amp;lt;String&amp;gt; list = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;));  </div><div class="line">Iterator&amp;lt;String&amp;gt; iter = list.iterator();  </div><div class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;  </div><div class="line">    String s = iter.next();  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (s.equals(&amp;quot;a&amp;quot;)) &#123;  </div><div class="line">        iter.remove();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>.next()</code>必须在<code>.remove()</code>之前被调用。在<code>foreach</code>循环中，编译器将在删除元素操作之后调用<code>.next()</code>，这也是导致ConcurrentModificationException异常的原因，你可以<a href="http://www.programcreek.com/2014/01/deep-understanding-of-arraylist-iterator/" target="_blank" rel="external">点击此处</a>查看ArrayList.iterator()的源代码。</p>
<p>Top4. Hashtable vs HashMap</p>
<p>根据算法的常规，Hashtable是对数据结构的称呼。但是在Java中，数据结构的名称是HashMap。Hashtable和HashMap关键不同之一是Hashtable是同步的。</p>
<p>关于这一点可查看以下两个链接：</p>
<p><a href="http://www.programcreek.com/2013/03/hashmap-vs-treemap-vs-hashtable-vs-linkedhashmap/" target="_blank" rel="external">HashMap vs. TreeMap vs. Hashtable vs. LinkedHashMap</a></p>
<p><a href="http://www.programcreek.com/2013/09/top-9-questions-for-java-map/" target="_blank" rel="external">Map问题Top10</a></p>
<p>Top5. 使用集合的原始类型</p>
<p>在Java中，原始类型和无限制的通配符类型很容易被混淆。以Set为例，Set是原始类型，而Set(?)则是无限制的通配符类型。</p>
<p>考虑下面的代码，以一个原始类型List作为参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List list, Object o)</span></span>&#123;  </div><div class="line">    list.add(o);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">    List&amp;lt;String&amp;gt; list = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();  </div><div class="line">    add(list, <span class="number">10</span>);  </div><div class="line">    String s = list.get(<span class="number">0</span>);  </div><div class="line">&#125; </div><div class="line">`</div></pre></td></tr></table></figure>
<p>该代码会抛出一个异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exception in thread &amp;quot;main&amp;quot; java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String  </div><div class="line">    at ...</div></pre></td></tr></table></figure>
<p>使用原始类型集合是危险的，因为原始类型集合跳过了泛型类型检查，也不安全。Set、Set&lt;?&gt;和Set<object>之间有很大的不同。详细可查看</object></p>
<p><a href="http://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/" target="_blank" rel="external">Raw type vs. Unbounded wildcard</a>和<a href="http://www.programcreek.com/2011/12/java-type-erasure-mechanism-example/" target="_blank" rel="external">Type Erasure</a>。</p>
<p>Top6. 访问级别</p>
<p>开发者经常对类域使用public，这很容易通过直接引用获得域值，但这是一个非常糟糕的设计。根据经验来说是给予成员的访问级别越低越好。</p>
<p>详细情况可点击查看Java中成员访问级别：<a href="http://www.programcreek.com/2011/11/java-access-level-public-protected-private/" target="_blank" rel="external">public、protected、private</a></p>
<p>Top7.ArrayList VS LinkedList</p>
<p>如果你不知道ArrayList和LinkedList之间的区别时，你可能会经常的选用ArrayList，因为它看起来看熟悉。然而它们之间有巨大的性能不同。简单的来说，如果有大量的添加/删除操作，并且没有很多的随机存取操作时，LinkedList应该是你的首选。如果您对此不是很了解的话，<a href="http://www.programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/" target="_blank" rel="external">点此此处</a>查看更多关于它们性能的信息。</p>
<p>Top8. Mutable VS Immutable</p>
<p>Immutable对象有很多优势，比如简单、安全等等。但它要求每一个不同的值都需要有一个不同的对象，而太多的对象可能会导致垃圾收集的高成本。所以对Mutable和Immutable的选择应该有一个平衡点。</p>
<p>一般来说，Mutable对象用于避免产生过多的中间对象，经典的例子是连接大量的字符串数。如果你使用Immutable字符串，那么会产生很多符合垃圾收集条件的对象。这对CPU是浪费时间和精力的，当其可以使用Mutable对象作为正确的解决方案。（如StringBuilder）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String result=&amp;quot;&amp;quot;;  </div><div class="line"><span class="keyword">for</span>(String s: arr)&#123;  </div><div class="line">    result = result + s;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有一些其他Mutable对象可取的情况。例如mutable对象传递到方法中允许你在不跳过太多语法的情况下收集多个结果。另一个例子是排序和过滤，你可以构建一个带有原有集合的方法，并返回一个已排序的，不过这对大的集合来说会造成更大的浪费。</p>
<p>推荐阅读：<a href="http://www.programcreek.com/2013/04/why-string-is-immutable-in-java/" target="_blank" rel="external">为什么字符串是Immutable？</a></p>
<p>Top9. Super和Sub构造函数<br><img src="http://www.programcreek.com/wp-content/uploads/2013/04/Implicit-super-constructor-is-undefined-for-default-constructor.png" alt=""><br>这个编译错误是因为默认的Super构造函数是未定义的。在Java中，如果一个类没有定义一个构造函数，编译器会默认的为类插入一个无参数构造函数。如果一个构造函数是在Super类中定义的，这种情况下Super(String s)，编译器不会插入默认的无参数构造函数。</p>
<p>另一方面，Sub类的构造函数，无论带不带有参数，都会调用无参数的Super构造函数。</p>
<p>编译器在Sub类中试图将Super()插入到两个构造函数中，但是Super默认的构造函数是没有定义的，编译器才会报错。如何解决这一问题？你只需在Super类中添加一个Super()构造函数，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span></span>&#123;  </div><div class="line">    System.out.println(&amp;quot;Super&amp;quot;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或移除自定义的Super构造函数，又或者在Sub函数中添加super(value)。</p>
<p>这方面想了解更多的可以<a href="http://www.programcreek.com/2013/04/what-are-the-frequently-asked-questions-about-constructors-in-java/" target="_blank" rel="external">点击此处</a>查看。</p>
<p>Top10. “”或构造函数？</p>
<p>字符串可以通过两种方式创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1\. use double quotes  </span></div><div class="line">String x = &amp;quot;abc&amp;quot;;  </div><div class="line"><span class="comment">//2\. use constructor  </span></div><div class="line">String y = <span class="keyword">new</span> String(&amp;quot;abc&amp;quot;);</div></pre></td></tr></table></figure>
<p>它们之间有何不同？下面的例子可以给出答案：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String a = &amp;quot;abcd&amp;quot;;  </div><div class="line">String b = &amp;quot;abcd&amp;quot;;  </div><div class="line">System.out.println(a == b);  <span class="comment">// True  </span></div><div class="line">System.out.println(a.equals(b)); <span class="comment">// True  </span></div><div class="line"></div><div class="line">String c = <span class="keyword">new</span> String(&amp;quot;abcd&amp;quot;);  </div><div class="line">String d = <span class="keyword">new</span> String(&amp;quot;abcd&amp;quot;);  </div><div class="line">System.out.println(c == d);  <span class="comment">// False  </span></div><div class="line">System.out.println(c.equals(d)); <span class="comment">// True</span></div></pre></td></tr></table></figure>
<p>关于它们如何在内存中分布的更多细节可以查看<a href="http://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/" target="_blank" rel="external">《使用””或构造函数创建Java字符串》</a>。</p>
<p>推荐阅读：</p>
<p><a href="http://www.programcreek.com/2013/04/what-are-the-frequently-asked-questions-about-constructors-in-java/" target="_blank" rel="external">Constructors of Sub and Super Classes in Java?</a></p>
<p><a href="http://www.programcreek.com/2014/03/how-developers-sort-in-java/" target="_blank" rel="external">How Developers Sort in Java?</a></p>
<p><a href="http://www.programcreek.com/2013/04/how-to-convert-array-to-arraylist-in-java/" target="_blank" rel="external">How to Convert Array to ArrayList in Java?</a></p>
<p><a href="http://www.programcreek.com/2011/12/java-type-erasure-mechanism-example/" target="_blank" rel="external">Java Type Erasure Mechanism</a></p>
<p>原文来自：<a href="http://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/" target="_blank" rel="external">programcreek</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS下Android Studio的Java not found问题]]></title>
      <url>http://yoursite.com/2015/02/19/Mac%20OS%E4%B8%8BAndroid%20Studio%E7%9A%84Java%20not%20found%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>首先要确定mac系统上有没有安装jdk，并查看自己的jdk版本，可以在终端上输入命令 java -version查看。如果没有安装jdk请先安装jdk，安装方法就不多说了，可以去Oracle官网上下载安装。<br>接下来确定自己的jdk版本，如果jdk的版本不是1.6版本就有可能出现以上问题，无法启动Android Studio。原因在于Android Studio的配置文件中默认要求的是1.6版本的JVM，所以可以简单的修改下Android Studio的配置文件。方法如下：<br>1.找到你的Android Studio.app文件位置，一般都是在Applications文件夹下面。<br>2.选择Android Studio.app文件，打开右键菜单，选择Show Package Contents打开Android Studio.app（其实Mac系统下的app文件就是一个特殊的文件夹）。<br>3.进入Contents文件夹，找到Info.plist配置文件。<br>4.可以打开Info.plist配置文件，找到其中的<key>JVMVersion<key>标签，可以看到这个标签下面为<string>1.6<string>，默认使用JVM1.6版本，现在最新的JDK已经是1.8了。把1.6改成你所安装的jdk版本号然后保存修改就可以解决这个问题，或者简单的改成1.6+就可以兼容1.6以上的jdk版本。</string></string></key></key></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql插入数据报错Incorrect string value: '«Íï4V' for column 'YYYY' at row 1解决方法]]></title>
      <url>http://yoursite.com/2015/02/19/mysql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99Incorrect%20string%20value%20124V'%20for%20column%20'YYYY'%20at%20row%201%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>这是编码问题，需要将相应行改为utf8格式，在mysql的控制台里输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE `TABLENAME` CHANGE `CLOUMNNAME` `COLUMNNAME` TEXT CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL</div></pre></td></tr></table></figure></p>
<p>需要将相应的TABLENAME和COLUMNNAME替换为相应的表名和列名。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Netty版本升级血泪史之线程篇]]></title>
      <url>http://yoursite.com/2015/02/16/%5B%E8%BD%AC%5DNetty%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E8%A1%80%E6%B3%AA%E5%8F%B2%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%AF%87/</url>
      <content type="html"><![CDATA[<p><a href="http://www.infoq.com/cn/articles/netty-version-upgrade-history-thread-part#anch119281" title="原文地址" target="_blank" rel="external">原文地址</a><br>1. 背景</p>
<p>1.1. Netty 3.X系列版本现状</p>
<p>根据对Netty社区部分用户的调查，结合Netty在其它开源项目中的使用情况，我们可以看出目前Netty商用的主流版本集中在3.X和4.X上，其中以Netty 3.X系列版本使用最为广泛。</p>
<p>Netty社区非常活跃，3.X系列版本从2011年2月7日发布的netty-3.2.4 Final版本到2014年12月17日发布的netty-3.10.0 Final版本，版本跨度达3年多，期间共推出了61个Final版本。</p>
<p>1.2. 升级还是坚守老版本</p>
<p>相比于其它开源项目，Netty用户的版本升级之路更加艰辛，最根本的原因就是Netty 4对Netty 3没有做到很好的前向兼容。</p>
<p>由于版本不兼容，大多数老版本使用者的想法就是既然升级这么麻烦，我暂时又不需要使用到Netty 4的新特性，当前版本还挺稳定，就暂时先不升级，以后看看再说。</p>
<p>坚守老版本还有很多其它的理由，例如考虑到线上系统的稳定性、对新版本的熟悉程度等。无论如何升级Netty都是一件大事，特别是对Netty有直接强依赖的产品。</p>
<p>从上面的分析可以看出，坚守老版本似乎是个不错的选择；但是，“理想是美好的,现实却是残酷的”，坚守老版本并非总是那么容易，下面我们就看下被迫升级的案例。</p>
<p>1.3. “被迫”升级到Netty 4.X</p>
<p>除了为了使用新特性而主动进行的版本升级，大多数升级都是“被迫的”。下面我们对这些升级原因进行分析。</p>
<p>公司的开源软件管理策略：对于那些大厂，不同部门和产品线依赖的开源软件版本经常不同，为了对开源依赖进行统一管理，降低安全、维护和管理成本，往往会指定优选的软件版本。由于Netty 4.X 系列版本已经非常成熟，因为，很多公司都优选Netty 4.X版本。<br>维护成本：无论是依赖Netty 3.X，还是Netty4.X，往往需要在原框架之上做定制。例如，客户端的短连重连、心跳检测、流控等。分别对Netty 4.X和3.X版本实现两套定制框架，开发和维护成本都非常高。根据开源软件的使用策略，当存在版本冲突的时候，往往会选择升级到更高的版本。对于Netty，依然遵循这个规则。<br>新特性：Netty 4.X相比于Netty 3.X,提供了很多新的特性，例如优化的内存管理池、对MQTT协议的支持等。如果用户需要使用这些新特性，最简便的做法就是升级Netty到4.X系列版本。<br>更优异的性能：Netty 4.X版本相比于3.X老版本，优化了内存池，减少了GC的频率、降低了内存消耗；通过优化Rector线程池模型，用户的开发更加简单，线程调度也更加高效。<br>1.4. 升级不当付出的代价</p>
<p>表面上看，类库包路径的修改、API的重构等似乎是升级的重头戏，大家往往把注意力放到这些“明枪”上，但真正隐藏和致命的却是“暗箭”。如果对Netty底层的事件调度机制和线程模型不熟悉，往往就会“中枪”。</p>
<p>本文以几个比较典型的真实案例为例，通过问题描述、问题定位和问题总结，让这些隐藏的“暗箭”不再伤人。</p>
<p>由于Netty 4线程模型改变导致的升级事故还有很多，限于篇幅，本文不一一枚举，这些问题万变不离其宗，只要抓住线程模型这个关键点，所谓的疑难杂症都将迎刃而解。</p>
<p>2. Netty升级之后遭遇内存泄露</p>
<p>2.1. 问题描述</p>
<p>随着JVM虚拟机和JIT即时编译技术的发展，对象的分配和回收是个非常轻量级的工作。但是对于缓冲区Buffer，情况却稍有不同，特别是对于堆外直接内存的分配和回收，是一件耗时的操作。为了尽量重用缓冲区，Netty4.X提供了基于内存池的缓冲区重用机制。性能测试表明，采用内存池的ByteBuf相比于朝生夕灭的ByteBuf，性能高23倍左右（性能数据与使用场景强相关）。</p>
<p>业务应用的特点是高并发、短流程，大多数对象都是朝生夕灭的短生命周期对象。为了减少内存的拷贝，用户期望在序列化的时候直接将对象编码到PooledByteBuf里，这样就不需要为每个业务消息都重新申请和释放内存。</p>
<p>业务的相关代码示例如下：</p>
<p>[java]<br>//在业务线程中初始化内存池分配器，分配非堆内存<br> ByteBufAllocator allocator = new PooledByteBufAllocator(true);<br> ByteBuf buffer = allocator.ioBuffer(1024);<br>//构造订购请求消息并赋值，业务逻辑省略<br>SubInfoReq infoReq = new SubInfoReq ();<br>infoReq.setXXX(……);<br>//将对象编码到ByteBuf中<br>codec.encode(buffer, info);<br>//调用ChannelHandlerContext进行消息发送<br>ctx.writeAndFlush(buffer);<br>[/java]</p>
<p>业务代码升级Netty版本并重构之后，运行一段时间，Java进程就会宕机，查看系统运行日志发现系统发生了内存泄露（示例堆栈）：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205000.png" alt=""><br>图2-1 OOM内存溢出堆栈</p>
<p>对内存进行监控（切换使用堆内存池，方便对内存进行监控），发现堆内存一直飙升，如下所示（示例堆内存监控）：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205001.png" alt=""><br>图2-2 堆内存监控</p>
<p>2.2. 问题定位</p>
<p>使用jmap -dump:format=b,file=netty.bin PID 将堆内存dump出来，通过IBM的HeapAnalyzer工具进行分析，发现ByteBuf发生了泄露。</p>
<p>因为使用了内存池，所以首先怀疑是不是申请的ByteBuf没有被释放导致？查看代码，发现消息发送完成之后，Netty底层已经调用ReferenceCountUtil.release(message)对内存进行了释放。这是怎么回事呢？难道Netty 4.X的内存池有Bug，调用release操作释放内存失败？</p>
<p>考虑到Netty 内存池自身Bug的可能性不大，首先从业务的使用方式入手分析：</p>
<p>内存的分配是在业务代码中进行，由于使用到了业务线程池做I/O操作和业务操作的隔离，实际上内存是在业务线程中分配的；<br>内存的释放操作是在outbound中进行，按照Netty 3的线程模型，downstream（对应Netty 4的outbound，Netty 4取消了upstream和downstream）的handler也是由业务调用者线程执行的，也就是说释放跟分配在同一个业务线程中进行。<br>初次排查并没有发现导致内存泄露的根因，一筹莫展之际开始查看Netty的内存池分配器PooledByteBufAllocator的Doc和源码实现，发现内存池实际是基于线程上下文实现的，相关代码如下：</p>
<p>[java]<br>final ThreadLocal&lt;PoolThreadCache&gt; threadCache = new ThreadLocal&lt;PoolThreadCache&gt;() {<br>        private final AtomicInteger index = new AtomicInteger();<br>        @Override<br>        protected PoolThreadCache initialValue() {<br>            final int idx = index.getAndIncrement();<br>            final PoolArena&lt;byte[]&gt; heapArena;<br>            final PoolArena&lt;ByteBuffer&gt; directArena;<br>            if (heapArenas != null) {<br>                heapArena = heapArenas[Math.abs(idx % heapArenas.length)];<br>            } else {<br>                heapArena = null;<br>            }<br>            if (directArenas != null) {<br>                directArena = directArenas[Math.abs(idx % directArenas.length)];<br>            } else {<br>                directArena = null;<br>            }<br>            return new PoolThreadCache(heapArena, directArena);<br>        }<br>[/java]</p>
<p>也就是说内存的申请和释放必须在同一线程上下文中，不能跨线程。跨线程之后实际操作的就不是同一块内存区域，这会导致很多严重的问题，内存泄露便是其中之一。内存在A线程申请，切换到B线程释放，实际是无法正确回收的。</p>
<p>通过对Netty内存池的源码分析，问题基本锁定。保险起见进行简单验证，通过对单条业务消息进行Debug，发现执行释放的果然不是业务线程，而是Netty的NioEventLoop线程：当某个消息被完全发送成功之后，会通过ReferenceCountUtil.release(message)方法释放已经发送成功的ByteBuf。</p>
<p>问题定位出来之后，继续溯源，发现Netty 4修改了Netty 3的线程模型：在Netty 3的时候，upstream是在I/O线程里执行的，而downstream是在业务线程里执行。当Netty从网络读取一个数据报投递给业务handler的时候，handler是在I/O线程里执行；而当我们在业务线程中调用write和writeAndFlush向网络发送消息的时候,handler是在业务线程里执行，直到最后一个Header handler将消息写入到发送队列中，业务线程才返回。</p>
<p>Netty4修改了这一模型，在Netty 4里inbound(对应Netty 3的upstream)和outbound(对应Netty 3的downstream)都是在NioEventLoop(I/O线程)中执行。当我们在业务线程里通过ChannelHandlerContext.write发送消息的时候，Netty 4在将消息发送事件调度到ChannelPipeline的时候，首先将待发送的消息封装成一个Task，然后放到NioEventLoop的任务队列中，由NioEventLoop线程异步执行。后续所有handler的调度和执行，包括消息的发送、I/O事件的通知，都由NioEventLoop线程负责处理。</p>
<p>下面我们分别通过对比Netty 3和Netty 4的消息接收和发送流程，来理解两个版本线程模型的差异：</p>
<p>Netty 3的I/O事件处理流程：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205003.png" alt=""><br>图2-3 Netty 3 I/O事件处理线程模型</p>
<p>Netty 4的I/O消息处理流程：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205004.png" alt=""><br>图2-4 Netty 4 I/O事件处理线程模型</p>
<p>2.3. 问题总结</p>
<p>Netty 4.X版本新增的内存池确实非常高效，但是如果使用不当则会导致各种严重的问题。诸如内存泄露这类问题，功能测试并没有异常，如果相关接口没有进行压测或者稳定性测试而直接上线，则会导致严重的线上问题。</p>
<p>内存池PooledByteBuf的使用建议：</p>
<p>申请之后一定要记得释放，Netty自身Socket读取和发送的ByteBuf系统会自动释放，用户不需要做二次释放；如果用户使用Netty的内存池在应用中做ByteBuf的对象池使用，则需要自己主动释放；<br>避免错误的释放：跨线程释放、重复释放等都是非法操作，要避免。特别是跨线程申请和释放，往往具有隐蔽性，问题定位难度较大；<br>防止隐式的申请和分配：之前曾经发生过一个案例，为了解决内存池跨线程申请和释放问题，有用户对内存池做了二次包装，以实现多线程操作时，内存始终由包装的管理线程申请和释放，这样可以屏蔽用户业务线程模型和访问方式的差异。谁知运行一段时间之后再次发生了内存泄露，最后发现原来调用ByteBuf的write操作时，如果内存容量不足，会自动进行容量扩展。扩展操作由业务线程执行，这就绕过了内存池管理线程，发生了“引用逃逸”。该Bug只有在ByteBuf容量动态扩展的时候才发生，因此，上线很长一段时间没有发生，直到某一天……因此，大家在使用Netty 4.X的内存池时要格外当心，特别是做二次封装时，一定要对内存池的实现细节有深刻的理解。<br>3. Netty升级之后遭遇数据被篡改</p>
<p>3.1. 问题描述</p>
<p>某业务产品，Netty3.X升级到4.X之后，系统运行过程中，偶现服务端发送给客户端的应答数据被莫名“篡改”。</p>
<p>业务服务端的处理流程如下：</p>
<p>将解码后的业务消息封装成Task，投递到后端的业务线程池中执行；<br>业务线程处理业务逻辑，完成之后构造应答消息发送给客户端；<br>业务应答消息的编码通过继承Netty的CodeC框架实现，即Encoder ChannelHandler;<br>调用Netty的消息发送接口之后，流程继续，根据业务场景，可能会继续操作原发送的业务对象。<br>业务相关代码示例如下：</p>
<p>[java]<br>//构造订购应答消息<br>SubInfoResp infoResp = new SubInfoResp();<br>//根据业务逻辑，对应答消息赋值<br>infoResp.setResultCode(0);<br>infoResp.setXXX()；<br>后续赋值操作省略……<br>//调用ChannelHandlerContext进行消息发送<br>ctx.writeAndFlush(infoResp);<br>//消息发送完成之后，后续根据业务流程进行分支处理，修改infoResp对象<br>infoResp.setXXX();<br>后续代码省略……<br>[/java]</p>
<p>3.2. 问题定位</p>
<p>首先对应答消息被非法“篡改”的原因进行分析，经过定位发现当发生问题时，被“篡改”的内容是调用writeAndFlush接口之后，由后续业务分支代码修改应答消息导致的。由于修改操作发生在writeAndFlush操作之后，按照Netty 3.X的线程模型不应该出现该问题。</p>
<p>在Netty3中，downstream是在业务线程里执行的，也就是说对SubInfoResp的编码操作是在业务线程中执行的，当编码后的ByteBuf对象被投递到消息发送队列之后，业务线程才会返回并继续执行后续的业务逻辑，此时修改应答消息是不会改变已完成编码的ByteBuf对象的，所以肯定不会出现应答消息被篡改的问题。</p>
<p>初步分析应该是由于线程模型发生变更导致的问题，随后查验了Netty 4的线程模型，果然发生了变化：当调用outbound向外发送消息的时候，Netty会将发送事件封装成Task，投递到NioEventLoop的任务队列中异步执行，相关代码如下：</p>
<p>[java]<br>@Override<br> public void invokeWrite(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {<br>        if (msg == null) {<br>            throw new NullPointerException(&quot;msg&quot;);<br>        }<br>        validatePromise(ctx, promise, true);<br>        if (executor.inEventLoop()) {<br>            invokeWriteNow(ctx, msg, promise);<br>        } else {<br>            AbstractChannel channel = (AbstractChannel) ctx.channel();<br>            int size = channel.estimatorHandle().size(msg);<br>            if (size &gt; 0) {<br>                ChannelOutboundBuffer buffer = channel.unsafe().outboundBuffer();<br>                // Check for null as it may be set to null if the channel is closed already<br>                if (buffer != null) {<br>                    buffer.incrementPendingOutboundBytes(size);<br>                }<br>            }<br>            safeExecuteOutbound(WriteTask.newInstance(ctx, msg, size, promise), promise, msg);<br>        }<br>    }<br>[/java]</p>
<p>通过上述代码可以看出，Netty首先对当前的操作的线程进行判断，如果操作本身就是由NioEventLoop线程执行，则调用写操作；否则，执行线程安全的写操作，即将写事件封装成Task，放入到任务队列中由Netty的I/O线程执行，业务调用返回，流程继续执行。</p>
<p>通过源码分析，问题根源已经很清楚：系统升级到Netty 4之后，线程模型发生变化，响应消息的编码由NioEventLoop线程异步执行，业务线程返回。这时存在两种可能：</p>
<p>如果编码操作先于修改应答消息的业务逻辑执行，则运行结果正确；<br>如果编码操作在修改应答消息的业务逻辑之后执行，则运行结果错误。<br>由于线程的执行先后顺序无法预测，因此该问题隐藏的相当深。如果对Netty 4和Netty3的线程模型不了解，就会掉入陷阱。</p>
<p>Netty 3版本业务逻辑没有问题，流程如下：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205005.png" alt=""><br>图3-1 升级之前的业务流程线程模型</p>
<p>升级到Netty 4版本之后，业务流程由于Netty线程模型的变更而发生改变，导致业务逻辑发生问题：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205006.png" alt=""><br>图3-2 升级之后的业务处理流程发生改变</p>
<p>3.3. 问题总结</p>
<p>很多读者在进行Netty 版本升级的时候，只关注到了包路径、类和API的变更，并没有注意到隐藏在背后的“暗箭”- 线程模型变更。</p>
<p>升级到Netty 4的用户需要根据新的线程模型对已有的系统进行评估，重点需要关注outbound的ChannelHandler，如果它的正确性依赖于Netty 3的线程模型，则很可能在新的线程模型中出问题，可能是功能问题或者其它问题。</p>
<p>4. Netty升级之后性能严重下降</p>
<p>4.1. 问题描述</p>
<p>相信很多Netty用户都看过如下相关报告：</p>
<p>在Twitter，Netty 4 GC开销降为五分之一：Netty 3使用Java对象表示I/O事件，这样简单，但会产生大量的垃圾，尤其是在我们这样的规模下。Netty 4在新版本中对此做出了更改，取代生存周期短的事件对象，而以定义在生存周期长的通道对象上的方法处理I/O事件。它还有一个使用池的专用缓冲区分配器。</p>
<p>每当收到新信息或者用户发送信息到远程端，Netty 3均会创建一个新的堆缓冲区。这意味着，对应每一个新的缓冲区，都会有一个‘new byte[capacity]’。这些缓冲区会导致GC压力，并消耗内存带宽：为了安全起见，新的字节数组分配时会用零填充，这会消耗内存带宽。然而，用零填充的数组很可能会再次用实际的数据填充，这又会消耗同样的内存带宽。如果Java虚拟机（JVM）提供了创建新字节数组而又无需用零填充的方式，那么我们本来就可以将内存带宽消耗减少50%，但是目前没有那样一种方式。</p>
<p>在Netty 4中，代码定义了粒度更细的API，用来处理不同的事件类型，而不是创建事件对象。它还实现了一个新缓冲池，那是一个纯Java版本的 jemalloc （Facebook也在用）。现在，Netty不会再因为用零填充缓冲区而浪费内存带宽了。</p>
<p>我们比较了两个分别建立在Netty 3和4基础上echo协议服务器。（Echo非常简单，这样，任何垃圾的产生都是Netty的原因，而不是协议的原因）。我使它们服务于相同的分布式echo协议客户端，来自这些客户端的16384个并发连接重复发送256字节的随机负载，几乎使千兆以太网饱和。</p>
<p>根据测试结果，Netty 4：</p>
<p>GC中断频率是原来的1/5： 45.5 vs. 9.2次/分钟<br>垃圾生成速度是原来的1/5： 207.11 vs 41.81 MiB/秒<br>正是看到了相关的Netty 4性能提升报告，很多用户选择了升级。事后一些用户反馈Netty 4并没有跟产品带来预期的性能提升，有些甚至还发生了非常严重的性能下降，下面我们就以某业务产品的失败升级经历为案例，详细分析下导致性能下降的原因。</p>
<p>4.2. 问题定位</p>
<p>首先通过JMC等性能分析工具对性能热点进行分析，示例如下（信息安全等原因，只给出分析过程示例截图）：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205007.png" alt=""><br>图4-1 JMC性能监控分析</p>
<p>通过对热点方法的分析，发现在消息发送过程中，有两处热点：</p>
<p>消息发送性能统计相关Handler;<br>编码Handler。<br>对使用Netty 3版本的业务产品进行性能对比测试，发现上述两个Handler也是热点方法。既然都是热点，为啥切换到Netty4之后性能下降这么厉害呢？</p>
<p>通过方法的调用树分析发现了两个版本的差异：在Netty 3中，上述两个热点方法都是由业务线程负责执行；而在Netty 4中，则是由NioEventLoop(I/O)线程执行。对于某个链路，业务是拥有多个线程的线程池，而NioEventLoop只有一个，所以执行效率更低，返回给客户端的应答时延就大。时延增大之后，自然导致系统并发量降低，性能下降。</p>
<p>找出问题根因之后，针对Netty 4的线程模型对业务进行专项优化，性能达到预期，远超过了Netty 3老版本的性能。</p>
<p>Netty 3的业务线程调度模型图如下所示：充分利用了业务多线程并行编码和Handler处理的优势，周期T内可以处理N条业务消息。<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205008.png" alt=""><br>图4-2 Netty 3业务调度性能模型</p>
<p>切换到Netty 4之后，业务耗时Handler被I/O线程串行执行，因此性能发生比较大的下降：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205009.png" alt=""><br>图4-3 Netty 4业务调度性能模型</p>
<p>4.3. 问题总结</p>
<p>该问题的根因还是由于Netty 4的线程模型变更引起，线程模型变更之后，不仅影响业务的功能，甚至对性能也会造成很大的影响。</p>
<p>对Netty的升级需要从功能、兼容性和性能等多个角度进行综合考虑，切不可只盯着API变更这个芝麻，而丢掉了性能这个西瓜。API的变更会导致编译错误，但是性能下降却隐藏于无形之中，稍不留意就会中招。</p>
<p>对于讲究快速交付、敏捷开发和灰度发布的互联网应用，升级的时候更应该要当心。</p>
<p>5. Netty升级之后上下文丢失</p>
<p>5.1. 问题描述</p>
<p>为了提升业务的二次定制能力，降低对接口的侵入性，业务使用线程变量进行消息上下文的传递。例如消息发送源地址信息、消息Id、会话Id等。</p>
<p>业务同时使用到了一些第三方开源容器，也提供了线程级变量上下文的能力。业务通过容器上下文获取第三方容器的系统变量信息。</p>
<p>升级到Netty 4之后，业务继承自Netty的ChannelHandler发生了空指针异常，无论是业务自定义的线程上下文、还是第三方容器的线程上下文，都获取不到传递的变量值。</p>
<p>5.2. 问题定位</p>
<p>首先检查代码，看业务是否传递了相关变量，确认业务传递之后怀疑跟Netty 版本升级相关，调试发现，业务ChannelHandler获取的线程上下文对象和之前业务传递的上下文不是同一个。这就说明执行ChannelHandler的线程跟处理业务的线程不是同一个线程！</p>
<p>查看Netty 4线程模型的相关Doc发现，Netty修改了outbound的线程模型，正好影响了业务消息发送时的线程上下文传递，最终导致线程变量丢失。</p>
<p>5.3. 问题总结</p>
<p>通常业务的线程模型有如下几种：</p>
<p>业务自定义线程池/线程组处理业务，例如使用JDK 1.5提供的ExecutorService；<br>使用J2EE Web容器自带的线程模型，常见的如JBoss和Tomcat的HTTP接入线程等；<br>隐式的使用其它第三方框架的线程模型，例如使用NIO框架进行协议处理，业务代码隐式使用的就是NIO框架的线程模型，除非业务明确的实现自定义线程模型。<br>在实践中我们发现很多业务使用了第三方框架，但是只熟悉API和功能，对线程模型并不清楚。某个类库由哪个线程调用，糊里糊涂。为了方便变量传递，又随意的使用线程变量，实际对背后第三方类库的线程模型产生了强依赖。当容器或者第三方类库升级之后，如果线程模型发生了变更，则原有功能就会发生问题。</p>
<p>鉴于此，在实际工作中，尽量不要强依赖第三方类库的线程模型，如果确实无法避免，则必须对它的线程模型有深入和清晰的了解。当第三方类库升级之后，需要检查线程模型是否发生变更，如果发生变化，相关的代码也需要考虑同步升级。</p>
<p>6. Netty3.X VS Netty4.X 之线程模型</p>
<p>通过对三个具有典型性的升级失败案例进行分析和总结，我们发现有个共性：都是线程模型改变惹的祸!</p>
<p>下面小节我们就详细得对Netty3和Netty4版本的I/O线程模型进行对比，以方便大家掌握两者的差异，在升级和使用中尽量少踩雷。</p>
<p>6.1 Netty 3.X 版本线程模型</p>
<p>Netty 3.X的I/O操作线程模型比较复杂，它的处理模型包括两部分：</p>
<p>Inbound：主要包括链路建立事件、链路激活事件、读事件、I/O异常事件、链路关闭事件等；<br>Outbound：主要包括写事件、连接事件、监听绑定事件、刷新事件等。<br>我们首先分析下Inbound操作的线程模型：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205010.png" alt=""><br>图6-1 Netty 3 Inbound操作线程模型</p>
<p>从上图可以看出，Inbound操作的主要处理流程如下：</p>
<p>I/O线程（Work线程）将消息从TCP缓冲区读取到SocketChannel的接收缓冲区中；<br>由I/O线程负责生成相应的事件，触发事件向上执行，调度到ChannelPipeline中；<br>I/O线程调度执行ChannelPipeline中Handler链的对应方法，直到业务实现的Last Handler;<br>Last Handler将消息封装成Runnable，放入到业务线程池中执行，I/O线程返回，继续读/写等I/O操作；<br>业务线程池从任务队列中弹出消息，并发执行业务逻辑。<br>通过对Netty 3的Inbound操作进行分析我们可以看出，Inbound的Handler都是由Netty的I/O Work线程负责执行。</p>
<p>下面我们继续分析Outbound操作的线程模型：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205011.png" alt=""><br>图6-2 Netty 3 Outbound操作线程模型</p>
<p>从上图可以看出，Outbound操作的主要处理流程如下：</p>
<p>业务线程发起Channel Write操作，发送消息；</p>
<p>Netty将写操作封装成写事件，触发事件向下传播；<br>写事件被调度到ChannelPipeline中，由业务线程按照Handler Chain串行调用支持Downstream事件的Channel Handler;<br>执行到系统最后一个ChannelHandler，将编码后的消息Push到发送队列中，业务线程返回；<br>Netty的I/O线程从发送消息队列中取出消息，调用SocketChannel的write方法进行消息发送。<br>6.2 Netty 4.X 版本线程模型</p>
<p>相比于Netty 3.X系列版本，Netty 4.X的I/O操作线程模型比较简答，它的原理图如下所示：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205012.png" alt=""><br>图6-3 Netty 4 Inbound和Outbound操作线程模型</p>
<p>从上图可以看出，Outbound操作的主要处理流程如下：</p>
<p>I/O线程NioEventLoop从SocketChannel中读取数据报，将ByteBuf投递到ChannelPipeline，触发ChannelRead事件；<br>I/O线程NioEventLoop调用ChannelHandler链，直到将消息投递到业务线程，然后I/O线程返回，继续后续的读写操作；<br>业务线程调用ChannelHandlerContext.write(Object msg)方法进行消息发送；<br>如果是由业务线程发起的写操作，ChannelHandlerInvoker将发送消息封装成Task，放入到I/O线程NioEventLoop的任务队列中，由NioEventLoop在循环中统一调度和执行。放入任务队列之后，业务线程返回；<br>I/O线程NioEventLoop调用ChannelHandler链，进行消息发送，处理Outbound事件，直到将消息放入发送队列，然后唤醒Selector，进而执行写操作。<br>通过流程分析，我们发现Netty 4修改了线程模型，无论是Inbound还是Outbound操作，统一由I/O线程NioEventLoop调度执行。</p>
<p>6.3. 线程模型对比</p>
<p>在进行新老版本线程模型PK之前，首先还是要熟悉下串行化设计的理念：</p>
<p>我们知道当系统在运行过程中，如果频繁的进行线程上下文切换，会带来额外的性能损耗。多线程并发执行某个业务流程，业务开发者还需要时刻对线程安全保持警惕，哪些数据可能会被并发修改，如何保护？这不仅降低了开发效率，也会带来额外的性能损耗。</p>
<p>为了解决上述问题，Netty 4采用了串行化设计理念，从消息的读取、编码以及后续Handler的执行，始终都由I/O线程NioEventLoop负责，这就意外着整个流程不会进行线程上下文的切换，数据也不会面临被并发修改的风险，对于用户而言，甚至不需要了解Netty的线程细节，这确实是个非常好的设计理念，它的工作原理图如下：<br><img src="http://cdn1.infoqstatic.com/resource/articles/netty-version-upgrade-history-thread-part/zh/resources/0205014.png" alt=""><br>图6-4 Netty 4的串行化设计理念</p>
<p>一个NioEventLoop聚合了一个多路复用器Selector，因此可以处理成百上千的客户端连接，Netty的处理策略是每当有一个新的客户端接入，则从NioEventLoop线程组中顺序获取一个可用的NioEventLoop，当到达数组上限之后，重新返回到0，通过这种方式，可以基本保证各个NioEventLoop的负载均衡。一个客户端连接只注册到一个NioEventLoop上，这样就避免了多个I/O线程去并发操作它。</p>
<p>Netty通过串行化设计理念降低了用户的开发难度，提升了处理性能。利用线程组实现了多个串行化线程水平并行执行，线程之间并没有交集，这样既可以充分利用多核提升并行处理能力，同时避免了线程上下文的切换和并发保护带来的额外性能损耗。</p>
<p>了解完了Netty 4的串行化设计理念之后，我们继续看Netty 3线程模型存在的问题，总结起来，它的主要问题如下：</p>
<p>Inbound和Outbound实质都是I/O相关的操作，它们的线程模型竟然不统一，这给用户带来了更多的学习和使用成本；<br>Outbound操作由业务线程执行，通常业务会使用线程池并行处理业务消息，这就意味着在某一个时刻会有多个业务线程同时操作ChannelHandler，我们需要对ChannelHandler进行并发保护，通常需要加锁。如果同步块的范围不当，可能会导致严重的性能瓶颈，这对开发者的技能要求非常高，降低了开发效率；<br>Outbound操作过程中，例如消息编码异常，会产生Exception，它会被转换成Inbound的Exception并通知到ChannelPipeline，这就意味着业务线程发起了Inbound操作！它打破了Inbound操作由I/O线程操作的模型，如果开发者按照Inbound操作只会由一个I/O线程执行的约束进行设计，则会发生线程并发访问安全问题。由于该场景只在特定异常时发生，因此错误非常隐蔽！一旦在生产环境中发生此类线程并发问题，定位难度和成本都非常大。<br>讲了这么多，似乎Netty 4 完胜 Netty 3的线程模型，其实并不尽然。在特定的场景下，Netty 3的性能可能更高，就如本文第4章节所讲，如果编码和其它Outbound操作非常耗时，由多个业务线程并发执行，性能肯定高于单个NioEventLoop线程。</p>
<p>但是，这种性能优势不是不可逆转的，如果我们修改业务代码，将耗时的Handler操作前置，Outbound操作不做复杂业务逻辑处理，性能同样不输于Netty 3，但是考虑内存池优化、不会反复创建Event、不需要对Handler加锁等Netty 4的优化，整体性能Netty 4版本肯定会更高。</p>
<p>总而言之，如果用户真正熟悉并掌握了Netty 4的线程模型和功能类库，相信不仅仅开发会更加简单，性能也会更优！</p>
<p>6.4. 思考</p>
<p>就Netty 而言，掌握线程模型的重要性不亚于熟悉它的API和功能。很多时候我遇到的功能、性能等问题，都是由于缺乏对它线程模型和原理的理解导致的，结果我们就以讹传讹，认为Netty 4版本不如3好用等。</p>
<p>不能说所有开源软件的版本升级一定都胜过老版本，就Netty而言，我认为Netty 4版本相比于老的Netty 3，确实是历史的一大进步。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Eclipse中SVN的安装步骤（两种）和使用方法]]></title>
      <url>http://yoursite.com/2015/02/15/%5B%E8%BD%AC%5DEclipse%E4%B8%ADSVN%E7%9A%84%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%B8%A4%E7%A7%8D%EF%BC%89%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/vebasan/article/details/6186344" title="原网址" target="_blank" rel="external">原网址</a></p>
<p>一、给Eclipse安装SVN，最常见的有两种方式：手动方式和使用安装向导方式。具体步骤如下：</p>
<p>方式一：手动安装</p>
<p>1、从官网下载site-1.6.9.zip文件,网址是:subclipse.tigris.org<br>2、从中解压出features与plugins文件夹，复制到E:/MyEclipse/myPlugin/svn里面，其它的*.xml文件不要。<br>3、在E:/MyEclipse/MyEclipse X.X/dropins下新建文件svn.link,内容是:path=E://MyEclipse//myPlugin//svn 保存。<br>4、删除E:/MyEclipse/MyEclipse X.X/configuration/org.eclipse.update文件夹<br>5、重启myeclipse就一切正常了。</p>
<p>方式二：使用Eclipse安装向导</p>
<p>打开Eclipse<br>help-&gt;Software Updates-&gt;find and install(如果没有这个就用help-&gt;Software Updates-&gt;Add/Remove Software即可)<br>选择search for new features to install, Next<br>点击new remote site<br>输入name：subclipse 1.6.x，url：<a href="http://subclipse.tigris.org/update_1.6.x，点OK" target="_blank" rel="external">http://subclipse.tigris.org/update_1.6.x，点OK</a><br>或者：<br>Name: Subclipse 1.6.x (Eclipse 3.2+)    URL:  <a href="http://subclipse.tigris.org/update_1.6.x" target="_blank" rel="external">http://subclipse.tigris.org/update_1.6.x</a><br>    Name: Subclipse 1.4.x (Eclipse 3.2+)    URL:  <a href="http://subclipse.tigris.org/update_1.4.x" target="_blank" rel="external">http://subclipse.tigris.org/update_1.4.x</a><br>    Name: Subclipse 1.2.x (Eclipse 3.2+)    URL:  <a href="http://subclipse.tigris.org/update_1.2.x" target="_blank" rel="external">http://subclipse.tigris.org/update_1.2.x</a><br>    Name: Subclipse 1.0.x (Eclipse 3.0/3.1)    URL:  <a href="http://subclipse.tigris.org/update_1.0.x" target="_blank" rel="external">http://subclipse.tigris.org/update_1.0.x</a></p>
<p>选中subclipse，点击finish<br>一直NEXT，这里注意下，有些时候会出现 Subclipse Integration for Mylyn 3.x (Optional) (3.0.0) requires plug-in “org.eclipse.mylyn.tasks.core (3.0.0)”, or compatible.错误，这个不要紧，在弹出框中选择subclipse,把Subclipse Integration for Mylyn 3.x选项去掉即可<br>Next一路安装完成！</p>
<p>二、Eclipse中使用SVN（以MyEclipse8.0为例）</p>
<p>1、共享项目（把本地的项目共享到subversion服务器上）<br>打开MyEclipse8.0，假设要共享projTest是项目名称<br>右键项目projTest-&gt;Team-&gt;Share Project-&gt;Svn,<br>单库模式下url填写svn://svn server address/，多库模式下url填写svn://svn server address/Repository1，其中Repository1是库的名称<br>next直到finish，proj1就被共享到svn服务器上了，但是代码并没上传，还需要commit一次<br>右键项目projTest，team-&gt;commit，项目内容就被上传到svn服务器了<br>2、签出项目（把svn服务器上的项目下载的到本地）<br>打开MyEclipse8.0<br>window-&gt;open perspective-&gt;svn repository explorer（如果没有在other里选择）<br>在左边空白处右键-&gt;new-&gt;repository location<br>单库模式下url填写svn://svnserveraddress/，多库模式下url填写svn://svnserveraddress/Repository1(同步骤二)<br>右键projTest-&gt;check out<br>next直到finish，该项目就被签出到本地，切换到java视图就能看到该项目了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决Android SDK无法连接dl-ssl.google.com]]></title>
      <url>http://yoursite.com/2015/02/13/%E8%A7%A3%E5%86%B3Android%20SDK%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5dl-ssl.google.com/</url>
      <content type="html"><![CDATA[<p>首先在终端中对dl.google.com进行Ping操作，得到如下结果：<br><a href="http://www.bugpointer.com/wp-content/uploads/2015/02/ping.png" target="_blank" rel="external"><img src="http://www.bugpointer.com/wp-content/uploads/2015/02/ping-300x196.png" alt="ping"></a><br>然后在Hosts文件中增加如下代码：<br>[shell]203.208.49.163 dl-ssl.google.com[/shell]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac编译OpenJDK]]></title>
      <url>http://yoursite.com/2015/02/12/Mac%E7%BC%96%E8%AF%91OpenJDK/</url>
      <content type="html"><![CDATA[<p>首先确定要使用的JDK版本，由于jdk8已经发布很久了，所以选择OpenJDK8u。 </p>
<p>获取源码有两种方式。一是通过Mercurial代码版本管理工具从Repository中直接取得源码（Repository地址：<a href="http://hg.openjdk.java.net/jdk8u/jdk8u），这是最直接的方式，从版本管理中看变更轨迹比看什么Release" target="_blank" rel="external">http://hg.openjdk.java.net/jdk8u/jdk8u），这是最直接的方式，从版本管理中看变更轨迹比看什么Release</a> Note都来得实在，不过坏处自然是太麻烦了一些，尤其是Mercurial远不如SVN、ClearCase或CVS之类的版本控制工具那样普及。另外一种就是直接下载官方打包好的源码包了，可以从Source Releases页面（地址：<a href="http://download.java.net/openjdk/jdk7/）取得打包好的源码，一般来说大概一个月左右会更新一次，虽然不够及时，但的确方便了许多。" target="_blank" rel="external">http://download.java.net/openjdk/jdk7/）取得打包好的源码，一般来说大概一个月左右会更新一次，虽然不够及时，但的确方便了许多。</a></p>
<p>由于我们选择使用OpenJDK8u，无法使用上面提到的第二种方式，所以只能从hg库中下载源码。</p>
<p>下载过程如下：<br>1.安装Mercurial。使用下面的命令进行安装。<br>[shell]$ brew install mercurial[/shell]<br>2.下载源码。使用下面的命令下载源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hg clone http://hg.openjdk.java.net/jdk8u/jdk8u-dev</div><div class="line">cd jdk8u-dev</div><div class="line">bash ./get_source.sh</div></pre></td></tr></table></figure></p>
<p>3.接下来就开始着手编译JDK了，按照README-builds.html的描述，需要首先运行<br>[shell]bash ./configure[/shell]<br>但是在这一步走了很多弯路。首先我把系统升级到了10.10，然后Xcode也装了最新的6.1.1，但是在运行中发现需要Xcode4，Xcode6.1.1不行；那就装Xcode4，发现Xcode4在10.10上跑的不好，决定把系统将回10.8；系统降回10.8后安装了Xcode4.6.3，这时候Xcode没有问题了。但是还是会报一个错误如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">could not find freetype!</div></pre></td></tr></table></figure></p>
<p>但是我确定已经装了freetype，而且在README-builds.html里对Mac的要求中也没有提到freetype，最后把命令改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash ./configure --with-target-bits=64  --with-freetype-include=/usr/local/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.5.5/lib</div></pre></td></tr></table></figure></p>
<p>终于跑通了！！在此期间还安装了XQuartz，不知道有没有作用。<br>4.运行<br><code>make all</code><br>编译成功的结果如下：<br><img src="/images/MacJdk编译成功.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python数据类型list(列表)跟tuple(元组)]]></title>
      <url>http://yoursite.com/2015/01/25/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Blist(%E5%88%97%E8%A1%A8)%E8%B7%9Ftuple(%E5%85%83%E7%BB%84)/</url>
      <content type="html"><![CDATA[<p><strong>list</strong></p>
<p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>比如，列出班里所有同学的名字，就可以用一个list表示：<br>[python]<br>&gt;&gt;&gt; classmates = [‘Michael’, ‘Bob’, ‘Tracy’]<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Bob’, ‘Tracy’]<br>[/python]<br>变量classmates就是一个list。用len()函数可以获得list元素的个数：<br>[python]<br>&gt;&gt;&gt; len(classmates)<br>3<br>用索引来访问list中每一个位置的元素，记得索引是从0开始的：<br>[python]<br>&gt;&gt;&gt; classmates[0]<br>‘Michael’<br>&gt;&gt;&gt; classmates[1]<br>‘Bob’<br>&gt;&gt;&gt; classmates[2]<br>‘Tracy’<br>&gt;&gt;&gt; classmates[3]<br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>IndexError: list index out of range<br>[/python]<br>当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。<br>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：<br>[python]<br>&gt;&gt;&gt; classmates[-1]<br>‘Tracy’<br>[/python]<br>以此类推，可以获取倒数第2个、倒数第3个：<br>[python]<br>&gt;&gt;&gt; classmates[-2]<br>‘Bob’<br>&gt;&gt;&gt; classmates[-3]<br>‘Michael’<br>&gt;&gt;&gt; classmates[-4]<br>Traceback (most recent call last):<br>File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>IndexError: list index out of range<br>[/python]</p>
<p>当然，倒数第4个就越界了。<br>list是一个可变的有序表，所以，可以往list中追加元素到末尾：<br>[python]<br>&gt;&gt;&gt; classmates.append(‘Adam’)<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Bob’, ‘Tracy’, ‘Adam’]<br>[/python]<br>也可以把元素插入到指定的位置，比如索引号为1的位置：<br>[python]<br>&gt;&gt;&gt; classmates.insert(1, ‘Jack’)<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’, ‘Adam’]<br>[/python]<br>要删除list末尾的元素，用pop()方法：<br>[python]<br>&gt;&gt;&gt; classmates.pop()<br>‘Adam’<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Jack’, ‘Bob’, ‘Tracy’]<br>[/python]<br>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：<br>[python]<br>&gt;&gt;&gt; classmates.pop(1)<br>‘Jack’<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Bob’, ‘Tracy’]<br>[/python]<br>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：<br>[python]<br>&gt;&gt;&gt; classmates[1] = ‘Sarah’<br>&gt;&gt;&gt; classmates<br>[‘Michael’, ‘Sarah’, ‘Tracy’]<br>[/python]<br>list里面的元素的数据类型也可以不同，比如：<br>[python]<br>&gt;&gt;&gt; L = [‘Apple’, 123, True]<br>[/python]<br>list元素也可以是另一个list，比如：<br>[python]<br>&gt;&gt;&gt; s = [‘python’, ‘java’, [‘asp’, ‘php’], ‘scheme’]<br>&gt;&gt;&gt; len(s)<br>4<br>[/python]<br>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：<br>[python]<br>&gt;&gt;&gt; p = [‘asp’, ‘php’]<br>&gt;&gt;&gt; s = [‘python’, ‘java’, p, ‘scheme’]<br>[/python]<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。<br>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：<br>[python]<br>&gt;&gt;&gt; L = []<br>&gt;&gt;&gt; len(L)<br>0<br>[/python]</p>
<p><strong>tuple</strong><br>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：<br>1 &gt;&gt;&gt; classmates = (‘Michael’, ‘Bob’, ‘Tracy’)<br>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。<br>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。<br>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：<br>[python]<br>&gt;&gt;&gt; t = (1, 2)<br>&gt;&gt;&gt; t<br>(1, 2)<br>[/python]<br>如果要定义一个空的tuple，可以写成()：<br>[python]<br>&gt;&gt;&gt; t = ()<br>&gt;&gt;&gt; t<br>()<br>[python]<br>但是，要定义一个只有1个元素的tuple，如果你这么定义：<br>[python]<br>&gt;&gt;&gt; t = (1)<br>&gt;&gt;&gt; t<br>1<br>[python]<br>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。<br>所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：<br>[python]<br>&gt;&gt;&gt; t = (1,)<br>&gt;&gt;&gt; t<br>(1,)<br>[/python]<br>Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。<br>最后来看一个“可变的”tuple：<br>[python]<br>&gt;&gt;&gt; t = (‘a’, ‘b’, [‘A’, ‘B’])<br>&gt;&gt;&gt; t[2][0] = ‘X’<br>&gt;&gt;&gt; t[2][1] = ‘Y’<br>&gt;&gt;&gt; t<br>(‘a’, ‘b’, [‘X’, ‘Y’])<br>[/python]<br>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？</p>
<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！<br>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>
<p>list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。</p>
<p>本文来自互联网，不保证正确！若侵权请联系我们删除！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[综合 Github上最受关注的前端大牛，快来膜拜吧！]]></title>
      <url>http://yoursite.com/2015/01/25/%E7%BB%BC%E5%90%88%20Github%E4%B8%8A%E6%9C%80%E5%8F%97%E5%85%B3%E6%B3%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E5%A4%A7%E7%89%9B%EF%BC%8C%E5%BF%AB%E6%9D%A5%E8%86%9C%E6%8B%9C%E5%90%A7%EF%BC%81/</url>
      <content type="html"><![CDATA[<p>本文列出了Github上最受关注的10位前端大牛。看看他们负责的项目和提交的代码，你是不是能从中学到些什么？<br>1. Paul Irish<br><img src="http://cms.csdnimg.cn/article/201408/01/53db25ef8ef61.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/paulirish" target="_blank" rel="external">https://github.com/paulirish</a><br>个人主页： <a href="http://paulirish.com" target="_blank" rel="external">http://paulirish.com</a><br>维基百科： <a href="http://en.wikipedia.org/wiki/Paul_Irish" target="_blank" rel="external">http://en.wikipedia.org/wiki/Paul_Irish</a><br>Paul Irish是著名的前端开发工程师，同时他也是Chrome开发者关系团队成员，jQuery团队成员，Modernizr、 Yeoman、CSS3 Please和HTML5 Boilerplate的lead developer。 </p>
<p>2.TJ Holowaychuk<br><img src="http://cms.csdnimg.cn/article/201408/01/53db274c7c32f.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/visionmedia" target="_blank" rel="external">https://github.com/visionmedia</a><br>个人主页： <a href="http://tjholowaychuk.com" target="_blank" rel="external">http://tjholowaychuk.com</a><br>TJ Holowaychuk ，程序员兼艺术家，Koa、Co、Express、jade、mocha、node-canvas、commander.js 等知名开源项目的创建和贡献者。<br>相关新闻： 知名nodeJS框架Express的作者TJ Holowaychuk宣布弃nodeJS投Go</p>
<p>3. Addy Osmani<br><img src="http://cms.csdnimg.cn/article/201408/01/53db05d54957b_middle.jpg?_=49162" alt=""></p>
<p>Github主页： <a href="https://github.com/addyosmani" target="_blank" rel="external">https://github.com/addyosmani</a><br>个人主页： <a href="http://addyosmani.com" target="_blank" rel="external">http://addyosmani.com</a><br>Addy Osmani ，谷歌前端开发工程师，创建了 TodoMVC、jQuery UI Bootstrap、jQuery Plugin Patterns 和 Backbone Paginator，出版了《Learning JavaScript Design Patterns》和《Developing Backbone.js Applications》两本技术书籍，而且还是著名的 jQuery、Modernizr 以及Backbone.js 框架的贡献者。</p>
<p>推荐阅读： 前端大牛 Addy Osmani 的15个精彩PPT </p>
<p>4.John Resig<br><img src="http://cms.csdnimg.cn/article/201408/01/53db2d6db73b3.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/jeresig" target="_blank" rel="external">https://github.com/jeresig</a><br>个人主页： <a href="http://ejohn.org/" target="_blank" rel="external">http://ejohn.org/</a><br>John Resig, jQuery的创始人和技术领袖，目前在Mozilla担任JavaScript工具开发工程师。著有《Pro JavaScript Techniques》（即《精通JavaScript》）等经典JavaScript书籍。</p>
<p>相关新闻： 对话jQuery之父John Resig：JavaScript的开发之路</p>
<p>5.Douglas Crockford<br><img src="http://cms.csdnimg.cn/article/201408/01/53db2ec32b30d.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/douglascrockford" target="_blank" rel="external">https://github.com/douglascrockford</a><br>个人主页： <a href="http://www.crockford.com/" target="_blank" rel="external">http://www.crockford.com/</a><br>Douglas Crockford是JavaScript开发社区最知名的权威，是JSON、JSLint、JSMin和ADSafe之父，是《JavaScript: The Good Parts》的作者。他同时也服务于ECMA的JavaScript2.0技术委员会（TC39）。<br>相关新闻： JavaScript: 世界上最被误解的语言</p>
<p>6. Mike Bostock<br><img src="http://cms.csdnimg.cn/article/201408/01/53db31cdd691b.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/mbostock" target="_blank" rel="external">https://github.com/mbostock</a><br>个人主页： <a href="http://bost.ocks.org" target="_blank" rel="external">http://bost.ocks.org</a><br>Mike Bostock，纽约时报图形编辑，知名可视化库 D3.js的主要作者。 </p>
<p>7.Mark Otto<br><img src="http://cms.csdnimg.cn/article/201408/01/53db42aa96f39.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/mdo" target="_blank" rel="external">https://github.com/mdo</a><br>个人主页： <a href="https://www.gittip.com/mdo/" target="_blank" rel="external">https://www.gittip.com/mdo/</a><br>Mark Otto，Twitter前设计师，与Jacob Thornton合作开发了大名鼎鼎的CSS/HTML框架Bootstrap。 </p>
<p>8.James Halliday<br><img src="http://cms.csdnimg.cn/article/201408/04/53df4ef4d6289.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/substack" target="_blank" rel="external">https://github.com/substack</a><br>个人主页： <a href="http://substack.net/" target="_blank" rel="external">http://substack.net/</a><br>James Halliday(substack) ， node社区最活跃的贡献者，NPM排名仅次于TJ Holowaychuck，在写代码之外他还是个自成一派的 插画家。目前substack在NPM上发布了300+的模块。地址:  substack。</p>
<p>9.Mr.doob<br><img src="http://cms.csdnimg.cn/article/201408/04/53df573452b68.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/mrdoob" target="_blank" rel="external">https://github.com/mrdoob</a><br>个人主页： <a href="http://mrdoob.com" target="_blank" rel="external">http://mrdoob.com</a><br>Mr.doob (Ricardo Cabello Migue) 是JS三维模型库three.js，  Code Editor（编码器） 的作者。 </p>
<p>10.Jessica Lord<br><img src="http://cms.csdnimg.cn/article/201408/05/53e051ad64286.jpg" alt=""></p>
<p>Github主页： <a href="https://github.com/jlord" target="_blank" rel="external">https://github.com/jlord</a><br>个人主页： <a href="https://jlord.github.io" target="_blank" rel="external">https://jlord.github.io</a><br>Jessica Lord， 2013年5月份加入Github设计团队。是开源项目sheetsee.js的作者。</p>
<p>本文为网友分享，不保证正确！若侵权请联系我们删除！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WordPress apache伪静态规则设置]]></title>
      <url>http://yoursite.com/2015/01/25/WordPress%20apache%E4%BC%AA%E9%9D%99%E6%80%81%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>多少了解一点SEO知识的朋友都知道静态化的URL（什么是URL？自行百度）更利于搜索引擎收录，WordPress实现伪静态其实是很简单的，但有不少新人朋友还是始终无法成功设置WordPress伪静态。</p>
<p>1、首先确定Apache是否加载了Mod_rewrite 模块<br>方法: 检查 /etc/httpd/conf/httpd.conf 中是否存在以下两段代码 (具体路径可能会有所不同，但形式基本是一样的):<br>(一)LoadModule rewrite_module libexec/mod_rewrite.so<br>(二)AddModule mod_rewrite.c<br>2、检查Apache是否开启.htaccess支持<br>vi  /etc/httpd/conf/httpd.conf<br>AllowOverride All   #如果后面参数为None需要修改为All（大概在338行）</p>
<p>WordPress伪静态设置方法分Windows主机与和Linux主机，下面分开来介绍。</p>
<p><strong>Linux主机WordPress伪静态设置方法</strong></p>
<p>登录你的WordPress，点击左侧菜单设置选项下固定链接，如下图所示：</p>
<p>WordPress已经给出了几种URL伪静态形式，但都不很理想，我们希望的URL形式为：</p>
<p>域名/分类别名/文章ID.html</p>
<p>那么，如上图所示，选择自定义结构选项，填写：</p>
<p>/%category%/%post_id%.html</p>
<p>如果你对这种形式不满意，可以自定义任意形式，只要合理搭配参数即可，可以使用的参数如下：</p>
<p>%year%：文章发表的年份，四位数字，如2012</p>
<p>%monthnum%：文章发表的月份，如08</p>
<p>%day%：文章发表的日期，如28</p>
<p>%hour%：文章发表的时间（小时），如15</p>
<p>%minute%：文章发表的时间（分钟），如18</p>
<p>%second%：文章发表的时间（秒），如28</p>
<p>%postname%：文章别名，在发表文章时可以设置。</p>
<p>%post_id%：文章的ID，如68</p>
<p>%category%：分类别名，在添加分类时可以设置。</p>
<p>%tag%：标签的别名，在添加标签时可以设置。</p>
<p>设置好后，有的Linux主机允许程序自动创建.htaccess文件，但有的Linux主机不支持，此时，就需要我们手工上传.htaccess文件。将以下代码复制到记事本，保存为.htaccess。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># BEGIN WordPress</div><div class="line"></div><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line"></div><div class="line">RewriteEngine On</div><div class="line"></div><div class="line">RewriteBase /</div><div class="line"></div><div class="line">RewriteRule ^index.php$ - [L]</div><div class="line"></div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line"></div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line"></div><div class="line">RewriteRule . /index.php [L]</div><div class="line"></div><div class="line">&lt;/IfModule&gt;</div><div class="line"></div><div class="line"># END WordPress</div><div class="line"></div><div class="line">可能你会发现，电脑不允许保存文件时文件名为空，那么随便起一个名称，用FTP工具上传到你的网站根目录后重命名，将名称去掉即可。</div><div class="line"></div><div class="line">此时，细心的你可能会发现分类页的URL里有一个category，你可以使用WP No Category Base插件来解决。</div><div class="line"></div><div class="line">**Windows主机WordPress伪静态设置方法**</div><div class="line"></div><div class="line">复制以下代码到记事本：</div><div class="line"></div><div class="line">[ISAPI_Rewrite]</div><div class="line"></div><div class="line"># 3600 = 1 hour</div><div class="line"></div><div class="line">CacheClockRate 3600</div><div class="line"></div><div class="line">RepeatLimit 32</div><div class="line"></div><div class="line"># Protect httpd.ini and httpd.parse.errors files</div><div class="line"></div><div class="line"># from accessing through HTTP</div><div class="line"></div><div class="line"># Rules to ensure that normal content gets through</div><div class="line"></div><div class="line">RewriteRule /sitemap.xml /sitemap.xml [L]</div><div class="line"></div><div class="line">RewriteRule /favicon.ico /favicon.ico [L]</div><div class="line"></div><div class="line"># For file-based wordpress content (i.e. theme), admin, etc.</div><div class="line"></div><div class="line">RewriteRule /wp-(.*) /wp-$1 [L]</div><div class="line"></div><div class="line"># For normal wordpress content, via index.php</div><div class="line"></div><div class="line">RewriteRule ^/$ /index.php [L]</div><div class="line"></div><div class="line">RewriteRule /(.*) /index.php/$1 [L]</div></pre></td></tr></table></figure></p>
<p>保存为httpd.ini，将这个文件上传到你的WordPress安装目录，然后设置固定链接，方法同Linux主机WordPress伪静态设置方法中的固定链接设置方法。</p>
<p>在Windows主机下设置WordPress伪静态有时会遇到这样那样的问题，所以，使用WordPress搭建网站最好选用Linux主机。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java集合类ArrayList操作之删除remove某些元素的案例分析]]></title>
      <url>http://yoursite.com/2015/01/25/java%E9%9B%86%E5%90%88%E7%B1%BBArrayList%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%88%A0%E9%99%A4remove%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E7%9A%84%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>原文：<a href="http://www.zuidaima.com/share/1996702634298368.htm" title="点击" target="_blank" rel="external">点击</a></p>
<p>在java开发中，会经常出现需要删除java ArrayList的某些元素的场景，比如从在线用户列表的ArrayList中删除离线用户的ArrayList，但有的人会出现循环在线用户ArrayList列表然后删除离线用户ArrayList的情况，看着代码确实没什么问题，但其实犯了初学者最容易犯的一个错误，同时循环ArrayList和删除ArrayList的元素。<br><a id="more"></a></p>
<p>如下的java代码可以演示发生的一切：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.arraylist;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> www.zuidaima.com</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveItemFromArrayList</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&amp;lt;String&amp;gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String item : list) &#123;</div><div class="line">            System.out.print(item + &amp;quot; &amp;quot;);</div><div class="line">        &#125;</div><div class="line">        System.out.println(&amp;quot;&amp;quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 循环ArrayList1同时删除item是错误的，会导致指针错乱造成删除元素错误</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@param</span> list2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeArrayList1</span><span class="params">(ArrayList&amp;lt;String&amp;gt; list,</span></span></div><div class="line">            ArrayList&amp;lt;String&amp;gt; list2) &#123;</div><div class="line">        <span class="keyword">for</span> (String item : list) &#123;</div><div class="line">            <span class="keyword">if</span> (list2.contains(item)) &#123;</div><div class="line">                list.remove(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 循环ArrayList2同时删除item</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@param</span> list2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeArrayList2</span><span class="params">(ArrayList&amp;lt;String&amp;gt; list,</span></span></div><div class="line">            ArrayList&amp;lt;String&amp;gt; list2) &#123;</div><div class="line">        <span class="keyword">for</span> (String item : list2) &#123;</div><div class="line">            list.remove(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调用ArrayList.removeAll方法</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@param</span> list2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeArrayList3</span><span class="params">(ArrayList&amp;lt;String&amp;gt; list,</span></span></div><div class="line">            ArrayList&amp;lt;String&amp;gt; list2) &#123;</div><div class="line">        list.removeAll(list2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&amp;lt;String&amp;gt; initOnlineUserArrayList() &#123;</div><div class="line">        ArrayList&amp;lt;String&amp;gt; onlineUserList = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">        onlineUserList.add(&amp;quot;zuidaima&amp;quot;);</div><div class="line">        onlineUserList.add(&amp;quot;最代码&amp;quot;);</div><div class="line">        onlineUserList.add(&amp;quot;javaniu&amp;quot;);</div><div class="line">        <span class="keyword">return</span> onlineUserList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&amp;lt;String&amp;gt; initOfflineUserArrayList() &#123;</div><div class="line">        ArrayList&amp;lt;String&amp;gt; offlineUserList = <span class="keyword">new</span> ArrayList&amp;lt;String&amp;gt;();</div><div class="line">        offlineUserList.add(&amp;quot;最代码&amp;quot;);</div><div class="line">        offlineUserList.add(&amp;quot;javaniu&amp;quot;);</div><div class="line">        <span class="keyword">return</span> offlineUserList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ArrayList&amp;lt;String&amp;gt; onlineUserList = initOnlineUserArrayList();</div><div class="line">        ArrayList&amp;lt;String&amp;gt; offlineUserList = initOfflineUserArrayList();</div><div class="line"></div><div class="line">        System.out.println(&amp;quot;removeArrayList1前：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line">        removeArrayList1(onlineUserList, offlineUserList);</div><div class="line">        System.out.println(&amp;quot;removeArrayList1后：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line"></div><div class="line">        System.out.println(&amp;quot;------------------------&amp;quot;);</div><div class="line"></div><div class="line">        onlineUserList = initOnlineUserArrayList();</div><div class="line">        System.out.println(&amp;quot;removeArrayList2前：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line">        removeArrayList2(onlineUserList, offlineUserList);</div><div class="line">        System.out.println(&amp;quot;removeArrayList2后：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line"></div><div class="line">        System.out.println(&amp;quot;------------------------&amp;quot;);</div><div class="line">        onlineUserList = initOnlineUserArrayList();</div><div class="line">        System.out.println(&amp;quot;removeArrayList3前：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line">        removeArrayList3(onlineUserList, offlineUserList);</div><div class="line">        System.out.println(&amp;quot;removeArrayList3后：&amp;quot;);</div><div class="line">        printArrayList(onlineUserList);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中removeArrayList1方法的执行结果是错误的:<br><img src="http://static.zuidaima.com/images/1/201409/20140914221202707.jpg" alt=""></p>
<p>虽然是java基础，但是确实是很多初学者容易犯的错误，给大家分享出来，希望能给牛牛们有所帮助。<br>另外也希望大家都能总结分享平时遇到的有价值的代码，一起学习进步。</p>
<p>本文来自互联网，不保证正确！若侵权请联系我们删除！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Java普通代码块的疑问]]></title>
      <url>http://yoursite.com/2015/01/25/%E5%85%B3%E4%BA%8EJava%E6%99%AE%E9%80%9A%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E7%96%91%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>两段Java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x = <span class="number">19</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> x = <span class="number">9</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x = <span class="number">19</span>;</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x = <span class="number">9</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题：第一条程序没有报错，第二条程序报错了，这是为什么呢？<br><a id="more"></a><br>—————解决思路——————<br>作用域的问题啊。。。{}里是一个作用域，这个作用域结束以后的代码是访问不到作用域里面的局部变量的。但是作用域里面可以访问到作用域外面定义的变量。<br>第一段代码里面，定义int a = 9;的时候，之前的变量int a = 19.已经随着作用域的结束已经消失了。所以没问题。<br>而第二段代码，在作用域里面定义int a = 9;的时候，作用域外已经定义了int a = 19;这个时候作用域内部也是访问的到的，所以不能再次定义一个变量int a，否则就重复了。</p>
<p><strong>本文为网友分享，不保证正确！若侵权请联系我们删除！
</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[try中含有throw到底应该如何理解]]></title>
      <url>http://yoursite.com/2015/01/25/try%E4%B8%AD%E5%90%AB%E6%9C%89throw%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">excTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(&amp;quot;<span class="keyword">try</span>中含有<span class="keyword">throw</span>&amp;quot;);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> e1();</div><div class="line">        &#125; <span class="keyword">catch</span> (e1 e) &#123;</div><div class="line">            System.out.println(&amp;quot;fsasd&amp;quot;);</div><div class="line">            System.out.println(e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">e1</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">e1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(&amp;quot;dafsf&amp;quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行后控制台显示：<br>try中含有throw<br>fsasd<br>dafsf</p>
<p>这个throw应该怎么理解？<br>不是把异常抛到main方法吗？按这里的逻辑应该是在catch块中输出啊！</p>
<p>——解决思路———————-<br>你把try catch去掉就抛到上层去了<br>——解决思路———————-<br>try 块中throw的异常，由异常处理链中最内层的能够处理该异常的catch捕获。</p>
<p>本文为网友分享，不保证正确！若侵权请联系我们删除！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]OpenStack extension api]]></title>
      <url>http://yoursite.com/2015/01/11/%5B%E8%BD%AC%5DOpenStack%20extension%20api/</url>
      <content type="html"><![CDATA[<p>原作者：张华<br><a href="http://blog.csdn.net/quqi99/article/details/8502034" target="_blank" rel="external">原文链接</a></p>
<p>openstack的扩展API有两类：<br>1) resource extension, 可参见：$nova/nova/api/openstack/compute/contrib/server_password.py, 需实现get_resource方法，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_resources</span><span class="params">(self)</span>:</span>  </div><div class="line">      member_actions = &#123;<span class="string">'action'</span>: <span class="string">'POST'</span>&#125;  </div><div class="line">      collection_actions = &#123;<span class="string">'add'</span>: <span class="string">'POST'</span>&#125;  </div><div class="line">      res = extensions.ResourceExtension(  </div><div class="line">          <span class="string">'os-networks'</span>,  </div><div class="line">          NetworkController(),  </div><div class="line">          member_actions=member_actions,  </div><div class="line">          collection_actions=collection_actions)  </div><div class="line">      <span class="keyword">return</span> [res]  </div><div class="line">　　　 会产生如下格式的REST URL:</div><div class="line">    GET    /os-networks           </div><div class="line">    POST   /os-networks      </div><div class="line">    POST   /os-networks/add      </div><div class="line">    PUT    /os-networks/id     </div><div class="line">    DELETE /os-networks/id     </div><div class="line">    GET    /os-networks/id    </div><div class="line">    POST   /os-networks/id/action</div></pre></td></tr></table></figure></p>
<p>2) controller extension, 可参见：$nova/nova/api/openstack/compute/contrib/server_password.py, 需实现get_controller_extensions方法，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_controller_extensions</span><span class="params">(self)</span>:</span>  </div><div class="line">       　controller = Controller(self.ext_mgr)  </div><div class="line">       　extension = extensions.ControllerExtension(self, <span class="string">'servers'</span>, controller)  </div><div class="line">       　<span class="keyword">return</span> [extension]</div></pre></td></tr></table></figure></p>
<p>　　但是，如果不是新建，而是想扩展已存在的resource extension和extroller extension呢，如下的例子：<br>　　１）加@wsgi.extends(action=’resize’)修饰符即可<br>　　２）记得加yield，让它成为一个生成器，这样就会先执行我们自己扩展的extension api，然后再去执行原有的api，相当于继承吧。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server_resource</span><span class="params">(extensions.ExtensionDescriptor)</span>:</span>  </div><div class="line">    &amp;quot;&amp;quot;&amp;quot;Start/Stop instance compute API support.&amp;quot;&amp;quot;&amp;quot;  </div><div class="line"></div><div class="line">    name = &amp;quot;ServerResource&amp;quot;  </div><div class="line">    alias = &amp;quot;os-server-resource&amp;quot;  </div><div class="line">    namespace = &amp;quot;http://docs.openstack.org/compute/ext/server-resource/api/v1<span class="number">.1</span>&amp;quot;  </div><div class="line">    updated = &amp;quot;<span class="number">2013</span><span class="number">-01</span><span class="number">-13</span>T00:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>&amp;quot;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_controller_extensions</span><span class="params">(self)</span>:</span>  </div><div class="line">        controller = ServerController()  </div><div class="line">        extension = extensions.ControllerExtension(self, <span class="string">'servers'</span>, controller)  </div><div class="line">        <span class="keyword">return</span> [extension]  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerController</span><span class="params">(wsgi.Controller)</span>:</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">print</span> <span class="string">'init'</span>  </div><div class="line"></div><div class="line"><span class="meta">    @wsgi.extends  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, req, body)</span>:</span>  </div><div class="line">        <span class="keyword">print</span> <span class="string">'update'</span>  </div><div class="line">　   　 <span class="keyword">yield</span>  </div><div class="line"></div><div class="line"><span class="meta">    @wsgi.extends(action='resize')  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_action_resize</span><span class="params">(self, req, id, body)</span>:</span>  </div><div class="line">        <span class="keyword">print</span> <span class="string">'resize'</span>  </div><div class="line">        <span class="keyword">yield</span></div></pre></td></tr></table></figure></p>
<p>因为上面是一个生成器，可以这样调用：<br>[python]self.controller.create(req, body).next()[/python]<br>或者用for循环调用。另外在单元测试时使用assertRaises时调用它时传给Mock的应该是一个函数地址，所以下面的调用在next后面不要加括号哦。<br>[python]self.assertRaises(exc.HTTPBadRequest, self.controller.create(req, body).next)[/python]</p>
<p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TOKEN=`curl -s -d &amp;quot;&#123;\&amp;quot;auth\&amp;quot;:&#123;\&amp;quot;passwordCredentials\&amp;quot;:&#123;\&amp;quot;username\&amp;quot;: \&amp;quot;$OS_USERNAME\&amp;quot;, \&amp;quot;password\&amp;quot;:\&amp;quot;$OS_PASSWORD\&amp;quot;&#125;, \&amp;quot;tenantName\&amp;quot;:\&amp;quot;$OS_TENANT_NAME\&amp;quot;&#125;&#125;&amp;quot; -H &amp;quot;Content-type:application/json&amp;quot; $OS_AUTH_URL/tokens | python -c&amp;quot;import sys; import json; tok = json.loads(sys.stdin.read()); print tok[&apos;access&apos;][&apos;token&apos;][&apos;id&apos;];&amp;quot;`</div><div class="line"></div><div class="line">curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -H &amp;quot;X-Auth-Token:$TOKEN&amp;quot; -d &apos;&#123;&amp;quot;server&amp;quot;: &#123;&amp;quot;flavorRef&amp;quot;: &amp;quot;http://openstack.example.com/openstack/flavors/1&amp;quot;,&amp;quot;imageRef&amp;quot;: &amp;quot;http://openstack.example.com/openstack/images/e0ba6d0a-c705-4dbd-bd3b-b35bbbb8f8a5&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;i1&amp;quot;,&amp;quot;ram&amp;quot;:&amp;quot;1024&amp;quot;,&amp;quot;vcpus&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;disk&amp;quot;:&amp;quot;10&amp;quot;&#125;&#125;&apos; http://192.168.0.1:8774/v2/5685706e11ff4e9fb4ffdfac7ed2fb6e/servers</div><div class="line"></div><div class="line">curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -H &amp;quot;X-Auth-Token:$TOKEN&amp;quot; -d &apos;&#123;&amp;quot;resize&amp;quot; : &#123;&amp;quot;flavorRef&amp;quot; : &amp;quot;2&amp;quot;,&amp;quot;ram&amp;quot;:&amp;quot;1024&amp;quot;,&amp;quot;vcpus&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;disk&amp;quot;:&amp;quot;10&amp;quot;&#125;&#125;&apos; http://192.168.0.1:8774/v2/5685706e11ff4e9fb4ffdfac7ed2fb6e/servers/ec95e413-f033-4f02-a9c4-b16fe7d398cd/action</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]OpenStack的数据库开发基础 — SQLAlchemy]]></title>
      <url>http://yoursite.com/2015/01/10/%5B%E8%BD%AC%5DOpenStack%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%20%E2%80%94%20SQLAlchemy/</url>
      <content type="html"><![CDATA[<p>原文地址：<a href="https://www.ustack.com/blog/sqlalchemy/" target="_blank" rel="external">点击</a></p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-23-%E4%B8%8A%E5%8D%8811.21.51.png" alt=""></p>
<a id="more"></a>
<p>前言</p>
<p>对于一个业务系统，如何高效、平稳地使用数据库是每一个开发人员都会遇到的问题，OpenStack 也不例外，以 OpenStack 的虚拟网络组件 Neutron 为例，其数据库涉及几百张表，需要维护数据库版本近百；一些表因为设计原因形成了很高的“热点”；因为 OpenStack 是分布式的，需要以最好小一点的代价保证操作时的一致性……最重要的是，每个人的数据库水平都不一样，怎么保证整个开源社区数百名提交者有一样的数据库操作风格，如何维护这些代码？<br>OpenStack 做为一个完全使用 Python 开发的项目，利用已有的丰富模块是开发时重要的中心思想之一，同时为了便于整个社区几百名背景不同水平不同的开发者协作，最终选择了 SQLAlchemy 和 Alembic 作为数据库开发的基础。</p>
<p>Why SQLAlchemy</p>
<p>在回答为什么使用 SQLAlchemy 之前，我们先盘点一下目前 Python 能用的 ORM 库，因为挑一个库在很大程度上实在挑社区，所以我把最新版的 release 时间也写出来：</p>
<p>Storm：最新版 0.20，release 于 2013 年，开发已经比较沉寂……对外键的更新、删除要求比较奇怪。<br>SQLObject：最新版 1.7.3，release 于 2014.12.18，开发历史久，目前活跃度不是很高。<br>Django’s ORM：来自于 Django，Django 内置，使用 Django 开发的话会很方便，但它不能脱离 Django 运行，也不能处理一些复杂的请求。<br>peewee：最新版 2.4.4 发布于2014.12.3，轻量方便，内置 SQLite、MySQL和PostgreSQL的支持。<br>PonyORM：最新版 0.6，release 于 2014.11.5。使用 AGPL 许可。有图形化的编辑器。非为大型应用设计。<br>SQLAlchemy:最新版 0.9.8，release 于 2014.10.13，企业级 API，设计灵活。加入了一些自己的概念，学习曲线较高。<br>总结一下，Storm 曾经应用比较广泛，但现在社区不再活跃，很难保证将来遇到问题能否交给社区解决，而且 Storm 对数据库架构同步处理的比较奇怪，还有频繁产生 DDL 操作 造成库级锁这些问题无法让人放心；SQLObject 也是一个很出名的 ORM 库，但与 SQLAlchemy 相比，后者效率更高，对一些高级特性的支持不如后者。</p>
<p>SQLAlchemy 的架构</p>
<p>Summary<br>SQLAlchemy 很有特色的一点就是它刻意被分为另种用法，就是 CORE 和 ORM，这是由它的架构决定的。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.07.23.png" alt=""></p>
<p>这样的架构的好处是带来了 Core 与 ORM 的解耦和，当我们需要高性能的 SQL 执行但又不想抛弃 SQLAlchemy 带来的session管理、连接池管理、数据库“中立”的语句编写等这些好处时我们可以直接用 CORE。直接用 CORE 是什么意思呢？我们看到架构里只有Rational Mapper在 CORE 之上，实际也确实如此，因为Schema、SQL Expression Language还在 CORE 内，所以使用 CORE 可以直接写纯 SQL 语句，我们称之为Raw SQL的写法，也可以用SQL Expression，后者因为是相当于写 Python 代码，所以可以带来更好地阅读性和可维护性，不过Raw SQL更灵活，所以在很复杂的语句面前Raw SQL就更占优势了。</p>
<p>再往下看这个图，我们可以看到 DBAPI 是由Third party libraries实现的，也就是说 SQLAlchemy 并没有提供直接连接数据库的功能，而是通过第三方实现：</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.07.30.png" alt=""></p>
<p>SQLalchemy 对dialect支持很全，就以常见的 MySQL 为例，可以支持：<br>MySQL-Python、OurSQL、PyMySQL、MySQL Connector/Python、CyMySQL、Google Cloud SQL、PyODBC、zxjdbc for Jython，具体可以在 SQAlchemy 的dialects页面里查到。</p>
<p>这样有什么坏处呢，最明显的就是低效。因为传统 Python 解释器 CPython 的实现原因（主要是 C 的问题）长的函数调用栈会带来显著地性能问题。 由于路径过长，不可避免地导致运行时的缓慢。SQLAlchemy 花了很旧去缩短调用路径和通过 C 代码处理性能瓶颈，效果还不错，不过最好还是希望 PyPy 能够广泛流行起来，通过JIT缓解这个问题。</p>
<p>Engine<br>上面的图还是一张抽象程度比较高的，下面我细节点的介绍下 SQLAlchemy 的Engine。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.07.38.png" alt=""></p>
<p>对于使用者来说，Engine是核心，因为Connection、ResultProxy这些都是在Engine之后生成的，建立Engine则有两个重点，就是Pool和Dialect，前者是做连接池管理，后者则负责与 DBAPI 的沟通，如同其名字所示，负责“方言”与“普通话”的翻译。上图是以psycopg2为例的，使用 MySQL（PyODBC）也是类似的。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.07.47.png" alt=""></p>
<p>通过Dialect和ExecutionContext向开发者提供了一致的接口，前者处理了数据库的特性，比如使用 PostgreSQL 数据库其 Array 数据类型、schema、catalog等，后者处理psycopg2 DBAPI 的用法，比如 unicode 字符处理、服务端 cursor 的行为这些。</p>
<p>所以说，DBAPI中的cursor在 SQLAlchemy 中会被包装成ExecutionContext和ResultProxy来使用的。</p>
<p>Schema<br>当数据库的连接和交互处理完了，下一步就是提供非特定的表、字段的建立和操作方法。我们需要首先定义在数据库中的表和字段的定义，及他们之间的关系，也就是 Schema。对于数据库的使用来说，最基本的至少要有两个元素，那就是Table和Column，SQLAlchemy 使用了这两个名字来描述表和字段。多个Column组合成Table，然后一些 Table构成MetaData。Schema的结构设计主要来自于 Martin Fowler 撰写的 Patterns of Enterprise Application Architecture。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.07.54.png" alt=""></p>
<p>此外，Table和Column同时继承自sqlalchemy.schema和sqlalchemy.sql，使用时既可以在 ORM 的方式中使用，也可以以 SQL Expression Language 使用。在下图中我们可以看到Table从sqlalchemy.sql中“可以select from”的类继承，Coloumn从“可以用在 SQL expression”的类继承。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.08.01.png" alt=""></p>
<p>表达式树</p>
<p>SQLAlchemy 可以生成结构丰富的各种语句，这是一个词法分析树，核心结构是ClauseElement。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.08.09.png" alt=""></p>
<p>在 Python 中，得益于其 Magic Method，我们可以用<strong>eq</strong>、<strong>ne</strong>、<strong>le</strong>、<strong>lt</strong>、<strong>add</strong>、<strong>mul</strong>方便的重载运算符。以 Column 为对象的运算符由一个 mixin 类ColumnOperators实现重载。</p>
<p>编译</p>
<p>在这里，编译指生成 SQL 语句，主要由Compiled类完成，这个类有两个核心的子类，SQLComplier和DDLCompiler。SQLComplier负责像SELECT、INSERT、UPDATE、DELETE这些统称为DQL (data query language) 和 DML (data manipulation language)的操作符的渲染，DDLCompiler负责CREATE和DROP，一般称为 DDL。此外，还有一个类TypeCompiler处理某些数据库的特殊语法。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.08.18.png" alt=""></p>
<p>Compiled的子类定以了一系列的 visit 开头的方法，每一个都源于一个ClauseElement的特定子类。然后Compiled对象维护名字、结合参数和子查询，最终是为了生成一个 SQL 查询语句。</p>
<p><img src="https://www.ustack.com/wp-content/uploads/2014/12/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-12-22-%E4%B8%8B%E5%8D%887.08.25.png" alt=""></p>
<p>Migration</p>
<p>我们希望能像管理代码一样管理数据库，可以像 git 一样给数据库定义版本、升/降级、打标签，可以么？答案就是 Alembic。</p>
<p>Alembic 的作者与 SQLAlchemy 是同一人，使用起来有点像简化版的 git，在 db 目录里执行 init，就可以自动生成基本结构和配置文件。配置妥当后使用 alembic 可以生成一个数据库模版，作为这个“版本”的数据升/降级文件，SQLAlchemy 会自动生成其“版本号”和历史关系我们所需要做的便只是用调用 SQLAlchemy 和 Alembic 提供的 sa 和 op 定义数据库表即可。</p>
<p>有同学可能问我在 SQLAlchemy 上做过一模一样的定义了，是不是能不要让我重复劳动啊？或者在我给 SQLAlchemy 做完修改后 Alembic 能不能自动“感知”到这些修改然后自己生成版本文件啊？答案是可以的，配置好元数据来源后，Alembic 可以用–autogenerate自动生成相应的版本文件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]分布式系统的事务处理]]></title>
      <url>http://yoursite.com/2015/01/10/%5B%E8%BD%AC%5D%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：</p>
<p>1）一台服务器的性能不足以提供足够的能力服务于所有的网络请求。</p>
<p>2）我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。</p>
<p>于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。 通常，我们会通过两种手段来扩展我们的数据服务：</p>
<p>1）<strong>数据分区</strong>：就是把数据分块放在不同的服务器上（如：uid % 16，一致性哈希等）。</p>
<p>2）<strong>数据镜像</strong>：让所有的服务器都有相同的数据，提供相当的服务。<a id="more"></a></p>
<p>对于第一种情况，我们无法解决数据丢失的问题，单台服务器出问题时，会有部分数据丢失。所以，<strong>数据服务的高可用性只能通过第二种方法来完成——数据的冗余存储</strong>（一般工业界认为比较安全的备份数应该是3份，如：Hadoop和Dynamo）<strong>。 但是，加入更多的机器，会让我们的数据服务变得很复杂，尤其是跨服务器的事务处理，也就是跨服务器的数据一致性</strong>。这个是一个很难的问题。 让我们用最经典的Use Case：“A帐号向B帐号汇钱”来说明一下，熟悉RDBMS事务的都知道从帐号A到帐号B需要6个操作：</p>
<ol>
<li>从A帐号中把余额读出来。</li>
<li>对A帐号做减法操作。</li>
<li>把结果写回A帐号中。</li>
<li>从B帐号中把余额读出来。</li>
<li>对B帐号做加法操作。</li>
<li>把结果写回B帐号中。<br>为了数据的一致性，这6件事，要么都成功做完，要么都不成功，而且这个操作的过程中，对A、B帐号的其它访问必需锁死，所谓锁死就是要排除其它的读写操作，不然会有脏数据的问题，这就是事务。那么，我们在加入了更多的机器后，这个事情会变得复杂起来：</li>
</ol>
<p>1）<strong>在数据分区的方案中</strong>：如果A帐号和B帐号的数据不在同一台服务器上怎么办？我们需要一个跨机器的事务处理。也就是说，如果A的扣钱成功了，但B的加钱不成功，我们还要把A的操作给回滚回去。这在跨机器的情况下，就变得比较复杂了。</p>
<p>2）<strong>在数据镜像的方案中</strong>：A帐号和B帐号间的汇款是可以在一台机器上完成的，但是别忘了我们有多台机器存在A帐号和B帐号的副本。如果对A帐号的汇钱有两个并发操作（要汇给B和C），这两个操作发生在不同的两台服务器上怎么办？也就是说，在数据镜像中，在不同的服务器上对同一个数据的写操作怎么保证其一致性，保证数据不冲突？</p>
<p>同时，我们还要考虑性能的因素，如果不考虑性能的话，事务得到保证并不困难，系统慢一点就行了。除了考虑性能外，我们还要考虑可用性，也就是说，一台机器没了，数据不丢失，服务可由别的机器继续提供。 于是，我们需要重点考虑下面的这么几个情况：</p>
<p>1）<strong>容灾</strong>：数据不丢、结点的Failover</p>
<p>2）<strong>数据的一致性</strong>：事务处理</p>
<p>3）<strong>性能：吞吐量 、 响应时间</strong></p>
<p>前面说过，要解决数据不丢，只能通过数据冗余的方法，就算是数据分区，每个区也需要进行数据冗余处理。这就是数据副本：当出现某个节点的数据丢失时可以从副本读到，数据副本是分布式系统解决数据丢失异常的唯一手段。所以，在这篇文章中，简单起见，我们只讨论在数据冗余情况下考虑数据的一致性和性能的问题。简单说来：</p>
<p><strong>1）要想让数据有高可用性，就得写多份数据。</strong></p>
<p><strong>2）写多份的问题会导致数据一致性的问题。</strong></p>
<p><strong>3）数据一致性的问题又会引发性能问题</strong></p>
<p>这就是软件开发，按下了葫芦起了瓢。</p>
<h4 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h4><p>说起数据一致性来说，简单说有三种类型（当然，如果细分的话，还有很多一致性模型，如：顺序一致性，FIFO一致性，会话一致性，单读一致性，单写一致性，但为了本文的简单易读，我只说下面三种）：</p>
<p>1）<strong>Weak 弱一致性</strong>：当你写入一个新值后，读操作在数据副本上可能读出来，也可能读不出来。比如：某些cache系统，网络游戏其它玩家的数据和你没什么关系，VOIP这样的系统，或是百度搜索引擎（呵呵）。</p>
<p>2）<strong>Eventually 最终一致性</strong>：当你写入一个新值后，有可能读不出来，但在某个时间窗口之后保证最终能读出来。比如：DNS，电子邮件、Amazon S3，Google搜索引擎这样的系统。</p>
<p>3）<strong>Strong 强一致性</strong>：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的。</p>
<p>从这三种一致型的模型上来说，我们可以看到，Weak和Eventually一般来说是异步冗余的，而Strong一般来说是同步冗余的，异步的通常意味着更好的性能，但也意味着更复杂的状态控制。同步意味着简单，但也意味着性能下降。 好，让我们由浅入深，一步一步地来看有哪些技术：</p>
<h4 id="Master-Slave"><a href="#Master-Slave" class="headerlink" title="Master-Slave"></a>Master-Slave</h4><p>首先是Master-Slave结构，对于这种加构，Slave一般是Master的备份。在这样的系统中，一般是如下设计的：</p>
<p>1）读写请求都由Master负责。</p>
<p>2）写请求写到Master上后，由Master同步到Slave上。</p>
<p>从Master同步到Slave上，你可以使用异步，也可以使用同步，可以使用Master来push，也可以使用Slave来pull。 通常来说是Slave来周期性的pull，所以，是最终一致性。这个设计的问题是，如果Master在pull周期内垮掉了，那么会导致这个时间片内的数据丢失。如果你不想让数据丢掉，Slave只能成为Read-Only的方式等Master恢复。</p>
<p>当然，如果你可以容忍数据丢掉的话，你可以马上让Slave代替Master工作（对于只负责计算的结点来说，没有数据一致性和数据丢失的问题，Master-Slave的方式就可以解决单点问题了） 当然，Master Slave也可以是强一致性的， 比如：当我们写Master的时候，Master负责先写自己，等成功后，再写Slave，两者都成功后返回成功，整个过程是同步的，如果写Slave失败了，那么两种方法，一种是标记Slave不可用报错并继续服务（等Slave恢复后同步Master的数据，可以有多个Slave，这样少一个，还有备份，就像前面说的写三份那样），另一种是回滚自己并返回写失败。（注：一般不先写Slave，因为如果写Master自己失败后，还要回滚Slave，此时如果回滚Slave失败，就得手工订正数据了）你可以看到，如果Master-Slave需要做成强一致性有多复杂。</p>
<h4 id="Master-Master"><a href="#Master-Master" class="headerlink" title="Master-Master"></a>Master-Master</h4><p>Master-Master，又叫<a href="http://en.wikipedia.org/wiki/Multi-master_replication" target="_blank" rel="external">Multi-master</a>，是指一个系统存在两个或多个Master，每个Master都提供read-write服务。这个模型是Master-Slave的加强版，数据间同步一般是通过Master间的异步完成，所以是最终一致性。 Master-Master的好处是，一台Master挂了，别的Master可以正常做读写服务，他和Master-Slave一样，当数据没有被复制到别的Master上时，数据会丢失。很多数据库都支持Master-Master的Replication的机制。</p>
<p>另外，如果多个Master对同一个数据进行修改的时候，这个模型的恶梦就出现了——对数据间的冲突合并，这并不是一件容易的事情。看看Dynamo的Vector Clock的设计（记录数据的版本号和修改者）就知道这个事并不那么简单，而且Dynamo对数据冲突这个事是交给用户自己搞的。就像我们的SVN源码冲突一样，对于同一行代码的冲突，只能交给开发者自己来处理。（在本文后后面会讨论一下Dynamo的Vector Clock）</p>
<h4 id="Two-Three-Phase-Commit"><a href="#Two-Three-Phase-Commit" class="headerlink" title="Two/Three Phase Commit"></a>Two/Three Phase Commit</h4><p>这个协议的缩写又叫2PC，中文叫两阶段提交。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为<strong>协调者</strong>的组件来统一掌控所有节点(称作<strong>参与者</strong>)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。 两阶段提交的算法如下：</p>
<p><strong>第一阶段</strong>：</p>
<ol>
<li>协调者会问所有的参与者结点，是否可以执行提交操作。</li>
<li>各个参与者开始事务执行的准备工作：如：为资源上锁，预留资源，写undo/redo log……</li>
<li>参与者响应协调者，如果事务的准备工作成功，则回应“可以提交”，否则回应“拒绝提交”。<br><strong>第二阶段</strong>：</li>
</ol>
<ul>
<li><p>如果所有的参与者都回应“可以提交”，那么，协调者向所有的参与者发送“正式提交”的命令。参与者完成正式提交，并释放所有资源，然后回应“完成”，协调者收集各结点的“完成”回应后结束这个Global Transaction。</p>
</li>
<li><p>如果有一个参与者回应“拒绝提交”，那么，协调者向所有的参与者发送“回滚操作”，并释放所有资源，然后回应“回滚完成”，协调者收集各结点的“回滚”回应后，取消这个Global Transaction。<br><img src="http://coolshell.cn//wp-content/uploads/2014/01/Two-phase_commit.png" alt=""></p>
</li>
</ul>
<p>我们可以看到，2PC说白了就是第一阶段做Vote，第二阶段做决定的一个算法，也可以看到2PC这个事是强一致性的算法。在前面我们讨论过Master-Slave的强一致性策略，和2PC有点相似，只不过2PC更为保守一些——先尝试再提交。 2PC用的是比较多的，在一些系统设计中，会串联一系列的调用，比如：A -&gt; B -&gt; C -&gt; D，每一步都会分配一些资源或改写一些数据。比如我们B2C网上购物的下单操作在后台会有一系列的流程需要做。如果我们一步一步地做，就会出现这样的问题，如果某一步做不下去了，那么前面每一次所分配的资源需要做反向操作把他们都回收掉，所以，操作起来比较复杂。现在很多处理流程（Workflow）都会借鉴2PC这个算法，使用 try -&gt; confirm的流程来确保整个流程的能够成功完成。 举个通俗的例子，西方教堂结婚的时候，都有这样的桥段：</p>
<p>1）牧师分别问新郎和新娘：你是否愿意……不管生老病死……（询问阶段）</p>
<p>2）当新郎和新娘都回答愿意后（锁定一生的资源），牧师就会说：我宣布你们……（事务提交）</p>
<p>这是多么经典的一个两阶段提交的事务处理。 另外，我们也可以看到其中的一些问题， A）其中一个是同步阻塞操作，这个事情必然会非常大地影响性能。 B）另一个主要的问题是在TimeOut上，比如，</p>
<p>1）如果第一阶段中，参与者没有收到询问请求，或是参与者的回应没有到达协调者。那么，需要协调者做超时处理，一旦超时，可以当作失败，也可以重试。</p>
<p>2）如果第二阶段中，正式提交发出后，如果有的参与者没有收到，或是参与者提交/回滚后的确认信息没有返回，一旦参与者的回应超时，要么重试，要么把那个参与者标记为问题结点剔除整个集群，这样可以保证服务结点都是数据一致性的。</p>
<p>3）糟糕的情况是，第二阶段中，如果参与者收不到协调者的commit/fallback指令，参与者将处于“状态未知”阶段，参与者完全不知道要怎么办，比如：如果所有的参与者完成第一阶段的回复后（可能全部yes，可能全部no，可能部分yes部分no），如果协调者在这个时候挂掉了。那么所有的结点完全不知道怎么办（问别的参与者都不行）。为了一致性，要么死等协调者，要么重发第一阶段的yes/no命令。</p>
<p>两段提交最大的问题就是第3）项，<strong>如果第一阶段完成后，参与者在第二阶没有收到决策，那么数据结点会进入“不知所措”的状态，这个状态会block住整个事务</strong>。也就是说，协调者Coordinator对于事务的完成非常重要，Coordinator的可用性是个关键。 因些，我们引入三段提交，三段提交在<a href="http://en.wikipedia.org/wiki/Three-phase_commit_protocol" target="_blank" rel="external">Wikipedia</a>上的描述如下，他把二段提交的第一个段break成了两段：询问，然后再锁资源。最后真正提交。三段提交的示意图如下：</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2014/01/Three-phase_commit_diagram.png" alt=""></p>
<p>三段提交的核心理念是：<strong>在询问的时候并不锁定资源，除非所有人都同意了，才开始锁资源</strong>。</p>
<p>理论上来说，如果第一阶段所有的结点返回成功，那么有理由相信成功提交的概率很大。这样一来，可以降低参与者Cohorts的状态未知的概率。也就是说，一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了。这一点很重要。下面我们来看一下3PC的状态迁移图：（<strong>注意图中的虚线，那些F,T是Failuer或Timeout</strong>，其中的：状态含义是 q - Query，a - Abort，w - Wait，p - PreCommit，c - Commit）</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2014/01/Three-phase_commit_status.png" alt=""></p>
<p>从上图的状态变化图我们可以从虚线（那些F,T是Failuer或Timeout）看到——<strong>如果结点处在P状态（PreCommit）的时候发生了F/T的问题，三段提交比两段提交的好处是，三段提交可以继续直接把状态变成C状态（Commit），而两段提交则不知所措</strong>。</p>
<p>其实，三段提交是一个很复杂的事情，实现起来相当难，而且也有一些问题。</p>
<p>看到这里，我相信你有很多很多的问题，你一定在思考2PC/3PC中各种各样的失败场景，<strong>你会发现Timeout是个非常难处理的事情，因为网络上的Timeout在很多时候让你无所事从，你也不知道对方是做了还是没有做。于是你好好的一个状态机就因为Timeout成了个摆设</strong>。</p>
<p><strong>一个网络服务会有三种状态：1）Success，2）Failure，3）Timeout，第三个绝对是恶梦，尤其在你需要维护状态的时候</strong>。</p>
<h4 id="Two-Generals-Problem（两将军问题）"><a href="#Two-Generals-Problem（两将军问题）" class="headerlink" title="Two Generals Problem（两将军问题）"></a>Two Generals Problem（两将军问题）</h4><p><a href="http://en.wikipedia.org/wiki/Two_Generals" target="_blank" rel="external">Two Generals Problem</a> 两将军问题是这么一个思维性实验问题： 有两支军队，它们分别有一位将军领导，现在准备攻击一座修筑了防御工事的城市。这两支军队都驻扎在那座城市的附近，分占一座山头。一道山谷把两座山分隔开来，并且两位将军唯一的通信方式就是派各自的信使来往于山谷两边。不幸的是，这个山谷已经被那座城市的保卫者占领，并且存在一种可能，那就是任何被派出的信使通过山谷是会被捕。 请注意，虽然两位将军已经就攻击那座城市达成共识，但在他们各自占领山头阵地之前，并没有就进攻时间达成共识。两位将军必须让自己的军队同时进攻城市才能取得成功。因此，他们必须互相沟通，以确定一个时间来攻击，并同意就在那时攻击。如果只有一个将军进行攻击，那么这将是一个灾难性的失败。 这个思维实验就包括考虑他们如何去做这件事情。下面是我们的思考：</p>
<p>1）第一位将军先发送一段消息“让我们在上午9点开始进攻”。然而，一旦信使被派遣，他是否通过了山谷，第一位将军就不得而知了。任何一点的不确定性都会使得第一位将军攻击犹豫，因为如果第二位将军不能在同一时刻发动攻击，那座城市的驻军就会击退他的军队的进攻，导致他的军对被摧毁。</p>
<p>2）知道了这一点，第二位将军就需要发送一个确认回条：“我收到您的邮件，并会在9点的攻击。”但是，如果带着确认消息的信使被抓怎么办？所以第二位将军会犹豫自己的确认消息是否能到达。</p>
<p>3）于是，似乎我们还要让第一位将军再发送一条确认消息——“我收到了你的确认”。然而，如果这位信使被抓怎么办呢？</p>
<p>4）这样一来，是不是我们还要第二位将军发送一个“确认收到你的确认”的信息。</p>
<p>靠，于是你会发现，这事情很快就发展成为不管发送多少个确认消息，都没有办法来保证两位将军有足够的自信自己的信使没有被敌军捕获。</p>
<p><img src="http://coolshell.cn//wp-content/uploads/2014/01/two-generals-problems.jpg" alt=""></p>
<p><strong>这个问题是无解的</strong>。两个将军问题和它的无解证明首先由E.A.Akkoyunlu,K.Ekanadham和R.V.Huber于1975年在《一些限制与折衷的网络通信设计》一文中发表，就在这篇文章的第73页中一段描述两个黑帮之间的通信中被阐明。 1978年，在Jim Gray的《数据库操作系统注意事项》一书中（从第465页开始）被命名为两个将军悖论。作为两个将军问题的定义和无解性的证明的来源，这一参考被广泛提及。</p>
<p>这个实验意在阐明：试图通过建立在一个不可靠的连接上的交流来协调一项行动的隐患和设计上的巨大挑战。</p>
<p>从工程上来说，一个解决两个将军问题的实际方法是使用一个能够承受通信信道不可靠性的方案，并不试图去消除这个不可靠性，但要将不可靠性削减到一个可以接受的程度。比如，第一位将军排出了100位信使并预计他们都被捕的可能性很小。在这种情况下，不管第二位将军是否会攻击或者受到任何消息，第一位将军都会进行攻击。另外，第一位将军可以发送一个消息流，而第二位将军可以对其中的每一条消息发送一个确认消息，这样如果每条消息都被接收到，两位将军会感觉更好。然而我们可以从证明中看出，他们俩都不能肯定这个攻击是可以协调的。他们没有算法可用（比如，收到4条以上的消息就攻击）能够确保防止仅有一方攻击。再者，第一位将军还可以为每条消息编号，说这是1号，2号……直到n号。这种方法能让第二位将军知道通信信道到底有多可靠，并且返回合适的数量的消息来确保最后一条消息被接收到。如果信道是可靠的话，只要一条消息就行了，其余的就帮不上什么忙了。最后一条和第一条消息丢失的概率是相等的。</p>
<p>两将军问题可以扩展成更变态的<strong>拜占庭将军问题 (Byzantine Generals Problem)</strong>，其故事背景是这样的：拜占庭位于现在土耳其的伊斯坦布尔，是东罗马帝国的首都。由于当时拜占庭罗马帝国国土辽阔，为了防御目的，因此每个军队都分隔很远，将军与将军之间只能靠信差传消息。 在战争的时候，拜占庭军队内所有将军必需达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，军队可能有叛徒和敌军间谍，这些叛徒将军们会扰乱或左右决策的过程。这时候，在已知有成员谋反的情况下，其余忠诚的将军在不受叛徒的影响下如何达成一致的协议，这就是拜占庭将军问题。</p>
<h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h4><p><a href="http://en.wikipedia.org/wiki/Paxos_(computer_science" target="_blank" rel="external">Wikipedia上的各种Paxos算法</a>)的描述非常详细，大家可以去围观一下。</p>
<p>Paxos 算法解决的问题是在一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决议的一致性。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个「一致性算法」以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。从20世纪80年代起对于一致性算法的研究就没有停止过。</p>
<p><strong>Notes</strong>：Paxos算法是莱斯利·兰伯特（Leslie Lamport，就是 LaTeX 中的”La”，此人现在在微软研究院）于1990年提出的一种基于消息传递的一致性算法。由于算法难以理解起初并没有引起人们的重视，使Lamport在八年后1998年重新发表到ACM Transactions on Computer Systems上（<a href="http://research.microsoft.com/users/lamport/pubs/lamport-paxos.pdf" target="_blank" rel="external">The Part-Time Parliament</a>）。即便如此paxos算法还是没有得到重视，2001年Lamport 觉得同行无法接受他的幽默感，于是用容易接受的方法重新表述了一遍（<a href="http://research.microsoft.com/users/lamport/pubs/paxos-simple.pdf" target="_blank" rel="external">Paxos Made Simple</a>）。可见Lamport对Paxos算法情有独钟。近几年Paxos算法的普遍使用也证明它在分布式一致性算法中的重要地位。2006年Google的三篇论文初现“云”的端倪，其中的Chubby Lock服务使用Paxos作为Chubby Cell中的一致性算法，Paxos的人气从此一路狂飙。（Lamport 本人在 <a href="http://research.microsoft.com/users/lamport/pubs/pubs.html#lamport-paxos" target="_blank" rel="external">他的blog 中</a>描写了他用9年时间发表这个算法的前前后后）</p>
<p>注：Amazon的AWS中，所有的云服务都基于一个ALF（Async Lock Framework）的框架实现的，这个ALF用的就是Paxos算法。我在Amazon的时候，看内部的分享视频时，设计者在内部的Principle Talk里说他参考了ZooKeeper的方法，但他用了另一种比ZooKeeper更易读的方式实现了这个算法。</p>
<p>简单说来，Paxos的目的是让整个集群的结点对某个值的变更达成一致。Paxos算法基本上来说是个民主选举的算法——大多数的决定会成个整个集群的统一决定。任何一个点都可以提出要修改某个数据的提案，是否通过这个提案取决于这个集群中是否有超过半数的结点同意（所以Paxos算法需要集群中的结点是单数）。</p>
<p>这个算法有两个阶段（假设这个有三个结点：A，B，C）：</p>
<p><strong>第一阶段：Prepare阶段</strong></p>
<p>A把申请修改的请求Prepare Request发给所有的结点A，B，C。注意，Paxos算法会有一个Sequence Number（你可以认为是一个提案号，这个数不断递增，而且是唯一的，也就是说A和B不可能有相同的提案号），这个提案号会和修改请求一同发出，任何结点在“Prepare阶段”时都会拒绝其值小于当前提案号的请求。所以，结点A在向所有结点申请修改请求的时候，需要带一个提案号，越新的提案，这个提案号就越是是最大的。</p>
<p>如果接收结点收到的提案号n大于其它结点发过来的提案号，这个结点会回应Yes（本结点上最新的被批准提案号），并保证不接收其它&lt;n的提案。这样一来，结点上在Prepare阶段里总是会对最新的提案做承诺。</p>
<p>优化：在上述 prepare 过程中，如果任何一个结点发现存在一个更高编号的提案，则需要通知 提案人，提醒其中断这次提案。</p>
<p><strong>第二阶段：Accept阶段</strong></p>
<p>如果提案者A收到了超过半数的结点返回的Yes，然后他就会向所有的结点发布Accept Request（同样，需要带上提案号n），如果没有超过半数的话，那就返回失败。</p>
<p>当结点们收到了Accept Request后，如果对于接收的结点来说，n是最大的了，那么，它就会修改这个值，如果发现自己有一个更大的提案号，那么，结点就会拒绝修改。</p>
<p>我们可以看以，这似乎就是一个“两段提交”的优化。其实，<strong>2PC/3PC都是分布式一致性算法的残次版本，Google Chubby的作者Mike Burrows说过这个世界上只有一种一致性算法，那就是Paxos，其它的算法都是残次品。</strong></p>
<p>我们还可以看到：对于同一个值的在不同结点的修改提案就算是在接收方被乱序收到也是没有问题的。</p>
<p>关于一些实例，你可以看一下Wikipedia中文中的“<a href="http://zh.wikipedia.org/zh/Paxos%E7%AE%97%E6%B3%95#.E5.AE.9E.E4.BE.8B" target="_blank" rel="external">Paxos样例</a>”一节，我在这里就不再多说了。对于Paxos算法中的一些异常示例，大家可以自己推导一下。你会发现基本上来说只要保证有半数以上的结点存活，就没有什么问题。</p>
<p>多说一下，自从Lamport在1998年发表Paxos算法后，对Paxos的各种改进工作就从未停止，其中动作最大的莫过于2005年发表的<a href="http://research.microsoft.com/apps/pubs/default.aspx?id=64624" target="_blank" rel="external">Fast Paxos</a>。无论何种改进，其重点依然是在消息延迟与性能、吞吐量之间作出各种权衡。为了容易地从概念上区分二者，称前者Classic Paxos，改进后的后者为Fast Paxos。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><div id="Msg_18730">下图来自：Google App Engine的co-founder Ryan Barrett在2009年的google i/o上的演讲《<a href="http://snarfed.org/transactions_across_datacenters_io.html" target="_blank" rel="external">Transaction Across DataCenter</a>》（视频： <a href="http://www.youtube.com/watch?v=srOgpXECblk" title="阿里旺旺无法确定该链接的安全性" target="_blank" rel="external">http://www.youtube.com/watch?v=srOgpXECblk</a>）</div><br><img src="http://coolshell.cn//wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg" alt=""></p>
<p>前面，我们说过，要想让数据有高可用性，就需要冗余数据写多份。写多份的问题会带来一致性的问题，而一致性的问题又会带来性能问题。从上图我们可以看到，我们基本上来说不可以让所有的项都绿起来，这就是著名的CAP理论：一致性，可用性，分区容忍性，你只可能要其中的两个。</p>
<h4 id="NWR模型"><a href="#NWR模型" class="headerlink" title="NWR模型"></a>NWR模型</h4><p><strong>最后我还想提一下Amazon Dynamo的NWR模型。这个NWR模型把CAP的选择权交给了用户，让用户自己的选择你的CAP中的哪两个</strong>。</p>
<p>所谓NWR模型。N代表N个备份，W代表要写入至少W份才认为成功，R表示至少读取R个备份。<strong>配置的时候要求W+R &gt; N</strong>。 因为W+R &gt; N， 所以 R &gt; N-W 这个是什么意思呢？就是读取的份数一定要比总备份数减去确保写成功的倍数的差值要大。</p>
<p>也就是说，每次读取，都至少读取到一个最新的版本。从而不会读到一份旧数据。当我们需要高可写的环境的时候，我们可以配置W = 1 如果N=3 那么R = 3。 这个时候只要写任何节点成功就认为成功，但是读的时候必须从所有的节点都读出数据。如果我们要求读的高效率，我们可以配置 W=N R=1。这个时候任何一个节点读成功就认为成功，但是写的时候必须写所有三个节点成功才认为成功。</p>
<p>NWR模型的一些设置会造成脏数据的问题，因为这很明显不是像Paxos一样是一个强一致的东西，所以，可能每次的读写操作都不在同一个结点上，于是会出现一些结点上的数据并不是最新版本，但却进行了最新的操作。</p>
<p>所以，Amazon Dynamo引了数据版本的设计。也就是说，如果你读出来数据的版本是v1，当你计算完成后要回填数据后，却发现数据的版本号已经被人更新成了v2，那么服务器就会拒绝你。版本这个事就像“乐观锁”一样。</p>
<p>但是，对于分布式和NWR模型来说，版本也会有恶梦的时候——就是版本冲的问题，比如：我们设置了N=3 W=1，如果A结点上接受了一个值，版本由v1 -&gt; v2，但还没有来得及同步到结点B上（异步的，应该W=1，写一份就算成功），B结点上还是v1版本，此时，B结点接到写请求，按道理来说，他需要拒绝掉，但是他一方面并不知道别的结点已经被更新到v2，另一方面他也无法拒绝，因为W=1，所以写一分就成功了。于是，出现了严重的版本冲突。</p>
<p>Amazon的Dynamo把版本冲突这个问题巧妙地回避掉了——版本冲这个事交给用户自己来处理。</p>
<p>于是，Dynamo引入了Vector Clock（矢量钟？!）这个设计。这个设计让每个结点各自记录自己的版本信息，也就是说，对于同一个数据，需要记录两个事：1）谁更新的我，2）我的版本号是什么。</p>
<p>下面，我们来看一个操作序列：</p>
<p>1）一个写请求，第一次被节点A处理了。节点A会增加一个版本信息(A，1)。我们把这个时候的数据记做D1(A，1)。 然后另外一个对同样key的请求还是被A处理了于是有D2(A，2)。这个时候，D2是可以覆盖D1的，不会有冲突产生。</p>
<p>2）现在我们假设D2传播到了所有节点(B和C)，B和C收到的数据不是从客户产生的，而是别人复制给他们的，所以他们不产生新的版本信息，所以现在B和C所持有的数据还是D2(A，2)。于是A，B，C上的数据及其版本号都是一样的。</p>
<p>3）如果我们有一个新的写请求到了B结点上，于是B结点生成数据D3(A,2; B,1)，意思是：数据D全局版本号为3，A升了两新，B升了一次。这不就是所谓的代码版本的log么？</p>
<p>4）如果D3没有传播到C的时候又一个请求被C处理了，于是，以C结点上的数据是D4(A,2; C,1)。</p>
<p>5）好，最精彩的事情来了：如果这个时候来了一个读请求，我们要记得，我们的W=1 那么R=N=3，所以R会从所有三个节点上读，此时，他会读到三个版本：</p>
<p>6）这个时候可以判断出，D2已经是旧版本（已经包含在D3/D4中），可以舍弃。</p>
<p>7）但是D3和D4是明显的版本冲突。于是，交给调用方自己去做版本冲突处理。就像源代码版本管理一样。</p>
<p>很明显，上述的Dynamo的配置用的是CAP里的A和P。</p>
<p>我非常推大家都去看看这篇论文：《<a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf" target="_blank" rel="external">Dynamo：Amazon’s Highly Available Key-Value Store</a>》，如果英文痛苦，你可以<a href="http://vdisk.weibo.com/s/AKRQZMLLc1ol" target="_blank" rel="external">看看译文</a>（译者不详）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari遇到TIMELINE SERVER无法启动]]></title>
      <url>http://yoursite.com/2015/01/03/Ambari%E9%81%87%E5%88%B0TIMELINE%20SERVER%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p>Hadoop 2.3之后采用LevelDB作为历史作业的记录保存, 并引入一个叫做App TimeLine Server的角色作为历史记录的保存. 但是当Hadoop从2.3升级到2.4或2.5后，App Timeline Server会发生无法启动的问题，这是由于App TimeLine所使用的Java类发生了变更所导致的。</p>
<p>在yarn-site.xml配置中将</p>
<p>yarn.timeline-service.store-class</p>
<p>从 org.apache.hadoop.yarn.server.applicationhistoryservice.timeline.LeveldbTimelineStore</p>
<p>变更为 org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore</p>
<p>在Ambari中通过界面配置即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建docker-registry 遇到Invalid registry endpoint https...问题]]></title>
      <url>http://yoursite.com/2015/01/02/%E6%90%AD%E5%BB%BAdocker-registry%20%E9%81%87%E5%88%B0Invalid%20registry%20endpoint%20https...%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>搭建最新的docker-registry 会遇到问题：<br>[shell]<br>FATA[0002] Error: Invalid registry endpoint <a href="https://192.168.1.231:5000/v1/" target="_blank" rel="external">https://192.168.1.231:5000/v1/</a>: Get <a href="https://192.168.1.231:5000/v1/_ping" target="_blank" rel="external">https://192.168.1.231:5000/v1/_ping</a>: EOF. If this private registry supports<br> only HTTP or HTTPS with an unknown CA certificate, please add <code>--insecure-registry 192.168.1.231:5000</code> to the daemon’s arguments. In the case of HTTPS, if you<br> have access to the registry’s CA certificate, no need for the flag; simply place the CA certificate at /etc/docker/certs.d/192.168.1.231:5000/ca.crt<br>[/shell]</p>
<p>此时在客户端运行下面语句即可<br>[shell]<br>docker -d —-insecure-registry 10.0.1.44:5000<br>[/shell]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04 安装最新版docker]]></title>
      <url>http://yoursite.com/2015/01/02/Ubuntu14.04%20%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88docker/</url>
      <content type="html"><![CDATA[<p>首先确定apt系统支持https URLs，具体为/usr/lib/apt/methods/https文件的存在，否则需要安装apt-transport-https包，命令为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[ -e /usr/lib/apt/methods/https ] || &#123;</div><div class="line">  apt-get update</div><div class="line">  apt-get install apt-transport-https</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，添加Docker仓库到本地keychain：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div></pre></td></tr></table></figure></p>
<p>最后更新apt-get，安装lxc-docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo sh -c &amp;quot;echo deb https://get.docker.com/ubuntu docker main\</div><div class="line">&amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install lxc-docker</div></pre></td></tr></table></figure></p>
<p>PS:<br>一个简单的curl命令也可以完成这项任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -sSL https://get.docker.com/ubuntu/ | sudo sh</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pip安装]]></title>
      <url>http://yoursite.com/2015/01/02/pip%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>登陆pip网站<a href="https://pip.pypa.io/en/latest/installing.html" target="_blank" rel="external"></a></p>
<p>下载get-pip.py，或者直接在Linux中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div></pre></td></tr></table></figure></p>
<p>等命令</p>
<p>最后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python get-pip.py</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用pdb调试OpenStack]]></title>
      <url>http://yoursite.com/2014/11/24/2014-11-24-%E7%94%A8pdb%E8%B0%83%E8%AF%95OpenStack/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/epugv/article/details/13512247" target="_blank" rel="external">点击打开链接</a></p>
<ol>
<li>创建文件creds：</li>
</ol>
<p>exportSERVICE_TOKEN=xxx(3中输入的密码)<br>exportOS_TENANT_NAME=admin<br>exportOS_USERNAME=admin<br>export OS_PASSWORD=xxx<br>exportOS_AUTH_URL=<a href="http://localhost:5000/v2.0/" target="_blank" rel="external">http://localhost:5000/v2.0/</a><br>exportSERVICE_ENDPOINT=<a href="http://localhost:35357/v2.0" target="_blank" rel="external">http://localhost:35357/v2.0</a><br>source creds就可以使用openstack了</p>
<ol>
<li>若想更改已安装的组件，再./stack.sh即可</li>
</ol>
<h3 id="Pdb调试Havana过程"><a href="#Pdb调试Havana过程" class="headerlink" title="Pdb调试Havana过程"></a>Pdb调试Havana过程</h3><ol>
<li>修改代码<br>在需要调试的地方加入：<br>import pdb; pdb.set_trace()(以在nova/compute/api.py:get_all()中加入pdb为例)</li>
<li>重启服务<br>在相应的screen中用ctrl+c终止当前进程，然后按向上的方向键，就会出现启动服务的命令，按enter服务就起来了。</li>
<li>开始调试：<br><img src="/images/pdb_start_debug.png" alt=""></li>
</ol>
<p>显示有两个screen<br>screen –x stack<br>进入如下界面：<br><img src="/images/pdb_screen.png" alt=""></p>
<p>最下一行表示，每一个进程都有一个screen。带*号的表示当前的screen，可以同时按下ctrl+a+8和ctrl+a+2分别前进和后退，来切换不同的screen.</p>
<ol>
<li><p>在0$中输入nova list；切换到4$ n-api:<br><img src="/images/pdb_nova.png" alt=""></p>
</li>
<li><p>开始使用pdb进行调试<br><img src="/images/pdb_debug_step.png" alt=""></p>
</li>
<li><p>物理机重启后，可使用rejoin-stack.sh启动openstack服务</p>
</li>
<li>ctrl+a+shift+”, 可以选择screen , 主要就不需要通过ctrl + a  or ctrl + p 来回切换了：）。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="http://blog.csdn.net/hackerain/article/details/8373597" target="_blank" rel="external">使用pdb调试openstack (How to debug openstackusing pdb )</a></li>
<li><a href="http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">linux screen 命令详解</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">ADMIN_PASSWORD=password</div><div class="line">MYSQL_PASSWORD=stackdb</div><div class="line">RABBIT_PASSWORD=stackqueue</div><div class="line">SERVICE_PASSWORD=$ADMIN_PASSWORD</div><div class="line">#enable_service rally</div><div class="line">SERVICE_TOKEN=password</div><div class="line"></div><div class="line">## vnc</div><div class="line"></div><div class="line">#enable_service n-spice</div><div class="line">#enable_service n-novnc</div><div class="line">#enable_service n-xvnc</div><div class="line"></div><div class="line">#GIT_BASE=https://code.csdn.net</div><div class="line"># Reclone each time</div><div class="line">#RECLONE=yes</div><div class="line">RECLONE=no</div><div class="line"></div><div class="line">## For Keystone</div><div class="line">KEYSTONE_TOKEN_FORMAT=PKI</div><div class="line"></div><div class="line">## For Swift</div><div class="line">#SWIFT_REPLICAS=1</div><div class="line">#SWIFT_HASH=011688b44136573e209e</div><div class="line"></div><div class="line"># Enable Logging</div><div class="line">LOGFILE=/opt/stack/logs/stack.sh.log</div><div class="line">VERBOSE=True</div><div class="line">LOG_COLOR=True</div><div class="line">SCREEN_LOGDIR=/opt/stack/logs</div><div class="line"></div><div class="line"># Pre-requisite</div><div class="line">ENABLED_SERVICES=rabbit,mysql,key</div><div class="line"></div><div class="line">## If you want ZeroMQ instead of RabbitMQ (don&apos;t forget to un-declare &apos;rabbit&apos; from the pre-requesite)</div><div class="line">#ENABLED_SERVICES+=,-rabbit,-qpid,zeromq</div><div class="line"></div><div class="line">## If you want Qpid instead of RabbitMQ (don&apos;t forget to un-declare &apos;rabbit&apos; from the pre-requesite)</div><div class="line">#ENABLED_SERVICES+=,-rabbit,-zeromq,qpid</div><div class="line"></div><div class="line"># Horizon (Dashboard UI) - (always use the trunk)</div><div class="line">ENABLED_SERVICES+=,horizon</div><div class="line">HORIZON_REPO=https://github.com/openstack/horizon</div><div class="line">HORIZON_BRANCH=master</div><div class="line"></div><div class="line"># Nova - Compute Service</div><div class="line">ENABLED_SERVICES+=,n-api,n-crt,n-obj,n-cpu,n-cond,n-sch</div><div class="line"></div><div class="line">######vnc</div><div class="line">ENABLED_SERVICES+=,n-novnc,n-xvnc</div><div class="line"></div><div class="line"></div><div class="line">#jjIMAGE_URLS+=&quot;,https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img&quot;</div><div class="line">#IMAGE_URLS+=&quot;,http://172.28.0.1/image/cirros-0.3.0-x86_64-disk.img&quot;</div><div class="line"></div><div class="line"></div><div class="line"># Nova Network - If you don&apos;t want to use Neutron and need a simple network setup (old good stuff!)</div><div class="line">#ENABLED_SERVICES+=,n-net</div><div class="line"></div><div class="line">## Nova Cells</div><div class="line">#ENABLED_SERVICES+=,n-cell</div><div class="line"></div><div class="line"># Glance - Image Service</div><div class="line">ENABLED_SERVICES+=,g-api,g-reg</div><div class="line"></div><div class="line"># Swift - Object Storage</div><div class="line">#ENABLED_SERVICES+=,s-proxy,s-object,s-container,s-account</div><div class="line"></div><div class="line"># Neutron - Networking Service</div><div class="line"># If Neutron is not declared the old good nova-network will be used</div><div class="line">ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron</div><div class="line"></div><div class="line">## Neutron - Load Balancing</div><div class="line">ENABLED_SERVICES+=,q-lbaas</div><div class="line"></div><div class="line">## Neutron - VPN as a Service</div><div class="line">ENABLED_SERVICES+=,q-vpn</div><div class="line"></div><div class="line">## Neutron - Firewall as a Service</div><div class="line">ENABLED_SERVICES+=,q-fwaas</div><div class="line"></div><div class="line"># VLAN configuration</div><div class="line">#Q_PLUGIN=ml2</div><div class="line">#ENABLE_TENANT_VLANS=True</div><div class="line"></div><div class="line"># GRE tunnel configuration</div><div class="line">Q_PLUGIN=ml2</div><div class="line">ENABLE_TENANT_TUNNELS=True</div><div class="line"></div><div class="line"># VXLAN tunnel configuration</div><div class="line">#Q_PLUGIN=ml2</div><div class="line">#Q_ML2_TENANT_NETWORK_TYPE=vxlan   </div><div class="line"></div><div class="line"># Cinder - Block Device Service</div><div class="line">VOLUME_GROUP=&quot;cinder-volumes&quot;</div><div class="line">ENABLED_SERVICES+=,cinder,c-api,c-vol,c-sch,c-bak</div><div class="line"></div><div class="line"># Heat - Orchestration Service</div><div class="line">ENABLED_SERVICES+=,heat,h-api,h-api-cfn,h-api-cw,h-eng</div><div class="line">#IMAGE_URLS+=&quot;,http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F17-x86_64-cfntools.qcow2&quot;</div><div class="line"></div><div class="line"># Ceilometer - Metering Service (metering + alarming)</div><div class="line">#ENABLED_SERVICES+=,ceilometer-acompute,ceilometer-acentral,ceilometer-collector,ceilometer-api</div><div class="line">#ENABLED_SERVICES+=,ceilometer-alarm-notify,ceilometer-alarm-eval</div><div class="line"></div><div class="line"># Apache fronted for WSGI</div><div class="line">#APACHE_ENABLED_SERVICES+=keystone,swift</div><div class="line">APACHE_ENABLED_SERVICES+=keystone</div></pre></td></tr></table></figure>
<p>以上为localrc文件，用于devstack安装时的配置文件，用git clone一份devstack的源码，将localrc文件copy过去，然后./stack，就可以了。</p>
<ol>
<li>创建文件creds：<br>exportSERVICE_TOKEN=xxx(3中输入的密码)<br>exportOS_TENANT_NAME=admin<br>exportOS_USERNAME=admin<br>export OS_PASSWORD=xxx<br>exportOS_AUTH_URL=<a href="http://localhost:5000/v2.0/" target="_blank" rel="external">http://localhost:5000/v2.0/</a><br>exportSERVICE_ENDPOINT=<a href="http://localhost:35357/v2.0" target="_blank" rel="external">http://localhost:35357/v2.0</a><br>source creds就可以使用openstack了</li>
<li>若想更改已安装的组件，再./stack.sh即可</li>
</ol>
<p>###<a href=""></a>Pdb调试Havana过程</p>
<ol>
<li>修改代码<br>在需要调试的地方加入：<br>import pdb; pdb.set_trace()(以在nova/compute/api.py:get_all()中加入pdb为例)</li>
<li>重启服务<br>在相应的screen中用ctrl+c终止当前进程，然后按向上的方向键，就会出现启动服务的命令，按enter服务就起来了。</li>
<li>开始调试：<br><img src="http://img.blog.csdn.net/20131029182240546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZXB1Z3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
</ol>
<p>显示有两个screen<br>screen –x stack<br>进入如下界面：<br><img src="http://img.blog.csdn.net/20131029182325031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZXB1Z3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>最下一行表示，每一个进程都有一个screen。带*号的表示当前的screen，可以同时按下ctrl+a+8和ctrl+a+2分别前进和后退，来切换不同的screen.</p>
<ol>
<li><p>在0$中输入nova list；切换到4$ n-api:<br><img src="http://img.blog.csdn.net/20131029182451625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZXB1Z3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
<li><p>开始使用pdb进行调试<br><img src="http://img.blog.csdn.net/20131029182519906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZXB1Z3Y=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
<li><p>物理机重启后，可使用rejoin-stack.sh启动openstack服务</p>
</li>
<li>ctrl+a+shift+”, 可以选择screen , 主要就不需要通过ctrl + a  or ctrl + p 来回切换了：）。</li>
</ol>
<p>###<a href=""></a>参考资料<br>1.<a href="http://blog.csdn.net/hackerain/article/details/8373597" target="_blank" rel="external">使用pdb调试openstack<br> (How to debug openstackusing pdb )</a><br><a href="http://blog.csdn.net/hackerain/article/details/8373597" target="_blank" rel="external">http://blog.csdn.net/hackerain/article/details/8373597</a></p>
<ol>
<li><a href="http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">linux screen 命令详解</a><br><a href="http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Python 调试 PDB]]></title>
      <url>http://yoursite.com/2014/11/24/2014-11-24-Python%20%E8%B0%83%E8%AF%95%20PDB/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.163.com/gjx0619@126/blog/static/12740839320114995947700/" target="_blank" rel="external">点击打开链接</a><br>在python中使用pdb模块可以进行调试<br>import pdb<br>pdb.set_trace()</p>
<p>也可以使用python -m pdb mysqcript.py这样的方式</p>
<p>(Pdb) 会自动停在第一行，等待调试,这时你可以看看 帮助<br>(Pdb) h<br>    说明下这几个关键 命令</p>
<blockquote>
<p>断点设置<br>   (Pdb)b  10 #断点设置在本py的第10行<br>   或(Pdb)b  ots.py:20 #断点设置到 ots.py第20行<br>   删除断点（Pdb）b #查看断点编号<br>            (Pdb)cl 2 #删除第2个断点</p>
<p>运行<br>    (Pdb)n #单步运行<br>    (Pdb)s #细点运行 也就是会下到，方法<br>    (Pdb)c #跳到下个断点<br>查看<br>    (Pdb)p param #查看当前 变量值<br>    (Pdb)l #查看运行到某处代码<br>    (Pdb)a #查看全部栈内变量<br>    (Pdb)w 列出目前call stack 中的所在层。<br>    (Pdb)d 在call stack中往下移一层<br>    (Pdb)u 在call stack中往上移一层。如果在上移一层之后按下 n ,则会在上移之后的一层执行下一个叙述,之前的 function call 就自动返回。<br>    (Pdb)cl 清除指定的断点。如果没有带参数,则清除所有断点。<br>    (Pdb)disable 取消所有断点的功能,但仍然保留这些断点。<br>    (Pdb)enable 恢复断点的功能。<br>    (Pdb)ignore 设定断点的忽略次数。如果没指定 count,其初始 为 0。当 count 为 0 时,断点会正常动作。若有指定 count,则每次执行到该中断, count 就少 1,直到 count 数为 0。<br>    (Pdb)condition bpnumber [condition]<br>    (Pdb)j(ump) lineNo. 跳到某行执行。只有在 call stack 的最底部才能作用。<br>    (Pdb)l  列出目前所在档案中的位置。连续地 l 命令会一直列到档案结尾,可以使用指定行数或范围来打印。<br>    (Pdb)pp 和 p 命令类似,但是使用 pprint module(没用过 pprint,详情请参考 Python Library Reference)。<br>    (Pdb)alias 以一个”别名”代替”一群除错命令”,有点类似 c/c++ 的 macro(详情请参考 Python Library Reference)。<br>    (Pdb)unalias 取消某个 alias。<br>    (Pdb)[!]statement 在目前的环境(context)中执行叙述。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python中的__getitem__和__setitem__特殊方法]]></title>
      <url>http://yoursite.com/2014/11/21/2014-11-21-Python%E4%B8%AD%E7%9A%84__getitem__%E5%92%8C__setitem__%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在Nova的源码中，基本上所有的类都继承NovaObject，这些类可以直接以a[key]=value的方式给对象增加新的属性并且通过a[key]的方式获取对象属性，这是因为在NovaObject中实现了两个方法<strong>getitem</strong>和<strong>setitem</strong>。<br>下面是NovaObject的部分源码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NovaObject</span><span class="params">(object)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="string">"""For backwards-compatibility with dict-based objects.</span></div><div class="line"></div><div class="line">        NOTE(danms): May be removed in the future.</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> getattr(self, name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">        <span class="string">"""For backwards-compatibility with dict-based objects.</span></div><div class="line"></div><div class="line">        NOTE(danms): May be removed in the future.</div><div class="line">        """</div><div class="line">        setattr(self, name, value)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python.Paste指南之Deploy(1)-概念]]></title>
      <url>http://yoursite.com/2014/11/19/2014-11-19-Python.Paste%E6%8C%87%E5%8D%97%E4%B9%8BDeploy(1)-%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>转自: <a href="http://wanglianghuaihua.blog.163.com/blog/static/5425153120138273471531/" target="_blank" rel="external">点击打开链接</a></p>
<pre><code>Paste.Deploy主要是用来载入WSGI中的Web App使用，其核心函数是loadapp(),下文中PD就指代Paste.Deploy。
&gt; OS:Ubuntu12.04 2012年11月17日 第一版 主要是对官方文档的一个翻译，外加自己的一些理解 本文的Paste.Deploy使用主要是针对WSGI
##1 简介及安装
Paste Deployment是一种机制，通过loadapp函数和一个配置文件或者egg包来载入WSGI应用。安装很简单，如下两种方式：


<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install PasteDeploy</div></pre></td></tr></table></figure>


或者可以从github上进行源码安装


<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hg clone http://bitbucket.org/ianb/pastedeploy</div><div class="line">$ cd pastedeploy</div><div class="line">$ sudo python setup.py develop</div></pre></td></tr></table></figure>


2 配置文件Config Flie
一个配置文件后缀为ini，内容被分为很多段（section），PD只关心带有前缀的段，比如`[app:main]`或者`[filter:errors]`，总的来说，一个section的标识就是`[type:name]`,不是这种类型的section将会被忽略。
一个section的内容是以`键=值`来标示的。#是一个注释。在段的定义中，有以下几类：
</code></pre><ul>
<li><p>[app:main]:定义WSGI应用，main表示只有一个应用，有多个应用的话main改为应用名字</p>
</li>
<li><p>[server:main]:定义WSGI的一个server。</p>
</li>
<li><p>[composite:xxx]：表示需要将一个请求调度定向（dispatched）到多个,或者多种应用上。以下是一个简单的例子，例子中，使用了composite，通过urlmap来实现载入多应用。</p>
</li>
<li><p>[fliter:]：定义“过滤器”，将应用进行进一步的封装。</p>
</li>
<li><p>[DEFAULT]：定义一些默认变量的值。</p>
</li>
</ul>
<p>以下是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[composite:main]</div><div class="line">use = egg:Paste#urlmap</div><div class="line">/ = home</div><div class="line">/blog = blog</div><div class="line">/wiki = wiki</div><div class="line">/cms = config:cms.ini</div><div class="line"></div><div class="line">[app:home]</div><div class="line">use = egg:Paste#static</div><div class="line">document_root = %(here)s/htdocs</div><div class="line"></div><div class="line">[filter-app:blog]</div><div class="line">use = egg:Authentication#auth</div><div class="line">next = blogapp</div><div class="line">roles = admin</div><div class="line">htpasswd = /home/me/users.htpasswd</div><div class="line"></div><div class="line">[app:blogapp]</div><div class="line">use = egg:BlogApp</div><div class="line">database = sqlite:/home/me/blog.db</div><div class="line"></div><div class="line">[app:wiki]</div><div class="line">use = call:mywiki.main:application</div><div class="line">database = sqlite:/home/me/wiki.db</div></pre></td></tr></table></figure>
<p>下面会进行分段的讲解</p>
<p>###2.1 composite</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[composite:main]</div><div class="line">use = egg:Paste#urlmap</div><div class="line">/ = home</div><div class="line">/blog = blog</div><div class="line">/wiki = wiki</div><div class="line">/cms = config:cms.ini</div></pre></td></tr></table></figure>
<p>这是一个composite段，表示这将会根据一些条件将web请求调度到不同的应用。<code>use = egg:Paste#urlmap</code>表示我们奖使用<code>Paste</code>egg包中<code>urlmap</code>来实现composite，这一个段(urlmap)可以算是一个通用的composite程序了。根据web请求的path的前缀进行一个到应用的映射(map)。这些被映射的程序就包括blog,home,wiki,config:cms.ini（映射到了另外一个配置文件，PD再根据这个文件进行载入）###2.2 App type1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[app:home]</div><div class="line">use = egg:Paste#static</div><div class="line">document_root = %(here)s/htdocs</div></pre></td></tr></table></figure>
<p>app是一个callable object，接受的参数(environ,start_response)，这是paste系统交给application的，符合WSGI规范的参数. app需要完成的任务是响应envrion中的请求，准备好响应头和消息体，然后交给start_response处理，并返回响应消息体。<code>egg:Paste#static</code>也是Paste包中的一个简单程序，它只处理静态文件。它需要一个配置文件document_root,后面的值可以是一个变量,形式为%（var）s相应的值应该在[DEFAULT]字段指明以便Paste读取。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[app:test]</div><div class="line">use = egg:Paste#static</div><div class="line">document_root = %(path)s/htdocs</div><div class="line">[DEFAULT]</div><div class="line">path = /etc/test</div></pre></td></tr></table></figure>
<p>###2.3 fliter<br>filter是一个callable object，其唯一参数是(app)，这是WSGI的application对象，filter需要完成的工作是将application包装成另一个application（“过滤”），并返回这个包装后的application。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[filter-app:blog]</div><div class="line">use = egg:Authentication#auth</div><div class="line">next = blogapp</div><div class="line">roles = admin</div><div class="line">htpasswd = /home/me/users.htpasswd</div><div class="line"></div><div class="line">[app:blogapp]</div><div class="line">use = egg:BlogApp</div><div class="line">database = sqlite:/home/me/blog.db</div></pre></td></tr></table></figure>
<p><code>[filter-app:blog]</code>fliter-app字段表明你希望对某个应用进行包装，需要包装的应用通过next指明（表明在下一个段中），这个字段的意思就是，在正式调用blogapp之前，我会调用egg:Authentication#auth进行一个用户的验证，随后才会调用blogapp进行处理。后面的[app:blogapp]则是定义了blogapp，并指明了需要的database参数。</p>
<p>###2.4 App type2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[app:wiki]</div><div class="line">use = call:mywiki.main:application</div><div class="line">database = sqlite:/home/me/wiki.db</div></pre></td></tr></table></figure>
<p>这个段和之前的app段定义类似，不同的是对于wiki这个应用，我们没有使用egg包，而是直接对mywiki.main这个模块中的application对象使用了call方法。python，中一切皆对象，作为WSGI app的可以是一个函数，一个类，或者一个实例，使用call的话，相应的函数，类，实例中必须实现call()方法。此类app的格式用冒号分割: <code>call(表示使用call方法):模块的完成路径名字:应用变量的完整名字</code></p>
<p>##3 基本使用<br>PD的主要使用就是通过读取配置文件载入WSGI应用。如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> paste.deploy <span class="keyword">import</span> loadapp</div><div class="line">wsgi_app = loadapp(<span class="string">'config:/path/to/config.ini'</span>)</div></pre></td></tr></table></figure>
<p>注意，这里需要指明绝对路径。</p>
<p>##4 更多关于配置文件</p>
<p>###4.1 App<br>单个配置文件中可以定义多个应用个，每个应用有自己独立的段。应用的定义以[app:name]的格式，[app:main]表示只有一个应用。应用的定义支持以下五种格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[app:myapp]</div><div class="line">use = config:another_config_file.ini#app_name</div><div class="line">#使用另外一个配置文件</div><div class="line"></div><div class="line">[app:myotherapp]</div><div class="line">use = egg:MyApp</div><div class="line">#使用egg包中的内容</div><div class="line"></div><div class="line">[app:mythirdapp]</div><div class="line">use = call:my.project:myapplication</div><div class="line">#使用模块中的callable对象</div><div class="line"></div><div class="line">[app:mylastapp]</div><div class="line">use = myotherapp</div><div class="line">#使用另外一个section</div><div class="line"></div><div class="line">[app:myfacapp]</div><div class="line">paste.app_factory = myapp.modulename:app_factory</div><div class="line">#使用工厂函数</div></pre></td></tr></table></figure>
<p>其中，最后一种方式，将一个app指向了某些python代码。此模式下，必须执行app协议，以app_factory表示，后面的值需要import的东西，在这个例子中myapp.modulename被载入，并从其中取得了app_factory的实例。<br>app_factory是一个callable object，其接受的参数是一些关于application的配置信息：<code>(global_conf,**kwargs)</code>，<code>global_conf</code>是在ini文件中default section中定义的一系列key-value对，而<code>**kwargs</code>，即一些本地配置，是在ini文件中，app:xxx section中定义的一系列key-value对。app_factory返回值是一个application对象<br>在app的配置中，use参数以后配置就算结束了。其余的键值参数将会作为参数，传递到factory中，如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[app:blog]</div><div class="line">use = egg:MyBlog</div><div class="line">database = mysql://localhost/blogdb #这是参数</div><div class="line">blogname = This Is My Blog! #这是参数</div></pre></td></tr></table></figure>
</code></pre><p>###4.2 全局配置<br>全局配置主要是用于多个应用共用一些变量，这些变量我们规定放在段[DEFAULT]中，如果需要覆盖，可以在自己的app中重新定义，如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[DEFAULT]</div><div class="line">admin_email = webmaster@example.com</div><div class="line">[app:main]</div><div class="line">use = ...</div><div class="line">set admin_email = bob@example.com</div></pre></td></tr></table></figure>
</code></pre><p>###4.3 composite app<br>composite是一个运行着像是app，但是实际上是由多个应用组成的。urlmap就是composite app的一个例子，url不同的path对应了不同的应用。如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[composite:main]</div><div class="line">use = egg:Paste#urlmap</div><div class="line">/ = mainapp</div><div class="line">/files = staticapp</div><div class="line"></div><div class="line">[app:mainapp]</div><div class="line">use = egg:MyApp</div><div class="line"></div><div class="line">[app:staticapp]</div><div class="line">use = egg:Paste#static</div><div class="line">document_root = /path/to/docroot</div></pre></td></tr></table></figure>
</code></pre><p>在loadapp函数的执行中，composite app被实例化，它同时还会访问配置文件中定义的其他应用。</p>
<p>###4.4 app定义高级用法<br>在app段中，你可以定义fliters和servers，通过<code>fliter:</code>和<code>server:</code> PD通过loadserver和loadfilter函数进行调用，工作机制都一样，返回不同的对象。</p>
<p>####4.4.1 filter composition<br>应用filter的方式很多，重要的是看你filter的数量和组织形式。下面会一一介绍应用fliter的几种方式：<br>1.使用<code>filter-with</code></p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[app:main]</div><div class="line">use = egg:MyEgg</div><div class="line">filter-with = printdebug</div><div class="line"></div><div class="line">[filter:printdebug]</div><div class="line">use = egg:Paste#printdebug</div><div class="line"># and you could have another filter-with here, and so on...</div></pre></td></tr></table></figure>
</code></pre><p>2.使用<code>fliter-app</code></p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[fliter-app:printdebug]</div><div class="line">use = egg:Paste</div><div class="line">next = main</div><div class="line"></div><div class="line">[app:main]</div><div class="line">use = egg:MyEgg</div></pre></td></tr></table></figure>
</code></pre><p>3.使用pipeline<br>当使用多个filter的时候需要使用pipeline的方式，它需要提供一个key参数pipeline,后面的值是一个列表，最后以应用结尾。如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[pipeline:main]</div><div class="line">pipeline = filter1 egg:FilterEgg#filter2 filter3 app</div><div class="line"></div><div class="line">[filter:filter1]</div><div class="line">...</div></pre></td></tr></table></figure>
</code></pre><p>假设在ini文件中, 某条pipeline的顺序是filter1, filter2, filter3，app, 那么，最终运行的app_real是这样组织的： app_real = filter1(filter2(filter3(app)))<br>在app真正被调用的过程中，filter1.<strong>call</strong>(environ,start_response)被首先调用，若某种检查未通过，filter1做出反应；否则交给filter2.<strong>call</strong>(environ,start_response)进一步处理，若某种检查未通过，filter2做出反应，中断链条，否则交给filter3.<strong>call</strong>(environ,start_response)处理，若filter3的某种检查都通过了，最后交给app.<strong>call</strong>(environ,start_response)进行处理。</p>
<p>###4.5 读取配置文件<br>如果希望在不创建应用的情况下得到配置文件，可以使用appconfig(uri)函数，将会以字典形式返回使用的配置。这个字典包括了全局很本地的配置信息，所以可以通过属性方法获得相应的attributes （.local_conf and .global_conf）</p>
<p>##5 其他</p>
<p>###5.1 如何引用Egg包<br>egg是python的一个包，pip easy_install等都是安装egg包的方式。关注egg包要注意： +某一egg包是有标准说明的<br>python setup.py name +有entry point，不用太在意，这个只是说明调用程序的参数。</p>
<p>###5.2 定义factory函数<br>工厂函数的定义还是遵循之前提到的应用的协议。目前，用于工厂函数的协议有以下：<br><em>paste.app_factory
</em>paste.composite_factory<br><em>paste.filter_factory
</em>paste.server_factory<br>所有的这些都希望有一个含有<strong>call</strong>方法的（函数，方法，类）。<br>1.<code>paste.app_factory</code></p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, **local_conf)</span>:</span></div><div class="line">    <span class="keyword">return</span> wsgi_app</div></pre></td></tr></table></figure>
</code></pre><p>global_config是一个字典，而local_conf则是关键字参数。返回一个wsgi_app（含有call方法。）<br>2.paste.composite_factory`</p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">composite_factory</span><span class="params">(loader, global_config, **local_conf)</span>:</span></div><div class="line">   <span class="keyword">return</span> wsgi_app</div></pre></td></tr></table></figure>
</code></pre><p>loader是一个对象，有几个有趣的方法,get_app(name_or_uri, global_conf=None)根据name返回一个wsgi应用，get_filter（）和get_server（）也是一样。看一个更加复杂的例子，举例一个pipeline应用：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def pipeline_factory(loader, global_config, pipeline):</div><div class="line">    # space-separated list of filter and app names:</div><div class="line">    pipeline = pipeline.split()</div><div class="line">    filters = [loader.get_filter(n) for n in pipeline[:-1]]</div><div class="line">    app = loader.get_app(pipeline[-1])</div><div class="line">    filters.reverse() # apply in reverse order!</div><div class="line">    for filter in filters:</div><div class="line">      app = filter(app)</div><div class="line">    return app</div></pre></td></tr></table></figure>
</code></pre><p>相应的配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[composite:main]</div><div class="line">use = &lt;pipeline_factory_uri&gt;</div><div class="line">pipeline = egg:Paste#printdebug session myapp</div><div class="line"></div><div class="line">[filter:session]</div><div class="line">use = egg:Paste#session</div><div class="line">store = memory</div><div class="line"></div><div class="line">[app:myapp]</div><div class="line">use = egg:MyApp</div></pre></td></tr></table></figure>
<p>3.<code>paste.filter_factory</code> fliter的工厂函数和app的共产函数类似，除了它返回的是一个filter,fliter是一个仅仅把一个wsgi应用作为唯一参数的callable对象，返回一个被filter了的应用。 以下是一个例子，这个filter会检查CGI中REMOTE_USER变量是否存在，并创建一个简单的认证过滤器。</p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_filter_factory</span><span class="params">(global_conf, req_usernames)</span>:</span></div><div class="line">    <span class="comment"># space-separated list of usernames:</span></div><div class="line">    req_usernames = req_usernames.split()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(app)</span>:</span></div><div class="line">        <span class="keyword">return</span> AuthFilter(app, req_usernames)</div><div class="line">    <span class="keyword">return</span> filter</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, req_usernames)</span>:</span></div><div class="line">        self.app = app</div><div class="line">        self.req_usernames = req_usernames</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">    <span class="keyword">if</span> environ.get(<span class="string">'REMOTE_USER'</span>) <span class="keyword">in</span> self.req_usernames:</div><div class="line">            <span class="keyword">return</span> self.app(environ, start_response)</div><div class="line">    start_response(</div><div class="line">            <span class="string">'403 Forbidden'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</div><div class="line">    <span class="keyword">return</span> [<span class="string">'You are forbidden to view this resource'</span>]</div></pre></td></tr></table></figure>
</code></pre><p>4.<code>paste.filter_app_factory</code> 和paste.filter_factory类似，接受一个wsgi应用参数，返回一个WSGI应用，所以如果改变以上代码的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, global_conf, req_usernames)</span>:</span></div><div class="line">        ....</div></pre></td></tr></table></figure>
<p>那么，类 AuthFilter就会作为一个filter_app_factory函数使用。<br>5.<code>paste.server_factory</code><br>与以上不同的是，函数返回的是一个server,一个server也是一个callable对象，以一个WSGI应用作为参数，而后为这个应用服务。</p>
<pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_factory</span><span class="params">(global_conf, host, port)</span>:</span></div><div class="line">    port = int(port)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(app)</span>:</span></div><div class="line">        s = Server(app, host=host, port=port)</div><div class="line">        s.serve_forever()</div><div class="line">    <span class="keyword">return</span> serve</div></pre></td></tr></table></figure>
</code></pre><p>Server的实现用户可以自定义，可以参考python包wsgiref<br>6.<code>paste.server_runner</code> 与 paste.server_factory类似，不同的是参数格式。</p>
<p>##6 其他一些值得讨论的问题<br>ConfigParser（PD底层用到这个来解析ini文件）解析ini文件不是很有效率，是否需要更改？<br>在配置文件中的对象是否需要是python风格的，而不是字符串的形式？</p>
<blockquote>
<p>Paste Deployment currently does not require other parts of Paste, and is distributed as a separate package.<br><a href="http://pythonpaste.org/deploy/#defining-factories" target="_blank" rel="external"></a><a href="http://pythonpaste.org/deploy/#defining-factories" target="_blank" rel="external">http://pythonpaste.org/deploy/#defining-factories</a><a href="http://pythonpaste.org/deploy/" target="_blank" rel="external"></a><a href="http://pythonpaste.org/deploy/" target="_blank" rel="external">http://pythonpaste.org/deploy/</a> <a href="http://pythonpaste.org/script/#paster-serve" target="_blank" rel="external"></a><a href="http://pythonpaste.org/script/#paster-serve" target="_blank" rel="external">http://pythonpaste.org/script/#paster-serve</a><a href="http://kevinzheng.sinaapp.com/?p=104" target="_blank" rel="external"></a><a href="http://kevinzheng.sinaapp.com/?p=104" target="_blank" rel="external">http://kevinzheng.sinaapp.com/?p=104</a><a href="http://blog.csdn.net/icycolawater/article/details/7045287" target="_blank" rel="external"></a><a href="http://blog.csdn.net/icycolawater/article/details/7045287" target="_blank" rel="external">http://blog.csdn.net/icycolawater/article/details/7045287</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openstack  中的WSGI]]></title>
      <url>http://yoursite.com/2014/11/18/2014-11-18-openstack%20%20%E4%B8%AD%E7%9A%84WSGI/</url>
      <content type="html"><![CDATA[<p>#1 <a href="http://blog.csdn.net/spch2008/article/details/8997579" target="_blank" rel="external">WSGI 程序起步</a><br>本文中程序的放置路径及运行方式在<a href="http://blog.csdn.net/spch2008/article/details/8995529" target="_blank" rel="external"> Window + Apache + WSGI 配置</a>指明。</p>
<p>第一WSGI程序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spch_wsgi</span><span class="params">(environ, start_response)</span>:</span>  </div><div class="line">    </div><div class="line">    status = <span class="string">'200 OK'</span>  </div><div class="line">    response_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)]  </div><div class="line">    start_response(status, response_headers)  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello World!'</span>]  </div><div class="line">  </div><div class="line">application = spch_wsgi</div></pre></td></tr></table></figure></p>
<p>WSGI server检索application函数， 并传递两个参数environ， start_response。<br>environ 为一个字典，包含环境变量。<br>start_response 为一个函数， 用于返回状态信息。</p>
<p>一个WSGI程序要完成两件事：<br>     其一：返回HTTP header。本例中， 状态‘200 OK‘， 表明一切正常。<br>     其二：返回一个iterable containing， 本例中是一个list。</p>
<p>输出environ信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span>  </div><div class="line">  </div><div class="line">    response_body = <span class="string">""</span>  </div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> environ:  </div><div class="line">        tmp = <span class="string">"%s = %s \n"</span> % (k, environ[k])  </div><div class="line">        response_body += tmp  </div><div class="line">      </div><div class="line">    status = <span class="string">'200 OK'</span>  </div><div class="line">    response_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)]  </div><div class="line">    start_response(status, response_headers)  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> [response_body]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">wsgi.multiprocess = False   </div><div class="line">SERVER_PROTOCOL = HTTP/1.1   </div><div class="line">SERVER_SOFTWARE = Apache/2.2.22 (Win32) mod_wsgi/3.3 Python/2.7.4   </div><div class="line">SCRIPT_NAME = /wsgi   </div><div class="line">mod_wsgi.handler_script =    </div><div class="line">SERVER_SIGNATURE =    </div><div class="line">REQUEST_METHOD = GET   </div><div class="line">PATH_INFO =    </div><div class="line">PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC   </div><div class="line">QUERY_STRING =    </div><div class="line">HTTP_USER_AGENT = Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0   </div><div class="line">HTTP_CONNECTION = keep-alive   </div><div class="line">SERVER_NAME = localhost   </div><div class="line">REMOTE_ADDR = 127.0.0.1   </div><div class="line">mod_wsgi.request_handler = wsgi-script   </div><div class="line">wsgi.url_scheme = http   </div><div class="line">mod_wsgi.callable_object = application   </div><div class="line">SERVER_PORT = 80   </div><div class="line">mod_wsgi.version = (3, 3)   </div><div class="line">mod_wsgi.input_chunked = 0   </div><div class="line">SERVER_ADDR = 127.0.0.1   </div><div class="line">DOCUMENT_ROOT = D:/Program Files (x86)/Apache Software Foundation/Apache2.2/htdocs   </div><div class="line">mod_wsgi.process_group =    </div><div class="line">COMSPEC = C:\Windows\system32\cmd.exe   </div><div class="line">SCRIPT_FILENAME = C:/wsgi_app/wsgi_handler.py   </div><div class="line">SERVER_ADMIN = admin@localhost.com   </div><div class="line">wsgi.input = &lt;mod_wsgi.Input object at 0x01379DE0&gt;   </div><div class="line">HTTP_HOST = localhost   </div><div class="line">wsgi.multithread = True   </div><div class="line">SystemRoot = C:\Windows   </div><div class="line">REQUEST_URI = /wsgi   </div><div class="line">HTTP_ACCEPT = text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8   </div><div class="line">WINDIR = C:\Windows   </div><div class="line">wsgi.version = (1, 1)   </div><div class="line">GATEWAY_INTERFACE = CGI/1.1   </div><div class="line">wsgi.run_once = False   </div><div class="line">wsgi.errors = &lt;mod_wsgi.Log object at 0x01379D40&gt;   </div><div class="line">REMOTE_PORT = 64214   </div><div class="line">HTTP_ACCEPT_LANGUAGE = zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3   </div><div class="line">mod_wsgi.application_group = 192.168.209.1|/wsgi   </div><div class="line">mod_wsgi.script_reloading = 1   </div><div class="line">wsgi.file_wrapper = &lt;built-in method file_wrapper of mod_wsgi.Adapter object at 0x012E1770&gt;   </div><div class="line">HTTP_ACCEPT_ENCODING = gzip, deflate</div></pre></td></tr></table></figure>
<p>上述代码也可以通过类来实现，类中要重载<strong>call</strong>，这样的好处是可以从其它类继承，复用代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span>  </div><div class="line">        response_body = [<span class="string">'Hello World!'</span>]  </div><div class="line">   </div><div class="line">        status = <span class="string">'200 OK'</span>  </div><div class="line">        response_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)]  </div><div class="line">        start_response(status, response_headers)  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> response_body  </div><div class="line">          </div><div class="line">application = MyApp()</div></pre></td></tr></table></figure>
<p>#2 <a href="http://blog.csdn.net/spch2008/article/details/9000806" target="_blank" rel="external">WSGI– Middleware</a><br>#<br>假定存在一个superSession模块，用于追踪用户访问行为。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> superSession</div><div class="line">session = superSession.session()</div><div class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/plain\n\n"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> session.has_key(<span class="string">'visited'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"You have already visited!"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    session[<span class="string">'visited'</span>] = <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"This is your first visit."</span></div></pre></td></tr></table></figure></p>
<p>上述代码创建了一个Session对象，追踪用户访问行为。将上述思想用于WSGI程序中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span>  </div><div class="line">    <span class="keyword">import</span> superSession  </div><div class="line">    session = superSession.session()  </div><div class="line">    <span class="keyword">if</span> session.has_key(<span class="string">'visited'</span>):  </div><div class="line">        text = <span class="string">"You have already visited!"</span>  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        session[<span class="string">'visited'</span>] = <span class="number">1</span>  </div><div class="line">        text = <span class="string">"This is your first visit."</span>  </div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-type'</span>,<span class="string">'text/plain'</span>)])  </div><div class="line">    <span class="keyword">return</span> [text]</div></pre></td></tr></table></figure></p>
<p>可以将上述代码进行重构。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exampleApplication</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    <span class="keyword">if</span> environ[<span class="string">'superSession'</span>].has_key(<span class="string">'visited'</span>):</div><div class="line">        text = <span class="string">"You have already visited!"</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        environ[<span class="string">'superSession'</span>][<span class="string">'visited'</span>] = <span class="number">1</span></div><div class="line">        text = <span class="string">"This is your first visit."</span></div><div class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-type'</span>,<span class="string">'text/plain'</span>)])</div><div class="line">    <span class="keyword">return</span> [text]</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session</span><span class="params">(application)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="string">"superSession"</span> <span class="keyword">not</span> <span class="keyword">in</span> environ:</div><div class="line">            <span class="keyword">import</span> superSession</div><div class="line">            environ[<span class="string">"superSession"</span>] = superSession.session()</div><div class="line">        <span class="keyword">return</span> application(environ, start_response)</div><div class="line">    <span class="keyword">return</span> app</div><div class="line">    </div><div class="line">application = session(exampleApplication)</div></pre></td></tr></table></figure></p>
<p>将session代码抽离放于session函数中，该函数专门用于判断用户访问行为。session函数将判断结果至于环境变量environ字典中。<br>exampleApplication通过environ字典获得用户访问行为。</p>
<p>我们称session函数为middleware，它处于server与application之间，对server传来的请求做相应的处理；它对于Server和application是透明的。<br>middleware的好处在于，通过middleware（本例中session函数）可以很简单的给WSGI程序添加新功能。</p>
<p>我们也可见将middleware包装成类，这样，我们可以通过继承，复用现有的中间件。类中要重载<strong>call</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span>  </div><div class="line">        self.application = application  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span>  </div><div class="line">        <span class="keyword">if</span> <span class="string">"superSession"</span> <span class="keyword">not</span> <span class="keyword">in</span> environ:  </div><div class="line">            <span class="keyword">import</span> superSession  </div><div class="line">            environ[<span class="string">"superSession"</span>] = superSession.session() <span class="comment"># Options would obviously need specifying  </span></div><div class="line">        <span class="keyword">return</span> self.application(environ,start_response)  </div><div class="line">          </div><div class="line">application = Session(exampleApplication)</div></pre></td></tr></table></figure></p>
<p>附录: 代码语法解释<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session</span><span class="params">(application)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(environ, start_response)</span>:</span>  </div><div class="line">        <span class="keyword">if</span> <span class="string">"superSession"</span> <span class="keyword">not</span> <span class="keyword">in</span> environ:  </div><div class="line">            <span class="keyword">import</span> superSession  </div><div class="line">            environ[<span class="string">"superSession"</span>] = superSession.session()  </div><div class="line">        <span class="keyword">return</span> application(environ, start_response)  </div><div class="line">    <span class="keyword">return</span> app  </div><div class="line">      </div><div class="line">application = session(exampleApplication)</div></pre></td></tr></table></figure></p>
<p>将exampleApplication传入session函数，session函数中定义了一个新的函数app，session将app返回赋给application。<br>实际上相当于application = app。app函数中进行相应处理（superSession），将处理好的environ在传递给exampleApplication。</p>
<p>#3 webob request response</p>
<p>###Request</p>
<p>Webob的Request对象，提供对WSGI environ环境变量的包装，通过webob可以很容易的读写environ字典。<br>environ字典内容如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">TMP = C:\Users\spch2008\AppData\Local\Temp </div><div class="line">PYTHONIOENCODING = GBK </div><div class="line">COMPUTERNAME = SPCH2008 </div><div class="line">wsgi.multiprocess = <span class="keyword">False</span> </div><div class="line">PROCESSOR_LEVEL = <span class="number">16</span> </div><div class="line">USERDOMAIN = SPCH2008 </div><div class="line">VS100COMNTOOLS = D:\Program Files (x86)\Microsoft Visual Studio <span class="number">10.0</span>\Common7\Tools\ </div><div class="line">HTTP_ACCEPT_LANGUAGE = zh-cn,zh;q=<span class="number">0.8</span>,en-us;q=<span class="number">0.5</span>,en;q=<span class="number">0.3</span> </div><div class="line">SERVER_PROTOCOL = HTTP/<span class="number">1.1</span> </div><div class="line">SERVER_SOFTWARE = WSGIServer/<span class="number">0.1</span> Python/<span class="number">2.7</span><span class="number">.4</span> </div><div class="line">PSMODULEPATH = C:\Windows\system32\WindowsPowerShell\v1<span class="number">.0</span>\Modules\ </div><div class="line">SCRIPT_NAME =  </div><div class="line">COMMONPROGRAMFILES = C:\Program Files (x86)\Common Files </div><div class="line">PROCESSOR_IDENTIFIER = AMD64 Family <span class="number">16</span> Model <span class="number">5</span> Stepping <span class="number">3</span>, AuthenticAMD </div><div class="line">REQUEST_METHOD = GET </div><div class="line">PROGRAMFILES = C:\Program Files (x86) </div><div class="line">PROCESSOR_REVISION = <span class="number">0503</span> </div><div class="line">PATH = D:/Program Files (x86)/java/jre7/bin/client;D:/Program Files (x86)/java/jre7/bin;D:/Program Files (x86)/java/jre7/lib/i386;C:\python32\;C:\python32\Lib\site-packages\;C:\python32\Scripts\;C:\Program Files (x86)\Common Files\NetSarang;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1<span class="number">.0</span>\;D:\Program Files (x86)\java\jre7\bin;D:\Program Files (x86)\Rational\common;D:\Program Files (x86)\eclipse; </div><div class="line">QUERY_STRING =  </div><div class="line">SYSTEMROOT = C:\Windows </div><div class="line">PROGRAMFILES(X86) = C:\Program Files (x86) </div><div class="line">PT5HOME = d:\Program Files (x86)\Cisco Packet Tracer <span class="number">5.3</span><span class="number">.3</span> </div><div class="line">CONTENT_LENGTH =  </div><div class="line">HTTP_USER_AGENT = Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.2</span>; WOW64; rv:<span class="number">21.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">21.0</span> </div><div class="line">HTTP_CONNECTION = keep-alive </div><div class="line">TEMP = C:\Users\spch2008\AppData\Local\Temp </div><div class="line">REMOTE_ADDR = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> </div><div class="line">COMMONPROGRAMFILES(X86) = C:\Program Files (x86)\Common Files </div><div class="line">PROCESSOR_ARCHITECTURE = x86 </div><div class="line">wsgi.url_scheme = http </div><div class="line">ALLUSERSPROFILE = C:\ProgramData </div><div class="line">PYDEV_CONSOLE_ENCODING = GBK </div><div class="line">SERVER_PORT = <span class="number">8080</span> </div><div class="line">LOCALAPPDATA = C:\Users\spch2008\AppData\Local </div><div class="line">HOMEPATH = \Users\spch2008 </div><div class="line">USERDOMAIN_ROAMINGPROFILE = SPCH2008 </div><div class="line">PROGRAMW6432 = C:\Program Files </div><div class="line">USERNAME = spch2008 </div><div class="line">HTTP_ACCEPT = text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span> </div><div class="line">LOGONSERVER = \\MicrosoftAccount </div><div class="line">PROMPT = $P$G </div><div class="line">COMSPEC = C:\Windows\system32\cmd.exe </div><div class="line">PROGRAMDATA = C:\ProgramData </div><div class="line">PYTHONPATH = D:\Program Files (x86)\eclipse\plugins\org.python.pydev_2<span class="number">.7</span><span class="number">.3</span><span class="number">.2013031601</span>\pysrc\pydev_sitecustomize;E:\GitHub\OpenStack\WSGI;C:\python32\DLLs;C:\python32\lib;C:\python32\lib\plat-win;C:\python32\lib\lib-tk;C:\python32;C:\python32\lib\site-packages </div><div class="line">PATH_INFO = / </div><div class="line">wsgi.multithread = <span class="keyword">True</span> </div><div class="line">wsgi.input = &lt;socket._fileobject object at <span class="number">0x0285C030</span>&gt; </div><div class="line">wsgi.errors = &lt;open file <span class="string">'&lt;stderr&gt;'</span>, mode <span class="string">'w'</span> at <span class="number">0x01DA60D0</span>&gt; </div><div class="line">HTTP_HOST = localhost:<span class="number">8080</span> </div><div class="line">SESSIONNAME = Console </div><div class="line">PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC </div><div class="line">ASL.LOG = Destination=file </div><div class="line">FP_NO_HOST_CHECK = NO </div><div class="line">WINDIR = C:\Windows </div><div class="line">wsgi.file_wrapper = wsgiref.util.FileWrapper </div><div class="line">HTTP_ACCEPT_ENCODING = gzip, deflate </div><div class="line">wsgi.version = (<span class="number">1</span>, <span class="number">0</span>) </div><div class="line">APPDATA = C:\Users\spch2008\AppData\Roaming </div><div class="line">HOMEDRIVE = C: </div><div class="line">SERVER_NAME = spch2008 </div><div class="line">wsgi.run_once = <span class="keyword">False</span> </div><div class="line">REMOTE_HOST = spch2008 </div><div class="line">SYSTEMDRIVE = C: </div><div class="line">GATEWAY_INTERFACE = CGI/<span class="number">1.1</span> </div><div class="line">PYDEV_COMPLETER_PYTHONPATH = D:\Program Files (x86)\eclipse\plugins\org.python.pydev_2<span class="number">.7</span><span class="number">.3</span><span class="number">.2013031601</span>\pysrc </div><div class="line">NUMBER_OF_PROCESSORS = <span class="number">4</span> </div><div class="line">DJANGO_SETTINGS_MODULE = WSGI.settings </div><div class="line">CONTENT_TYPE = text/plain </div><div class="line">PROCESSOR_ARCHITEW6432 = AMD64 </div><div class="line">COMMONPROGRAMW6432 = C:\Program Files\Common Files </div><div class="line">OS = Windows_NT </div><div class="line">PUBLIC = C:\Users\Public </div><div class="line">USERPROFILE = C:\Users\spch2008</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">req = Request(environ)</div></pre></td></tr></table></figure>
<p>通过Request操作上述环境变量，所得结果如下：</p>
<p>req.method             ‘Get’<br>req.path_info            ‘/‘<br>req.content_type     ‘text/plain’<br>req.remote_user     ‘None’<br>req.host                    ‘localhost:8080’<br>即通过req，可以很方便的读取environ环境变量，更多操作请看：<a href="http://docs.webob.org/en/latest/modules/webob.html" target="_blank" rel="external">http://docs.webob.org/en/latest/modules/webob.html</a></p>
<p>##<a href=""></a>Response</p>
<p>Response包含了所有响应WSGI Server需要的变量。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">res = Response()</div><div class="line">res.status = <span class="number">200</span></div><div class="line">res.headerlist = [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)]</div><div class="line">res.body = <span class="string">'Hello World!'</span></div></pre></td></tr></table></figure></p>
<p>使用webob改写之前的Hello World程序。j将上述代码粘贴到eclipse中，运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server  </div><div class="line"><span class="keyword">from</span> webob <span class="keyword">import</span> Request, Response  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span>  </div><div class="line">          </div><div class="line">        req = Request(environ)  </div><div class="line">        res = Response()  </div><div class="line">         </div><div class="line">        res.status = <span class="number">200</span>  </div><div class="line">        res.headerlist = [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)]  </div><div class="line">        res.body = <span class="string">"Hello World!"</span>  </div><div class="line">          </div><div class="line">        <span class="keyword">return</span> res(environ, start_response)  </div><div class="line">          </div><div class="line">application = MyApp()  </div><div class="line">  </div><div class="line">httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8080</span>, application)    </div><div class="line">httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<p>4 <a href="http://blog.csdn.net/spch2008/article/details/9003410" target="_blank" rel="external">Webob WSGI 装饰器</a>wsgify装饰器将一个普通函数转变成WSGI应用程序。<br>class webob.dec.wsgify(func=None, RequestClass=None, args=(), kwargs=None, middleware_wraps=None)</p>
<p>小示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</div><div class="line"><span class="keyword">from</span> webob <span class="keyword">import</span> Request, Response</div><div class="line"><span class="keyword">from</span> webob.dec <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="meta">@wsgify</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(req)</span>:</span></div><div class="line">    res = Response()</div><div class="line">    res.status = <span class="number">200</span></div><div class="line">    res.body   = <span class="string">"spch"</span></div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        </div><div class="line">        req = Request(environ)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> test(environ, start_response)</div><div class="line">        </div><div class="line">application = MyApp()</div><div class="line"></div><div class="line">httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8081</span>, application)  </div><div class="line">httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<p>其中，参数req为一个Request实例，可以通过req读取相应环境变量。</p>
<p>而且，我们可以定制装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</div><div class="line"><span class="keyword">from</span> webob <span class="keyword">import</span> Request, Response</div><div class="line"><span class="keyword">from</span> webob.dec <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> webob.exc <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span><span class="params">(Request)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_local</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.remote_addr == <span class="string">'127.0.0.1'</span></div><div class="line">    </div><div class="line"><span class="meta">@wsgify(RequestClass=MyRequest)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(req)</span>:</span></div><div class="line">    <span class="keyword">if</span> req.is_local:</div><div class="line">        <span class="keyword">return</span> Response(<span class="string">'hi!'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> HTTPForbidden</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        </div><div class="line">        req = Request(environ)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> myfunc(environ, start_response)</div><div class="line">        </div><div class="line">application = MyApp()</div><div class="line"></div><div class="line">httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8081</span>, application)  </div><div class="line">httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<p>如何是本机访问，则输出’hi‘，否则不允许<br>5 <a href="http://blog.csdn.net/spch2008/article/details/9005109" target="_blank" rel="external">Routes 起步</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> routes <span class="keyword">import</span> Mapper</div><div class="line">map = Mapper()</div><div class="line">map.connect(<span class="string">'spch'</span>, <span class="string">'/blog'</span>, controller=<span class="string">'main'</span>, action=<span class="string">'index'</span>)</div><div class="line"></div><div class="line">result = map.match(<span class="string">'/blog'</span>)</div><div class="line"><span class="keyword">print</span> result</div><div class="line">&#123;<span class="string">'action'</span>: <span class="string">u'index'</span>, <span class="string">'controller'</span>: <span class="string">u'main'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>1.2 行创建一个mapper</p>
<ol>
<li><p>行注册一条路由， 路由名称为’spch’, 路径为’/blog’, controller为main，<br> action为index<br> 可以这样认为，匹配到此条路由的请求交由controller处理，请求预调用的<br> 函数为index</p>
</li>
<li><p>创建好路由条目后，即可以进行匹配，调用match方法，匹配路径’blog’</p>
</li>
<li>输出匹配结果<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">map.connect(<span class="keyword">None</span>, <span class="string">"/error/&#123;action&#125;/&#123;id&#125;"</span>, controller=<span class="string">"error"</span>)</div><div class="line">result = map.match(<span class="string">'/error/index/2'</span>)</div><div class="line"><span class="keyword">print</span> result</div><div class="line">&#123;<span class="string">'action'</span>: <span class="string">u'index'</span>, <span class="string">'controller'</span>: <span class="string">u'error'</span>, <span class="string">'id'</span>: <span class="string">u'2'</span>&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>1.注册了一条无名路由，并且action从匹配路由中获得<br>  同样，我们可以省掉None<br>  map.connect(“/error/{action}/{id}”, controller=”error”)<br>  上述语句同样注册了一条无名路由。</p>
<p>Conditions<br>Conditions用于限制进行路由匹配，比如method</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">m.connect(<span class="string">"/user/list"</span>, controller=<span class="string">"user"</span>, action=<span class="string">"list"</span>, conditions=dict(method=[<span class="string">"GET"</span>, <span class="string">"HEAD"</span>]))</div><div class="line">``` </div><div class="line"></div><div class="line">只匹配GET，HEAD请求。</div><div class="line"></div><div class="line">Requirements</div><div class="line">有时只想匹配数字，或者匹配可选的几个条目</div><div class="line">```python</div><div class="line">map.connect(R<span class="string">"/blog/&#123;id:\d+&#125;"</span>)</div><div class="line">map.connect(R<span class="string">"/download/&#123;platform:windows|mac&#125;/&#123;filename&#125;"</span>)</div></pre></td></tr></table></figure>
<p>\d表示匹配1位数字，\d+表示匹配多位<br>windows|mac 表示只匹配windows或者mac<br>可以将上述写成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.connect(<span class="string">"/blog/&#123;id&#125;"</span>, requirements=&#123;<span class="string">"id"</span>: R<span class="string">"\d+"</span>&#125;</div><div class="line">map.connect(<span class="string">"/download/&#123;platform&#125;/&#123;filename&#125;"</span>,</div><div class="line">    requirements=&#123;<span class="string">"platform"</span>: R<span class="string">"windows|mac"</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>Format extensions<br>通过{.format}来指定匹配格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">map.connect(<span class="string">'/entries/&#123;id&#125;&#123;.format&#125;'</span>)</div><div class="line"><span class="keyword">print</span> map.match(<span class="string">'/entries/2'</span>)</div><div class="line">&#123;<span class="string">'id'</span>: <span class="string">u'2'</span>, <span class="string">'format'</span>: <span class="keyword">None</span>&#125;</div><div class="line"><span class="keyword">print</span> map.match(<span class="string">'/entries/2.mp3'</span>)</div><div class="line">&#123;<span class="string">'id'</span>: <span class="string">u'2'</span>, <span class="string">'format'</span>: <span class="string">u'mp3'</span>&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">map.connect(<span class="string">'/entries/&#123;id:\d+&#125;&#123;.format:mp3&#125;'</span>)</div><div class="line"><span class="keyword">print</span> map.match(<span class="string">'/entries/2.mp3'</span>)</div><div class="line">&#123;<span class="string">'id'</span>: <span class="string">u'2'</span>, <span class="string">'format'</span>: <span class="string">u'mp3'</span>&#125;</div><div class="line"><span class="keyword">print</span> map.match(<span class="string">'/entries/2'</span>)</div><div class="line">&#123;<span class="string">'id'</span>: <span class="string">u'2'</span>, <span class="string">'format'</span>: <span class="keyword">None</span>&#125;</div><div class="line"><span class="keyword">print</span> map.match(<span class="string">'/entries/2.mp4'</span>)</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>注意：{id:\d+}, 如果没有\d+, print map.match(‘/entries/2.mp4’)将输出 {‘id’: u’2.mp4’, ‘format’: None}是可以成功的。<br>有了\d+后，由于没有匹配format，同时\d+要求只匹配数字，所有2.mp4匹配失败</p>
<p>6 <a href="http://blog.csdn.net/spch2008/article/details/9005140" target="_blank" rel="external">Routes Resource</a>当路由条目过多时，需要一条一条注册，过于麻烦，此时可以通过resource route简化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">map.connect(<span class="string">"messages"</span>, <span class="string">"/messages"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"create"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"POST"</span>]))</div><div class="line">map.connect(<span class="string">"messages"</span>, <span class="string">"/messages"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"index"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"formatted_messages"</span>, <span class="string">"/messages.&#123;format&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"index"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"new_message"</span>, <span class="string">"/messages/new"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"new"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"formatted_new_message"</span>, <span class="string">"/messages/new.&#123;format&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"new"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"/messages/&#123;id&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"update"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"PUT"</span>]))</div><div class="line">map.connect(<span class="string">"/messages/&#123;id&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"delete"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"DELETE"</span>]))</div><div class="line">map.connect(<span class="string">"edit_message"</span>, <span class="string">"/messages/&#123;id&#125;/edit"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"edit"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"formatted_edit_message"</span>, <span class="string">"/messages/&#123;id&#125;.&#123;format&#125;/edit"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"edit"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"message"</span>, <span class="string">"/messages/&#123;id&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"show"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div><div class="line">map.connect(<span class="string">"formatted_message"</span>, <span class="string">"/messages/&#123;id&#125;.&#123;format&#125;"</span>,</div><div class="line">    controller=<span class="string">"messages"</span>, action=<span class="string">"show"</span>,</div><div class="line">    conditions=dict(method=[<span class="string">"GET"</span>]))</div></pre></td></tr></table></figure></p>
<p>上述路由条目可以使用这一条语句代替。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.resource(<span class="string">"message"</span>, <span class="string">"messages"</span>)</div></pre></td></tr></table></figure></p>
<p>两个参数，一个指定单数，为member路由名字；一个指定复数，为collection路由名字。<br>函数原型：resource(member_name, collection_name, **kwargs)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET    /messages        =&gt; messages.index()    =&gt; url(<span class="string">"messages"</span>)</div><div class="line">POST   /messages        =&gt; messages.create()   =&gt; url(<span class="string">"messages"</span>)</div><div class="line">GET    /messages/new    =&gt; messages.new()      =&gt; url(<span class="string">"new_message"</span>)</div><div class="line">PUT    /messages/<span class="number">1</span>      =&gt; messages.update(id) =&gt; url(<span class="string">"message"</span>, id=<span class="number">1</span>)</div><div class="line">DELETE /messages/<span class="number">1</span>      =&gt; messages.delete(id) =&gt; url(<span class="string">"message"</span>, id=<span class="number">1</span>)</div><div class="line">GET    /messages/<span class="number">1</span>      =&gt; messages.show(id)   =&gt; url(<span class="string">"message"</span>, id=<span class="number">1</span>)</div><div class="line">GET    /messages/<span class="number">1</span>/edit =&gt; messages.edit(id)   =&gt; url(<span class="string">"edit_message"</span>, id=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>这里有必要说一下member 路由与 collection路由。<br>上述的路由模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET    /messages        =&gt; messages.index()   </div><div class="line">POST   /messages        =&gt; messages.create()  </div><div class="line">GET    /messages/new    =&gt; messages.new()     </div><div class="line">PUT    /messages/<span class="number">1</span>      =&gt; messages.update(id)</div><div class="line">DELETE /messages/<span class="number">1</span>      =&gt; messages.delete(id)</div><div class="line">GET    /messages/<span class="number">1</span>      =&gt; messages.show(id)  </div><div class="line">GET    /messages/<span class="number">1</span>/edit =&gt; messages.edit(id)</div></pre></td></tr></table></figure></p>
<ol>
<li>有的路由有id， 指向一个具体的对象</li>
<li>有的路由没有id， 指向全体对象</li>
<li>有的路由(index/create， show/update/delete)有相同的URL，但是HTTP method不同</li>
<li>有的路由(show/edit)HTTP method和前缀相同，仅后缀不同</li>
</ol>
<p>一个member路由指定具体实例，也就是说它们有id。而一个collection路由，<br>没有指定的实例，即没有给定id<br>综上：member路由操作一个单独的实例，而collection操作全体实例。</p>
<p>另一个函数collection也可以完成上述功能。<br>函数原型：collection(collection_name, resource_name, path_prefix=None, member_prefix=’/{id}’, controller=None, collection_actions=[‘index’, ‘create’, ‘new’],member_actions=[‘show’, ‘update’,<br> ‘delete’, ‘edit’], member_options=None, **kwargs)</p>
<p>用法：<br>    map.collection(‘entries’, ‘entry’)</p>
<p>7 <a href="http://blog.csdn.net/spch2008/article/details/9005260" target="_blank" rel="external">Routes RoutesMiddleware</a>RoutesMiddleware将请求应声到相应WSGI程序，它将路由匹配结果存到environ环境变量中去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> routes.middleware <span class="keyword">import</span> RoutesMiddleware</div><div class="line">app = RoutesMiddleware(wsgi_app, map)     <span class="comment"># ``map`` is a routes.Mapper.</span></div></pre></td></tr></table></figure></p>
<p>map调用match匹配URL，并设置WSGI环境变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">environ[<span class="string">'wsgiorg.routing_args'</span>] = ((url, match))</div><div class="line">environ[<span class="string">'routes.route'</span>] = route</div><div class="line">environ[<span class="string">'routes.url'</span>] = url</div></pre></td></tr></table></figure></p>
<p>route为匹配到的路由，url为一个URLGenerator对象，match为匹配所得条目。</p>
<p>app为一个RoutesMiddleware对象，内部重载<strong>call</strong>（def <strong>call</strong>(self, environ, start_response)）仍为一个wsgi应用。<br>wsgi_app为一个wsgi程序，RoutesMiddleware将环境变量(environ)设置好后，调用wsgi_app进行后续处理。</p>
<p>下面是一个实际的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wsgiorg.routing_args = (&lt;routes.util.URLGenerator object at 0x0287AFB0&gt;, </div><div class="line">                        &#123;&apos;action&apos;: u&apos;index&apos;, &apos;controller&apos;: &lt;__main__.Resourse instance at 0x02876E40&gt;&#125;)</div><div class="line">routes.route = &lt;routes.route.Route object at 0x02871F10&gt;</div><div class="line">routes.url = &lt;routes.util.URLGenerator object at 0x0287AFB0&gt;</div></pre></td></tr></table></figure></p>
<p>8 <a href="http://blog.csdn.net/spch2008/article/details/9004926" target="_blank" rel="external">WSGI Webob Routes 实例</a>1.下载库文件<br>   webob库：<a href="http://download.csdn.net/detail/spch2008/5497755" target="_blank" rel="external">http://download.csdn.net/detail/spch2008/5497755</a><br>   routes库：<a href="http://download.csdn.net/detail/spch2008/5497757" target="_blank" rel="external">http://download.csdn.net/detail/spch2008/5497757</a><br>   repoze库：<a href="http://download.csdn.net/detail/spch2008/5499231" target="_blank" rel="external">http://download.csdn.net/detail/spch2008/5499231</a></p>
<ol>
<li>组织代码<br> <img src="http://img.blog.csdn.net/20130602180110171" alt=""></li>
<li>代码</li>
</ol>
<pre><code class="python"><span class="string">'''
Created on 2013-6-1

@author: spch2008
'''</span>

<span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server

<span class="keyword">import</span> routes.middleware
<span class="keyword">import</span> webob.dec
<span class="keyword">import</span> webob.exc

<span class="class"><span class="keyword">class</span> <span class="title">Controller</span>:</span>
<span class="meta">    @webob.dec.wsgify</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, req)</span>:</span>
        <span class="keyword">return</span> webob.Response(<span class="string">"Hello World!"</span>)



<span class="class"><span class="keyword">class</span> <span class="title">Router</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>
        self._mapper = routes.Mapper()
        self._mapper.connect(<span class="string">'/spch'</span>,  
                        controller=Controller(),  
                        action=<span class="string">'index'</span>,  
                        conditions={<span class="string">'method'</span>: [<span class="string">'GET'</span>]})  

        self._router = routes.middleware.RoutesMiddleware(self._dispatch, self._mapper)

<span class="meta">    @webob.dec.wsgify</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, req)</span>:</span>

        <span class="keyword">return</span> self._router

<span class="meta">    @staticmethod</span>
<span class="meta">    @webob.dec.wsgify</span>
    <span class="function"><span class="keyword">def</span> <span class="title">_dispatch</span><span class="params">(req)</span>:</span>
        match = req.environ[<span class="string">'wsgiorg.routing_args'</span>][<span class="number">1</span>]

        <span class="keyword">if</span> <span class="keyword">not</span> match:
            <span class="keyword">return</span> webob.exc.HTTPNotFound()

        app = match[<span class="string">'controller'</span>]  
        <span class="keyword">return</span> app



app = Router()
httpd = make_server(<span class="string">'localhost'</span>, <span class="number">8282</span>, app)  
httpd.serve_forever()
</code></pre>
<p>  22行：创建一个mapper<br>  23行：#注册一个路由<br>  28行：创建一个RoutesMiddleware对象，匹配路由，修改环境变量后，调用self._dispatch</p>
<ol>
<li>运行结果<br> <img src="http://img.blog.csdn.net/20130601214138928" alt=""></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Openstack中的tox]]></title>
      <url>http://yoursite.com/2014/11/13/2014-11-13-Openstack%E4%B8%AD%E7%9A%84tox/</url>
      <content type="html"><![CDATA[<p>写在最前面<br>以keystone工程为例，其他工程类似<br>内容包括：打源码包（sdist）、单元测试（UT）、测试覆盖率（coverage）、代码格式检查（pep8，flake）</p>
<p>1、引子<br>接触了一段时间openstack社区，并提交了几个bug之后，就发现社区中，从bug提交、问题确认、到bug修复，代码review，自动构建、单元测试、静态检查、再到代码合入，也就是我们经常说的持续集成（CI），是一个非常简单和高效的过程。<br>开发人员都是懒人，这点我从来都没有怀疑过，怎么让一群懒人（还是一大群）将CI的这么多步骤做规范，并且不觉得是一个麻烦的过程，需要很高的技巧和聪明才智。<br>我认为持续集成（CI）有两个重点需要把握，首先要好上手，简单易学，开发都是懒人，不好用的东西，很难养成习惯使用；其次做且仅做应该做的事，也就是CI检查的范围要确定，保持CI的高速，写完代码10分钟之内，要出ut和coverage的结果。<br>来让我们看看openstack社区的持续集成都包括哪些内容，使用了哪些工具。</p>
<p>2、tox<br>对openstack几个核心工程代码比较熟悉的朋友，可能都会注意到代码根目录下都有个tox.ini文件，tox其实就是openstack持续集成中非常重要的一个工具，tox.ini就是tox的配置文件。<br>tox的官方对于tox的定义是这样的：<br>Tox as is a generic virtualenv management and test command line tool<br><a href="http://tox.readthedocs.org/en/latest/" target="_blank" rel="external">http://tox.readthedocs.org/en/latest/</a><br>也就是一个通用的虚拟环境管理和测试命令行工具。<br>所谓的虚拟环境，就是可以在一个主机上，自定义出多套的python环境，多套环境中使用不同的python拦截器，环境变量设置，第三方依赖包，执行不同的测试命令，最重要的是各个环境之间互不影响，相互隔离。<br>最典型的应用就测试在不同python版本下代码的兼容性，我们可以为py2.4，py2.5，py2.6，py2.7创建不同的虚拟环境，都可以用tox统一管理；也可以在tox.ini中自定义虚拟环境，例如：testevn:pep8，代码格式检查；testenv:cover，测试覆盖率。<br>我们以最新的H版的keystone的tox.ini为例：</p>
<p>首先定义tox的全局配置，列出了需要执行的虚拟环境列表，在命令行中直接执行tox，就会依次执行py26，py27，pep8</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[tox] </div><div class="line">envlist = py26,py27,pep8</div></pre></td></tr></table></figure>
<p>然后定义了虚拟环境的配置<br>setenv列出了虚拟机环境中生效的环境变量，一些配色方案和单元测试标志；<br>deps列出了虚拟环境需要的第三方依赖包，也就是keystone根目录下的requirements.txt和test-requirements.txt其中包括了keystone运行和单元测试时，需要用到的依赖包，每个虚拟环境创建的时候，会通过pip install -r requirements.txt和pip install -r test-requirements.txt安装依赖包到虚拟环境；<br>commands就是在当前虚拟环境中需要执行的命令，python tools/patch_tox_venv.py就是安装了redhat-eventlet.patch补丁；nosetests {posargs}就是执行nose进行单元测试，{posargs}参数就是可以将tox的参数传递给nosetests，例如：tox – –with-coverage执行的时候就是nosetests –with-coverage</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[testenv] </div><div class="line">setenv = VIRTUAL_ENV=&#123;envdir&#125; </div><div class="line">         NOSE_WITH_OPENSTACK=<span class="number">1</span> </div><div class="line">         NOSE_OPENSTACK_COLOR=<span class="number">1</span> </div><div class="line">         NOSE_OPENSTACK_RED=<span class="number">0.05</span> </div><div class="line">         NOSE_OPENSTACK_YELLOW=<span class="number">0.025</span> </div><div class="line">         NOSE_OPENSTACK_SHOW_ELAPSED=<span class="number">1</span> </div><div class="line">         NOSE_OPENSTACK_STDOUT=<span class="number">1</span> </div><div class="line">deps = -r&#123;toxinidir&#125;/requirements.txt </div><div class="line">       -r&#123;toxinidir&#125;/test-requirements.txt </div><div class="line">commands = python tools/patch_tox_venv.py </div><div class="line">           nosetests &#123;posargs&#125;</div></pre></td></tr></table></figure>
<p>自定义了一个pep8的代码静态检查的虚拟环境，执行flake8 –filename=keystone* bin</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[testenv:pep8] </div><div class="line">commands = </div><div class="line">  flake8 </div><div class="line">  flake8 --filename=keystone* bin</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span style="font-family: Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"&gt;定义了和CI server jenkins的集成配置，指定了pip的下载cache目录，提高构建虚拟环境的速度&lt;/span&gt;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[tox:jenkins] </div><div class="line">downloadcache = ~/cache/pip</div></pre></td></tr></table></figure>
<p>定义一个cover的虚拟环境，就是指定了一些环境变量，使单元测试的时候，自动应用coverage，并定义了coverage生成的html报告目录</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[testenv:cover] </div><div class="line">setenv = VIRTUAL_ENV=&#123;envdir&#125; </div><div class="line">         NOSE_WITH_COVERAGE=<span class="number">1</span> </div><div class="line">         NOSE_COVER_HTML=<span class="number">1</span> </div><div class="line">         NOSE_COVER_HTML_DIR=&#123;toxinidir&#125;/cover</div></pre></td></tr></table></figure>
<p>这个不太明白，也许就是创建一个虚拟机环境，执行一个自定义的命令行，以备扩展</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[testenv:venv] </div><div class="line">commands = &#123;posargs&#125;</div></pre></td></tr></table></figure>
<p>定义了flake8静态检查的一些细节配置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[flake8] </div><div class="line">show-source = true </div><div class="line"> </div><div class="line"><span class="comment"># H304: no relative imports. </span></div><div class="line">ignore = H304 </div><div class="line"> </div><div class="line">builtins = _ </div><div class="line">exclude=.venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,tools,vendor,.update-venv</div></pre></td></tr></table></figure>
<p>3、使用过程中的一些改进<br>直接使用keystone自带的tox.ini执行单元测试和静态检查时，也遇到了一些问题：</p>
<p>每次执行tox命令的时候，所有的虚拟环境都会重建，重新用pip下载依赖包，时间都浪费在了下包上，recreate=False也不能解决，后来想了个招儿，先手动用pip将requirements.txt和test-requirements.txt都安装在系统python库下，然后将sitepackages=True，继承系统的依赖包。这样似乎打破了虚拟环境相互隔离的好处，但是能节省非常多的时间，大概70%。大家自己权衡是否需要使用这种方法。<br>执行单元测试的时候，顺便生成单元测试报告，并检查测试覆盖率，并生成覆盖率报告。直接执行tox是不行的，只能进行单元测试，需要给tox增加扩展参数，如下：tox – –cover-erase – –with-coverage – –cover-html<br>一开始执行tox的时候，生成的coverage覆盖率报告都是0%，百思不得其解，后来发现keystone根目录下有个.coveragerc文件，这个文件是coverage的配置文件，会影响coverage的行为，将文件中的source = keystone注释掉之后，正常生成覆盖率报告。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nova创建虚拟机实例过程简述]]></title>
      <url>http://yoursite.com/2014/11/12/2014-11-12-Nova%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E4%BE%8B%E8%BF%87%E7%A8%8B%E7%AE%80%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/bingxx11/article/details/20143433" target="_blank" rel="external">原文地址</a></p>
<p>有了前面的一些基础之后，我们再来看一下，大家可能非常关系的一个问题，就是如何通过OpenStack创建一个虚拟机实例。本文注重结构性分析，细节性问题，请小伙伴们自己多思考撒，因为我也是正在边学Python，边看nova源码的，我的理解肯定会有错误的地方，也劳烦大神们，看到错误的时候，和小弟说一下，先谢了。</p>
<p>1、nova-api  &lt;文件位于/nova/api/openstackcompute/server.py&gt;<br>      nova-api起到了一个Cloud Controller的作用，主要为所有的API查询提供了一个接口（比如Openstack API ，EC2 API），引发多数业务流程的活动（如运行一个实例），并实施一些政策（主要是配额检查）。<br>      因为今天我们主题是虚拟机实例的启动过程，所以，重点关注/nova/api/openstackcompute/server.py。找到类class Controller(wsgi.Controller):create()代码段，我们知道nova-api的作用就是对外提供标准REST接口的服务。下面的代码段，已经标注了很多内容，大家看一下即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对外提供创建虚拟机实例的外部接口，nova-api.create()  </span></div><div class="line">    <span class="comment">#其中req是整个http报文内容，body就是REST中传递过来的参数  </span></div><div class="line">    <span class="comment">#整个方法的作用是将REST接口参数映射到内部接口compute-api.create()  </span></div><div class="line">    <span class="comment">#比如非常重要的环节，将image-flavor的id转换成虚拟机具体配置信息instanc_type  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, req, body)</span>:</span>  </div><div class="line">        <span class="string">"""Creates a new server for a given user."""</span>  </div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_valid_body(body, <span class="string">'server'</span>):  </div><div class="line">            <span class="keyword">raise</span> exc.HTTPUnprocessableEntity()  </div><div class="line">  </div><div class="line">        <span class="comment">#A mapping object representing the string environment.   </span></div><div class="line">        <span class="comment">#For example, environ['HOME'] is the pathname of your   </span></div><div class="line">        <span class="comment">#home directory (on some platforms), and is equivalent to getenv("HOME") in C  </span></div><div class="line">          </div><div class="line">        <span class="comment">#对下面两个参数的讨论，设计到webob等概念，需要在以后做专门的讲述  </span></div><div class="line">        <span class="comment">#*****************经常会用到的两个参数***************  </span></div><div class="line">        context = req.environ[<span class="string">'nova.context'</span>]  </div><div class="line">        server_dict = body[<span class="string">'server'</span>]  </div><div class="line">        <span class="comment">#*****************经常会用到的两个参数***************</span></div></pre></td></tr></table></figure></p>
<p>nova-api的create方法作用是将REST接口参数映射到内部接口compute-api.create()，参数转换完成后，create最后会调用如下代码，转去调用comput-api<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(instances, resv_id) = self.compute_api.create(context,  </div><div class="line">                           inst_type,  <span class="comment">###*****已经转换的flavor  </span></div><div class="line">                           image_uuid,  </div><div class="line">                           display_name=name,  </div><div class="line">                           display_description=name,  </div><div class="line">                           key_name=key_name,  </div><div class="line">                           metadata=server_dict.get(<span class="string">'metadata'</span>, &#123;&#125;),  </div><div class="line">                           access_ip_v4=access_ip_v4,  </div><div class="line">                           access_ip_v6=access_ip_v6,  </div><div class="line">                           injected_files=injected_files,  </div><div class="line">                           admin_password=password,  </div><div class="line">                           min_count=min_count,  </div><div class="line">                           max_count=max_count,  </div><div class="line">                           requested_networks=requested_networks,  </div><div class="line">                           security_group=sg_names,  </div><div class="line">                           user_data=user_data,  </div><div class="line">                           availability_zone=availability_zone,  </div><div class="line">                           config_drive=config_drive,  </div><div class="line">                           block_device_mapping=block_device_mapping,  </div><div class="line">                           auto_disk_config=auto_disk_config,  </div><div class="line">                           scheduler_hints=scheduler_hints,  </div><div class="line">                           legacy_bdm=legacy_bdm)</div></pre></td></tr></table></figure></p>
<p>2、compute-api 的处理过程<br>       compute-api的作用是对外提供了管理compute的api接口，外部模块通过这些接口完成对计算资源的操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#*********************************#compute-api下面的create()函数*******************************#  </span></div><div class="line"><span class="meta">    @hooks.add_hook("create_instance")  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, context, instance_type,     #由/nova/api/compute/service.py的套餐id转换到这个type  </span></span></div><div class="line">               image_href, kernel_id=None, ramdisk_id=None,  </div><div class="line">               min_count=None, max_count=None,  </div><div class="line">               display_name=None, display_description=None,  </div><div class="line">               key_name=None, key_data=None, security_group=None,  </div><div class="line">               availability_zone=None, user_data=None, metadata=None,  </div><div class="line">               injected_files=None, admin_password=None,  </div><div class="line">               block_device_mapping=None, access_ip_v4=None,  </div><div class="line">               access_ip_v6=None, requested_networks=None, config_drive=None,  </div><div class="line">               auto_disk_config=None, scheduler_hints=None, legacy_bdm=True):  </div><div class="line">        <span class="string">""" </span></div><div class="line">        Provision instances, sending instance information to the </div><div class="line">        scheduler.  The scheduler will determine where the instance(s) </div><div class="line">        go and will handle creating the DB entries. </div><div class="line">             </div><div class="line">        Returns a tuple of (instances, reservation_id) </div><div class="line">        """  </div><div class="line">        <span class="comment">#policy是nova中一个资格验证机制  </span></div><div class="line">        self._check_create_policies(context, availability_zone,  </div><div class="line">                requested_networks, block_device_mapping)  </div><div class="line">        <span class="comment">#创建一个实例的函数，  </span></div><div class="line">        <span class="keyword">return</span> self._create_instance(  </div><div class="line">                               context, instance_type,  </div><div class="line">                               image_href, kernel_id, ramdisk_id,  </div><div class="line">                               min_count, max_count,  </div><div class="line">                               display_name, display_description,  </div><div class="line">                               key_name, key_data, security_group,  </div><div class="line">                               availability_zone, user_data, metadata,  </div><div class="line">                               injected_files, admin_password,  </div><div class="line">                               access_ip_v4, access_ip_v6,  </div><div class="line">                               requested_networks, config_drive,  </div><div class="line">                               block_device_mapping, auto_disk_config,  </div><div class="line">                               scheduler_hints=scheduler_hints,  </div><div class="line">                               legacy_bdm=legacy_bdm)</div></pre></td></tr></table></figure></p>
<p>我们看下上面的代码：a) 首先进行了能否创建实例的资格验证　　ｂ）再调用了_create_instance（）方法<strong>
</strong><br>3、在_create_instance（）方法中，做的一些操作有，验证各种参数，如意套餐类型instance_type是否存在，租户配额限制检查等，没问题后，commit一下，确定资源的占用。为了简化问题，我大概描述一下该方法做的事情，具体小伙伴们看一下代码就知道了。<br>完成上面的操作后，在_create_instance() 最后调用了 <strong>self.compute_task_api.build_instances(context,*</strong>）方法。</p>
<p><strong>4、我们通过寻找compute_task_api，找到了这个其实conductor.ComputeTaskAPI()的一个对象。</strong><br><em>注：关于conductor的话，我们单独还会再讲，G版中开始添加了这个conductor，以前的版本是没有这个东西的。主要作用是隔离compute对数据库的直接操作。</em><br>我们转到<strong>/nova/conductor/api.py</strong>文件下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建实例的调用  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_instances</span><span class="params">(self, context, instances, image, filter_properties,  </span></span></div><div class="line">            admin_password, injected_files, requested_networks,  </div><div class="line">            security_groups, block_device_mapping, legacy_bdm=True):  </div><div class="line">        self.conductor_compute_rpcapi.build_instances(context,  </div><div class="line">                instances=instances, image=image,  </div><div class="line">                filter_properties=filter_properties,  </div><div class="line">                admin_password=admin_password, injected_files=injected_files,  </div><div class="line">                requested_networks=requested_networks,  </div><div class="line">                security_groups=security_groups,  </div><div class="line">                block_device_mapping=block_device_mapping,  </div><div class="line">                legacy_bdm=legacy_bdm) </div><div class="line">```                </div><div class="line"></div><div class="line"></div><div class="line">通过上述代码，我们看到，compute调用了conductor的API接口，再调用了conductor的RpcAPi接口，转到/nova/conductor/rpcapi.py看如下代码：</div><div class="line">```python</div><div class="line"><span class="comment">#创建虚拟机实例  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_instances</span><span class="params">(self, context, instances, image, filter_properties,  </span></span></div><div class="line">            admin_password, injected_files, requested_networks,  </div><div class="line">            security_groups, block_device_mapping, legacy_bdm=True):  </div><div class="line">        instances_p = [jsonutils.to_primitive(inst) <span class="keyword">for</span> inst <span class="keyword">in</span> instances]  </div><div class="line">        image_p = jsonutils.to_primitive(image)  </div><div class="line">          </div><div class="line">        cctxt = self.client.prepare(version=<span class="string">'1.5'</span>)  </div><div class="line">          </div><div class="line">        cctxt.cast(context, <span class="string">'build_instances'</span>,  </div><div class="line">                   instances=instances_p, image=image_p,  </div><div class="line">                   filter_properties=filter_properties,  </div><div class="line">                   admin_password=admin_password,  </div><div class="line">                   injected_files=injected_files,  </div><div class="line">                   requested_networks=requested_networks,  </div><div class="line">                   security_groups=security_groups,  </div><div class="line">                   block_device_mapping=block_device_mapping,  </div><div class="line">                   legacy_bdm=legacy_bdm)</div></pre></td></tr></table></figure></p>
<p>哈哈，看到了吧，上面的调用给conductor发送了一个rpc消息。根据OpenStack AMQP的rpc消息传递的原理，我们很顺理成章的转到/nova/conductor/manager.py去查看是否在manager.py里面会有”build_instance”方法。找了下，果然有，请看如下代码：<strong>[python]</strong> [view<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_instances</span><span class="params">(self, context, instances, image, filter_properties,  </span></span></div><div class="line">            admin_password, injected_files, requested_networks,  </div><div class="line">            security_groups, block_device_mapping, legacy_bdm=True):  </div><div class="line">          </div><div class="line">        request_spec = scheduler_utils.build_request_spec(context, image,  </div><div class="line">                                                          instances)      </div><div class="line">        request_spec.update(&#123;<span class="string">'block_device_mapping'</span>: block_device_mapping,  </div><div class="line">                             <span class="string">'security_group'</span>: security_groups&#125;)  </div><div class="line">          </div><div class="line">        self.scheduler_rpcapi.run_instance(context, request_spec=request_spec,  </div><div class="line">                admin_password=admin_password, injected_files=injected_files,  </div><div class="line">                requested_networks=requested_networks, is_first_time=<span class="keyword">True</span>,  </div><div class="line">                filter_properties=filter_properties,  </div><div class="line">                legacy_bdm_in_spec=legacy_bdm)</div></pre></td></tr></table></figure></p>
<p>看到最后一行，self.scheduler_rpcapi.run_instance(context,<strong><em>）方法，conductor通过调用Scheduler的rpcapi接口，把请求启动虚拟机的相关信息传递到调度器上。就是从这里开始，相关的工作就被转移到了Scheduler中了(</em>关于具体怎么调度的，会有专门的博文，讲述这个过程,今天只关注，虚拟机实例请求是怎么一步一步建立的*)<br>5、再次转到/nova/scheduler/目录<br>（1）首先看</strong>/nova/shceduler/rpcapi.py**<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_instance</span><span class="params">(self, ctxt, request_spec, admin_password,  </span></span></div><div class="line">            injected_files, requested_networks, is_first_time,  </div><div class="line">            filter_properties, legacy_bdm_in_spec=True):  </div><div class="line">        version = <span class="string">'2.0'</span>  </div><div class="line">          </div><div class="line">        <span class="comment">#制作成msg_kwargs的参数  </span></div><div class="line">        <span class="comment">#消息参数（用户请求，过滤属性等等）  </span></div><div class="line">        msg_kwargs = &#123;<span class="string">'request_spec'</span>: request_spec,  </div><div class="line">                      <span class="string">'admin_password'</span>: admin_password,  </div><div class="line">                      <span class="string">'injected_files'</span>: injected_files,  </div><div class="line">                      <span class="string">'requested_networks'</span>: requested_networks,  </div><div class="line">                      <span class="string">'is_first_time'</span>: is_first_time,  </div><div class="line">                      <span class="string">'filter_properties'</span>: filter_properties&#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> self.client.can_send_version(<span class="string">'2.9'</span>):  </div><div class="line">            version = <span class="string">'2.9'</span>  </div><div class="line">            msg_kwargs[<span class="string">'legacy_bdm_in_spec'</span>] = legacy_bdm_in_spec  </div><div class="line">        cctxt = self.client.prepare(version=version)  </div><div class="line">      </div><div class="line">        <span class="keyword">return</span> cctxt.cast(ctxt, <span class="string">'run_instance'</span>, **msg_kwargs)</div></pre></td></tr></table></figure></p>
<p>继续看到最后一句，Scheduler-rpcpai把消息发送到了Scheduler的manager去处理具体的run_instance()方法。(2) 看到<strong>/nova/scheduler/manager.py</strong><br>找到如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动虚拟机  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_instance</span><span class="params">(self, context, request_spec, admin_password,  </span></span></div><div class="line">            injected_files, requested_networks, is_first_time,  </div><div class="line">            filter_properties, legacy_bdm_in_spec=True):  </div><div class="line">        <span class="string">"""Tries to call schedule_run_instance on the driver. </span></div><div class="line">     </div><div class="line">        Sets instance vm_state to ERROR on exceptions </div><div class="line">        """  </div><div class="line">        instance_uuids = request_spec[<span class="string">'instance_uuids'</span>]  </div><div class="line">        <span class="string">"""Compute-related Utilities and helpers."""</span>  </div><div class="line">        <span class="comment">#compute_utils = utils  </span></div><div class="line">        <span class="comment">#EventReoprt()是一个类  </span></div><div class="line">        <span class="keyword">with</span> compute_utils.EventReporter(context, conductor_api.LocalAPI(),  </div><div class="line">                                         <span class="string">'schedule'</span>, *instance_uuids):  </div><div class="line">            <span class="keyword">try</span>:  </div><div class="line">                   </div><div class="line">                <span class="comment">#调用driver（filter_scheduler.py）中的schedule_run_instance（）  </span></div><div class="line">                <span class="keyword">return</span> self.driver.schedule_run_instance(context,  </div><div class="line">                        request_spec, admin_password, injected_files,  </div><div class="line">                        requested_networks, is_first_time, filter_properties,  </div><div class="line">                        legacy_bdm_in_spec)</div></pre></td></tr></table></figure></p>
<p>上图代码中，driver通过动态读取nova.conf配置文件，我们知道driver = Filter_Scheduler。创建实例调度的时候，我们默认使用的是FilterScheduler类中的<strong>schedule_run_instance()</strong>方法，在该方法中，有如下调用，主要作用是通过_schedule方法，筛选出我们需要已经按照经过（Filters筛选+权重计算）的符合条件的最后weight_hosts列表。—筛选的具体过程，我们以后再看，现在暂不做讨论。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">weighed_hosts = self._schedule(context, request_spec,  </div><div class="line">                                      filter_properties, instance_uuids)  </div><div class="line">```                                   </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">（<span class="number">6</span>）通过调用_provision_resource()方法，在选定的compute节点上运行虚拟机实例。</div><div class="line">```python</div><div class="line"><span class="keyword">try</span>:  </div><div class="line">                    <span class="comment">#默认只要第一个符合条件的主机  </span></div><div class="line">                    <span class="comment">#The best_host  </span></div><div class="line">                    weighed_host = weighed_hosts.pop(<span class="number">0</span>)  </div><div class="line">                    LOG.info(_(<span class="string">"Choosing host %(weighed_host)s "</span>  </div><div class="line">                                <span class="string">"for instance %(instance_uuid)s"</span>),  </div><div class="line">                              &#123;<span class="string">'weighed_host'</span>: weighed_host,  </div><div class="line">                               <span class="string">'instance_uuid'</span>: instance_uuid&#125;)  </div><div class="line">                <span class="keyword">except</span> IndexError:  </div><div class="line">                    <span class="keyword">raise</span> exception.NoValidHost(reason=<span class="string">""</span>)  </div><div class="line">  </div><div class="line">                <span class="comment">#开始分配资源  </span></div><div class="line">                self._provision_resource(context, weighed_host,  </div><div class="line">                                         request_spec,  </div><div class="line">                                         filter_properties,  </div><div class="line">                                         requested_networks,  </div><div class="line">                                         injected_files, admin_password,  </div><div class="line">                                         is_first_time,  </div><div class="line">                                         instance_uuid=instance_uuid,  </div><div class="line">                                         legacy_bdm_in_spec=legacy_bdm_in_spec)</div></pre></td></tr></table></figure></p>
<p>Scheduler通过一系列操作选定了最后的compute节点之后，必然要讲控制权，转移到compute中，所以，又要开始一次rpc调用了，如下面代码所述：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#*************调度完成，开始使用compute-Manager的run_instance()******************#  </span></div><div class="line">            self.compute_rpcapi.run_instance(context,  </div><div class="line">                    instance=updated_instance,  </div><div class="line">                    host=weighed_host.obj.host,  </div><div class="line">                    request_spec=request_spec,  </div><div class="line">                    filter_properties=filter_properties,  </div><div class="line">                    requested_networks=requested_networks,  </div><div class="line">                    injected_files=injected_files,  </div><div class="line">                    admin_password=admin_password, is_first_time=is_first_time,  </div><div class="line">                    node=weighed_host.obj.nodename,  </div><div class="line">                    legacy_bdm_in_spec=legacy_bdm_in_spec)  </div><div class="line"><span class="comment">#*************调度完成，开始使用compute-Manager的run_instance()********************#</span></div></pre></td></tr></table></figure></p>
<p>(7) 控制权转移，我们需要看/nova/compute目录了，因为前面已经讲过，rpc过来的消息，最后会经过compute-manager处理，所以，我们直接看/nova/compute/compute.py下面的run_instance()方法，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_instance</span><span class="params">(self, context, instance, request_spec=None,  </span></span></div><div class="line">                     filter_properties=None, requested_networks=None,  </div><div class="line">                     injected_files=None, admin_password=None,  </div><div class="line">                     is_first_time=False, node=None, legacy_bdm_in_spec=True):  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> filter_properties <span class="keyword">is</span> <span class="keyword">None</span>:  </div><div class="line">            filter_properties = &#123;&#125;  </div><div class="line"> </div><div class="line"><span class="meta">        @utils.synchronized(instance['uuid'])  </span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_run_instance</span><span class="params">()</span>:</span>  </div><div class="line">            self._run_instance(context, request_spec,  </div><div class="line">                    filter_properties, requested_networks, injected_files,  </div><div class="line">                    admin_password, is_first_time, node, instance,  </div><div class="line">                    legacy_bdm_in_spec)  </div><div class="line">        do_run_instance()</div></pre></td></tr></table></figure></p>
<p>至此，再经过compute内部一些操作，一个实例就创建完成了，具体细节不再讨论。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[openstack 中的Routes + webob 的 REST API]]></title>
      <url>http://yoursite.com/2014/11/12/2014-11-12-openstack%20%E4%B8%AD%E7%9A%84Routes%20+%20webob%20%E7%9A%84%20REST%20API/</url>
      <content type="html"><![CDATA[<p>首先贴一段代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> routes <span class="keyword">import</span> Mapper</div><div class="line"><span class="keyword">import</span> webob.dec</div><div class="line"><span class="keyword">import</span> webob.exc</div><div class="line"><span class="keyword">import</span> routes.middleware</div><div class="line"><span class="keyword">import</span> testtools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyController</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getlist</span><span class="params">(self, mykey)</span>:</span></div><div class="line">        print(<span class="string">"step 4: MyController's getlist(self, mykey) is invoked"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"getlist(), mykey="</span> + mykey</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Test application to call from router."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, controller)</span>:</span></div><div class="line">        self._controller = controller</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        print(<span class="string">"step 3: MyApplication is invoked"</span>)</div><div class="line">        </div><div class="line">        action_args = environ[<span class="string">'wsgiorg.routing_args'</span>][<span class="number">1</span>].copy()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">del</span> action_args[<span class="string">'controller'</span>]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">del</span> action_args[<span class="string">'format'</span>]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        </div><div class="line">        action = action_args.pop(<span class="string">'action'</span>, <span class="keyword">None</span>)</div><div class="line">        controller_method = getattr(self._controller, action)</div><div class="line">        result = controller_method(**action_args)</div><div class="line">        </div><div class="line">        start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</div><div class="line">        <span class="keyword">return</span> [result]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRouter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Test router."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        route_name = <span class="string">"dummy_route"</span></div><div class="line">        route_path = <span class="string">"/dummies"</span></div><div class="line">        </div><div class="line">        my_application = MyApplication(MyController()) </div><div class="line">        </div><div class="line">        self.mapper = Mapper()</div><div class="line">        self.mapper.connect(route_name, route_path,</div><div class="line">                        controller=my_application,</div><div class="line">                        action=<span class="string">"getlist"</span>,</div><div class="line">                        mykey=<span class="string">"myvalue"</span>,</div><div class="line">                        conditions=&#123;<span class="string">"method"</span>: [<span class="string">'GET'</span>]&#125;)</div><div class="line">        </div><div class="line">        </div><div class="line">        self._router = routes.middleware.RoutesMiddleware(self._dispatch,</div><div class="line">                                                          self.mapper)</div><div class="line"></div><div class="line"><span class="meta">    @webob.dec.wsgify(RequestClass=webob.Request)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, req)</span>:</span></div><div class="line">        <span class="string">"""Route the incoming request to a controller based on self.map.</span></div><div class="line"></div><div class="line">        If no match, return a 404.</div><div class="line"></div><div class="line">        """</div><div class="line">        print(<span class="string">"step 1: MyRouter is invoked"</span>)</div><div class="line">        <span class="keyword">return</span> self._router</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line"><span class="meta">    @webob.dec.wsgify(RequestClass=webob.Request)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dispatch</span><span class="params">(req)</span>:</span></div><div class="line">        <span class="string">"""Dispatch the request to the appropriate controller.</span></div><div class="line"></div><div class="line">        Called by self._router after matching the incoming request to a route</div><div class="line">        and putting the information into req.environ.  Either returns 404</div><div class="line">        or the routed WSGI app's response.</div><div class="line"></div><div class="line">        """</div><div class="line">        print(<span class="string">"step 2: RoutesMiddleware is invoked, calling our _dispatch back"</span>)</div><div class="line">        </div><div class="line">        match_dict = req.environ[<span class="string">'wsgiorg.routing_args'</span>][<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match_dict:</div><div class="line">            <span class="keyword">return</span> webob.exc.HTTPNotFound()</div><div class="line">        app = match_dict[<span class="string">'controller'</span>]</div><div class="line">        <span class="keyword">return</span> app</div><div class="line">        </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoutingTestCase</span><span class="params">(testtools.TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_router</span><span class="params">(self)</span>:</span></div><div class="line">        router = MyRouter()</div><div class="line">        result = webob.Request.blank(<span class="string">'/dummies'</span>).get_response(router)</div><div class="line">        self.assertEqual(result.body, <span class="string">"getlist(), mykey=myvalue"</span>)</div></pre></td></tr></table></figure>
<p>然后见<a href="http://blog.csdn.net/spch2008/article/details/9004926" target="_blank" rel="external">博客</a>中有较为详细的理解，但是要深入的话还是需要深入阅读文档</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python  中的@]]></title>
      <url>http://yoursite.com/2014/11/12/2014-11-12-Python%20%20%E4%B8%AD%E7%9A%84@/</url>
      <content type="html"><![CDATA[<p>1 Decorators<br> for Functions and Methods<br>见<a href="http://legacy.python.org/dev/peps/pep-0318/" target="_blank" rel="external">点击打开链接</a><br>2 @property<br>可以将python定义的函数“当做”属性访问，从而提供更加友好访问方式</p>
<p>见<a href="http://joy2everyone.iteye.com/blog/910950" target="_blank" rel="external">点击打开链接</a><br>3.@classmethod<br>定义类方法<br>见<a href="http://xuqingkuang.is-programmer.com/2009/3/6/python-technique-classmethod-decorator.7404.html" target="_blank" rel="external">点击打开链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Openstack笔记一]]></title>
      <url>http://yoursite.com/2014/08/21/2014-08-21-Openstack%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<ol>
<li><p>DashBoard<br>setenforce 0</p>
</li>
<li><p>Docker<br>1）相关的Github网址：<a href="https://github.com/stackforge/nova-docker" target="_blank" rel="external">nova-docker</a><br>2）需要安装Dokcer：<a href="https://docs.docker.com/installation/centos/" target="_blank" rel="external">centos-docker</a><br>3)  保证Docker镜像的名称与Glance中镜像的名称一致<br>4）保证Docker在Centos中可以独立加载使用镜像<br>5）/etc/sysconfig/docker 中添加other_args=“–exec-driver=lxc –selinux-enabled”</p>
</li>
<li><p>Cinder(未测试在Docker中的使用)<br>1）在cinder.conf中iscsi_helper=tgtdadm</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.73-练习2.74]]></title>
      <url>http://yoursite.com/2014/02/07/2014-02-07-%E7%BB%83%E4%B9%A02.73-%E7%BB%83%E4%B9%A02.74/</url>
      <content type="html"><![CDATA[<p>1.练习2.73<br>a<br>没有必要<br>b</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (insert-sum-proc)</div><div class="line">  (define (deriv-sum exp var)</div><div class="line">    (make-sum (deriv (car exp) var)</div><div class="line">              (deriv (cadr exp) var)))</div><div class="line">  (put &apos;deriv &apos;+ deriv-sum)</div><div class="line">  &apos;done)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(define (insert-mult-proc)</div><div class="line">  (define (deriv-mult exp var)</div><div class="line">    (make-sum</div><div class="line">     (make-product (car exp)</div><div class="line">                   (deriv (cadr exp) var))</div><div class="line">     (make-product (deriv (car exp) var)</div><div class="line">                   (cadr exp))))</div><div class="line">  (put &apos;deriv &apos;* deriv-mult)</div><div class="line">  &apos;done)</div></pre></td></tr></table></figure>
<p>cd<br>改变put和get的顺序<br>2.练习2.74<br>a</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">;;提供分支机构的名称，即brcanch</div><div class="line">(define (get-record branch name)</div><div class="line">  (cond ((null? branch) false)</div><div class="line">        ((null? name) false)</div><div class="line">        (else ((get &apos;get-record branch) name))))</div></pre></td></tr></table></figure>
<p>b</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">;;提供分支机构的名称,即brcanch</div><div class="line">(define (get-salary branch name)</div><div class="line">  (cond ((null? branch) false)</div><div class="line">        ((null? name) false)</div><div class="line">        (else ((get &apos;get-salary branch) name))))</div></pre></td></tr></table></figure>
<p>c</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (find-employee-record name branchs)</div><div class="line">  (if (null? branchs)</div><div class="line">      false</div><div class="line">      (let ((record ((get &apos;get-record (branch-name (car branchs))) name)))</div><div class="line">        (if (null? record)</div><div class="line">            (find-employee-record name (cdr branchs))</div><div class="line">            record))))</div></pre></td></tr></table></figure>
<p>d将新人事的方法注册到表中，即put进去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.53-练习2.56]]></title>
      <url>http://yoursite.com/2014/01/23/2014-01-23-%E7%BB%83%E4%B9%A02.53-%E7%BB%83%E4%B9%A02.56/</url>
      <content type="html"><![CDATA[<p>1.练习2.53</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&apos;(a b c)</div><div class="line">&apos;((george))</div><div class="line">&apos;((y1 y2))</div><div class="line">&apos;(y1 y2)</div><div class="line">#f</div><div class="line">#f</div><div class="line">&apos;(red shoes blue socks)</div></pre></td></tr></table></figure>
<p>2.练习2.54</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(define (equal? s1 s2)</div><div class="line">    (cond ((and (null? s1) (null? s2)) true)</div><div class="line">          ((or (null? s1) (null? s2)) false)</div><div class="line">          (else (let ((per-s1 (car s1))</div><div class="line">                      (per-s2 (car s2))</div><div class="line">                      (rest-s1 (cdr s1))</div><div class="line">                      (rest-s2 (cdr s2)))</div><div class="line">                  (cond ((and (not (pair? per-s1))</div><div class="line">                              (not (pair? per-s2)))</div><div class="line">                         (and true </div><div class="line">                              (equal? rest-s1 rest-s2)))</div><div class="line">                        ((and (pair? per-s1) </div><div class="line">                              (pair? per-s2))</div><div class="line">                         (and (equal? per-s1 per-s2)</div><div class="line">                              (equal? rest-s1 rest-s2)))</div><div class="line">                        (else false))))))</div></pre></td></tr></table></figure>
<p>3.练习2.55<br>4.练习2.56</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(define (exponentiation? x)</div><div class="line">  (and (pair? x) (eq? (car x) &apos;**)))</div><div class="line"></div><div class="line">(define (base x)</div><div class="line">  (cadr x))</div><div class="line"></div><div class="line">(define (exponent x)</div><div class="line">  (caddr x))</div><div class="line"></div><div class="line">(define (make-exponentiation base exp)</div><div class="line">  (cond ((=number? exp 0) 1)</div><div class="line">        ((=number? exp 1) base)</div><div class="line">        ((=number? base 1) base)</div><div class="line">        (else (list &apos;** base exp))))</div></pre></td></tr></table></figure>
<p>5.练习2.57</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(define (sum? x)</div><div class="line">  (and (pair? x) (eq? (car x) &apos;+)))</div><div class="line"></div><div class="line">(define (addend s)</div><div class="line">  (cadr s))</div><div class="line"></div><div class="line">(define (augend s)</div><div class="line">  (if (null? (cdddr s))</div><div class="line">      (caddr s)</div><div class="line">      (cons &apos;+ (cddr s))))</div><div class="line"></div><div class="line">(define (product? x)</div><div class="line">  (and (pair? x) (eq? (car x) &apos;*)))</div><div class="line"></div><div class="line">(define (multiplier p) (cadr p))</div><div class="line"></div><div class="line">(define (multiplicand p)</div><div class="line">  (if (null? (cdddr p))</div><div class="line">      (caddr p)</div><div class="line">      (cons &apos;* (cddr p))))</div></pre></td></tr></table></figure>
<p>6.练习2.58A.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(define (sum? x)</div><div class="line">  (and (pair? x) (eq? (cadr x) &apos;+)))</div><div class="line"></div><div class="line">(define (addend s)</div><div class="line">  (car s))</div><div class="line"></div><div class="line">(define (augend s)</div><div class="line">  (caddr s))</div><div class="line"></div><div class="line">(define (product? x)</div><div class="line">  (and (pair? x) (eq? (cadr x) &apos;*)))</div><div class="line"></div><div class="line">(define (multiplier p) (car p))</div><div class="line"></div><div class="line">(define (multiplicand p) (caddr p))</div></pre></td></tr></table></figure>
<p>B.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">(define (sum? x)</div><div class="line">  (if (null? x)</div><div class="line">      false</div><div class="line">      (or (eq? (car x) &apos;+) (sum? (cdr x)))))</div><div class="line"></div><div class="line">(define (addend s)</div><div class="line">  (define (addend-iter result s1)</div><div class="line">    (if (eq? (car s1) &apos;+) </div><div class="line">        result</div><div class="line">        (addend-iter (append result (list (car s1))) (cdr s1))))</div><div class="line">  (let ((res (addend-iter &apos;() s)))</div><div class="line">    (if (= (length res) 1)</div><div class="line">        (car res)</div><div class="line">        res)))</div><div class="line">    </div><div class="line"></div><div class="line">(define (augend s)</div><div class="line">  (define (augend-iter s1)</div><div class="line">    (if (eq? (car s1) &apos;+)</div><div class="line">        (cdr s1)</div><div class="line">        (augend-iter (cdr s1))))</div><div class="line">  (let ((res (augend-iter s)))</div><div class="line">    (if (= (length res) 1)</div><div class="line">        (car res)</div><div class="line">        res)))</div><div class="line"></div><div class="line">(define (product? x)</div><div class="line">  (if (null? x)</div><div class="line">      false</div><div class="line">      (if (eq? (car x) &apos;+)</div><div class="line">          false</div><div class="line">          (or (not (eq? (car x) &apos;*))(product? (cdr x))))))</div><div class="line"></div><div class="line">(define (multiplier p)</div><div class="line">  (define (multiplier-iter result p1)</div><div class="line">    (if (eq? (car p1) &apos;*)</div><div class="line">        result</div><div class="line">        (multiplier-iter (append result (list (car p1))) (cdr p1))))</div><div class="line">  (let ((res (multiplier-iter &apos;() p)))</div><div class="line">    (if (= (length res) 1)</div><div class="line">        (car res)</div><div class="line">        res)))</div><div class="line"></div><div class="line">(define (multiplicand p)</div><div class="line">  (define (last-part p2)</div><div class="line">            (if (eq? (car p2) &apos;*)</div><div class="line">                (cdr p2)</div><div class="line">                (last-part (cdr p2))))</div><div class="line">  (let ((res (last-part p)))</div><div class="line">    (if (= (length res) 1)</div><div class="line">        (car res)</div><div class="line">        res)))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.48-练习2.51]]></title>
      <url>http://yoursite.com/2014/01/22/2014-01-22-%E7%BB%83%E4%B9%A02.48-%E7%BB%83%E4%B9%A02.51/</url>
      <content type="html"><![CDATA[<p>1.练习2.48</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (make-segment start end)</div><div class="line">  (cons start end))</div><div class="line"></div><div class="line">(define (start-segment seg)</div><div class="line">  (car seg))</div><div class="line"></div><div class="line">(define (end-segment seg)</div><div class="line">  (cdr seg))</div></pre></td></tr></table></figure>
<p>2.练习2.49</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">(require (planet &quot;sicp.ss&quot; (&quot;soegaard&quot; &quot;sicp.plt&quot; 2 1)))</div><div class="line"> </div><div class="line">(define one 1.0)</div><div class="line"> </div><div class="line">(define origin (make-vect 0 0))</div><div class="line"> </div><div class="line">(define lower-right (make-vect one 0))</div><div class="line"> </div><div class="line">(define upper-left (make-vect 0 one))</div><div class="line"> </div><div class="line">(define upper-right (make-vect one one))</div><div class="line"></div><div class="line">(define (outline frame)</div><div class="line">  ((segments-&gt;painter (list (make-segment origin lower-right)</div><div class="line">                            (make-segment lower-right upper-right)</div><div class="line">                            (make-segment upper-right upper-left)</div><div class="line">                            (make-segment upper-left origin)))</div><div class="line">   frame))</div><div class="line"></div><div class="line">(define seg1 (make-segment origin upper-right))</div><div class="line"></div><div class="line">(define seg2 (make-segment upper-left lower-right))</div><div class="line"></div><div class="line"></div><div class="line">(define (diamond frame)</div><div class="line">  ((segments-&gt;painter (list (make-segment (make-vect 0 0.5) (make-vect 0.5 0))</div><div class="line">                            (make-segment (make-vect 0.5 0) (make-vect 0.99 0.5))</div><div class="line">                            (make-segment (make-vect 0.99 0.5) (make-vect 0.5 0.99))</div><div class="line">                            (make-segment (make-vect 0.5 0.99) (make-vect 0 0.5))))</div><div class="line">   frame))</div><div class="line">(define (wave frame)</div><div class="line">  ((segments-&gt;painter (list</div><div class="line">                      (make-segment (make-vect 0.4 1.0)      ; 头部左上</div><div class="line">                                    (make-vect 0.35 0.85))</div><div class="line">                      (make-segment (make-vect 0.35 0.85)    ; 头部左下</div><div class="line">                                    (make-vect 0.4 0.64))</div><div class="line">                      (make-segment (make-vect 0.4 0.65)     ; 左肩</div><div class="line">                                    (make-vect 0.25 0.65))</div><div class="line">                      (make-segment (make-vect 0.25 0.65)    ; 左手臂上部</div><div class="line">                                    (make-vect 0.15 0.6))</div><div class="line">                      (make-segment (make-vect 0.15 0.6)     ; 左手上部</div><div class="line">                                    (make-vect 0.0 0.85))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.0 0.65)     ; 左手下部</div><div class="line">                                    (make-vect 0.15 0.35))</div><div class="line">                      (make-segment (make-vect 0.15 0.35)    ; 左手臂下部</div><div class="line">                                    (make-vect 0.25 0.6))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.25 0.6)     ; 左边身体</div><div class="line">                                    (make-vect 0.35 0.5))</div><div class="line">                      (make-segment (make-vect 0.35 0.5)     ; 左腿外侧</div><div class="line">                                    (make-vect 0.25 0.0))</div><div class="line">                      (make-segment (make-vect 0.6 1.0)      ; 头部右上</div><div class="line">                                    (make-vect 0.65 0.85))</div><div class="line">                      (make-segment (make-vect 0.65 0.85)    ; 头部右下</div><div class="line">                                    (make-vect 0.6 0.65))</div><div class="line">                      (make-segment (make-vect 0.6 0.65)     ; 右肩</div><div class="line">                                    (make-vect 0.75 0.65))</div><div class="line">                      (make-segment (make-vect 0.75 0.65)    ; 右手上部</div><div class="line">                                    (make-vect 1.0 0.3))</div><div class="line"></div><div class="line">                      (make-segment (make-vect 1.0 0.15)     ; 右手下部</div><div class="line">                                    (make-vect 0.6 0.5))</div><div class="line">                      (make-segment (make-vect 0.6 0.5)      ; 右腿外侧</div><div class="line">                                    (make-vect 0.75 0.0))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.4 0.0)      ; 左腿内侧</div><div class="line">                                    (make-vect 0.5 0.3))</div><div class="line">                      (make-segment (make-vect 0.6 0.0)      ; 右腿内侧</div><div class="line">                                    (make-vect 0.5 0.3)))</div><div class="line">                     )</div><div class="line">   frame))</div></pre></td></tr></table></figure>
<p>3.练习2.50</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(define (flip-horiz-my painter)</div><div class="line">  ((transform-painter (make-vect 1.0 0.0)</div><div class="line">                      (make-vect 0.0 0.0)</div><div class="line">                      (make-vect 1.0 1.0))</div><div class="line">   painter))</div><div class="line"></div><div class="line">(define (contrarotate180 painter)</div><div class="line">  ((transform-painter (make-vect 1.0 1.0)</div><div class="line">                      (make-vect 0.0 1.0)</div><div class="line">                      (make-vect 1.0 0.0))</div><div class="line">   painter))</div><div class="line"></div><div class="line"></div><div class="line">(define (contrarotate270 painter)</div><div class="line">  ((transform-painter (make-vect 0.0 1.0)</div><div class="line">                      (make-vect 0.0 0.0)</div><div class="line">                      (make-vect 1.0 1.0))</div><div class="line">   painter))</div></pre></td></tr></table></figure>
<p>4.练习2.51</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(define (below-my painter1 painter2)</div><div class="line">  (let ((split-point (make-vect 0.0 0.5)))</div><div class="line">    (let ((paint-up </div><div class="line">           ((transform-painter (make-vect 0.0 0.0)</div><div class="line">                               (make-vect 1.0 0.0)</div><div class="line">                               split-point)</div><div class="line">             painter1))</div><div class="line">          (paint-down</div><div class="line">           ((transform-painter split-point</div><div class="line">                              (make-vect 1.0 0.5)</div><div class="line">                              (make-vect 0.0 1.0))</div><div class="line">            painter2)))</div><div class="line">    (lambda (frame)</div><div class="line">      (paint-up frame)</div><div class="line">      (paint-down frame)))))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">(paint (below-my einstein einstein))</div><div class="line"></div><div class="line">(paint (rotate90 (beside (rotate270 einstein) (rotate270 einstein))))</div></pre></td></tr></table></figure>
<p>5.练习2.52</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">(define (wave frame)</div><div class="line">  ((segments-&gt;painter (list</div><div class="line">                      (make-segment (make-vect 0.4 1.0)      ; 头部左上</div><div class="line">                                    (make-vect 0.35 0.85))</div><div class="line">                      (make-segment (make-vect 0.35 0.85)    ; 头部左下</div><div class="line">                                    (make-vect 0.4 0.64))</div><div class="line">                      (make-segment (make-vect 0.4 0.65)     ; 左肩</div><div class="line">                                    (make-vect 0.25 0.65))</div><div class="line">                      (make-segment (make-vect 0.25 0.65)    ; 左手臂上部</div><div class="line">                                    (make-vect 0.15 0.6))</div><div class="line">                      (make-segment (make-vect 0.15 0.6)     ; 左手上部</div><div class="line">                                    (make-vect 0.0 0.85))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.0 0.65)     ; 左手下部</div><div class="line">                                    (make-vect 0.15 0.35))</div><div class="line">                      (make-segment (make-vect 0.15 0.35)    ; 左手臂下部</div><div class="line">                                    (make-vect 0.25 0.6))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.25 0.6)     ; 左边身体</div><div class="line">                                    (make-vect 0.35 0.5))</div><div class="line">                      (make-segment (make-vect 0.35 0.5)     ; 左腿外侧</div><div class="line">                                    (make-vect 0.25 0.0))</div><div class="line">                      (make-segment (make-vect 0.6 1.0)      ; 头部右上</div><div class="line">                                    (make-vect 0.65 0.85))</div><div class="line">                      (make-segment (make-vect 0.65 0.85)    ; 头部右下</div><div class="line">                                    (make-vect 0.6 0.65))</div><div class="line">                      (make-segment (make-vect 0.6 0.65)     ; 右肩</div><div class="line">                                    (make-vect 0.75 0.65))</div><div class="line">                      (make-segment (make-vect 0.75 0.65)    ; 右手上部</div><div class="line">                                    (make-vect 1.0 0.3))</div><div class="line"></div><div class="line">                      (make-segment (make-vect 1.0 0.15)     ; 右手下部</div><div class="line">                                    (make-vect 0.6 0.5))</div><div class="line">                      (make-segment (make-vect 0.6 0.5)      ; 右腿外侧</div><div class="line">                                    (make-vect 0.75 0.0))</div><div class="line">                      </div><div class="line">                      (make-segment (make-vect 0.4 0.0)      ; 左腿内侧</div><div class="line">                                    (make-vect 0.5 0.3))</div><div class="line">                      (make-segment (make-vect 0.6 0.0)      ; 右腿内侧</div><div class="line">                                    (make-vect 0.5 0.3))</div><div class="line">                      (make-segment (make-vect 0.5 0.75)      ; 笑脸左</div><div class="line">                                    (make-vect 0.45 0.8))</div><div class="line">                      (make-segment (make-vect 0.5 0.75)      ; 笑脸右</div><div class="line">                                    (make-vect 0.55 0.8)))</div><div class="line">                     )</div><div class="line">   frame))</div><div class="line"></div><div class="line">(define (up-split painter n)</div><div class="line">  (if (= n 0)</div><div class="line">      painter</div><div class="line">      (let ((smaller (up-split painter (- n 1))))</div><div class="line">        (below painter (below smaller smaller)))))</div><div class="line"></div><div class="line">(define (right-split painter n)</div><div class="line">  (if (= n 0)</div><div class="line">      painter</div><div class="line">      (let ((smaller (right-split painter (- n 1))))</div><div class="line">        (beside painter (below smaller smaller)))))</div><div class="line"></div><div class="line"></div><div class="line">(define (beside-same-painter painter)</div><div class="line">  (beside painter painter))</div><div class="line"></div><div class="line">(define (below-same-painter painter)</div><div class="line">  (below painter painter))</div><div class="line"></div><div class="line">(define (corner-split painter n)</div><div class="line">  (if (= n 0)</div><div class="line">      painter</div><div class="line">      (let ((up (up-split painter (- n 1)))</div><div class="line">            (right (right-split painter (- n 1))))</div><div class="line">        (let ((top-left (beside-same-painter up))</div><div class="line">              (bottom-right (below-same-painter right))</div><div class="line">              (corner (corner-split painter (- n 1))))</div><div class="line">          (beside (below painter top-left)</div><div class="line">                  (below bottom-right corner))))))</div><div class="line"></div><div class="line">(define (square-list painter n)</div><div class="line">  (let ((quarter (corner-split (flip-horiz painter) n)))</div><div class="line">    (let ((half (beside (flip-horiz quarter) quarter)))</div><div class="line">      (below (flip-vert half) half))))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.21-练习2.35]]></title>
      <url>http://yoursite.com/2014/01/20/2014-01-20-%E7%BB%83%E4%B9%A02.21-%E7%BB%83%E4%B9%A02.35/</url>
      <content type="html"><![CDATA[<p>1.练习2.21</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (square-list items)</div><div class="line">  (if (null? items)</div><div class="line">      &apos;()</div><div class="line">      (cons (square (car items)) (square-list (cdr items)))))</div><div class="line"></div><div class="line">(define (square-list items)</div><div class="line">  (map (lambda (x) (square x)) items))</div></pre></td></tr></table></figure>
<p>2.练习2.22<br>3.练习2.23</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (for-each f items)</div><div class="line">  (define (iter f items)</div><div class="line">    (if (null? items)</div><div class="line">	true</div><div class="line">	(begin</div><div class="line">	  (f (car items))</div><div class="line">	  (iter f (cdr items)))))</div><div class="line">  (iter f items))</div></pre></td></tr></table></figure>
<p>4.练习2.24<br>5.练习2.25</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9))))))</div><div class="line"></div><div class="line">(car (car (list (list 7))))</div><div class="line"></div><div class="line">(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7))))))))))))))))))</div></pre></td></tr></table></figure>
<p>6.练习2.26</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1 2 3 4 5 6)</div><div class="line">((1 2 3) 4 5 6)</div><div class="line">((1 2 3) ( 4 5 6))</div></pre></td></tr></table></figure>
<p>7.练习2.27</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(define (deep-reverse items)</div><div class="line">  (define (reverse-iter tmpitems result)</div><div class="line">    (if (null? tmpitems)</div><div class="line">	result</div><div class="line">	(reverse-iter (cdr tmpitems)</div><div class="line">		      (cons (if (number? (car tmpitems))</div><div class="line">				(car tmpitems)</div><div class="line">				(reverse-iter (car tmpitems) &apos;()))</div><div class="line">			    result))))</div><div class="line">  (reverse-iter items &apos;()))</div></pre></td></tr></table></figure>
<p>8.练习2.28</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (fringe trees)</div><div class="line">  (cond ((null? trees) &apos;())</div><div class="line">	((not (pair? trees)) (list trees))</div><div class="line">	(else (append (fringe (car trees)) (fringe (cdr trees))))))</div></pre></td></tr></table></figure>
<p>9.练习2.29</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">(define (make-mobile left right)</div><div class="line">  (list left right))</div><div class="line"></div><div class="line">(define (make-branch length structure)</div><div class="line">  (list length structure))</div><div class="line"></div><div class="line">(define (left-branch _mobile)</div><div class="line">  (car _mobile))</div><div class="line"></div><div class="line">(define (right-branch _mobile)</div><div class="line">  (car (cdr _mobile)))</div><div class="line"></div><div class="line">(define (branch-length _branch)</div><div class="line">  (car _branch))</div><div class="line"></div><div class="line">(define (branch-structure _branch)</div><div class="line">  (car (cdr _branch)))</div><div class="line"></div><div class="line">(define (total-weigh _mobile)</div><div class="line">  (if (not (pair? _mobile))</div><div class="line">      _mobile</div><div class="line">      (+ (total-weigh (branch-structure (left-branch _mobile)))</div><div class="line">	 (total-weigh (branch-structure (right-branch _mobile))))))</div><div class="line"></div><div class="line">(define (balance-weight _mobile)</div><div class="line">  (define (iter _mobile result)</div><div class="line">    (if (not (pair? _mobile))</div><div class="line">      true</div><div class="line">      (and result</div><div class="line">	   (= (* (branch-length (left-branch _mobile))</div><div class="line">		 (total-weigh (branch-structure (left-branch _mobile))))</div><div class="line">	      (* (branch-length (right-branch _mobile))</div><div class="line">		 (total-weigh (branch-structure (right-branch _mobile)))))</div><div class="line">	   (balance-weight (branch-structure (left-branch _mobile)))</div><div class="line">	   (balance-weight (branch-structure (right-branch _mobile))))))</div><div class="line">  (iter _mobile true))</div></pre></td></tr></table></figure>
<p>10.练习2.30</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(define (square-tree tree)</div><div class="line">  (cond ((null? tree) &apos;())</div><div class="line">	((not (pair? tree)) (square tree))</div><div class="line">	(else (cons (square-tree (car tree))</div><div class="line">		    (square-tree (cdr tree))))))</div><div class="line"></div><div class="line">(define (square-tree tree)</div><div class="line">  (map (lambda (sub-tree)</div><div class="line">	 (if (pair? sub-tree)</div><div class="line">	     (square-tree sub-tree)</div><div class="line">	     (square sub-tree)))</div><div class="line">       tree))</div></pre></td></tr></table></figure>
<p>11.练习2.31</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (tree-map f tree)</div><div class="line">  (map (lambda (sub-tree)</div><div class="line">	 (if (pair? sub-tree)</div><div class="line">	     (tree-map f sub-tree)</div><div class="line">	     (f sub-tree)))</div><div class="line">       tree))</div></pre></td></tr></table></figure>
<p>12.练习2.32</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```plain</div><div class="line">(define (subsets s)</div><div class="line">  (if (null? s)</div><div class="line">      (list &apos;())</div><div class="line">      (let ((rest (subsets (cdr s))))</div><div class="line">	(append rest (map (lambda (x) (cons (car s) x)) rest)))))</div></pre></td></tr></table></figure>
<p>13.练习2.33</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(define (map p sequence)</div><div class="line">  (accumulate (lambda (x y)</div><div class="line">		(cons (p x) y))</div><div class="line">	      &apos;()</div><div class="line">	      sequence))</div><div class="line"></div><div class="line">(define (append seq1 seq2)</div><div class="line">  (accumulate cons seq2 seq1))</div><div class="line"></div><div class="line">(define (length sequence)</div><div class="line">  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))</div></pre></td></tr></table></figure>
<p>14.练习2.34</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (horner-eval x coefficient-sequence)</div><div class="line">  (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* x higher-terms)))</div><div class="line">	      0</div><div class="line">	      coefficient-sequence))</div></pre></td></tr></table></figure>
<p>15.练习2.35</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(define (count-leaves tree)</div><div class="line">    (accumulate +</div><div class="line">                0</div><div class="line">                (map (lambda (sub-tree)</div><div class="line">                         (if (pair? sub-tree)        </div><div class="line">                             (count-leaves sub-tree)   </div><div class="line">                             1))                        </div><div class="line">                     tree)))</div><div class="line"></div><div class="line">(define (count-leaves t)</div><div class="line">  (accumulate (lambda (x y) (if (not (pair? x))</div><div class="line">				(+ x y)</div><div class="line">				(+ (count-leaves x)</div><div class="line">				   y)))</div><div class="line">	      0</div><div class="line">	      (map (lambda (x) (if (not (pair? x))</div><div class="line">				   1</div><div class="line">				   x))</div><div class="line">		   (append (filter (lambda (x) (pair? x)) t)</div><div class="line">			   (filter (lambda (x) (not (pair? x))) t)))))</div></pre></td></tr></table></figure>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.23-练习1.30]]></title>
      <url>http://yoursite.com/2014/01/20/2014-01-20-%E7%BB%83%E4%B9%A01.23-%E7%BB%83%E4%B9%A01.30/</url>
      <content type="html"><![CDATA[<p>1.练习1.23<br>改后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(define (find-divisor-better n a)</div><div class="line">  (cond ((&gt; (square a) n) n)</div><div class="line">	((divides?-better n a) a)</div><div class="line">	(else (find-divisor-better n (next-2 a)))))</div><div class="line"></div><div class="line">(define (next-2 n)</div><div class="line">  (if (= 2 n)</div><div class="line">      (+ 1 n)</div><div class="line">      (+ 2 n)))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (find-min-prime-since-better n start-time number)</div><div class="line">  (cond ((= number 0) (display-info start-time (real-time-clock)))</div><div class="line">	((prime? n) (begin</div><div class="line">		      (format #t &quot;~S~%&quot; n)</div><div class="line">		      (find-min-prime-since-better (+ n (next-plus n)) start-time (- number 1))))</div><div class="line">	(else (find-min-prime-since-better (+ n (next-plus n)) start-time number)))</div><div class="line">  #f)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (next-plus n)</div><div class="line">  (if (even? n)</div><div class="line">      1</div><div class="line">      2))</div></pre></td></tr></table></figure>
<p>电脑跑这些代码的时候，没有固定的运行时间，一直在变。不过结果是改后的基本是没改前的0.5，也可能0.6左右。<br>2.练习1.24<br>代码就不贴出来了，只是将上一题中的判断是否为素数的方法改为费马方法。<br>在检测接近1000000的素数和接近1000的素数时，接近1000000的素数在时间上应该为(log1000000)=6应该大于接近1000的3的素数检查，比值为2:1，实验中计算从1000和1000000开始的1000个素数，1000开始的时间为695，而从1000000开始的时间为1470，比值接近于1:2， 与假设基本相同。<br>但是在<a href="http://www.codesky.net/article/200501/54364.html" target="_blank" rel="external">帖子</a>，那我猜，可能是64位和32位的不同了。<br>3.练习1.25<br>先求次方的结果会导致一个很大的数求余数，这样的时间消耗会很大。<br>4.练习1.26<br>不使用square的结果是每次减半的expmod操作没有了简版的效果，所以时间复杂度会变回O(n) 。<br>5.练习1.27</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(define (try-it a n)</div><div class="line">    (= (expmod a n n) a))</div><div class="line"></div><div class="line">(define (carmichael-test n number)</div><div class="line">  (cond ((= number 0) true)</div><div class="line">	((try-it number n) (carmichael-test n (- number 1)))</div><div class="line">	(else false)))</div><div class="line"></div><div class="line">(define (car-prime? n)</div><div class="line">  (carmichael-text n (- n 1)))</div></pre></td></tr></table></figure>
<p>6.练习1.28</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(define (new-expmod base exp m)</div><div class="line">  (define tmpbase 100)</div><div class="line">  (cond ((= exp 0) 1)</div><div class="line">	((even? exp) (begin</div><div class="line">		      (set! tmpbase (new-expmod base (/ exp 2) m))</div><div class="line">		      (if (and (not (= tmpbase (- m 1)))</div><div class="line">			       (not (= tmpbase 1))</div><div class="line">			       (= (remainder (square tmpbase)</div><div class="line">					       m) 1))</div><div class="line">			   0</div><div class="line">			   (remainder (square tmpbase)</div><div class="line">					 m))))</div><div class="line">	(else (remainder (* base (new-expmod base (- exp 1) m))</div><div class="line">			 m))))</div><div class="line">(define (new-try-it n a)</div><div class="line">  (new-expmod a (- n 1) n))</div><div class="line"></div><div class="line"></div><div class="line">(define (new-fermat-test n start)</div><div class="line">  (cond ((= start 1) true)</div><div class="line">	((= (new-try-it n start) 0) false)</div><div class="line">	(else (new-fermat-test n (- start 1)))))</div><div class="line"></div><div class="line">(define (really-prime? n)</div><div class="line"> (new-fermat-test n (if (even? n)</div><div class="line">			(/ n 2)</div><div class="line">			(/ (- n 1) 2))))</div></pre></td></tr></table></figure>
<p>没有进行优化，但本身也有可能会有更好的方法吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.41-练习2.47]]></title>
      <url>http://yoursite.com/2014/01/20/2014-01-20-%E7%BB%83%E4%B9%A02.41-%E7%BB%83%E4%B9%A02.47/</url>
      <content type="html"><![CDATA[<p>1.练习2.41</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(define (seprate-except x except)</div><div class="line">  (filter (lambda (couple) </div><div class="line">            (let ((first (car couple))</div><div class="line">                  (second (cadr couple)))</div><div class="line">            (and (not (= first except))</div><div class="line">                 (not (= second except))</div><div class="line">                 (not (= first second)))))</div><div class="line">          (map (lambda (n) (list n (- x n)))</div><div class="line">               (enumerate-interval 1 (- x 1)))</div><div class="line">          )</div><div class="line">  )</div><div class="line"></div><div class="line">(define (flatmap proc seq)</div><div class="line">  (accumulate append &apos;() (map proc seq)))</div><div class="line"></div><div class="line">(define (seprate-to-three n)</div><div class="line">  (flatmap (lambda (x) </div><div class="line">             (map (lambda (y) (cons x y)) </div><div class="line">                  (seprate-except (- n x) x)))</div><div class="line">           (enumerate-interval 1 (- n 1)))</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>2.练习2.42</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(define empty-board '())</div><div class="line"></div><div class="line">(define (adjoin-position new-row k rest-of-queens)</div><div class="line">  (cons (list k new-row) rest-of-queens))</div><div class="line"></div><div class="line">(define (safe? k positions)</div><div class="line">  (define (check-safe col row rest-positions)</div><div class="line">    (if (null? rest-positions)</div><div class="line">        true</div><div class="line">        (let ((first-position-col (car (car rest-positions)))</div><div class="line">              (first-position-row (cadr (car rest-positions)))</div><div class="line">              (remain-positions (cdr rest-positions)))</div><div class="line">          (and (not (= col first-position-col))</div><div class="line">               (not (= row first-position-row))</div><div class="line">               (not (= (abs (- col first-position-col))</div><div class="line">                       (abs (- row first-position-row))))</div><div class="line">               (check-safe col row remain-positions)))))</div><div class="line">  (if (null? positions)</div><div class="line">      true</div><div class="line">      (let ((col (car (car positions)))</div><div class="line">            (row (cadr (car positions)))</div><div class="line">            (rest (cdr positions)))</div><div class="line">        (if (null? rest)</div><div class="line">            true</div><div class="line">            (check-safe col row rest)))))</div></pre></td></tr></table></figure>
<p>3.练习2.43<br>因为重复计算k-1的皇后问题。<br>4.练习2.44</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(require (planet &quot;sicp.ss&quot; (&quot;soegaard&quot; &quot;sicp.plt&quot; 2 1)))</div><div class="line"></div><div class="line">(define (up-split painter n)</div><div class="line">  (if (= n 0)</div><div class="line">      painter</div><div class="line">      (let ((smaller (up-split painter (- n 1))))</div><div class="line">        (below painter (beside smaller smaller)))))</div></pre></td></tr></table></figure>
<p>5.练习2.45</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (split action1 action2)</div><div class="line">  (lambda (painter n)</div><div class="line">    (if (= n 0)</div><div class="line">        painter</div><div class="line">        (let ((smaller ((split action1 action2) painter (- n 1))))</div><div class="line">          (action1 painter (action2 smaller smaller))))))</div></pre></td></tr></table></figure>
<p>6.练习2.46<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(define (make-vect x y)</div><div class="line">  (cons x y))</div><div class="line"></div><div class="line">(define (xcor-vect v)</div><div class="line">  (car v))</div><div class="line"></div><div class="line">(define (ycor-vect v)</div><div class="line">  (cdr v))</div><div class="line"></div><div class="line">(define (add-vect v1 v2)</div><div class="line">  (make-vect (+ (xcor-vect v1)</div><div class="line">                (xcor-vect v2))</div><div class="line">             (+ (ycor-vect v1)</div><div class="line">                (ycor-vect v2))))</div><div class="line"></div><div class="line">(define (sub-vect v1 v2)</div><div class="line">  (make-vect (- (xcor-vect v1)</div><div class="line">                (xcor-vect v2))</div><div class="line">             (- (ycor-vect v1)</div><div class="line">                (ycor-vect v2))))</div><div class="line"></div><div class="line">(define (scale-vect v s)</div><div class="line">  (make-vect (* s (xcor-vect v))</div><div class="line">             (* s (ycor-vect v))))</div></pre></td></tr></table></figure></p>
<p>7.练习2.47</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(define (make-frame-list origin edge1 edge2)</div><div class="line">  (list origin edge1 edge2))</div><div class="line"></div><div class="line">(define (make-frame-cons origin edge1 edge2)</div><div class="line">  (cons origin (cons edge1 edge2)))</div><div class="line"></div><div class="line">(define (origin-frame-list frame)</div><div class="line">  (car frame))</div><div class="line"></div><div class="line">(define (edge1-frame-list frame)</div><div class="line">  (cadr frame))</div><div class="line"></div><div class="line">(define (edge2-frame-list frame)</div><div class="line">  (caddr frame))</div><div class="line"></div><div class="line"></div><div class="line">(define (origin-frame-cons frame)</div><div class="line">  (car frame))</div><div class="line"></div><div class="line">(define (edge1-frame-cons frame)</div><div class="line">  (cadr frame))</div><div class="line"></div><div class="line">(define (edge2-frame-cons frame)</div><div class="line">  (cddr frame))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.11-练习2.20]]></title>
      <url>http://yoursite.com/2014/01/17/2014-01-17-%E7%BB%83%E4%B9%A02.11-%E7%BB%83%E4%B9%A02.20/</url>
      <content type="html"><![CDATA[<p>1.练习2.11</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(define (mul-interval x y)</div><div class="line">  (let ((x1 (lower-bound x))</div><div class="line">	(x2 (upper-bound x))</div><div class="line">	(y1 (lower-bound y))</div><div class="line">	(y2 (upper-bound y)))</div><div class="line">    (let</div><div class="line">	((zzx (and (&gt;= x1 0) (&gt;= x2 0)))</div><div class="line">	 (zzy (and (&gt;= y1 0) (&gt;= y2 0)))</div><div class="line">	 (fzx (and (&lt; x1 0) (&gt;= x2 0)))</div><div class="line">	 (fzy (and (&lt; y1 0) (&gt;= y2 0)))</div><div class="line">	 (ffx (and (&lt; x1 0) (&lt; x2 0)))</div><div class="line">	 (ffy (and (&lt; y1 0) (&lt; y2 0))))</div><div class="line">      (cond (zzy (cond (zzx (make-interval (* x1 y1) (* x2 y2)))</div><div class="line">		       (fzx (make-interval (* x1 y2) (* x2 y2)))</div><div class="line">		       (ffx (make-interval (* x1 y2) (* x2 y1)))))</div><div class="line">	    (fzy (cond (zzx (make-interval (* x2 y1) (* x2 y2)))</div><div class="line">		       (fzx (make-interval (min (* x1 y2) (* x2 y1))</div><div class="line">					   (max (* x1 y1) (* x2 y2))))</div><div class="line">		       (ffx (make-interval (* x1 y2) (* x1 y1)))))</div><div class="line">	    (ffy (cond (zzx (make-interval (* x2 y1) (* x1 y2)))</div><div class="line">		       (fzx (make-interval (* x2 y1) (* x1 y1)))</div><div class="line">		       (ffx (make-interval (* x2 y2) (* x1 y1)))))))))</div></pre></td></tr></table></figure>
<p>2.练习2.12</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(define (mul-interval x y)</div><div class="line">  (let ((x1 (lower-bound x))</div><div class="line">	(x2 (upper-bound x))</div><div class="line">	(y1 (lower-bound y))</div><div class="line">	(y2 (upper-bound y)))</div><div class="line">    (let</div><div class="line">	((zzx (and (&gt;= x1 0) (&gt;= x2 0)))</div><div class="line">	 (zzy (and (&gt;= y1 0) (&gt;= y2 0)))</div><div class="line">	 (fzx (and (&lt; x1 0) (&gt;= x2 0)))</div><div class="line">	 (fzy (and (&lt; y1 0) (&gt;= y2 0)))</div><div class="line">	 (ffx (and (&lt; x1 0) (&lt; x2 0)))</div><div class="line">	 (ffy (and (&lt; y1 0) (&lt; y2 0))))</div><div class="line">      (cond (zzy (cond (zzx (make-interval (* x1 y1) (* x2 y2)))</div><div class="line">		       (fzx (make-interval (* x1 y2) (* x2 y2)))</div><div class="line">		       (ffx (make-interval (* x1 y2) (* x2 y1)))))</div><div class="line">	    (fzy (cond (zzx (make-interval (* x2 y1) (* x2 y2)))</div><div class="line">		       (fzx (make-interval (min (* x1 y2) (* x2 y1))</div><div class="line">					   (max (* x1 y1) (* x2 y2))))</div><div class="line">		       (ffx (make-interval (* x1 y2) (* x1 y1)))))</div><div class="line">	    (ffy (cond (zzx (make-interval (* x2 y1) (* x1 y2)))</div><div class="line">		       (fzx (make-interval (* x2 y1) (* x1 y1)))</div><div class="line">		       (ffx (make-interval (* x2 y2) (* x1 y1)))))))))</div></pre></td></tr></table></figure>
<p>3.练习2.13中文的翻译太差了，句中的“两个被乘区间的误差”应该是“被乘区间的百分比误差”吧，很生气。。。<br>4.练习2.14<br>5.练习2.15<br>因为引入的误差少，所以更精确<br>6.练习2.16<br>设计一种好难啊<br>7.练习2.17</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (last-pair items)</div><div class="line">  (let ((len (length items)))</div><div class="line">    (define (last-pair-iter item tmplen)</div><div class="line">      (if (= tmplen 1)</div><div class="line">	  item</div><div class="line">	  (last-pair-iter (cdr item) (- tmplen 1))))</div><div class="line">    (last-pair-iter items len)))</div></pre></td></tr></table></figure>
<p>8.练习2.18</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (reverse items)</div><div class="line">  (define (reverse-iter tmpitems result)</div><div class="line">    (if (null? tmpitems)</div><div class="line">	result</div><div class="line">	(reverse-iter (cdr tmpitems)</div><div class="line">		      (cons (car tmpitems) result))))</div><div class="line">  (reverse-iter items &apos;()))</div></pre></td></tr></table></figure>
<p>9.练习2.19</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (first-denomination list1)</div><div class="line">  (car list1))</div><div class="line"></div><div class="line">(define (except-first-denomination list1)</div><div class="line">  (cdr list1))</div><div class="line"></div><div class="line">(define (no-more? list1)</div><div class="line">  (null? list1))</div></pre></td></tr></table></figure>
<p>10.练习2.20</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(define (same-parity . other)</div><div class="line">  (define (even-number? number)</div><div class="line">    (= (remainder number 2) 0))</div><div class="line">  (define (same-parity-recur even items)</div><div class="line">    (if (null? items)</div><div class="line">	&apos;()</div><div class="line">	(let ((now-even (even-number? (car items)))</div><div class="line">	      (next (same-parity-recur even (cdr items))))</div><div class="line">	  (if (or (and even now-even)</div><div class="line">		  (and (not even) (not now-even)))</div><div class="line">	      (cons (car items) next)</div><div class="line">	      next))))</div><div class="line">  (let ((evenodds (even-number? (car other))))</div><div class="line">    (same-parity-recur evenodds other)))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.2-练习2.10]]></title>
      <url>http://yoursite.com/2014/01/15/2014-01-15-%E7%BB%83%E4%B9%A02.2-%E7%BB%83%E4%B9%A02.10/</url>
      <content type="html"><![CDATA[<p>1.练习2.2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(define (make-segment start end)</div><div class="line">  (cons start end))</div><div class="line"></div><div class="line">(define (start-segment seg)</div><div class="line">  (car seg))</div><div class="line"></div><div class="line">(define (end-segment seg)</div><div class="line">  (cdr seg))</div><div class="line"></div><div class="line">(define (make-point x y)</div><div class="line">  (cons x y))</div><div class="line"></div><div class="line">(define (x-point p)</div><div class="line">  (car p))</div><div class="line"></div><div class="line">(define (y-point p)</div><div class="line">  (cdr p))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (midpoint-segment seg)</div><div class="line">  (make-point (/ (+ (x-point (start-segment seg))</div><div class="line">		    (x-point (end-segment seg))) 2)</div><div class="line">	      (/ (+ (y-point (start-segment seg))</div><div class="line">		    (y-point (end-segment seg))) 2)))</div></pre></td></tr></table></figure>
<p>2.练习2.3首次定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (make-rect start end)</div><div class="line">  (cons start end))</div><div class="line"></div><div class="line">(define (start-rect seg)</div><div class="line">  (car seg))</div><div class="line"></div><div class="line">(define (end-rect seg)</div><div class="line">  (cdr seg))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(define (width rect)</div><div class="line">  (abs (- (y-point (end-rect rect))</div><div class="line">	  (y-point (start-rect rect)))))</div><div class="line"></div><div class="line">(define (length rect)</div><div class="line">  (abs (- (x-point (end-rect rect))</div><div class="line">	  (x-point (start-rect rect)))))</div><div class="line"></div><div class="line">(define (girth rect)</div><div class="line">  (* (+ (width rect)</div><div class="line">	(length rect))</div><div class="line">     2))</div><div class="line"></div><div class="line">(define (area rect)</div><div class="line">  (* (width rect)</div><div class="line">     (length rect)))</div></pre></td></tr></table></figure>
<p>二次定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(define (make-rect start length width)</div><div class="line">  (cons start</div><div class="line">	(cons length width)))</div><div class="line"></div><div class="line">(define (start-rect seg)</div><div class="line">  (car seg))</div><div class="line"></div><div class="line">(define (end-rect seg)</div><div class="line">  (cons (+ (x-point (start-rect seg))</div><div class="line">	   (car (cdr seg)))</div><div class="line">	(+ (y-point (start-rect seg))</div><div class="line">	   (cdr (cdr seg)))))</div></pre></td></tr></table></figure>
<p>3.练习2.4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (cons x y)</div><div class="line">  (lambda (m) (m x y)))</div><div class="line"></div><div class="line">(define (car z)</div><div class="line">  (z (lambda (p q) p)))</div><div class="line"></div><div class="line">(define (cdr z)</div><div class="line">  (z (lambda (p q) q)))</div></pre></td></tr></table></figure>
<p>4.练习2.5</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(define (cons a b)</div><div class="line">  (* (pow 2 a)</div><div class="line">     (pow 3 b)))</div><div class="line"></div><div class="line">(define (car c)</div><div class="line">  (define (iter n result)</div><div class="line">    (if (not (= (remainder n 2) 0))</div><div class="line">	result</div><div class="line">	(iter (/ n 2) (+ result 1))))</div><div class="line">  (iter c 0))</div><div class="line"></div><div class="line">(define (cdr c)</div><div class="line">  (define (iter n result)</div><div class="line">    (if (not (= (remainder n 3) 0))</div><div class="line">	result</div><div class="line">	(iter (/ n 3) (+ result 1))))</div><div class="line">  (iter c 0))</div></pre></td></tr></table></figure>
<p>5.练习2.6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define one</div><div class="line">  (lambda (f) (lambda (x) (f x))))</div><div class="line"></div><div class="line">(define two</div><div class="line">  (lambda (f) (lambda (x) (f (f x)))))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(define (add a b)</div><div class="line">  (lambda (f) (lambda (x) ((b f) ((a f) x)))))</div></pre></td></tr></table></figure>
<p>6.练习2.7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (make-interval x y)</div><div class="line">  (cons x y))</div><div class="line"></div><div class="line">(define (upper-bound c)</div><div class="line">  (cdr c))</div><div class="line"></div><div class="line">(define (lower-bound c)</div><div class="line">  (car c))</div></pre></td></tr></table></figure>
<p>7.练习2.8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (sub-interval x y)</div><div class="line">  (let ((a (- (lower-bound x) (lower-bound y)))</div><div class="line">	(b (- (upper-bound x) (upper-bound y))))</div><div class="line">    (make-interval (min a b)</div><div class="line">		   (max a b))))</div></pre></td></tr></table></figure>
<p>8.练习2.9</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (width-interval a)</div><div class="line">  (/ (- (upper-bound a)</div><div class="line">	(lower-bound a))</div><div class="line">     2))</div></pre></td></tr></table></figure>
<p>9.练习2.10</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (div-interval x y)</div><div class="line">  (if (and (&lt;= (lower-bound y) 0) (&gt;= (upper-bound y) 0))</div><div class="line">      (error &quot;ERROR!!!&quot;)</div><div class="line">      (mul-interval x</div><div class="line">		       (make-interval (/ 1.0 (upper-bound y))</div><div class="line">				      (/ 1.0 (lower-bound y))))))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习2.1]]></title>
      <url>http://yoursite.com/2014/01/14/2014-01-14-%E7%BB%83%E4%B9%A02.1/</url>
      <content type="html"><![CDATA[<p>1.练习2.1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(define (check-pos-neg a b)</div><div class="line">  (or (and (not (&lt; a 0)) (&gt; b 0))</div><div class="line">      (and (not (&gt; a 0)) (&lt; b 0))))</div><div class="line"></div><div class="line">(define (make-rat n d)</div><div class="line">  (let ((g (gcd (abs n) (abs d)))</div><div class="line">	(posi (check-pos-neg n d)))</div><div class="line">    (cons (/ (if posi</div><div class="line">		 (abs n)</div><div class="line">		 (- (abs n)))</div><div class="line">	     g)</div><div class="line">	  (/ (abs d) g))))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.40-练习1.46]]></title>
      <url>http://yoursite.com/2014/01/13/2014-01-13-%E7%BB%83%E4%B9%A01.40-%E7%BB%83%E4%B9%A01.46/</url>
      <content type="html"><![CDATA[<p>1.练习1.40</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (cubic a b c)</div><div class="line">  (define (cube x)</div><div class="line">    (* x x x))</div><div class="line">  (lambda (x)</div><div class="line">    (+ (cube x)</div><div class="line">       (* a (square x))</div><div class="line">       (* b x)</div><div class="line">       c)))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (newtons-method g guess)</div><div class="line">  (fixed-point (newton-transform g) guess))</div><div class="line"></div><div class="line">(newtons-method (cubic 1 0 0) 1)</div></pre></td></tr></table></figure>
<p>2.练习1.41</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (double f)</div><div class="line">  (lambda (x) (f (f x))))</div><div class="line"></div><div class="line">(((double (double double)) (lambda (x) (+ x 1))) 5)</div></pre></td></tr></table></figure>
<p>结果是21，真的很不想解释。(double double)展开是(f (f  (f (f x))))<br>(double (double double))展开是(f’ (f‘ (f’ (f‘ x)))))))，每个f‘为(f (f  (f (f x))))，一共是16个f，所以结果是5+16=21<br>3.练习1.42</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(define (compose f g)</div><div class="line">  (lambda (x) (f (g x))))</div></pre></td></tr></table></figure>
<p>4.练习1.43</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (repeated f n)</div><div class="line">  (if (= n 1)</div><div class="line">      (lambda (x) (f x))</div><div class="line">      (lambda (x) (f ((repeated f (- n 1)) x)))))</div></pre></td></tr></table></figure>
<p>5.练习1.44这个有点儿直接了，没有简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(define (smooth f)</div><div class="line">  (let ((dx 0.0000001))</div><div class="line">    (lambda (x) (/</div><div class="line">		 (+</div><div class="line">		  (f (- x dx))</div><div class="line">		  (f x)</div><div class="line">		  (f (+ x dx)))</div><div class="line">		 3))))</div><div class="line"></div><div class="line">(((repeated smooth 6) square) 2)</div></pre></td></tr></table></figure>
<p>6.练习1.45也是没有简化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(define (average-dump-time n)</div><div class="line">  (floor (/ (log n) (log 2))))</div><div class="line"></div><div class="line">(define (cifanggen x n)</div><div class="line">  (define (product term a next b)</div><div class="line">    (if (&gt; a b)</div><div class="line">	1</div><div class="line">	(* (term a)</div><div class="line">	   (product term (next a) next b)))) </div><div class="line">  (define (cifang x n)</div><div class="line">    (product (lambda (i) x)</div><div class="line">	     1</div><div class="line">	     (lambda (i) (+ i 1))</div><div class="line">	     n))</div><div class="line">  (fixed-point ((repeated average-dump (average-dump-time n)) (lambda (i) (/ x (cifang i (- n 1)))))</div><div class="line">	       n))</div></pre></td></tr></table></figure>
<p>7.练习1.46<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(define (iterative-improve good-enough? improve)</div><div class="line">   (lambda (a) (if (good-enough? a (improve a))</div><div class="line">		   (improve a)</div><div class="line">		   ((iterative-improve good-enough? improve) (improve a)))))</div><div class="line"></div><div class="line">(define (fixed-point f guess)</div><div class="line">  (define (good-enough1? a b)</div><div class="line">    (let ((tolerance 0.000001))</div><div class="line">      (&lt; (abs (- a b)) tolerance)))</div><div class="line">  ((iterative-improve good-enough1? f) guess))</div><div class="line"></div><div class="line">(define (sqrt n)</div><div class="line">  (fixed-point (lambda (y) (/ (+ y (/ n y)) 2))</div><div class="line">	       1.0))</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.35-练习1-38]]></title>
      <url>http://yoursite.com/2014/01/11/2014-01-11-%E7%BB%83%E4%B9%A01.35-%E7%BB%83%E4%B9%A01-38/</url>
      <content type="html"><![CDATA[<p>1.练习1.35</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)</div></pre></td></tr></table></figure>
<p>2.练习1.36不用平均阻尼方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(fixed-point-display (lambda (x) (/ (log 1000) (log x))) 2.0)</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">2.</div><div class="line">9.965784284662087</div><div class="line">3.004472209841214</div><div class="line">6.279195757507157</div><div class="line">3.759850702401539</div><div class="line">5.215843784925895</div><div class="line">4.182207192401397</div><div class="line">4.8277650983445906</div><div class="line">4.387593384662677</div><div class="line">4.671250085763899</div><div class="line">4.481403616895052</div><div class="line">4.6053657460929</div><div class="line">4.5230849678718865</div><div class="line">4.577114682047341</div><div class="line">4.541382480151454</div><div class="line">4.564903245230833</div><div class="line">4.549372679303342</div><div class="line">4.559606491913287</div><div class="line">4.552853875788271</div><div class="line">4.557305529748263</div><div class="line">4.554369064436181</div><div class="line">4.556305311532999</div><div class="line">4.555028263573554</div><div class="line">4.555870396702851</div><div class="line">4.555315001192079</div><div class="line">4.5556812635433275</div><div class="line">4.555439715736846</div><div class="line">4.555599009998291</div><div class="line">4.555493957531389</div><div class="line">4.555563237292884</div><div class="line">4.555517548417651</div><div class="line">4.555547679306398</div><div class="line">4.555527808516254</div><div class="line">4.555540912917957</div><div class="line">;Value: 4.555532270803653</div></pre></td></tr></table></figure>
<p>平均阻尼的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(fixed-point-display (lambda (x) (/ (+ (/ (log 1000) (log x)) x) 2.0)) 2.0)</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">2.</div><div class="line">5.9828921423310435</div><div class="line">4.922168721308343</div><div class="line">4.628224318195455</div><div class="line">4.568346513136242</div><div class="line">4.5577305909237005</div><div class="line">4.555909809045131</div><div class="line">4.555599411610624</div><div class="line">4.5555465521473675</div><div class="line">;Value: 4.555537551999825</div></pre></td></tr></table></figure>
<p>3.练习1.37a）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (cont-frac n d k)</div><div class="line">  (define (cont-prac-recur n d a k)</div><div class="line">    (if (= a k)</div><div class="line">	(/ (n k) (d k))</div><div class="line">	(/ (n a) (+ (d a) (cont-prac-recur n d (+ a 1) k)))))</div><div class="line">  (cont-prac-recur n d 1 k))</div></pre></td></tr></table></figure>
<p>k为11时得到的近似值具有十进制的4位精度b）<br>迭代计算过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (cont-frac n d k)</div><div class="line">  (define (cont-prac-iter a result)</div><div class="line">    (cond ((= a k) (cont-prac-iter (- a 1) (/ (n k) (d k))))</div><div class="line">	  ((= a 0) result)</div><div class="line">	  (else (cont-prac-iter (- a 1) (/ (n a) (+ result (d a)))))))</div><div class="line">  (cont-prac-iter k 0))</div></pre></td></tr></table></figure>
<p>4.练习1.38</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (dfc-k k)</div><div class="line">  (+ (cont-frac (lambda (i) 1.0)</div><div class="line">(lambda (i) (if (= (remainder i 3) 2)</div><div class="line">(* (+ (floor (/ i 3)) 1) 2)</div><div class="line">1))</div><div class="line">k</div><div class="line">) 2))</div></pre></td></tr></table></figure>
<p>5.练习1.39</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (tan-cf x k)</div><div class="line">  (cont-frac (lambda (i) (if (= i 1)</div><div class="line">			     x</div><div class="line">			     (- 0 (square x))))</div><div class="line">	     (lambda (i) (+ (* (- i 1) 2) 1))</div><div class="line">	     k</div><div class="line">	     ))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.31-练习1.34]]></title>
      <url>http://yoursite.com/2014/01/10/2014-01-10-%E7%BB%83%E4%B9%A01.31-%E7%BB%83%E4%B9%A01.34/</url>
      <content type="html"><![CDATA[<p>最近对于Lisp的强大和高深还是深有体会的，可以将函数作为参数进行调用，这样在很大的程度上可以提高函数的抽象性，即将具有公共模式的函数进行抽象。例如在SICP中，首先将累加和的过程进行了抽象，然后在累加和的基础上抽象出了累乘积，进而又发现了累加和与累乘积的共同点，进一步抽象成了一个叫做accumulate的函数，这个函数的是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(accumulate combiner null-value term a next b)</div></pre></td></tr></table></figure>
<p>其中combiner为被组合项的组合方式，例如在累加和中可以是“+”，在累乘积中可以是“*”，null-value为默认值，在累加和中为0累乘积中为1，term为函数f，例如在求cube的积分时，f为cube，a为初始值，next为下一次取得值，b为取值的上限。最后在accumulate函数的基础上加上了对数据的filter使得整个过程更加抽象更加一般。<br>1.练习1.31<br>a）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (product-recur term a next b)</div><div class="line">  (if (&gt; a b)</div><div class="line">      1</div><div class="line">      (* (term a)</div><div class="line">	 (product-recur term (next a) next b))))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (factorial-recur n)</div><div class="line">  (define (self n)</div><div class="line">    n)</div><div class="line">  (define (plus-1 n)</div><div class="line">    (+ n 1))</div><div class="line">  (if (= n 0)</div><div class="line">      1</div><div class="line">      (product-recur self 1 plus-1 n)))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(define (pi-recur n)</div><div class="line">  (define (even? n)</div><div class="line">    (= (remainder n 2) 0))</div><div class="line">  (define (item n)</div><div class="line">    (if (even? n)</div><div class="line">	(/ (+ 2 n) (+ 1 n))</div><div class="line">	(/ (+ 1 n) (+ 2 n))))</div><div class="line">  (define (next-1 n)</div><div class="line">    (+ n 1.0))</div><div class="line">  (* 4.0</div><div class="line">     (product-recur item 1.0 next-1 n)))</div></pre></td></tr></table></figure>
<p>b）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (product-iter term a next b)</div><div class="line">  (define (iter a result)</div><div class="line">    (if (&gt; a b)</div><div class="line">	result</div><div class="line">	(iter (next a) (* (term a) result))))</div><div class="line">  (iter a 1))</div></pre></td></tr></table></figure>
<p>2.练习1.32a）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define  (accumulate combiner null-value term a next b)</div><div class="line">  (if (&gt; a b)</div><div class="line">      null-value</div><div class="line">      (combiner (term a)</div><div class="line">		(accumulate combiner null-value term (next a) next b))))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (sum-accumulate term a next b)</div><div class="line">  (accumulate + 0 term a next b))</div><div class="line"></div><div class="line">(define (product-accumulate term a next b)</div><div class="line">  (accumulate-iter * 1 term a next b))</div></pre></td></tr></table></figure>
<p>b）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define  (accumulate-iter combiner null-value term a next b)</div><div class="line">  (define (iter a result)</div><div class="line">    (if (&gt; a b)</div><div class="line">	result</div><div class="line">	(iter (next a) (combiner result (term a)))))</div><div class="line">  (iter a null-value))</div></pre></td></tr></table></figure>
<p>3.练习1.33</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (filtered-accumulate filter combiner null-value term a next b)</div><div class="line">  (define (iter a result)</div><div class="line">    (cond ((&gt; a b) result)</div><div class="line">	  ((filter a) (iter (next a) (combiner (term a) result)))</div><div class="line">	  (else (iter (next a) result))))</div><div class="line">  (iter a null-value))</div></pre></td></tr></table></figure>
<p>a）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (prime-sum a b)</div><div class="line">  (define (next-1 a)</div><div class="line">    (+ a 1))</div><div class="line">  (define (self a)</div><div class="line">    a)</div><div class="line">  (filtered-accumulate prime? + 0 self a next-1 b))</div></pre></td></tr></table></figure>
<p>b）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (GCD-1-product n)</div><div class="line">  (define (GCD-1-n? a)</div><div class="line">    (= (GCD a n) 1))</div><div class="line">  (define (next-1 a)</div><div class="line">    (+ a 1))</div><div class="line">  (define (self a)</div><div class="line">    a)</div><div class="line">  (filtered-accumulate GCD-1-n? * 1 self 1 next-1 (- n 1)))</div></pre></td></tr></table></figure>
<p>4.练习1.34可以这么解释(f f)-&gt;(f 2)-&gt;(2 2)，最后由于2这个函数没有定义，所以报错结束。</p>
<p>网上发现了这个<a href="http://sicp.readthedocs.org/en/latest/index.html" target="_blank" rel="external">点击打开链接</a>，很不错，貌似是一些人做的项目，目的是解答SICP上的所有题，貌似很久没有更新了，但以后做了题还是可以和这个上面已有的解答对对了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.23-练习1.30]]></title>
      <url>http://yoursite.com/2014/01/09/2014-01-09-%E7%BB%83%E4%B9%A01.23-%E7%BB%83%E4%B9%A01.30/</url>
      <content type="html"><![CDATA[<p>1.练习1.23<br>改后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(define (find-divisor-better n a)</div><div class="line">  (cond ((&gt; (square a) n) n)</div><div class="line">	((divides?-better n a) a)</div><div class="line">	(else (find-divisor-better n (next-2 a)))))</div><div class="line"></div><div class="line">(define (next-2 n)</div><div class="line">  (if (= 2 n)</div><div class="line">      (+ 1 n)</div><div class="line">      (+ 2 n)))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (find-min-prime-since-better n start-time number)</div><div class="line">  (cond ((= number 0) (display-info start-time (real-time-clock)))</div><div class="line">	((prime? n) (begin</div><div class="line">		      (format #t &quot;~S~%&quot; n)</div><div class="line">		      (find-min-prime-since-better (+ n (next-plus n)) start-time (- number 1))))</div><div class="line">	(else (find-min-prime-since-better (+ n (next-plus n)) start-time number)))</div><div class="line">  #f)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (next-plus n)</div><div class="line">  (if (even? n)</div><div class="line">      1</div><div class="line">      2))</div></pre></td></tr></table></figure>
<p>电脑跑这些代码的时候，没有固定的运行时间，一直在变。不过结果是改后的基本是没改前的0.5，也可能0.6左右。<br>2.练习1.24<br>代码就不贴出来了，只是将上一题中的判断是否为素数的方法改为费马方法。<br>在检测接近1000000的素数和接近1000的素数时，接近1000000的素数在时间上应该为(log1000000)=6应该大于接近1000的3的素数检查，比值为2:1，实验中计算从1000和1000000开始的1000个素数，1000开始的时间为695，而从1000000开始的时间为1470，比值接近于1:2， 与假设基本相同。<br>但是在<a href="http://www.codesky.net/article/200501/54364.html" target="_blank" rel="external">帖子</a>，那我猜，可能是64位和32位的不同了。<br>3.练习1.25<br>先求次方的结果会导致一个很大的数求余数，这样的时间消耗会很大。<br>4.练习1.26<br>不使用square的结果是每次减半的expmod操作没有了简版的效果，所以时间复杂度会变回O(n) 。<br>5.练习1.27</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(define (try-it a n)</div><div class="line">    (= (expmod a n n) a))</div><div class="line"></div><div class="line">(define (carmichael-test n number)</div><div class="line">  (cond ((= number 0) true)</div><div class="line">	((try-it number n) (carmichael-test n (- number 1)))</div><div class="line">	(else false)))</div><div class="line"></div><div class="line">(define (car-prime? n)</div><div class="line">  (carmichael-text n (- n 1)))</div></pre></td></tr></table></figure>
<p>6.练习1.28</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(define (new-expmod base exp m)</div><div class="line">  (define tmpbase 100)</div><div class="line">  (cond ((= exp 0) 1)</div><div class="line">	((even? exp) (begin</div><div class="line">		      (set! tmpbase (new-expmod base (/ exp 2) m))</div><div class="line">		      (if (and (not (= tmpbase (- m 1)))</div><div class="line">			       (not (= tmpbase 1))</div><div class="line">			       (= (remainder (square tmpbase)</div><div class="line">					       m) 1))</div><div class="line">			   0</div><div class="line">			   (remainder (square tmpbase)</div><div class="line">					 m))))</div><div class="line">	(else (remainder (* base (new-expmod base (- exp 1) m))</div><div class="line">			 m))))</div><div class="line">(define (new-try-it n a)</div><div class="line">  (new-expmod a (- n 1) n))</div><div class="line"></div><div class="line"></div><div class="line">(define (new-fermat-test n start)</div><div class="line">  (cond ((= start 1) true)</div><div class="line">	((= (new-try-it n start) 0) false)</div><div class="line">	(else (new-fermat-test n (- start 1)))))</div><div class="line"></div><div class="line">(define (really-prime? n)</div><div class="line"> (new-fermat-test n (if (even? n)</div><div class="line">			(/ n 2)</div><div class="line">			(/ (- n 1) 2))))</div></pre></td></tr></table></figure>
<p>没有进行优化，但本身也有可能会有更好的方法吧。。。<br>7.练习1.29</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(define (xps f a b n)</div><div class="line">  (define h</div><div class="line">    (/ (- b a) n))</div><div class="line">  (define (f1 k)</div><div class="line">    (f (+ a (* k h))))</div><div class="line">  (define (f2 k)</div><div class="line">    (if (or (= k 0) (= k n))</div><div class="line">	(f1 k)</div><div class="line">	(if (even? k)</div><div class="line">	    (* 2 (f1 k))</div><div class="line">	    (* 4 (f1 k)))))</div><div class="line">  (define (add-h x)</div><div class="line">    (+ x 1))</div><div class="line">  (* (/ h 3)</div><div class="line">     (sum f2 0 add-h n)))</div></pre></td></tr></table></figure>
<p>8.练习1.30</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (sum term a next b)</div><div class="line">  (define (iter a result)</div><div class="line">    (if (&gt; a b)</div><div class="line">	result</div><div class="line">	(iter (next a) (+ (term a) result))))</div><div class="line">  (iter a 0))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.18-练习1.22]]></title>
      <url>http://yoursite.com/2014/01/08/2014-01-08-%E7%BB%83%E4%B9%A01.18-%E7%BB%83%E4%B9%A01.22/</url>
      <content type="html"><![CDATA[<p>1.练习1.18</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (*-iter a b n)</div><div class="line">  (cond ((= n 0) a)</div><div class="line">	((even? n) (*-iter a (double b) (halve n)))</div><div class="line">	(else (*-iter (+ a b) b (- n 1)))))</div><div class="line"></div><div class="line">(define (* b n)</div><div class="line">  (*-iter 0 b n))</div></pre></td></tr></table></figure>
<p>Lisp真是强大啊，连 *-iter这种函数名也可以使用！！！<br>2.练习1.19</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p=p2+q2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">q=q2+2pq</div></pre></td></tr></table></figure>
<p>完整的函数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(define (next-p p q)</div><div class="line">  (+ (square p) (square q)))</div><div class="line"></div><div class="line">(define (next-q p q)</div><div class="line">  (+ (square q) (* 2 (* p q))))</div><div class="line"></div><div class="line">(define (fib-iter a b p q count)</div><div class="line">  (cond ((= 0 count) b)</div><div class="line">	((even? count) (fib-iter a</div><div class="line">				 b</div><div class="line">				 (next-p p q)</div><div class="line">				 (next-q p q)</div><div class="line">				 (/ count 2)))</div><div class="line">	(else (fib-iter (+ (* b q) (* a q) (* a p))</div><div class="line">			(+ (* b p) (* a q))</div><div class="line">			p</div><div class="line">			q</div><div class="line">			(- count 1)))))</div></pre></td></tr></table></figure>
<p>3.练习1.20</p>
<p>应用序4次,第一次算,但是gcd( 2 0)不算,if判断后就直接返回a,下面不会执行;<br>正则序18次,<br>正则代换后,则第n层的a b两个参数对应的remainder的次数分别为a(n), b(n),<br>则: a(n) = b(n-1);b(n)=a(n-1)+b(n-1)+1;a(0)=0,b(0)=0<br>总共5层,由于每层的if判断进行了计算,再加上最后一层的a是计算了的,所以最后的结果是:b(0)+b(1)+b(2)+b(3)+b(4)+a(4)=18<br>按照我的理解：<br>这道题使用正则序展开的时候会先展开gcd，展开的函数中会有多个remiander函数；使用应用序展开时，会先计算remainder，然后才会展开gcd。<br>看了很多别人的答案，对于正则序的展开并不是很清楚，我一开始认为也是5次，后来发现不对，我现在的想法是，在if的时候求值，在其他地方正常展开。<br>4.练习1.21<br>199，1999，7<br>5.练习1.22<br>这道题中，我将(runtime)函数，改为(real-time-clock);<br>计算结果如下：<br>1000的时间消耗为1；<br>10000的时间消耗为2；<br>100000的时间消耗为3；<br>1000000的时间消耗为8；<br>10000000的时间消耗为24。<br>可一看到，在1000-100000之间的时间的增长阶小于根10，而从100000到10000000之间的时间增长阶与根10相似。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.10-练习1.17]]></title>
      <url>http://yoursite.com/2014/01/07/2014-01-07-%E7%BB%83%E4%B9%A01.10-%E7%BB%83%E4%B9%A01.17/</url>
      <content type="html"><![CDATA[<p>1.练习1.10<br>这个是阿克曼函数，真的很牛，花了我很长时间。<br>表达式的求值就不说了。<br>(define (f n) (A 0 n)) ——-2n<br>(define (g n) (A 1 n))——-2的n次方<br>(define (h n) (A 2 n))——-n个2的次方，例如：(h 4)表示为2的2次方的2次方的2次方<br>2.练习1.11<br>递归计算过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(define (f1 n)</div><div class="line">  (if (&lt; n 3)</div><div class="line">      n</div><div class="line">      (+ (f1 (- n 1))</div><div class="line">	 (* 2 (f1 (- n 2)))</div><div class="line">	 (* 3 (f1 (- n 3))))))</div></pre></td></tr></table></figure>
<p>迭代计算过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(define (f2 n)</div><div class="line">  (f2-iter 2 1 0 3 n))</div><div class="line"></div><div class="line">(define (f2-iter a b c num n)</div><div class="line">  (cond ((&lt; n 3) n)</div><div class="line">	((&gt; num n) a)</div><div class="line">	(else (f2-iter (+ a</div><div class="line">			  (* 2 b)</div><div class="line">			  (* 3 c))</div><div class="line">		       a b (+ num 1) n))))</div></pre></td></tr></table></figure>
<p>解释一下迭代计算过程吧，利用a b c 三个数字保存临时的数据，num表示目前计算的状态，当num&gt;n时，表示已经求得的结果在a中。<br>下面的结果是<a href="http://blog.csdn.net/keyboardota/article/details/10564653" target="_blank" rel="external">别人的例子</a>，不是有多好，只是给我很大的启发，参数的移动可以增强程序的灵活性，不错！！我得记住这一点。。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(define (myf-iter a b c n)</div><div class="line">  (format #t &quot;Caculating n, n is ~S, a is ~S, b is ~S, c is ~S ~%&quot; n a b c)</div><div class="line">  (if (= n 0)</div><div class="line">      a</div><div class="line">  (myf-iter b c ( + (* 3 a) (* 2 b) c) (- n 1))))</div><div class="line"></div><div class="line">(define (newf n)</div><div class="line">  (myf-iter 0 1 2 n))</div></pre></td></tr></table></figure>
<p>3.练习1.12</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (yanghui row col)</div><div class="line">  (cond ((&gt; col row) -1)</div><div class="line">	((or (= 1 col) (= row col)) 1)</div><div class="line">	(else (+ (yanghui (- row 1) (- col 1))</div><div class="line">		 (yanghui (- row 1) col)))))</div></pre></td></tr></table></figure>
<p>row表示第几行，col表示第row行的第几个数数字。当col为row行的第1个或者最后一个数的时候，结果为1；否则，结果为row－1行的col－1的数加上row－1行的col的数。4.练习1.13<br>不知道证明的对不对，对0和1的求值略去。<br>假设在n-1和n时，满足方程，代入n＋1的方程 Φn ＋Φn －1=Φn ＋1，接着证明(Υn＋Υn-1)/根5小于0.5，上式可变为Υn-1(Υ+1)/根5，可知Υn-1/根5小于0.5，而(Υ+1)/根5明显小于1，所以这个式子小于0.5，所以根据数学归纳法。。。<br>5.练习1.14<br>2的11次？<br>6.练习1.15<br>都是logn？<br>7.练习1.16</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(define (fast-expt-iter a b n)</div><div class="line">  (cond ((= n 1) (* a b))</div><div class="line">	((not (even? n)) (fast-expt-iter (* a b) b (- n 1)))</div><div class="line">       	(else (fast-expt-iter a (square b) (/ n 2)))))</div><div class="line"></div><div class="line">(define (fast-expt b n)</div><div class="line">  (fast-expt-iter 1 b n))</div></pre></td></tr></table></figure>
<p>通过这道题，我总结到了，在目前的lisp学习中，主要是递归过程，所以应该在最开始的时候将出口留好，而不是放在随后的过程中。<br>8.练习1.17</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (* a b)</div><div class="line">  (cond ((= b 1) a)</div><div class="line">	((even? b) (double (* a (halve b))))</div><div class="line">	(else (+ a (* a (- b 1))))))</div></pre></td></tr></table></figure>
<p>这道题，额，没考虑b为0的时候，看来测试用例做的不够全面啊。改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(define (* a b)</div><div class="line">  (cond ((= b 0) 0)</div><div class="line">	((even? b) (double (* a (halve b))))</div><div class="line">	(else (+ a (* a (- b 1))))))</div></pre></td></tr></table></figure>
<p>即可！不过貌似也没考虑正负数什么了，说白了就是练习，理解这种“折半”的计算方式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[练习1.1－练习1.9]]></title>
      <url>http://yoursite.com/2014/01/06/2014-01-06-%E7%BB%83%E4%B9%A01.1%EF%BC%8D%E7%BB%83%E4%B9%A01.9/</url>
      <content type="html"><![CDATA[<ol>
<li>练习1.1<br>这个题没有什么好说的了，只要把代码敲出来，运行一遍就可以了。</li>
<li>练习1.2<br>这个题应该不算难吧，没有看过别人的答案，我把我的贴出来吧。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))</div><div class="line">   (* 3 (- 6 2) (- 2 7)))</div></pre></td></tr></table></figure>
<p>3.练习1.3我的方法是求出3个数的和，再将减去最小的数，算不上最好的方法吧，马马虎虎。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(define (sumofmax2 x y z)</div><div class="line">  (- (+ x y z)</div><div class="line">     (cond ((and (&lt; x y) (&lt; x z)) x)</div><div class="line">	   ((and (&lt; y x) (&lt; y z)) y)</div><div class="line">	   (else z))))</div></pre></td></tr></table></figure>
<p>4.练习1.4这个函数首先判断b是否大于0，根据判断结果使用加法或者减法，这也是Lisp的奇妙之出，可以将运算符作为返回值。<br>5.练习1.5<br>这个题我没有亲自试验，且从理论上分析下吧。<br>Scheme的解释器用的是应用序，所以在求表达式(test 0 (p))时首先会将(p)进行展开，可以看到p的实现时他自己，所以会进入一个无穷的递归，最终导致“死机”或者奔溃。<br>而在使用正则序时，解释器先不去求参数的值，而是将参数替换到过程中去，将过程展开，接着看展开的结果中是否还有其他过程，有的话继续展开，将过程完全展开后再进行计算，然后根据计算结果归约。<br>本题最后假设：特殊形式if的求值规则总是一样的。其中谓词部分先行求值，根据其结果确定随后求值的子表达式。<br>所以当正则序先展开为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(if (= 0 0)</div><div class="line">     0</div><div class="line">    (p))</div></pre></td></tr></table></figure>
<p>时，只会求if表达式中的谓词部分，根据谓词部分再判断展开那部分，这道题的if中的谓词为t，所以不会展开（p），所以时可以终止的。6.练习1.6<br>这道题类似于上一题，特殊形式if的求值规则总是一样的。其中谓词部分先行求值，根据其结果确定随后求值的子表达式。但是自定义的函数new-if时没有这种求值规则的，所以会不断的展开sqrt-iter函数，而不会由于new-if中的条件判断而中止。<br>7.练习1.7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(define (good-enough? guess old-guess)</div><div class="line">  (and (&gt; (/ guess old-guess) 0.99999999999999)</div><div class="line">       (&lt; (/ guess old-guess) 1.00000000000001)))</div><div class="line"></div><div class="line">(define (average x y)</div><div class="line">  (/ (+ x y) 2))</div><div class="line"></div><div class="line">(define (improve guess x)</div><div class="line">  (average guess (/ x guess)))</div><div class="line"></div><div class="line">(define (sqrt-iter guess old-guess x)</div><div class="line">  (if (good-enough? guess old-guess)</div><div class="line">      guess</div><div class="line">      (sqrt-iter (improve guess x) guess x)))</div><div class="line"></div><div class="line">(define (sqrt x)</div><div class="line">  (sqrt-iter 1.0 0.1 x))</div></pre></td></tr></table></figure>
<p>8.练习1.8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(define (good-enough? guess old-guess)</div><div class="line">  (and (&gt; (/ guess old-guess) 0.9999)</div><div class="line">       (&lt; (/ guess old-guess) 1.0001)))</div><div class="line"></div><div class="line">(define (improve guess x)</div><div class="line">  (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))</div><div class="line"></div><div class="line">(define (cbrt-iter guess old-guess x)</div><div class="line">  (if (good-enough? guess old-guess)</div><div class="line">      guess</div><div class="line">      (cbrt-iter (improve guess x) guess x)))</div><div class="line"></div><div class="line">(define (cbrt x)</div><div class="line">  (cbrt-iter 1.0 0.1 x))</div></pre></td></tr></table></figure>
<p>9.练习1.9第一个是递归计算过程，因为在无法在一开始确定inc的参数，要推迟计算。<br>第二个是迭代计算过程，因为在计算的过程中只需要保存参数的值就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[别人的Emacs配置1]]></title>
      <url>http://yoursite.com/2014/01/04/2014-01-04-%E5%88%AB%E4%BA%BA%E7%9A%84Emacs%E9%85%8D%E7%BD%AE1/</url>
      <content type="html"><![CDATA[<p>原地址：<a href="http://blog.csdn.net/shyanyang/article/details/7979866" target="_blank" rel="external">点击打开链接</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div></pre></td><td class="code"><pre><div class="line">;;使用C-x C-e检测配置的正确性</div><div class="line">(global-linum-mode t);显示行号</div><div class="line">(setq column-number-mode t);显示列号</div><div class="line">(setq auto-image-file-mode t);让Emacs可以直接打开和显示图片</div><div class="line">(auto-compression-mode t);打开压缩文件时自动解压缩</div><div class="line">;(setq global-font-lock-mode t);进行语法加亮</div><div class="line">(setq x-select-enable-clipboard t);允许emacs和外部其他程序的粘贴</div><div class="line">(setq mouse-yank-at-point t);使用鼠标中键可以粘贴</div><div class="line">(set-scroll-bar-mode nil);;取消滚动栏</div><div class="line">(tool-bar-mode nil);取消工具栏</div><div class="line">;;;;;;;;;;;;;;;;;;;;;;;;;;;; 显示时间设置 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</div><div class="line">(display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上</div><div class="line">(setq display-time-24hr-format t);;时间使用24小时制</div><div class="line">(setq display-time-day-and-date t);;时间显示包括日期和具体时间</div><div class="line">(setq display-time-use-mail-icon t);;时间栏旁边启用邮件设置</div><div class="line">(setq display-time-interval 10);;时间的变化频率，单位多少来着？</div><div class="line"></div><div class="line">;;;;;;;;;;;;;;;;;;;;;;;;;;; 显示时间设置结束 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</div><div class="line">(setq visible-bell t)</div><div class="line">;;关闭烦人的出错时的提示声</div><div class="line">(setq inhibit-startup-message t)</div><div class="line">;;关闭emacs启动时的画面</div><div class="line"></div><div class="line">;(setq font-lock-maximum-decoration t)</div><div class="line">;(setq font-lock-global-modes &apos;(not shell-mode text-mode))</div><div class="line">;(setq font-lock-verbose t)</div><div class="line">;(setq font-lock-maximum-size &apos;((t . 1048576) (vm-mode . 5250000)))</div><div class="line">;; 语法高亮。除 shell-mode 和 text-mode 之外的模式中使用语法高亮。</div><div class="line"></div><div class="line">(fset &apos;yes-or-no-p &apos;y-or-n-p)</div><div class="line">;; 改变 Emacs 固执的要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。</div><div class="line"></div><div class="line">(ansi-color-for-comint-mode-on)</div><div class="line">;真正shell－mode乱码解决。</div><div class="line"></div><div class="line">(setq default-fill-column 80)</div><div class="line">;默认显示 80列就换行</div><div class="line"></div><div class="line">(setq default-fill-column 120)</div><div class="line">;;把 fill-column 设为 60. 这样的文字更好读</div><div class="line"></div><div class="line">(setq default-major-mode &apos;text-mode)</div><div class="line">(add-hook &apos;text-mode-hook &apos;turn-on-auto-fill)</div><div class="line">;;设置缺省主模式是text，,并进入auto-fill次模式.而不是基本模式fundamental-mode</div><div class="line"></div><div class="line">(show-paren-mode t);显示括号匹配</div><div class="line">(setq show-paren-style &apos;parenthesis)</div><div class="line">;;括号匹配时可以高亮显示另外一边的括号，但光标不会烦人的跳到另一个括号处。</div><div class="line"></div><div class="line">(mouse-avoidance-mode &apos;animate)</div><div class="line">;;光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。</div><div class="line"></div><div class="line">;;;;;;;disable tip of the day</div><div class="line">(setq ecb-tip-of-the-day nil)</div><div class="line"></div><div class="line">(setq-default indent-tabs-mode nil)</div><div class="line">(setq default-tab-width 4)</div><div class="line">(setq tab-stop-list ())</div><div class="line">;;不用 TAB 字符来indent, 这会引起很多奇怪的错误。编辑 Makefile 的时候也不用担心，因为 makefile-mode 会把 TAB 键设置成真正的 TAB 字符，并且加亮显示的。</div><div class="line"></div><div class="line">(setq-default make-backup-files nil);不要生成临时文件</div><div class="line">(setq backup-directory-alist &apos;((&quot;.&quot; . &quot;~/.autosave&quot;)))</div><div class="line">;;设置自动备份文件保存的目录,以免把你的磁盘弄得乱七八糟(你可以</div><div class="line">;;去掉这一行试试看:P ~/.autosave 表示 主目录下的一个叫.autosave 的子目录，</div><div class="line">;;按照前面的方法设置主目录。</div><div class="line"></div><div class="line">;;最大化</div><div class="line">(defun my-maximized ()  </div><div class="line">  (interactive)  </div><div class="line">  (x-send-client-message  </div><div class="line">   nil 0 nil &quot;_NET_WM_STATE&quot; 32  </div><div class="line">   &apos;(2 &quot;_NET_WM_STATE_MAXIMIZED_HORZ&quot; 0))  </div><div class="line">  (x-send-client-message  </div><div class="line">   nil 0 nil &quot;_NET_WM_STATE&quot; 32  </div><div class="line">   &apos;(2 &quot;_NET_WM_STATE_MAXIMIZED_VERT&quot; 0)))  </div><div class="line">(my-maximized)</div><div class="line"></div><div class="line">;;自动插入匹配的括号</div><div class="line">;;C/C++  mode</div><div class="line"></div><div class="line">(defun my-c-mode-auto-pair ()</div><div class="line">  (interactive)</div><div class="line">  (make-local-variable &apos;skeleton-pair-alist)</div><div class="line">  (setq skeleton-pair-alist  &apos;(</div><div class="line">;;    (?&apos; _ &quot;&apos;&quot;)</div><div class="line">    (?\&quot; _ &quot;\&quot;&quot;)</div><div class="line">    (?\(  _ &quot;)&quot;)</div><div class="line">    (?\[  _ &quot;]&quot;)</div><div class="line">    (?&#123; \n &gt; _ \n ?&#125; &gt;)))</div><div class="line">  (setq skeleton-pair t)</div><div class="line">  (local-set-key (kbd &quot;(&quot;) &apos;skeleton-pair-insert-maybe)</div><div class="line">  (local-set-key (kbd &quot;&#123;&quot;) &apos;skeleton-pair-insert-maybe)</div><div class="line">;;  (local-set-key (kbd &quot;&apos;&quot;) &apos;skeleton-pair-insert-maybe)</div><div class="line">  (local-set-key (kbd &quot;\&quot;&quot;) &apos;skeleton-pair-insert-maybe)</div><div class="line">  (local-set-key (kbd &quot;[&quot;) &apos;skeleton-pair-insert-maybe))</div><div class="line">(add-hook &apos;c-mode-hook &apos;my-c-mode-auto-pair)</div><div class="line">(add-hook &apos;c++-mode-hook &apos;my-c-mode-auto-pair)</div><div class="line">;;输入左边的括号，就会自动补全右边的部分.包括(), &quot;&quot;, [] , &#123;&#125; , 等等。</div><div class="line"></div><div class="line">;;;;自动补齐</div><div class="line">(defun my-indent-or-complete ();;;;如果在单词中间就补齐，否则就是tab</div><div class="line">   (interactive)</div><div class="line">   (if (looking-at &quot;\\&gt;&quot;)</div><div class="line">       (hippie-expand nil)</div><div class="line">       (indent-for-tab-command))</div><div class="line"> )</div><div class="line"></div><div class="line">(global-set-key [(control tab)] &apos;my-indent-or-complete)</div><div class="line"></div><div class="line">;;;hippie的自动补齐策略，优先调用了senator的分析结果：</div><div class="line">(autoload &apos;senator-try-expand-semantic &quot;senator&quot;)</div><div class="line"></div><div class="line">(setq hippie-expand-try-functions-list</div><div class="line">       &apos;(</div><div class="line">        senator-try-expand-semantic</div><div class="line">        try-expand-dabbrev</div><div class="line">        try-expand-dabbrev-visible</div><div class="line">        try-expand-dabbrev-all-buffers</div><div class="line">        try-expand-dabbrev-from-kill</div><div class="line">        try-expand-list</div><div class="line">        try-expand-list-all-buffers</div><div class="line">        try-expand-line</div><div class="line">        try-expand-line-all-buffers</div><div class="line">        try-complete-file-name-partially</div><div class="line">        try-complete-file-name</div><div class="line">        try-expand-whole-kill</div><div class="line">        )</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">;;;; 当输入&quot;.&quot;或&quot;&gt;&quot;时，在另一个窗口中列出结构体或类的成员</div><div class="line"></div><div class="line">;; (defun my-c-mode-cedet-hook ()</div><div class="line"></div><div class="line">;;   (local-set-key &quot;.&quot; &apos;semantic-complete-self-insert)</div><div class="line">;;   (local-set-key &quot;&gt;&quot; &apos;semantic-complete-self-insert))</div><div class="line"></div><div class="line">;; (add-hook &apos;c-mode-common-hook &apos;my-c-mode-cedet-hook)</div><div class="line">;; (add-hook &apos;c++-mode-commom-hook &apos;my-c-mode-cedet-hook)</div><div class="line"></div><div class="line">;;配置CEDET</div><div class="line">(load-file &quot;~/.emacs.d/my_plus/cedet-1.0/common/cedet.el&quot;)</div><div class="line">(semantic-load-enable-excessive-code-helpers)</div><div class="line">(global-ede-mode t)</div><div class="line">(require &apos;semantic-ia)</div><div class="line">(require &apos;semantic-gcc)</div><div class="line">(global-srecode-minor-mode 1)</div><div class="line">(semantic-load-enable-semantic-debugging-helpers)</div><div class="line">(global-set-key [f12] &apos;semantic-ia-fast-jump);代码跳转</div><div class="line">;;</div><div class="line">(global-set-key [S-f12]</div><div class="line">                (lambda ()</div><div class="line">                  (interactive)</div><div class="line">                  (if (ring-empty-p (oref semantic-mru-bookmark-ring ring))</div><div class="line">                      (error &quot;Semantic Bookmark ring is currently empty&quot;))</div><div class="line">                  (let* ((ring (oref semantic-mru-bookmark-ring ring))</div><div class="line">                         (alist (semantic-mrub-ring-to-assoc-list ring))</div><div class="line">                         (first (cdr (car alist))))</div><div class="line">                    (if (semantic-equivalent-tag-p (oref first tag)</div><div class="line">                                                   (semantic-current-tag))</div><div class="line">                        (setq first (cdr (car (cdr alist)))))</div><div class="line">                    (semantic-mrub-switch-tags first))))</div><div class="line">;;代码跳转（跳回上次的位置）</div><div class="line"></div><div class="line">(require &apos;eassist nil &apos;noerror)</div><div class="line">(add-hook &apos;c-mode-common-hook</div><div class="line">          (lambda ()</div><div class="line">(define-key c-mode-base-map [M-f12] &apos;eassist-switch-h-cpp)</div><div class="line">));;;;;eassist.el就提供了一个在C++的头文件和实现文件间跳转</div><div class="line"></div><div class="line">(setq eassist-header-switches</div><div class="line">      &apos;((&quot;h&quot; . (&quot;cpp&quot; &quot;cxx&quot; &quot;c++&quot; &quot;CC&quot; &quot;cc&quot; &quot;C&quot; &quot;c&quot; &quot;mm&quot; &quot;m&quot;))</div><div class="line">        (&quot;hh&quot; . (&quot;cc&quot; &quot;CC&quot; &quot;cpp&quot; &quot;cxx&quot; &quot;c++&quot; &quot;C&quot;))</div><div class="line">        (&quot;hpp&quot; . (&quot;cpp&quot; &quot;cxx&quot; &quot;c++&quot; &quot;cc&quot; &quot;CC&quot; &quot;C&quot;))</div><div class="line">        (&quot;hxx&quot; . (&quot;cxx&quot; &quot;cpp&quot; &quot;c++&quot; &quot;cc&quot; &quot;CC&quot; &quot;C&quot;))</div><div class="line">        (&quot;h++&quot; . (&quot;c++&quot; &quot;cpp&quot; &quot;cxx&quot; &quot;cc&quot; &quot;CC&quot; &quot;C&quot;))</div><div class="line">        (&quot;H&quot; . (&quot;C&quot; &quot;CC&quot; &quot;cc&quot; &quot;cpp&quot; &quot;cxx&quot; &quot;c++&quot; &quot;mm&quot; &quot;m&quot;))</div><div class="line">        (&quot;HH&quot; . (&quot;CC&quot; &quot;cc&quot; &quot;C&quot; &quot;cpp&quot; &quot;cxx&quot; &quot;c++&quot;))</div><div class="line">        (&quot;cpp&quot; . (&quot;hpp&quot; &quot;hxx&quot; &quot;h++&quot; &quot;HH&quot; &quot;hh&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;cxx&quot; . (&quot;hxx&quot; &quot;hpp&quot; &quot;h++&quot; &quot;HH&quot; &quot;hh&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;c++&quot; . (&quot;h++&quot; &quot;hpp&quot; &quot;hxx&quot; &quot;HH&quot; &quot;hh&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;CC&quot; . (&quot;HH&quot; &quot;hh&quot; &quot;hpp&quot; &quot;hxx&quot; &quot;h++&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;cc&quot; . (&quot;hh&quot; &quot;HH&quot; &quot;hpp&quot; &quot;hxx&quot; &quot;h++&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;C&quot; . (&quot;hpp&quot; &quot;hxx&quot; &quot;h++&quot; &quot;HH&quot; &quot;hh&quot; &quot;H&quot; &quot;h&quot;))</div><div class="line">        (&quot;c&quot; . (&quot;h&quot;))</div><div class="line">        (&quot;m&quot; . (&quot;h&quot;))</div><div class="line">        (&quot;mm&quot; . (&quot;h&quot;))));;;;填补eassist-switch-h-cpp扩展名不全的BUG</div><div class="line"></div><div class="line">;(add-hook &apos;c-mode-common-hook &apos;my-c-mode-common-hook)</div><div class="line">;(defun my-c-mode-common-hook()</div><div class="line">(add-hook &apos;c-mode-common-hook</div><div class="line">          (lambda ()</div><div class="line">;(define-key c-mode-base-map [M-S-f12] &apos;semantic-analyze-proto-impl-toggle);;;;;在函数和声明和实现间跳转，不是这个功能不是十分准确，一般在cpp中函数实现处想跳到函数声明处正常，但是从声明处跳到实现处的话cedet不一定能找到cpp文件的位置。</div><div class="line"></div><div class="line">(define-key c-mode-base-map (kbd &quot;M-n&quot;) &apos;semantic-ia-complete-symbol-menu);;;;;;代码补全</div><div class="line">))</div><div class="line"></div><div class="line"></div><div class="line">;;;;;;;;;;;;;;配置ecb</div><div class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/my_plus/ecb-2.40&quot;)</div><div class="line">(require &apos;ecb)</div><div class="line">(ecb-activate)</div><div class="line"></div><div class="line"></div><div class="line">;;定制ecb窗口布局</div><div class="line">(custom-set-variables  </div><div class="line">  ;; custom-set-variables was added by Custom.  </div><div class="line">  ;; If you edit it by hand, you could mess it up, so be careful.  </div><div class="line">  ;; Your init file should contain only one such instance.  </div><div class="line">  ;; If there is more than one, they won&apos;t work right.  </div><div class="line"> &apos;(ecb-fix-window-size t)  </div><div class="line"> &apos;(ecb-layout-window-sizes nil)  </div><div class="line"> &apos;(ecb-options-version &quot;2.40&quot;)  </div><div class="line"> ;; &apos;(ecb-primary-secondary-mouse-buttons (quote mouse-1--mouse-2))  </div><div class="line"> &apos;(ecb-windows-width 0.18))</div><div class="line"></div><div class="line">;颜色配置</div><div class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/my_plus&quot;)</div><div class="line">(require &apos;color-theme)</div><div class="line">(color-theme-initialize)</div><div class="line">(color-theme-calm-forest)</div><div class="line"></div><div class="line"></div><div class="line">(global-set-key [f1] &apos;shell)                              ; 进入shell</div><div class="line">(global-set-key [S-f9] &apos;gdb)                              ; 调试</div><div class="line">;(setq compile-command &quot;g++ &quot;)                            ; 编译</div><div class="line">(global-set-key [f9] &apos;compile)</div><div class="line"></div><div class="line">;; c-mode公共设置</div><div class="line">(add-hook &apos;c-mode-common-hook &apos;my-c-mode-common-hook)</div><div class="line">(defun my-c-mode-common-hook ()</div><div class="line">  (setq default-tab-width 4)</div><div class="line">  (setq tab-width 4)</div><div class="line">  (setq c-basic-offset 4)</div><div class="line">  (hs-minor-mode t)</div><div class="line">  (define-key c-mode-base-map [(tab)] &apos;my-indent-or-complete)</div><div class="line">  (define-key c-mode-base-map [(meta ?/)] &apos;semantic-ia-complete-symbol-menu)</div><div class="line">  ;;;最后两行是代码自动补齐的快捷键</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">(global-set-key [S-f10] &apos;comment-or-uncomment-region)     ; 注释 / 取消注释</div><div class="line">(global-set-key [f10] &apos;c-indent-line-or-region)           ; 格式化代码</div><div class="line"></div><div class="line">;全屏</div><div class="line">(defun my-fullscreen ()</div><div class="line">  (interactive)</div><div class="line">  (x-send-client-message</div><div class="line">   nil 0 nil &quot;_NET_WM_STATE&quot; 32</div><div class="line">   &apos;(2 &quot;_NET_WM_STATE_FULLSCREEN&quot; 0))</div><div class="line">  ;; (x-send-client-message  </div><div class="line">  ;;  nil 0 nil &quot;_NET_WM_STATE&quot; 32  </div><div class="line">  ;;  &apos;(2 &quot;_NET_WM_STATE_MAXIMIZED_VERT&quot; 0))</div><div class="line">  )</div><div class="line">;; (my-fullscreen)</div><div class="line"></div><div class="line">(global-set-key [f11] &apos;my-fullscreen) ; emacs全屏</div><div class="line"></div><div class="line">;gdb快捷键设置</div><div class="line">(add-hook &apos;gdb-mode-hook &apos;(lambda ()</div><div class="line">                            (define-key c-mode-base-map [(f5)] &apos;gud-go)</div><div class="line">                            (define-key c-mode-base-map [(f7)] &apos;gud-step)</div><div class="line">                            (define-key c-mode-base-map [(f8)] &apos;gud-next)</div><div class="line">                            (define-key c-mode-base-map [(f6)] &apos;gud-cont)))</div><div class="line"></div><div class="line">;;代码折叠</div><div class="line">(global-set-key [f2] &apos;hs-toggle-hiding)</div><div class="line"></div><div class="line">;;;auctex配置</div><div class="line">(load &quot;auctex.el&quot; nil t t)</div><div class="line">(load &quot;preview-latex.el&quot; nil t t)</div><div class="line">(add-hook &apos;LaTeX-mode-hook #&apos;LaTeX-install-toolbar)</div><div class="line">(add-hook &apos;LaTeX-mode-hook &apos;turn-on-reftex) ; with AUCTeX LaTeX mode</div><div class="line">(add-hook &apos;latex-mode-hook &apos;turn-on-reftex) ; with Emacs latex mode</div><div class="line">(add-hook &apos;LaTeX-mode-hook (lambda()</div><div class="line">                              (add-to-list &apos;TeX-command-list &apos;(&quot;XeLaTeX&quot; &quot;%`xelatex%(mode)%&apos; %t&quot; TeX-run-TeX nil t))</div><div class="line">                              (setq TeX-command-default &quot;XeLaTeX&quot;)</div><div class="line">                                 (setq TeX-save-query  nil )</div><div class="line">                                  (setq TeX-show-compilation t)</div><div class="line">                                                               ))</div><div class="line">(setq TeX-auto-save t)</div><div class="line">(setq TeX-parse-self t)</div><div class="line">(setq-default TeX-master nil)</div><div class="line">(setq TeX-engine &apos;xetex)</div><div class="line">(setq TeX-PDF-mode t)</div><div class="line"></div><div class="line">;;;;;;;;;;;;weibo;;;;;;;;;;</div><div class="line">;;;;;;使用M-x weibo-timeline</div><div class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/my_plus/austin------weibo.emacs-0cf9784&quot;)</div><div class="line">(require &apos;weibo)</div><div class="line"></div><div class="line">;;;;;;保存上次emacs关闭时的状态</div><div class="line">(load &quot;desktop&quot;)</div><div class="line">(desktop-load-default)</div><div class="line">(desktop-read)</div><div class="line"></div><div class="line">;;当emacs退出时保存文件打开状态</div><div class="line"></div><div class="line">(add-hook &apos;kill-emacs-hook</div><div class="line">          &apos;(lambda()(desktop-save &quot;~/&quot;)))</div><div class="line"></div><div class="line">;;;;;;;;;;;;;;;;w3m设置;;;;;;;;;;;;;;;;;</div><div class="line">;; (add-to-list &apos;load-path &quot;/usr/share/emacs/site-lisp/w3m/&quot;)</div><div class="line">;; (require &apos;w3m)</div><div class="line">;; (setq w3m-home-page &quot;http://www.google.com.hk&quot;) ;设置主页</div><div class="line">;; (require &apos;mime-w3m)</div><div class="line">;;  ;设置显示图片</div><div class="line">;; (setq w3m-default-display-inline-images t)</div><div class="line">;; (setq w3m-default-toggle-inline-images t)</div><div class="line">;; ;;显示图标</div><div class="line">;; (setq w3m-show-graphic-icons-in-header-line t)</div><div class="line">;; (setq w3m-show-graphic-icons-in-mode-line t)</div><div class="line">;; ;;启用cookie</div><div class="line">;; (setq w3m-use-cookies t)</div><div class="line">;; ;;设定w3m运行的参数，分别为使用cookie和使用框架</div><div class="line">;; (setq w3m-command-arguments &apos;(&quot;-cookie&quot; &quot;-F&quot;))</div><div class="line"></div><div class="line">;; ;;;解决wrong type argument: stringp, nil问题</div><div class="line">;; (setq debug-on-error t);;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Emacs 配置之查找是否有“＊scheme＊”窗口]]></title>
      <url>http://yoursite.com/2014/01/04/Emacs%20%E9%85%8D%E7%BD%AE%E4%B9%8B%E6%9F%A5%E6%89%BE%E6%98%AF%E5%90%A6%E6%9C%89%E2%80%9C%EF%BC%8Ascheme%EF%BC%8A%E2%80%9D%E7%AA%97%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>最近终于下定决心学习一下lisp，打算从SICP开始吧。<br>编辑器打算采用Emacs，原因是它是用C和Emacs Lisp（Lisp的一种方言）编写的程序。<br>Emacs还真的是难学啊，在掌握了基本（基本）的操作后，开始配置Emacs的环境，参考的很多网上的一些代码，就不多说了。<br>这里要说的是我在借鉴了大牛王垠的配置后，在使用<f5><f6>的时候会报一个找不到find函数的的错误，源代码如下：</f6></f5></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">(defun scheme-split-window ()</div><div class="line">  (cond</div><div class="line">   ((= 1 (count-windows))</div><div class="line">    (delete-other-windows)</div><div class="line">    (split-window-vertically (floor (* 0.68 (window-height))))</div><div class="line">    (other-window 1)</div><div class="line">    (switch-to-buffer &quot;*scheme*&quot;)</div><div class="line">    (other-window 1))</div><div class="line">   ((not (find &quot;*scheme*&quot;</div><div class="line">               (mapcar (lambda (w) (buffer-name (window-buffer w)))</div><div class="line">                       (window-list))</div><div class="line">               :test &apos;equal))</div><div class="line">    (other-window 1)</div><div class="line">    (switch-to-buffer &quot;*scheme*&quot;)</div><div class="line">    (other-window -1))))</div><div class="line"></div><div class="line"></div><div class="line">(defun scheme-send-last-sexp-split-window ()</div><div class="line">  (interactive)</div><div class="line">  (scheme-split-window)</div><div class="line">  (scheme-send-last-sexp))</div><div class="line"></div><div class="line"></div><div class="line">(defun scheme-send-definition-split-window ()</div><div class="line">  (interactive)</div><div class="line">  (scheme-split-window)</div><div class="line">  (scheme-send-definition))</div><div class="line"></div><div class="line">(add-hook &apos;scheme-mode-hook</div><div class="line">  (lambda ()</div><div class="line">    (paredit-mode 1)</div><div class="line">    (define-key scheme-mode-map (kbd &quot;&lt;f5&gt;&quot;) &apos;scheme-send-last-sexp-split-window)</div><div class="line">    (define-key scheme-mode-map (kbd &quot;&lt;f6&gt;&quot;) &apos;scheme-send-definition-split-window)))</div></pre></td></tr></table></figure>
<p>问题就出在了schem-split-window函数的find语句，不知道为什么在我的电脑上不好使。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>但是我的心里不爽，十分想要把这个函数搞定，于是在完全对Lisp没有学习的我进行了不断的尝试。下面是结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(defun check-scheme()</div><div class="line">   (let ((res 21))</div><div class="line">   (dolist (x (mapcar(lambda (w) (setq a (buffer-name (window-buffer w)))) (window-list))) (when (string= &quot;*scheme*&quot; x)(setq res 100)))</div><div class="line">   (= res 100)</div><div class="line">   ))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(defun scheme-split-window ()</div><div class="line">  (cond</div><div class="line">   ((= 1 (count-windows))</div><div class="line">    (delete-other-windows)</div><div class="line">    (split-window-vertically (floor (* 0.68 (window-height))))</div><div class="line">    (other-window 1)</div><div class="line">    (switch-to-buffer &quot;*scheme*&quot;)</div><div class="line">    (other-window 1))</div><div class="line">    ((not (check-scheme))</div><div class="line">    (other-window 1)</div><div class="line">    (switch-to-buffer &quot;*scheme*&quot;)</div><div class="line">    (other-window -1))))</div></pre></td></tr></table></figure>
<p>可以看到，主要使定义了一个check-scheme的函数，这个函数虽然是我写的不过我也是对它一知半解，真是汗颜。下面应该开始努力学习SICP了，这可是个持久战啊，加油吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Emacs安装和设置tabbar]]></title>
      <url>http://yoursite.com/2014/01/03/2014-01-03-Emacs%E5%AE%89%E8%A3%85%E5%92%8C%E8%AE%BE%E7%BD%AEtabbar/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/CherylNatsu/article/details/6204737" target="_blank" rel="external">点击打开链接</a></p>
<p>Emacs是用Buffer来组织编辑区域的，一个Buffer就代表一个文件或者一个临时编辑区域，我们可以用一些函数来切换到前一个或后一个Buffer，也可以列出所有的Buffer来进行选择。一些现代编辑器都支持一种特性，那就是Tab，用标签来列出所有的文件并可以方便地在文件之间切换，直观而方便。万能的Emacs当然也可以做到这个。<br>增加标签特性需要tabbar.el，emacswiki上可以下载到这个插件：<br><a href="http://www.emacswiki.org/emacs/tabbar.el" target="_blank" rel="external">http://www.emacswiki.org/emacs/tabbar.el</a><br>放在任意目录并把这个目录添加到载入列表中，比如我们把tabbar.el放在~/.mylisp/下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">;;main plugin path  </div><div class="line">(add-to-list <span class="string">'load-path "~/.mylisp/")</span></div></pre></td></tr></table></figure></p>
<p>然后require这个插件并打开tabbar模式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(require 'tabbar)</div><div class="line">(tabbar-mode 1)</div></pre></td></tr></table></figure></p>
<p>进行一些快捷键设置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(global-set-key [(meta j)] 'tabbar-backward)</div><div class="line">(global-set-key [(meta k)] 'tabbar-forward)</div></pre></td></tr></table></figure></p>
<p>重新启动Emacs或eval-buffer就可以看到tabbar了：<br><img src="http://hi.csdn.net/attachment/201102/24/0_129852224272P1.gif" alt=""></p>
<p>默认的tabbar样式很难看，而且字体太小，不容易看清楚，我们接下来需要做的就是修改它的样式和配色。<br>下面使用一段网友菩提老祖给出的代码：<br>在.emacs下加入:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">;; 设置tabbar外观  </div><div class="line">;; 设置默认主题: 字体, 背景和前景颜色，大小  </div><div class="line">(set-face-attribute 'tabbar-default-face nil  </div><div class="line">                    :family "DejaVu Sans Mono"  </div><div class="line">                    :background "gray80"  </div><div class="line">                    :foreground "gray30"  </div><div class="line">                    :height 1.0  </div><div class="line">                    )  </div><div class="line">;; 设置左边按钮外观：外框框边大小和颜色  </div><div class="line">(set-face-attribute 'tabbar-button-face nil  </div><div class="line">                    :inherit 'tabbar-default  </div><div class="line">                    :box '(:line-width 1 :color "yellow70")  </div><div class="line">                    )  </div><div class="line">;; 设置当前tab外观：颜色，字体，外框大小和颜色  </div><div class="line">(set-face-attribute 'tabbar-selected-face nil  </div><div class="line">                    :inherit 'tabbar-default  </div><div class="line">                    :foreground "DarkGreen"  </div><div class="line">                    :background "LightGoldenrod"  </div><div class="line">                    :box '(:line-width 2 :color "DarkGoldenrod")  </div><div class="line">                    :overline "black"  </div><div class="line">                    :underline "black"  </div><div class="line">                    :weight 'bold  </div><div class="line">                    )  </div><div class="line">;; 设置非当前tab外观：外框大小和颜色  </div><div class="line">(set-face-attribute 'tabbar-unselected-face nil  </div><div class="line">                    :inherit 'tabbar-default  </div><div class="line">                    :box '(:line-width 2 :color "#00B2BF")  </div><div class="line">                    )</div></pre></td></tr></table></figure></p>
<p>现在我们的tabbar外观变成这样：<br><img src="http://hi.csdn.net/attachment/201102/24/0_129852224888ic.gif" alt=""><br>可以看出，已经几乎完成了，美中不足的是左边的几个按钮尺寸不正确，还需要修正。<br>打开~/.mylisp/tabbar.el，可以在里面找到类似这样的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(defconst tabbar-home-button-enabled-image</div><div class="line">  '((:type pbm :ascent center :data "/</div><div class="line">P2</div><div class="line">10 10</div><div class="line">255</div><div class="line">184 184 184 184 0 184 184 184 184 184 184 184 184 0 0 0 184 184 184 184</div><div class="line">184 184 0 0 0 0 0 184 184 184 184 0 0 0 0 0 0 0 184 184 184 184 255 0 0</div><div class="line">0 255 255 255 184 184 0 0 0 0 0 0 0 184 184 184 184 0 0 0 0 0 255 255 184</div><div class="line">184 184 184 0 0 0 255 255 184 184 184 184 184 184 0 255 255 184 184 184</div><div class="line">184 184 184 184 184 255 184 184 184 184</div><div class="line">"))</div><div class="line">  "Default image for the enabled home button.")</div></pre></td></tr></table></figure>
<p>这部分就是设定home-button的图像，同样，另外几个按钮的图像也可以找到：<br>tabbar-home-button-disabled-image<br>tabbar-scroll-left-button-enabled-image<br>tabbar-scroll-left-button-disabled-image<br>tabbar-scroll-right-button-enabled-image<br>tabbar-scroll-right-button-disabled-image</p>
<p>这种图片的格式是pbm，pbm是Portable Bitmap Format(便携位图格式)的缩写，该系列共有三种格式：<br>PBM 位图黑白位图<br>PGM 灰度位图<br>PPM 带颜色的像素位图<br>文件的前两个字节指明了该文件到底属于哪种格式：<br>Magic Number 类型                编码<br>P1     Portable bitmap ASCII<br>P2     Portable graymap ASCII<br>P3     Portable pixmap ASCII<br>P4     Portable bitmap Binary<br>P5     Portable graymap Binary<br>P6     Portable pixmap Binary<br>如果编码是ASCII的话文件的内容就由直接可读的数字组成，数字之间用空格隔开。<br>我们修改后的tabbar高度变为20像素，宽度没变，减去原来的10像素那么上下分别加宽5像素。<br>也就是增加5 <em> 10 = 30个数字，5 </em> 10 = 10个数字。<br>修改tabbar里每个图片的数据块<br>P2保持不变，接下来的两个数字分别是宽度和高度，那么原来的”10 10”就要修改为”10 19”，255为白色的值，保持为原来的255.然后在描述各个像素的数据前后分别加上50个184，保持和原来的颜色一样。<br>tabbar-home-button-enabled-image的那段就变为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(defconst tabbar-home-button-enabled-image</div><div class="line">  '((:type pbm :ascent center :data "/</div><div class="line">P2</div><div class="line">10 20</div><div class="line">255</div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 0 184 184 184 184 184 184 184 184 0 0 0 184 184 184 184</div><div class="line">184 184 0 0 0 0 0 184 184 184 184 0 0 0 0 0 0 0 184 184 184 184 255 0 0</div><div class="line">0 255 255 255 184 184 0 0 0 0 0 0 0 184 184 184 184 0 0 0 0 0 255 255 184</div><div class="line">184 184 184 0 0 0 255 255 184 184 184 184 184 184 0 255 255 184 184 184</div><div class="line">184 184 184 184 184 255 184 184 184 184</div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">184 184 184 184 184 184 184 184 184 184 </div><div class="line">"))</div><div class="line">  "Default image for the enabled home button.")</div></pre></td></tr></table></figure></p>
<p> 其他部分也照着这样修改就行了，最后的效果如图：<img src="http://hi.csdn.net/attachment/201102/24/0_1298522254zQl2.gif" alt=""> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]Android滑动菜单特效实现]]></title>
      <url>http://yoursite.com/2013/12/23/2013-12-23-Android%E6%BB%91%E5%8A%A8%E8%8F%9C%E5%8D%95%E7%89%B9%E6%95%88%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>出处：<a href="http://blog.csdn.net/guolin_blog/article/details/8714621" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/8714621</a></p>
<p>人人客户端有一个特效还是挺吸引人的，在主界面手指向右滑动，就可以将菜单展示出来，而主界面会被隐藏大部分，但是仍有左侧的一小部分同菜单一起展示。<br>据说人人客户端的这个特效是从facebook客户端模仿来的，至于facebook是不是又从其它地方模仿来的就不得而知了。好，今天我们就一起来实现这个效果，总之我第一次看到这个特效是在人人客户端看到的，我也就主观性地认为我是在模仿人人客户端的特效了。<br>虽然现在网上类似这种效果的实现也非常多，可是我发现实现方案大都非常复杂，并不容易理解。但其实这种效果并不难实现，因此我今天给大家带来的也是史上最简单的滑动菜单实现方案。<br>首先还是讲一下实现原理。在一个Activity的布局中需要有两部分，一个是菜单(menu)的布局，一个是内容(content)的布局。两个布局横向排列，菜单布局在左，内容布局在右。初始化的时候将菜单布局向左偏移，以至于能够完全隐藏，这样内容布局就会完全显示在Activity中。然后通过监听手指滑动事件，来改变菜单布局的左偏移距离，从而控制菜单布局的显示和隐藏。原理图如下：<br><img src="http://img.my.csdn.net/uploads/201303/24/1364136791_5684.png" alt=""><br>将菜单布局的左偏移值改成0时，效果图如下：<br><img src="http://img.my.csdn.net/uploads/201303/24/1364137323_7998.png" alt=""><br>好，我们开始用代码来实现。首先在Eclipse中新建一个Android项目，项目名就叫做RenRenSlideMenuDemo。然后写一下布局文件，创建或打开layout目录下的activity_main.xml文件，加入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/menu"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/menu"</span> &gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/content"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/content"</span> &gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个布局文件的最外层布局是一个LinearLayout，排列方向是水平方向排列。这个LinearLayout下面嵌套了两个子LinearLayout，分别就是菜单的布局和内容的布局。这里为了要让布局尽量简单，菜单布局和内容布局里面没有加入任何控件，只是给这两个布局各添加了一张背景图片，这两张背景图片是我从人人客户端上截下来的图。这样我们可以把注意力都集中在如何实现滑动菜单的效果上面，不用关心里面各种复杂的布局了。<br>创建或打开MainActivity，这个类仍然是程序的主Activity，也是这次demo唯一的Activity，在里面加入如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnTouchListener</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 滚动显示和隐藏menu时，手指滑动需要达到的速度。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SNAP_VELOCITY = <span class="number">200</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 屏幕宽度值。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> screenWidth;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu最多可以滑动到的左边缘。值由menu布局的宽度来定，marginLeft到达此值之后，不能再减少。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> leftEdge;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu最多可以滑动到的右边缘。值恒为0，即marginLeft到达0之后，不能增加。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rightEdge = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu完全显示时，留给content的宽度值。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> menuPadding = <span class="number">80</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 主内容的布局。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> View content;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu的布局。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> View menu;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu布局的参数，通过此参数来更改leftMargin的值。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> LinearLayout.LayoutParams menuParams;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 记录手指按下时的横坐标。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> xDown;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 记录手指移动时的横坐标。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> xMove;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 记录手机抬起时的横坐标。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> xUp;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * menu当前是显示还是隐藏。只有完全显示或隐藏menu时才会更改此值，滑动过程中此值无效。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isMenuVisible;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 用于计算手指滑动的速度。 </div><div class="line">     */  </div><div class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        initValues();  </div><div class="line">        content.setOnTouchListener(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 初始化一些关键性数据。包括获取屏幕的宽度，给content布局重新设置宽度，给menu布局重新设置宽度和偏移距离等。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initValues</span><span class="params">()</span> </span>&#123;  </div><div class="line">        WindowManager window = (WindowManager) getSystemService(Context.WINDOW_SERVICE);  </div><div class="line">        screenWidth = window.getDefaultDisplay().getWidth();  </div><div class="line">        content = findViewById(R.id.content);  </div><div class="line">        menu = findViewById(R.id.menu);  </div><div class="line">        menuParams = (LinearLayout.LayoutParams) menu.getLayoutParams();  </div><div class="line">        <span class="comment">// 将menu的宽度设置为屏幕宽度减去menuPadding  </span></div><div class="line">        menuParams.width = screenWidth - menuPadding;  </div><div class="line">        <span class="comment">// 左边缘的值赋值为menu宽度的负数  </span></div><div class="line">        leftEdge = -menuParams.width;  </div><div class="line">        <span class="comment">// menu的leftMargin设置为左边缘的值，这样初始化时menu就变为不可见  </span></div><div class="line">        menuParams.leftMargin = leftEdge;  </div><div class="line">        <span class="comment">// 将content的宽度设置为屏幕宽度  </span></div><div class="line">        content.getLayoutParams().width = screenWidth;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;  </div><div class="line">        createVelocityTracker(event);  </div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">            <span class="comment">// 手指按下时，记录按下时的横坐标  </span></div><div class="line">            xDown = event.getRawX();  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">            <span class="comment">// 手指移动时，对比按下时的横坐标，计算出移动的距离，来调整menu的leftMargin值，从而显示和隐藏menu  </span></div><div class="line">            xMove = event.getRawX();  </div><div class="line">            <span class="keyword">int</span> distanceX = (<span class="keyword">int</span>) (xMove - xDown);  </div><div class="line">            <span class="keyword">if</span> (isMenuVisible) &#123;  </div><div class="line">                menuParams.leftMargin = distanceX;  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                menuParams.leftMargin = leftEdge + distanceX;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (menuParams.leftMargin &lt; leftEdge) &#123;  </div><div class="line">                menuParams.leftMargin = leftEdge;  </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menuParams.leftMargin &gt; rightEdge) &#123;  </div><div class="line">                menuParams.leftMargin = rightEdge;  </div><div class="line">            &#125;  </div><div class="line">            menu.setLayoutParams(menuParams);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">            <span class="comment">// 手指抬起时，进行判断当前手势的意图，从而决定是滚动到menu界面，还是滚动到content界面  </span></div><div class="line">            xUp = event.getRawX();  </div><div class="line">            <span class="keyword">if</span> (wantToShowMenu()) &#123;  </div><div class="line">                <span class="keyword">if</span> (shouldScrollToMenu()) &#123;  </div><div class="line">                    scrollToMenu();  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    scrollToContent();  </div><div class="line">                &#125;  </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wantToShowContent()) &#123;  </div><div class="line">                <span class="keyword">if</span> (shouldScrollToContent()) &#123;  </div><div class="line">                    scrollToContent();  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    scrollToMenu();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            recycleVelocityTracker();  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 判断当前手势的意图是不是想显示content。如果手指移动的距离是负数，且当前menu是可见的，则认为当前手势是想要显示content。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span> 当前手势想显示content返回true，否则返回false。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">wantToShowContent</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> xUp - xDown &lt; <span class="number">0</span> &amp;&amp; isMenuVisible;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 判断当前手势的意图是不是想显示menu。如果手指移动的距离是正数，且当前menu是不可见的，则认为当前手势是想要显示menu。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span> 当前手势想显示menu返回true，否则返回false。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">wantToShowMenu</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> xUp - xDown &gt; <span class="number">0</span> &amp;&amp; !isMenuVisible;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 判断是否应该滚动将menu展示出来。如果手指移动距离大于屏幕的1/2，或者手指移动速度大于SNAP_VELOCITY， </div><div class="line">     * 就认为应该滚动将menu展示出来。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span> 如果应该滚动将menu展示出来返回true，否则返回false。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldScrollToMenu</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> xUp - xDown &gt; screenWidth / <span class="number">2</span> || getScrollVelocity() &gt; SNAP_VELOCITY;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 判断是否应该滚动将content展示出来。如果手指移动距离加上menuPadding大于屏幕的1/2， </div><div class="line">     * 或者手指移动速度大于SNAP_VELOCITY， 就认为应该滚动将content展示出来。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span> 如果应该滚动将content展示出来返回true，否则返回false。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldScrollToContent</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> xDown - xUp + menuPadding &gt; screenWidth / <span class="number">2</span> || getScrollVelocity() &gt; SNAP_VELOCITY;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 将屏幕滚动到menu界面，滚动速度设定为30. </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToMenu</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> ScrollTask().execute(<span class="number">30</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 将屏幕滚动到content界面，滚动速度设定为-30. </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollToContent</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> ScrollTask().execute(-<span class="number">30</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 创建VelocityTracker对象，并将触摸content界面的滑动事件加入到VelocityTracker当中。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> event </div><div class="line">     *            content界面的滑动事件 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createVelocityTracker</span><span class="params">(MotionEvent event)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;  </div><div class="line">            mVelocityTracker = VelocityTracker.obtain();  </div><div class="line">        &#125;  </div><div class="line">        mVelocityTracker.addMovement(event);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 获取手指在content界面滑动的速度。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span> 滑动速度，以每秒钟移动了多少像素值为单位。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getScrollVelocity</span><span class="params">()</span> </span>&#123;  </div><div class="line">        mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);  </div><div class="line">        <span class="keyword">int</span> velocity = (<span class="keyword">int</span>) mVelocityTracker.getXVelocity();  </div><div class="line">        <span class="keyword">return</span> Math.abs(velocity);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 回收VelocityTracker对象。 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recycleVelocityTracker</span><span class="params">()</span> </span>&#123;  </div><div class="line">        mVelocityTracker.recycle();  </div><div class="line">        mVelocityTracker = <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ScrollTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>, <span class="title">Integer</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">doInBackground</span><span class="params">(Integer... speed)</span> </span>&#123;  </div><div class="line">            <span class="keyword">int</span> leftMargin = menuParams.leftMargin;  </div><div class="line">            <span class="comment">// 根据传入的速度来滚动界面，当滚动到达左边界或右边界时，跳出循环。  </span></div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </div><div class="line">                leftMargin = leftMargin + speed[<span class="number">0</span>];  </div><div class="line">                <span class="keyword">if</span> (leftMargin &gt; rightEdge) &#123;  </div><div class="line">                    leftMargin = rightEdge;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">if</span> (leftMargin &lt; leftEdge) &#123;  </div><div class="line">                    leftMargin = leftEdge;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">                publishProgress(leftMargin);  </div><div class="line">                <span class="comment">// 为了要有滚动效果产生，每次循环使线程睡眠20毫秒，这样肉眼才能够看到滚动动画。  </span></div><div class="line">                sleep(<span class="number">20</span>);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (speed[<span class="number">0</span>] &gt; <span class="number">0</span>) &#123;  </div><div class="line">                isMenuVisible = <span class="keyword">true</span>;  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                isMenuVisible = <span class="keyword">false</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> leftMargin;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... leftMargin)</span> </span>&#123;  </div><div class="line">            menuParams.leftMargin = leftMargin[<span class="number">0</span>];  </div><div class="line">            menu.setLayoutParams(menuParams);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Integer leftMargin)</span> </span>&#123;  </div><div class="line">            menuParams.leftMargin = leftMargin;  </div><div class="line">            menu.setLayoutParams(menuParams);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 使当前线程睡眠指定的毫秒数。 </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@param</span> millis </div><div class="line">     *            指定当前线程睡眠多久，以毫秒为单位 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Thread.sleep(millis);  </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>全部的代码都在这里了，我们可以看到，加上注释总共才两百多行的代码就能实现滑动菜单的特效。下面我来对以上代码解释一下，首先初始化的时候调用initValues方法，在这里面将内容布局的宽度设定为屏幕的宽度，菜单布局的宽度设定为屏幕的宽度减去menuPadding值，这样可以保证在菜单布局展示的时候，仍有一部分内容布局可以看到。如果不在初始化的时候重定义两个布局宽度，就会按照layout文件里面声明的一样，两个布局都是fill_parent，这样就无法实现滑动菜单的效果了。然后将菜单布局的左偏移量设置为负的菜单布局的宽度，这样菜单布局就会被完全隐藏，只有内容布局会显示在界面上。<br>之后给内容布局注册监听事件，这样当手指在内容布局上滑动的时候就会触发onTouch事件。在onTouch事件里面，根据手指滑动的距离会改变菜单布局的左偏移量，从而控制菜单布局的显示和隐藏。当手指离开屏幕的时候，会判断应该滑动到菜单布局还是内容布局，判断依据是根据手指滑动的距离或者滑动的速度，细节可以看代码中的注释。<br>最后还是给出AndroidManifest.xml的代码，都是自动生成的，非常简单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.renrenslidemenudemo"</span>  </div><div class="line">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span>  </div><div class="line">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span>  </span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"8"</span>  </div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"8"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>  </span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span>  </div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>  </div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.NoTitleBar"</span> &gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span>  </span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"com.example.renrenslidemenudemo.MainActivity"</span>  </div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;  </div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span>  </div><div class="line">  </div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>好了，现在我们运行一下，看一下效果吧，首先是程序刚打开的时候，显示的是内容布局。用手指在界面向右滑动，可以看到菜单布局出现。<br><img src="http://img.my.csdn.net/uploads/201303/25/1364193322_3549.png" alt=""><br><img src="http://img.my.csdn.net/uploads/201303/25/1364193329_2086.png" alt=""><br>而当菜单布局完全展示的时候，效果如下图：<br><img src="http://img.my.csdn.net/uploads/201303/25/1364193500_7762.png" alt=""><br>今天大家看到了史上最简单的滑动菜单实现方案，确实是非常简单。那么有朋友也许会问了，在一个Activity当中这样实现滑动菜单是很简单，可是如果我的应用程序有好多个Activity都需要滑动菜单，每个Activity里都这么实现一遍，也变得复杂了。没错，当前的这个解决方案只适用于单个Activity中，如果是想在多个Activity中都实现滑动菜单的效果，请参考我的另一篇文章 <a href="http://blog.csdn.net/sinyu890807/article/details/8744400" target="_blank" rel="external">Android滑动菜单框架完全解析，教你如何一分钟实现滑动菜单特效</a>。<br>有对双向滑动菜单感兴趣的朋友请转阅 <a href="http://blog.csdn.net/guolin_blog/article/details/9671609" target="_blank" rel="external">Android双向滑动菜单完全解析，教你如何一分钟实现双向滑动特效。</a><br>好了，今天的讲解到此结束，有疑问的朋友可以在下面留言。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse上GIT插件EGIT使用手册]]></title>
      <url>http://yoursite.com/2013/12/22/2013-12-22-Eclipse%E4%B8%8AGIT%E6%8F%92%E4%BB%B6EGIT%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<p>出处：<a href="http://www.eoeandroid.com/thread-273360-1-1.html" target="_blank" rel="external">点击打开链接</a><br>看到大家在讨论github的使用，我用的也不多，偶尔clone一些好的源代码而已。我用的是Eclipse的插件EGit，全部操作直接在eclispe里就可以完成了，哈哈，我比较懒，官网上教的那些git clone 什么的高深操作我也不会，感觉egit还是比较好用的，所以上网搜了一个关于egit的详细操作的帖子，现在搬过来和大家一起分享一下。我找到的这个帖子的地址是：<a href="http://blog.csdn.net/luckarecs/article/details/7427605" target="_blank" rel="external">http://blog.csdn.net/luckarecs/article/details/7427605</a>。虽然这篇帖子也写的是转载，我没找到最原始的出处，（PS:有人反馈说原始出处是这：<a href="http://blog.csdn.net/laizhenhai88/article/details/7234974" target="_blank" rel="external">http://blog.csdn.net/laizhenhai88/article/details/7234974</a>，我不敢确定，不过还是把这个链接放上来吧，谢谢<a href="http://my.eoe.cn/uter" target="_blank" rel="external">@ter</a> 的反馈），不过如果大家转载的话，还是要把这个链接加上，这也算是保护知识产权了吧，哈哈，好了，费话不多说了，以下是详细内容：</p>
<p>一_安装EGIT插件</p>
<p><img src="http://hi.csdn.net/attachment/201202/4/0_1328344248HjHt.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344253yaRI.gif" alt=""></p>
<p><a href="http://download.eclipse.org/egit/updates/" target="_blank" rel="external">http://download.eclipse.org/egit/updates/</a><br>或者使用Eclipse Marketplace，搜索EGit<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283442576Ec3.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344261vRzT.gif" alt=""></p>
<p>二_使用EGIT前的配置</p>
<p>配置个人信息，最重要的是user.name和user.email<br>l  Preferences &gt; Team &gt; Git &gt; Configuration<br>l  New Entry<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344607u7A0.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344609GteE.gif" alt=""></p>
<p>三_新建GIT仓库</p>
<p>新建NC module project<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344740rZ6x.gif" alt=""><br>l  File &gt; Team &gt; Share Project 选择GIT<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283447436zT0.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328344746mW1B.gif" alt=""><br>创建仓库后，在$workspace\demo目录下的.git文件夹，就是git的仓库地址。和CVS、SVN不同，GIT不会在每一个目录下建立版本控制文件夹，仅在根目录下建立仓库<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283447519N4x.gif" alt=""><br>同时，eclipse中的project也建立git版本控制，此时未创建分支，处于NO-HEAD状态<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283447532Ch2.gif" alt=""><br>文件夹中的符号”?”表示此文件夹处于untracked状态，这样就成功创建GIT仓库。<br>四_配置.gitignore</p>
<p>此时我们尝试做一次提交<br>l  Team -&gt; Commit…<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345023y9I9.gif" alt=""><br>如上图所示，Author和Committer会默认为Git配置的用户信息。下面的Files窗口中可以看到此次提交的文件，其中有非常多带有NC_HOME的文件，此时可以猜测出，在我们的project中链接的NC_HOME也被GIT默认到版本控制中了，如下图：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345081Q6Um.gif" alt=""><br>显然NC_HOME和out是不需要进行版本控制的，我们可以通过配置.gitignore来排除这两个文件夹<br>打开Navigator窗口，在project根目录中添加.gitignore文件，将需要排除控制的目录写入.gitignore文件中<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345029oJez.gif" alt=""><br>再次尝试commit，需要提交的文件已经被过滤<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345033V0N7.gif" alt=""><br>首次提交后，会自动生成master分支<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345036arNV.gif" alt=""><br>然后在public中新建一个文件，可以看到图标依然是问号，处于untracked状态，即git没有对此文件进行监控<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283450392Ce4.gif" alt=""><br>通过Team -&gt; Add to index可以将文件加入git索引，进行版本监控<br><img src="http://hi.csdn.net/attachment/201202/4/0_132834520400aX.gif" alt=""><br>可以看到图标显示也有了变化（EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作）<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345219G49D.gif" alt=""><br>也可以通过Team -&gt; Untrack将文件从索引控制中排除。<br>将此次新增的文件commit到仓库中，文件将处于unmodified状态，或者说，这就是一种staged状态<br><img src="http://hi.csdn.net/attachment/201202/4/0_132834523653s5.gif" alt=""><br>然后修改文件的内容，文件将处于modified状态<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345291m6W7.gif" alt=""></p>
<p>五_查看历史记录Team<br> -&gt; Show in history可以查看版本历史提交记录<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345425WsGl.gif" alt=""></p>
<p><img src="http://hi.csdn.net/attachment/201202/4/0_1328345430z69s.gif" alt=""><br>可以选择对比模式<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345433N8y8.gif" alt=""></p>
<p><img src="http://hi.csdn.net/attachment/201202/4/0_1328345466MXXm.gif" alt=""></p>
<p>六_远程GIT仓库此小结的前提是已经搭建GIT服务器，并通过SSH协议连接，可参看文档《RHEL下搭建GIT服务器》《WindowsXP下搭建GIT服务器》《GIT服务器使用基础》。本文使用RHEL5.5系统下的GIT-2012-01-11，用户root/password，GIT仓库统一存放在/app/gitspace目录下。<br>首先通过shell工具连接到服务器，建立空仓库gitdemo，此时的ssh访问地址如下,分别由协议名称、用户名、IP、端口、git仓库目录组成。<br>ssh://root@192.168.1.101:22/app/gitspace/gitdemo<br>打开GIT资源库窗口，选择克隆资源库<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345738oZG2.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_132834574166VH.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345743Am6m.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345746zgGL.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345753jstN.gif" alt=""><br>现在已经把远程的GIT仓库克隆到本地，接下来需要将仓库检出为NC模块项目。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345757hzNO.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345760JTc4.gif" alt=""><br>最后得到gitdemo模块项目，分支是mirror<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328345767S3tK.gif" alt=""></p>
<p>七_推送远程仓库</p>
<p>克隆服务器端仓库后，会在本地建立一个一样的仓库，称本地仓库。在本地进行commit操作将把更新提交到本地仓库，然后可以将服务器端的更新pull到本地仓库进行合并，最后将合并好的本地仓库push到服务器端，这样就进行了一次远程提交。<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283463456NBm.gif" alt=""><br>先提交一次到本地仓库<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283463843Sj2.gif" alt=""><br>然后push到服务器端的mirror分支，Team -&gt; remote -&gt; Push<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346386xH9s.gif" alt=""><br>完成推送后，可以在服务器端mirror镜像的log中查看到此次记录<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346393Y2zN.gif" alt=""></p>
<p>八_解决推送冲突</p>
<p>多人协作开发的情况下，往服务器推送更新时难免出现冲突，所以推送之前需要解决服务器端的最新版本和本地仓库的冲突。Pull操作就是把服务器端的更新拉拢到本地仓库进行合并，解决好合并冲突后，就可以顺利push到服务器分支了。<br>假设现在Mairo兄弟在用GIT协作开发NewSuperMairoBro游戏，目前服务器端的mushroom.java文件的内容如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346684zy27.gif" alt=""><br>MairoBro克隆出代码后，Mairo哥哥做了如下修改<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346687u0mm.gif" alt=""><br>Mairo弟弟做了如下修改<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346689MxZZ.gif" alt=""><br>然后Mairo弟弟先push代码，Mairo哥哥使用pull来合并本地仓库和远程仓库，将发行文件出现冲突，此时GIT会自动合并冲突的文件，如下图所示：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346692XCnN.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346695vKlr.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346699BBna.gif" alt=""><br>很明显自动合并的冲突文件不能直接使用，我们可以手动调整，右键发生冲突的文件，选择Team -&gt; Merge Tool<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346702761R.gif" alt=""><br>第一项是将GIT自动合并过的文件和服务器端文件进行对比<br>第二项是用本地最新版本的文件和服务器端文件进行对比，建议用此项<br>接下来就是熟悉的对比界面<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346705MmV1.gif" alt=""><br>Mairo哥哥将冲突文件修改如下<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346708rY2R.gif" alt=""><br>然后右键点击此冲突文件，选择Team -&gt; Add to index再次将文件加入索引控制，此时文件已经不是冲突状态，并且可以进行提交并push到服务器端<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346711cX96.gif" alt=""><br>解决合并冲突后，Mairo弟弟只需要将服务器中合并后的版本pull到本地，就完成了一次协作开发的代码合并。从历史记录中可以看到，从mushroom开始历史进入分支，先是mushroomA的记录，然后是mushroomB的记录，最后历史分支合并。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328346871dn4e.gif" alt=""></p>
<p>九_Rebase和Merge的区别<br>Rebase和Merge操作最终的结果是一样的，但是实现原理不一样。<br>从上面的MairoBro例子可以知道pull大概对历史记录进行了怎样的合并操作，其实默认pull的操作就是一个分支的merge操作，如下图重现一下：<br>Mairo弟弟的提交记录如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347200wAN9.gif" alt=""><br>Mairo哥哥的提交记录如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347229mZIA.gif" alt=""><br>首先是Mairo弟弟把更新push到服务器，这样服务器端的记录就和Mairo弟弟本地的记录是一样的，接着Mairo哥哥执行pull操作，现在分析下pull是如何操作的。<br>l  pull默认就是先把服务器端的最新记录更新到本地的Remote Tracking中对应的mirror分支<br>l  接着对Local的mirror分支和Remote Tracking的mirror分支进行merge操作<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347244tBs2.gif" alt=""><br>Merge操作后的结果就是会新增加一个merge记录节点，如下所示：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347282wDpE.gif" alt=""><br>从上图可以看出，mushroomA是在mushroomB之前的，这个时间关系不取决于谁先执行push，而取决于本地仓库中谁先执行commit。所以merge会按照时间顺序严格的记录每一次commit。<br>接下来看看rebase，其实rebase也是把两个分支进行合并的操作，当Mairo弟弟push更新后，服务器端的mirror分支的历史如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347200wAN9.gif" alt=""><br>Mairo哥哥本地的历史如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347229mZIA.gif" alt=""><br>现在Mairo哥哥不是执行merge操作，而是执行rebase操作，最后结果如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347473ffN2.gif" alt=""><br>很明显的区别是没有出现分支的记录，而且注意到mushroomA<em>，请注意这个记录和mushroomA不是同一个记录，我们先分析下rebase操作下，Mairo哥哥的历史记录都做了哪些变化：<br>l  先将当前分支的更新部分保存到临时区域，而当前分支重置到上一次pull的记录<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347508mYnn.gif" alt=""><br>l  然后将服务器端的更新添加到当前分支，此时当前分支和服务器端分支是一样的<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347536tbiO.gif" alt=""><br>l  最后将原分支的更新部分mushroomA提交到当前分支的后面，就是要在mushroomB的后面添加mushroomA的更新，当然此时更新记录已经不是之前的mushroomA了，如果出现冲突则使用对比工具解决冲突，最后记录变成mushroomA</em>。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347473ffN2.gif" alt=""><br>如果Mairo哥哥提交过mushroomA1、mushroomA2、mushroomA3，那么执行rebase后会对mushroomA1、mushroomA2、mushroomA3分别顺序执行上图所示的合并，最后记录为mushroomA1<em>、mushroomA2</em>、mushroomA3*。很显然rebase操作更复杂，冲突的概率也更高，并且不是按照时间顺序记录。</p>
<p>十_Rebase和Merge如何选择的简单解析</p>
<p>此小结为什么说是简单解析呢，因为rebase和merge的选择问题讨论比较激烈，笔者也没有一个定论，而且git也处于研究发展阶段，很多理论还没有完全的纯熟。<br>对于一个多人开发团队频繁提交更新的情况，如果使用merge会使得历史线图非常复杂，并且merge一次就会新增一个记录点，如果使用rebase就是完全的线性开发。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347857efEw.gif" alt=""><br>上图所示是Merge和Rebase的两个结果，显然你不想要merge的混乱结果吧，你能告诉我merge图中那条线是master分支吗？<br>所以给出如下建议，如果同一文件反复修改或提交次数比较多，预期会出现很多的conflict，那么可以使用merge合并，仅需要解决一次冲突即可（不过，大范围主题式的修改，是不是应该事先就新开一个分支呢？）；如果修改范围小，预期conflict少，则建议使用rebase。<br>EGIT中默认的pull操作是Fetch+Merge，如果要用rebase，可以分开操作。先执行Fetch更新remote tracking，再执行rebase进行合并（下一小节将介绍rebase操作）。或者修改pull的默认操作，在.git/config文件中配置：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347889tV99.gif" alt=""><br>上述配置只对mirror分支有效，也可做全局配置，在$HOME/.gitconfig中配置，windows系统如果没有配置HOME变量的话就默认在$documents and settings/ USER目录下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328347928l3Lf.gif" alt=""></p>
<p>十一_Fetch和Rebase</p>
<p>MairoBro来做fetch和rebase的测试，首先Mairo弟弟在client中添加文件OPQ分别提交，并push到服务器，如图：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348110dNdd.gif" alt=""><img src="http://hi.csdn.net/attachment/201202/4/0_1328348113edl4.gif" alt=""><br>此时服务器端的历史已经被更新，但是Mairo哥哥的remote tracking中mirror分支并没有更新到最新的记录，如图：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348146FPEJ.gif" alt=""><br>所以需要更新remote tracking中的分支，使得它与服务器端的分支同步，右键点击资源库选择Fetch<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283481777q4z.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348180baAS.gif" alt=""><br>这样就更新了本地的remote tracking中的分支，使得它和服务器端分支同步。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348227l3Ko.gif" alt=""><br>然后Mairo哥哥在本地的private中添加文件ABC，并分别提交到本地仓库中。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348246iu76.gif" alt=""><img src="http://hi.csdn.net/attachment/201202/4/0_1328348259x81C.gif" alt=""><br>然后将本地mirror分支和remote tracking中的mirror分支进行rebase，先checkout本地mirror分支 ，然后右键点击选择Rebase<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348295Y7x7.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_13283483169XQS.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_132834831814IS.gif" alt=""><br><img src="http://hi.csdn.net/attachment/201202/4/0_1328348321Tzcz.gif" alt=""><br>如上图可以看到历史记录的顺序是OPQABC，已经rebase成功，接着push到服务器即可。</p>
<p>十二_重置功能</p>
<p>GIT中有三种重置功能，分别是soft、mixed、hard，区别如下：<br>l  Soft - 当前分支重置到指定commit记录位置，索引和工作树不变；<br>l  Mixed - 当前分支重置到指定commit记录位置，索引被更新，工作树不变；<br>l  Hard - 当前分支重置到指定commit记录位置，索引和工作树都更新。<br>貌似不好理解，首先要理解GIT的三个区域（工作树、索引区、仓库），可以参考文档《GIT简介》。<br>先做soft的测试，新建Soft.java文件，可以看到此文件未添加到索引控制<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353367e252.gif" alt=""><br>先进行一次提交，提交后在History窗口中重置此次提交，如图：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353373LRmv.gif" alt=""><br>重置后查看工作树，如图<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353376daF8.gif" alt=""><br>从上图可以看出，soft文件还存在，说明重置没有改变工作树，而且soft文件不是“问号”图标，说明已经添加到索引，说明索引也没有变。唯一重置的是历史记录。<br>然后新建Mixed.java文件，此时Mixed.java也没有添加到索引控制，然后提交。<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353379ku86.gif" alt=""><br>在History窗口中重置<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353382A6PP.gif" alt=""><br>重置后查看工作树结果如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353385ZAM5.gif" alt=""><br>从上图可以看出，Mixed.java文件还存在，说明工作树没有改变，但是文件状态是untracked，说明索引被更新，此时文件没有添加索引控制。<br>最后来看hard重置，新建Hard.java文件，此时文件没有添加索引，然后提交。<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283533909Xou.gif" alt=""><br>在History界面重置此次提交，如图：<br><img src="http://hi.csdn.net/attachment/201202/4/0_1328353392So7T.gif" alt=""><br>重置后再查看工作树，结果如下：<br><img src="http://hi.csdn.net/attachment/201202/4/0_13283533956366.gif" alt=""><br>可以看到Hard.java文件已经不存在了，说明索引和工作树都被更新。</p>
<p>PS：这里对第六点远程GIT仓库稍微做个补充，我们一般情况下从github官网上clone代码的时候，这个远程仓库就是github了，首先我们在github上找到自己想要的源代码，这里以eoe客户端的源代码为例，如图：<br><img src="http://www.eoeandroid.com/data/attachment/forum/201304/28/111242opyci2xnopmya6c6.jpg" alt=""><br>在网页的顶部我们可以找到地址，有https,ssh,和git only三个，我一般都是选的ssh,然后把这个地址copy出来，再回到eclipse中，点击打开clone a git repository,在URI中把刚才复制的地址粘贴进去，然后在protocol中选择ssh就行了，其它信息会自动补全<br><img src="http://www.eoeandroid.com/data/attachment/forum/201304/28/111804jto7g0qa9g8aqvgh.jpg" alt=""> 未命名.jpg (55.7 KB, 下载次数: 0)<br><a href="http://www.eoeandroid.com/forum.php?mod=attachment&amp;aid=OTM3NjF8MGFmZTIyOTh8MTM4NzcxNjAxMXw5Nzk2NDh8MjczMzYw&amp;nothumb=yes" target="_blank" rel="external">下载附件</a>  <a href="">保存到相册</a><br>2013-4-28 11:18 上传</p>
<p>接着点next就行了，往后的操作就和文章中介绍的一样了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转] 编写你的第一个垃圾收集器]]></title>
      <url>http://yoursite.com/2013/12/22/2013-12-22-%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>原文链接： <a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/" target="_blank" rel="external">Bob Nystrom</a><br>翻译： <a href="http://blog.jobbole.com/" target="_blank" rel="external">伯乐在线 </a>- <a href="http://blog.jobbole.m/author/deathmonkey/" target="_blank" rel="external">deathmonkey</a><br>译文链接： <a href="http://blog.jobbole.com/53376/" target="_blank" rel="external">http://blog.jobbole.com/53376/</a></p>
<p>本文由 <a href="http://blog.jobbole.com/" target="_blank" rel="external">伯乐在线</a> - <a href="http://blog.jobbole.com/author/deathmonkey/" target="_blank" rel="external">deathmonkey</a> 翻译自 <a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/" target="_blank" rel="external">Bob Nystrom</a>。欢迎加入<a href="http://www.jobbole.com/groups/6/" target="_blank" rel="external">技术翻译小组</a>。转载请参见文章末尾处的要求。</p>
<p>伯乐在线补充：本文作者 Bob Nystrom 是 Google Dart 团队的一名工程师，所以下文中”处理<a href="https://www.dartlang.org/" target="_blank" rel="external">一些工作上的事情</a>“中的链接是指向了Dart 官网。Bob 之前（曾在 EA 公司）做过游戏开发，UI 设计。更多信息，请看<a href="http://www.stuffwithstuff.com/bob-nystrom.html" target="_blank" rel="external">他的简历</a>。</p>
<p>每当我倍感压力以及有很多事情要做的时候，我总是有这样一种反常的反应，那就是希望做一些其他的事情来摆脱这种状况。通常情况下，这些事情都是些我能够编写并实现的独立的小程序。</p>
<p>一天早上，我几乎要被一堆事情给整疯了——我得写我那本<a href="http://gameprogrammingpatterns.com/" target="_blank" rel="external">《游戏编程模式》</a>、处理<a href="https://www.dartlang.org/" target="_blank" rel="external">一些工作上的事情</a>、还要准备<a href="https://thestrangeloop.com/sessions/dart-for-the-language-enthusiast" target="_blank" rel="external">一场Strange Loop的演讲</a>，然后这时我突然想到：“我该写一个垃圾收集器了”。</p>
<p>是的，我知道那一刻让我看上去有多疯狂。不过我的神经故障却是你实现一段基础的程序语言设计的免费教程！在100行左右毫无新意的c代码中，我设法实现一个基本的<a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="external">标记和扫描</a>#Na.C3.AFve_mark-and-sweep)模块。</p>
<p>垃圾收集被认为是有更多编程牛人出没的水域之一，但在这里，我会给你一个漂亮的儿童游泳池去玩耍。可能这里面仍然会有一些能手，但至少这会是一个浅水区。</p>
<h3 id="精简、复用、再复用"><a href="#精简、复用、再复用" class="headerlink" title="精简、复用、再复用"></a>精简、复用、再复用</h3><p>垃圾回收背后有这样一个基本的观念：编程语言（大多数的）似乎总能访问无限的内存。而开发者可以一直分配、分配再分配——像魔法一样，取之不尽用之不竭。</p>
<p>当然，我们从来都没有无限的内存。所以计算机实现回收的方式就是当机器需要分配一些内存，而内存又不足时，让它回收垃圾。</p>
<p>“垃圾(Garbage)”在这里表示那些事先分配过但后来不再被使用的内存。而基于对无限内存的幻想，我们需要确保“不再被使用”对于编程语言来说是非常安全的。要知道在你的程序试图访问一些随机的对象时它们却刚好正在得到回收，这可不是一件好玩的事情。</p>
<p>为了实现回收，编程语言需要确保程序不再使用那个对象。如果该程序不能得到一个对象的引用，那么显然它也不会再去使用它。所以关于”in use”的定义事实上非常简单：</p>
<ol>
<li>任何被一个变量引用的对象，仍然在作用域内，就属于”in use”状态。</li>
<li>任何被另一个对象引用的对象，仍在使用中，就是”in use”状态。</li>
</ol>
<p>如果对象A被一个变量引用，而它又有一些地方引用了对象B，那么B就是在使用中(“in use”)，因为你能够通过A来访问到它。这样到最后的结果就是得到一张可访问的对象图——以一个变量为起点并能够遍历到的所有对象。任何不在图中的对象对于程序来说都是死的，而它的内存也是时候被回收了。</p>
<h3 id="标记并清理"><a href="#标记并清理" class="headerlink" title="标记并清理"></a>标记并清理</h3><p>有很多<a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="external">不同的方法</a>#Tracing_garbage_collectors)可以实现关于查找和回收所有未被使用的对象的操作，但是最简单也是第一个被提出的算法就是”标记-清除”算法。它由John McCarthy——Lisp(列表处理语言)的发明者提出，所以你现在做的事情就像是与一个古老的神在交流，但希望你别用一些<a href="http://zh.wikipedia.org/wiki/%E9%9C%8D%E5%8D%8E%E5%BE%B7%C2%B7%E8%8F%B2%E5%88%A9%E6%99%AE%E6%96%AF%C2%B7%E6%B4%9B%E5%A4%AB%E5%85%8B%E6%8B%89%E5%A4%AB%E7%89%B9" target="_blank" rel="external">洛夫克拉夫特</a>式的方法——最后以你的大脑和视网膜的完全枯萎而结束。该算法的工作原理几乎与我们对”可访问性(reachability)”的定义完全一样：</p>
<ol>
<li>从根节点开始，依次遍历整个对象图。每当你访问到一个对象，在上面设置一个”标记(mark)”位，置为true。</li>
<li>一旦搞定，找出所有标记位为”not”的对象集，然后删除它们。</li>
</ol>
<p>对，就是这样。我猜你可能已经想到了，对吧？如果是，那你可能就成为了一位被引用了数百次的文章的作者。所以这件事情的教训就是，想要在CS(计算机科学)领域中出名，你不必开始就搞出一个很牛的东西，你只需要第一个整出来即可，哪怕这玩意看上去很搓。</p>
<h3 id="对象对"><a href="#对象对" class="headerlink" title="对象对"></a>对象对</h3><p>在我们落实这两个步骤之前，让我们先做些不相关的准备工作。我们不会为一种语言真正实现一个解释器——没有分析器，字节码、或任何这种愚蠢的东西。但我们确实需要一些少量的代码来创建一些垃圾去收集。<br>让我们假装我们正在为一种简单的语言编写一个解释器。它是动态类型，并且有两种类型的变量：int 和 pair。 下面是用枚举来标示一个对象的类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    OBJ_INT,</div><div class="line">    OBJ_PAIR</div><div class="line">&#125; ObjectType;</div></pre></td></tr></table></figure></p>
<p> 其中，pair可以是任何一对东西，两个int、一个int和另一个pair，什么都可以。<a href="http://www.flickr.com/photos/raganwald/212588975/" target="_blank" rel="external">随你怎么想都行</a>。因为一个对象在虚拟机中可以是这两个当中的任意一种类型，所以在c中实现对象的典型方法是时用一个<a href="http://en.wikipedia.org/wiki/Tagged_union" target="_blank" rel="external">标记联合体</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">typedef</span> <span class="keyword">struct</span> sObject &#123;</div><div class="line"> 	ObjectType type;	 </div><div class="line">  	<span class="keyword">union</span> &#123;</div><div class="line">    	<span class="comment">/* OBJ_INT */</span></div><div class="line">    	<span class="keyword">int</span> value;</div><div class="line"> </div><div class="line">    	<span class="comment">/* OBJ_PAIR */</span></div><div class="line">    	<span class="keyword">struct</span> &#123;</div><div class="line">      	<span class="keyword">struct</span> sObject* head;</div><div class="line">      	<span class="keyword">struct</span> sObject* tail;</div><div class="line">    	&#125;;</div><div class="line">  	&#125;;</div><div class="line">&#125; Object;</div></pre></td></tr></table></figure></p>
<p>这个Object结构拥有一个type字段表示它是哪种类型的值——要么是int要么是pair。接下来用一个union来持有这个int或是pair的数据。如果你对c语言很生疏，一个union就是一个结构体，它将字段重叠在内存中。由于一个给定的对象只能是int或是pair，我们没有任何理在一个单独的对象中同时为所有这3个字段分配内存。一个union就搞定。帅吧。</p>
<h3 id="小虚拟机"><a href="#小虚拟机" class="headerlink" title="小虚拟机"></a>小虚拟机</h3><p>现在我们可以将其包装在一个小的虚拟机结构中了。它(指虚拟机)在这里的角色是用一个栈来存储在当前作用域内的变量。大多数语言虚拟机要么是基于栈(如JVM和CLR)的，要么是基于寄存器(如Lua)的。但是不管哪种情况，实际上仍然存在这样一个栈。它用来存放在一个表达式中间需要用到的临时变量和局部变量。<br>我们来简洁明了地建立这个模型，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_MAX 256</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  	Object* <span class="built_in">stack</span>[STACK_MAX];</div><div class="line">  	<span class="keyword">int</span> stackSize;</div><div class="line">&#125; VM;</div></pre></td></tr></table></figure></p>
<p>现在我们得到了一个合适的基本数据结构，接下来我们一起敲些代码来创建些东西。首先，我们来写一个方法创建并初始化一个虚拟机：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">VM* <span class="title">newVM</span><span class="params">()</span> </span>&#123;</div><div class="line">  VM* vm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VM));</div><div class="line">  vm-&gt;stackSize = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> vm;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一旦我们得到了虚拟机，我们需要能够操作它的堆栈：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(VM* vm, Object* value)</span> </span>&#123;</div><div class="line">  assert(vm-&gt;stackSize &lt; STACK_MAX, <span class="string">"Stack overflow!"</span>);</div><div class="line">  vm-&gt;<span class="built_in">stack</span>[vm-&gt;stackSize++] = value;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function">Object* <span class="title">pop</span><span class="params">(VM* vm)</span> </span>&#123;</div><div class="line">  assert(vm-&gt;stackSize &gt; <span class="number">0</span>, <span class="string">"Stack underflow!"</span>);</div><div class="line">  <span class="keyword">return</span> vm-&gt;<span class="built_in">stack</span>[--vm-&gt;stackSize];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，现在我们能敲些玩意到”变量”中了，我们需要能够实际的创建对象。首先来一些辅助函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object* <span class="title">newObject</span><span class="params">(VM* vm, ObjectType type)</span> </span>&#123;</div><div class="line">  Object* object = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Object));</div><div class="line">  object-&gt;type = type;</div><div class="line">  <span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它实现了内存的分配和设置类型标记。我们一会儿会重温它的。利用它，我们可以编写方法将每种类型的对象压到虚拟机的栈上：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushInt</span><span class="params">(VM* vm, <span class="keyword">int</span> intValue)</span> </span>&#123;</div><div class="line">  Object* object = newObject(vm, OBJ_INT);</div><div class="line">  object-&gt;value = intValue;</div><div class="line">  push(vm, object);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function">Object* <span class="title">pushPair</span><span class="params">(VM* vm)</span> </span>&#123;</div><div class="line">  Object* object = newObject(vm, OBJ_PAIR);</div><div class="line">  object-&gt;tail = pop(vm);</div><div class="line">  object-&gt;head = pop(vm);</div><div class="line"> </div><div class="line">  push(vm, object);</div><div class="line">  <span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是我们的小小虚拟机。如果我们有调用这些方法的解析器和解释器，那我们手上就有了一种对上帝都诚实的语言。而且，如果我们有无限的内存，它甚至能够运行真正的程序。可惜咱们没有，所以让我们来收集些垃圾吧。</p>
<h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>第一个阶段就是标记(marking)。我们需要扫遍所有可以访问到的对象，并设置其标志位。现在我们需要做的第一件事就是为对象添加一个标志位(mark bit)：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sObject &#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> marked;</div><div class="line">  <span class="comment">/* Previous stuff... */</span></div><div class="line">&#125; Object;</div></pre></td></tr></table></figure></p>
<p>一旦我们创建了一个新的对象，我们将修改newObject()方法初始化marked为0。为了标记所有可访问的对象，我们从内存中的变量入手，这样就意味着要扫一遍堆栈。看上去就像这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">markAll</span><span class="params">(VM* vm)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vm-&gt;stackSize; i++) &#123;</div><div class="line">    mark(vm-&gt;<span class="built_in">stack</span>[i]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>里面又调用了mark。我们来分几步搭建它。第一：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mark</span><span class="params">(Object* object)</span> </span>&#123;</div><div class="line">  object-&gt;marked = <span class="number">1</span>;</div><div class="line">&#125;`</div></pre></td></tr></table></figure></p>
<p>毫无疑问，这是最重要的一点。我们标记了这个对象自身是可访问的，但记住，我们还需要处理对象中的引用：可访问性是递归的。如果该对象是一个pair，它的两个字段也是可访问的。操作很简单：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mark</span><span class="params">(Object* object)</span> </span>&#123;</div><div class="line">  object-&gt;marked = <span class="number">1</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (object-&gt;type == OBJ_PAIR) &#123;</div><div class="line">    mark(object-&gt;head);</div><div class="line">    mark(object-&gt;tail);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这里有一个bug。你看到了吗？我们正在递归，但我们没有检查循环。如果你有一堆pair在一个循环中相互指向对方，这就会造成栈溢出并崩溃。<br>为了解决这个情况，我们仅需要做的是在访问到了一个已经处理过的对象时，退出即可。所以完整的mark()方法应该是：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mark</span><span class="params">(Object* object)</span> </span>&#123;</div><div class="line">  <span class="comment">/* If already marked, we're done. Check this first</span></div><div class="line">     to avoid recursing on cycles in the object graph. */</div><div class="line">  <span class="keyword">if</span> (object-&gt;marked) <span class="keyword">return</span>;</div><div class="line"> </div><div class="line">  object-&gt;marked = <span class="number">1</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (object-&gt;type == OBJ_PAIR) &#123;</div><div class="line">    mark(object-&gt;head);</div><div class="line">    mark(object-&gt;tail);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们可以调用markAll()方法了，它会准确的标记内存中所有可访问的对象。我们已经成功一半了！</p>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>下一个阶段就是清理一遍所有我们已经分配过(内存)的对象并释放那些没有被标记过的(对象)。但这里有一个问题：所有未被标记的对象——我们所定义的——都不可达！我们都不能访问到它们！<br>虚拟机已经实现了对象引用的语义：所以我们只在变量和pair元素中储存指向对象的指针。当一个对象不再被任何指针指向时，那我们就完全失去它了，而这也实际上造成了内存泄露。<br>解决这个问题的诀窍是：虚拟机可以有它自己的对象引用，而这不同于对语言使用者可读的那种语义。换句话说，我们自己可以保留它们的痕迹。<br>这么做最简单的方法是仅维持一张由所有分配过(内存)的对象(组成)的链表。我们在这个链表中将对象自身扩展为一个节点：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> sObject &#123;</div><div class="line">  <span class="comment">/* The next object in the list of all objects. */</span></div><div class="line">  <span class="keyword">struct</span> sObject* next;</div><div class="line"> </div><div class="line">  <span class="comment">/* Previous stuff... */</span></div><div class="line">&#125; Object;</div></pre></td></tr></table></figure></p>
<p>虚拟机会保留这个链表头的痕迹：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  <span class="comment">/* The first object in the list of all objects. */</span></div><div class="line">  Object* firstObject;</div><div class="line"></div><div class="line">  <span class="comment">/* Previous stuff... */</span></div><div class="line">&#125; VM;</div></pre></td></tr></table></figure></p>
<p>在newVM()方法中我们确保将firstObject初始化为NULL。无论何时创建一个对象，我们都将其添加到链表中：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object* <span class="title">newObject</span><span class="params">(VM* vm, ObjectType type)</span> </span>&#123;</div><div class="line">  Object* object = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Object));</div><div class="line">  object-&gt;type = type;</div><div class="line">  object-&gt;marked = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* Insert it into the list of allocated objects. */</span></div><div class="line">  object-&gt;next = vm-&gt;firstObject;</div><div class="line">  vm-&gt;firstObject = object;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一来，即便是语言找不到一个对像，它还是可以被实现。想要清理并删除那些未被标记的对象，我们只需要遍历该链表：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sweep</span><span class="params">(VM* vm)</span></span></div><div class="line">&#123;</div><div class="line">  Object** object = &amp;vm-&gt;firstObject;</div><div class="line">  <span class="keyword">while</span> (*object) &#123;</div><div class="line">    <span class="keyword">if</span> (!(*object)-&gt;marked) &#123;</div><div class="line">      <span class="comment">/* This object wasn't reached, so remove it from the list</span></div><div class="line">         and free it. */</div><div class="line">      Object* unreached = *object;</div><div class="line"></div><div class="line">      *object = unreached-&gt;next;</div><div class="line">      <span class="built_in">free</span>(unreached);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">/* This object was reached, so unmark it (for the next GC)</span></div><div class="line">         and move on to the next. */</div><div class="line">      (*object)-&gt;marked = <span class="number">0</span>;</div><div class="line">      object = &amp;(*object)-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码读起来有点棘手，因为那个指针(指object)指向的是一个指针，但是通过它的工作你会发现它还是非常简单的。它只是扫遍了整张链表。只要它碰到了一个未被标记的对象，它就会释放该对象的内存并将其从链表中移除。最后，我们将会删除所有不可访问的对象。<br>祝贺你！我们已经有了一个垃圾收集器！现在只剩下一点工作了：实际调用它！首先我们将这两个阶段整合在一起：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gc</span><span class="params">(VM* vm)</span> </span>&#123;</div><div class="line">  markAll(vm);</div><div class="line">  sweep(vm);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>没有比这更明显的”标记-清除”算法了。现在最棘手的是搞清楚什么时候来实际调用它。”内存不足(low on memory)”是个什么意思？尤其是对于现在的计算机，它们几乎拥有无限的虚拟内存！<br>事实证明，我们没有完全正确或错误的答案。这真的取决于你使用虚拟机的目的以及让它运行在什么样的硬件上。为了让这个例子看上去很简单，我们仅在进行了一定数量的内存分配之后开始收集。事实上一些语言的实现就是这么做的，而这也很容易。<br>我们将邀请虚拟机来追踪我们到底创建了多少(对象)：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  <span class="comment">/* The total number of currently allocated objects. */</span></div><div class="line">  <span class="keyword">int</span> numObjects;</div><div class="line"> </div><div class="line">  <span class="comment">/* The number of objects required to trigger a GC. */</span></div><div class="line">  <span class="keyword">int</span> maxObjects;</div><div class="line"> </div><div class="line">  <span class="comment">/* Previous stuff... */</span></div><div class="line">&#125; VM;</div></pre></td></tr></table></figure></p>
<p>接下来，初始化：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">VM* <span class="title">newVM</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">/* Previous stuff... */</span></div><div class="line"> </div><div class="line">  vm-&gt;numObjects = <span class="number">0</span>;</div><div class="line">  vm-&gt;maxObjects = INITIAL_GC_THRESHOLD;</div><div class="line">  <span class="keyword">return</span> vm;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，INITIAL_GC_THRESHOLD为你启动第一个GC(垃圾收集器)的对象数量。较小的值会更节省内存，而较大的值则更省时。自己看着办吧。<br>每当我们创建一个对象，我们增加numObjects，如果它达到最大值就启动一次收集：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object* <span class="title">newObject</span><span class="params">(VM* vm, ObjectType type)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (vm-&gt;numObjects == vm-&gt;maxObjects) gc(vm);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create object... */</span></div><div class="line"> </div><div class="line">  vm-&gt;numObjects++;</div><div class="line">  <span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我不会费心的显示它(指numObjects)，但是我们也会稍微调整sweep()方法，每释放一次就递减numObjects。最后，我们修改了gc()方法来更新最大值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gc</span><span class="params">(VM* vm)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> numObjects = vm-&gt;numObjects;</div><div class="line"> </div><div class="line">  markAll(vm);</div><div class="line">  sweep(vm);</div><div class="line"> </div><div class="line">  vm-&gt;maxObjects = vm-&gt;numObjects * <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每次收集之后，我们更新maxObjects——以进行收集后仍在活动的对象为基准。乘法器让我们的堆随着活动中的对象数量的增加而增加。同样，也会随着一些对象最终被释放掉而自动减少。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你成功了！如果你全部照做了，那你现在已经得到了一个简单的垃圾收集算法的句柄。如果你想看完整的代码，<a href="https://github.com/munificent/mark-sweep" target="_blank" rel="external">在这里</a>。我再强调一点，尽管这个收集器很简单，但它可不是一个玩具。<br>你可以在这上面做一大堆的优化（像在GC和程序设计语言这些事情中，90%的努力都在优化上），但它的核心代码可是真正的GC。它与目前Ruby和Lua中的收集器非常的相似。你可以使用一些类似的代码到你的项目中。去做些很酷的事情吧！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]cocos2d-x 2x 菜鸟编塔防 01 准备工作]]></title>
      <url>http://yoursite.com/2013/12/16/2013-12-16-cocos2d-x%202x%20%E8%8F%9C%E9%B8%9F%E7%BC%96%E5%A1%94%E9%98%B2%2001%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p><a href="http://farsa.blog.51cto.com/6172595/1132161" target="_blank" rel="external">点击打开链接</a></p>
<h4 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h4><p>最近在学习2dx，看了几个源码，手很是痒痒，下面跟我一下编写一个类似保卫大萝卜的塔防游戏吧。</p>
<hr>
<h4 id="二-不废话开始编代码。"><a href="#二-不废话开始编代码。" class="headerlink" title="二.不废话开始编代码。"></a>二.不废话开始编代码。</h4><p>我用的cocos2d-x 的版本是2.04 ，编辑器是vs2010.首先创建一个工程，我们取名字叫“TDgame”。<br>之后我们添加几个常用到的模块。<br> 1.动画管理器，AnimationManager类<br> AnimationManager类这是个单例的类,大家要问这样弄个单例类出来有什么好处呢，有什么作用呢，一开始我也是不明白，最后看了看魔塔的源代码，总结了一下：1. 实现了一体化，也就是说把所有的动画加载都放到一个函数中，我们可以让这个函数出现在想要的位置上，比如,我们有一大堆的精灵动画，如果在游戏中加载起来会让游戏有点卡，这时候我们就可以创建一个进入游戏时的加载页面，同时执行加载动画。一般游戏也都是这么做的。</p>
<ol>
<li>规范代码，有利于编写代码。</li>
</ol>
<p>好了它的优点和作用就说到这吧，肯定还有很多，我也就不知道了。</p>
<p>关于单例的问题大家可以看看这篇文章<br><a href="http://www.zilongshanren.com/cocos2d-x-design-pattern" target="_blank" rel="external">http://www.zilongshanren.com/cocos2d-x-design-pattern-singleton1/</a></p>
<p>回到主题，首先我们粘贴一段代码。</p>
<hr>
<h2 id="第一步：复制黏贴"><a href="#第一步：复制黏贴" class="headerlink" title="第一步：复制黏贴"></a>第一步：复制黏贴</h2><p>在魔塔的源代码中有一个单例类的模板，无脑的复制黏贴，这个模板是动画管理器AnimationManager的基类，这个有什么用呢，其实用处很简单就是一个单例的模板让继承他的子类都变成单例模式，下次再做别的游戏时用到直接继承，多方便。当然你也可以不用这个模板，直接让AnimationManager变成单例类。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SINGLETON_H </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _SINGLETON_H </span></div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; </div><div class="line"><span class="keyword">class</span> Singleton </div><div class="line">&#123; </div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="comment">//获取类的唯一实例 </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> T* <span class="title">instance</span><span class="params">()</span></span>; </div><div class="line">    <span class="comment">//释放类的唯一实例 </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>; </div><div class="line"><span class="keyword">protected</span>: </div><div class="line">    Singleton(<span class="keyword">void</span>)&#123;&#125; </div><div class="line">    ~Singleton(<span class="keyword">void</span>)&#123;&#125; </div><div class="line">    <span class="keyword">static</span> T* <span class="number">_</span>instance; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; </div><div class="line"><span class="keyword">inline</span> T* Singleton&lt;T&gt;::instance() </div><div class="line">&#123; </div><div class="line">    <span class="keyword">if</span>(!<span class="number">_</span>instance) </div><div class="line">        <span class="number">_</span>instance = <span class="keyword">new</span> T; </div><div class="line">    <span class="keyword">return</span> <span class="number">_</span>instance; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; </div><div class="line"><span class="keyword">void</span> Singleton&lt;T&gt;::release() </div><div class="line">&#123; </div><div class="line">    <span class="keyword">if</span> (!<span class="number">_</span>instance) </div><div class="line">        <span class="keyword">return</span>; </div><div class="line">    <span class="keyword">delete</span> <span class="number">_</span>instance; </div><div class="line">    <span class="number">_</span>instance = <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">//cpp文件中需要先声明静态变量 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_SINGLETON_MEMBER(_Ty)   \ </span></div><div class="line">    <span class="keyword">template</span> &lt;&gt; <span class="number">_</span>Ty* Singleton&lt;<span class="number">_</span>Ty&gt;::<span class="number">_</span>instance = <span class="literal">NULL</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span><span class="comment">//_SINGLETON_H</span></span></div></pre></td></tr></table></figure>
<p>好了这样我们的标准的单例基类就写好了,记住这是一个.h文件 注意：<br>1.子类要在子类的cpp文件开始写上DECLARE_SINGLETON_MEMBER(子类的名字)<br>2.子类最好写上构造和析构函数</p>
<hr>
<h2 id="第二步：编写动画管理器AnimationManager类"><a href="#第二步：编写动画管理器AnimationManager类" class="headerlink" title="第二步：编写动画管理器AnimationManager类"></a>第二步：编写动画管理器AnimationManager类</h2><p>先看代码：###AnimationManager.h</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ANIMATION_MANAGER_H_ </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _ANIMATION_MANAGER_H_ </span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"type.h"</span> </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d; </div><div class="line"> </div><div class="line"><span class="keyword">class</span> AnimationManager : <span class="keyword">public</span> Singleton&lt;AnimationManager&gt; </div><div class="line">&#123; </div><div class="line"><span class="keyword">public</span>: </div><div class="line">    AnimationManager(); </div><div class="line">    ~AnimationManager(); </div><div class="line">    <span class="comment">//初始化动画模版缓存表 </span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">initAnimationMap</span><span class="params">()</span></span>; </div><div class="line">    <span class="comment">//根据名字得到一个动画模板 </span></div><div class="line">    <span class="function">CCAnimation* <span class="title">getAnimation</span><span class="params">(<span class="keyword">int</span> key)</span></span>; </div><div class="line">    <span class="comment">//创建一个动画实例 </span></div><div class="line">    <span class="function">CCAnimate* <span class="title">createAnimate</span><span class="params">(<span class="keyword">int</span> key)</span></span>; </div><div class="line">    <span class="comment">//创建一个动画实例 </span></div><div class="line">    <span class="function">CCAnimate* <span class="title">createAnimate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* key)</span></span>; </div><div class="line">    <span class="comment">//清空所有缓存 </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">releaseAllCacha</span><span class="params">()</span></span>; </div><div class="line"><span class="keyword">protected</span>: </div><div class="line">    <span class="comment">//加载勇士行走动画模版 </span></div><div class="line">    <span class="function">CCAnimation* <span class="title">createAnimationByDirection</span><span class="params">(HeroDirection direction)</span></span>; </div><div class="line">&#125;; </div><div class="line"><span class="comment">//定义动画管理器实例的别名 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sAnimationMgr AnimationManager::instance() </span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h3 id="AnimationManager-cpp"><a href="#AnimationManager-cpp" class="headerlink" title="AnimationManager.cpp"></a>AnimationManager.cpp</h3><pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AnimationManager.h"</span> </span>
DECLARE_SINGLETON_MEMBER(AnimationManager); 



AnimationManager::AnimationManager() 
{ 

} 

AnimationManager::~AnimationManager() 
{ 

} 

<span class="keyword">bool</span> AnimationManager::initAnimationMap() 
{ 
    <span class="keyword">bool</span> sRet = <span class="literal">false</span>; 
    <span class="keyword">do</span>  
    { 
        <span class="comment">//1.添加图片进内存 </span>
        CCTexture2D * creepTexture = CCTextureCache::sharedTextureCache()-&gt;addImage(<span class="string">"boy.png"</span>); 
        CC_BREAK_IF(!creepTexture); 
        <span class="comment">//2.加载各个方向的敌人动画 </span>
        <span class="keyword">char</span> temp[<span class="number">20</span>]; 
        <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, aDown); 
        <span class="comment">//加载勇士向下走的动画 </span>
        CCAnimationCache::sharedAnimationCache()-&gt;addAnimation(createAnimationByDirection(kDown), temp); 
        <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, aRight); 
        <span class="comment">//加载勇士向右走的动画 </span>
        CCAnimationCache::sharedAnimationCache()-&gt;addAnimation(createAnimationByDirection(kRight), temp); 
        <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, aLeft); 
        <span class="comment">//加载勇士向左走的动画 </span>
        CCAnimationCache::sharedAnimationCache()-&gt;addAnimation(createAnimationByDirection(kLeft), temp); 
        <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, aUp); 
        <span class="comment">//加载勇士向上走的动画 </span>
        CCAnimationCache::sharedAnimationCache()-&gt;addAnimation(createAnimationByDirection(kUp), temp); 

        sRet = <span class="literal">true</span>; 
    } <span class="keyword">while</span> (<span class="number">0</span>); 
    <span class="keyword">return</span> sRet; 
} 

CCAnimation* AnimationManager::getAnimation( <span class="keyword">int</span> key ) 
{ 
    <span class="keyword">char</span> temp[<span class="number">20</span>]; 
    <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, key); 
    <span class="keyword">return</span> CCAnimationCache::sharedAnimationCache()-&gt;animationByName(temp); 
} 

CCAnimate* AnimationManager::createAnimate( <span class="keyword">int</span> key ) 
{ 
    <span class="comment">//获取指定动画模版 </span>
    CCAnimation* anim = getAnimation(key); 
    <span class="keyword">if</span>(anim) 
    { 
        <span class="comment">//根据动画模版生成一个动画实例 </span>
    <span class="comment">//  return cocos2d::CCAnimate::actionWithAnimation(anim); </span>
        <span class="keyword">return</span> cocos2d::CCAnimate::create(anim); 
    } 
    <span class="keyword">return</span> <span class="literal">NULL</span>; 
} 

CCAnimate* AnimationManager::createAnimate( <span class="keyword">const</span> <span class="keyword">char</span>* key ) 
{ 
    <span class="comment">//获取指定动画模版 </span>
    CCAnimation* anim = CCAnimationCache::sharedAnimationCache()-&gt;animationByName(key); 
    <span class="keyword">if</span>(anim) 
    { 
        <span class="comment">//根据动画模版生成一个动画实例 </span>
        <span class="keyword">return</span> cocos2d::CCAnimate::create(anim); 
    } 
    <span class="keyword">return</span> <span class="literal">NULL</span>; 
} 

CCAnimation* AnimationManager::createAnimationByDirection( HeroDirection direction ) 
{ 
    <span class="comment">//3.生产剪切动画 </span>
    CCTexture2D * creepTexture=CCTextureCache::sharedTextureCache()-&gt;textureForKey(<span class="string">"boy.png"</span>); 
    CCSpriteFrame *frame0, *frame1, *frame2, *frame3; 
    frame0 = CCSpriteFrame::createWithTexture(creepTexture, cocos2d::CCRectMake(<span class="number">47</span>*<span class="number">0</span>, <span class="number">95</span>*direction, <span class="number">47</span>, <span class="number">95</span>)); 
    frame1 = CCSpriteFrame::createWithTexture(creepTexture, cocos2d::CCRectMake(<span class="number">47</span>*<span class="number">1</span>, <span class="number">95</span>*direction, <span class="number">47</span>, <span class="number">95</span>)); 
    frame2 = CCSpriteFrame::createWithTexture(creepTexture, cocos2d::CCRectMake(<span class="number">47</span>*<span class="number">2</span>, <span class="number">95</span>*direction, <span class="number">47</span>, <span class="number">95</span>)); 
    frame3 = CCSpriteFrame::createWithTexture(creepTexture, cocos2d::CCRectMake(<span class="number">47</span>*<span class="number">3</span>, <span class="number">95</span>*direction, <span class="number">47</span>, <span class="number">95</span>)); 
    CCArray * animFrames = <span class="keyword">new</span> CCArray(<span class="number">4</span>); 
    animFrames-&gt;addObject(frame0); 
    animFrames-&gt;addObject(frame1); 
    animFrames-&gt;addObject(frame2); 
    animFrames-&gt;addObject(frame3); 
    CC_SAFE_RETAIN(animFrames); 
    CCAnimation * animation= CCAnimation::createWithSpriteFrames(animFrames,<span class="number">0.5f</span>); 

    animFrames-&gt;release(); 
    <span class="keyword">return</span> animation; 
} 

<span class="keyword">void</span> AnimationManager::releaseAllCacha() 
{ 

}
</code></pre>
<p>建立完这个动画管理单例后，用法也是很简单,只需要调用那几个getXXXX 就行，当然这个动画管理器功能还比较简单，因为我是个新手所以不能一下吧所有的功能都写上，还是先用到哪些写那些。</p>
<hr>
<h2 id="第三步：全局数据"><a href="#第三步：全局数据" class="headerlink" title="第三步：全局数据"></a>第三步：全局数据</h2><p>之后我们在建立一个单例类，来保存一些全局数据<br>HWorld.h</p>
<pre><code class="c++"><span class="meta">#<span class="meta-keyword">ifndef</span> __HWORLD_H__ </span>
<span class="meta">#<span class="meta-keyword">define</span> __HWORLD_H__ </span>

<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span> </span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"type.h"</span> </span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span> </span>
<span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d; 
<span class="keyword">class</span> HWorld: 
    <span class="keyword">public</span> Singleton&lt;HWorld&gt; 
{ 
<span class="keyword">public</span>: 
    HWorld(); 
    ~HWorld(); 
    <span class="comment">//初始化 </span>
    <span class="function"><span class="keyword">bool</span> <span class="title">initHWorld</span><span class="params">()</span></span>; 
    <span class="comment">//清空所有缓存 </span>
    <span class="function"><span class="keyword">void</span> <span class="title">releaseAll</span><span class="params">()</span></span>; 
<span class="keyword">public</span>: 
    <span class="comment">//路点数组 </span>
    CCPointArray * <span class="number">_</span>wayPoint;    
}; 
<span class="comment">//定义动画管理器实例的别名 </span>
<span class="meta">#<span class="meta-keyword">define</span> sHWorld HWorld::instance() </span>
<span class="meta">#<span class="meta-keyword">endif</span></span>
</code></pre>
<p>HWorld.cpp</p>
<pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HWorld.h"</span>  </span>
DECLARE_SINGLETON_MEMBER(HWorld);  

<span class="keyword">bool</span> HWorld::initHWorld()  
{  
    <span class="keyword">return</span> <span class="literal">true</span>;  
}  

<span class="keyword">void</span> HWorld::releaseAll()  
{  
}  

HWorld::HWorld()  
{  
}  

HWorld::~HWorld()  
{  
}
</code></pre>
<p>目前这个类里面之后一个路点的数组，这个数组中保存了地图上需要转弯地方的坐标,其他的东西以后再添加。<br>当然还有我们的枚举，把它放在一个.h文件中，方便查看<br>type.h</p>
<pre><code class="c++"><span class="meta">#<span class="meta-keyword">ifndef</span> __TYPE_H__  </span>
<span class="meta">#<span class="meta-keyword">define</span> __TYPE_H__  </span>

<span class="keyword">typedef</span> <span class="keyword">enum</span> {  
    kDown =  <span class="number">0</span>,<span class="comment">//向下方向  </span>
    kLeft = <span class="number">1</span>,<span class="comment">//向左方向  </span>
    kRight= <span class="number">2</span>,<span class="comment">//向右方向  </span>
    kUp = <span class="number">3</span>,<span class="comment">//向上方向  </span>
    kNormal,  
} HeroDirection;<span class="comment">//勇士方向  </span>


<span class="keyword">typedef</span> <span class="keyword">enum</span> 
{  
    aDown = <span class="number">0</span>,<span class="comment">//向下行走动画  </span>
    aLeft,<span class="comment">//向左行走动画  </span>
    aRight,<span class="comment">//向右行走动画  </span>
    aUp,<span class="comment">//向上行走动画  </span>
    aFight,<span class="comment">//刀光动画  </span>
} AnimationKey;<span class="comment">//动画模版键值  </span>
<span class="comment">//定义怪物的类型  </span>
<span class="keyword">typedef</span> <span class="keyword">enum</span> 
{  
    kHighBlood=<span class="number">0</span>,<span class="comment">//高血量怪物  </span>
    kQuick = <span class="number">1</span>,  

}CreepType;  
<span class="comment">//----------------定义一个creep中所用到的tag--------  </span>
<span class="keyword">typedef</span> <span class="keyword">enum</span> 
{  
    kSprite =<span class="number">0</span>,<span class="comment">//精灵的标签  </span>
    kSpeedAction = <span class="number">1</span>,<span class="comment">//控制速度的action所用的标签  </span>
    kFoveverAction = <span class="number">2</span>,<span class="comment">//控制精灵帧的action标签  </span>
}CreepTag;  
 <span class="keyword">enum</span>   
{  
    kZMap = <span class="number">0</span>,<span class="comment">//地图的zOrder  </span>
    kZNPC,  
    kZTeleport,  
    kZHero,<span class="comment">//勇士精灵的zOrder  </span>
    kZTip,<span class="comment">//提示信息的zOrder  </span>
};<span class="comment">//GameLayer中各部分的显示zOrder及tag  </span>
<span class="meta">#<span class="meta-keyword">endif</span></span>
</code></pre>
<hr>
<p>好了，生成一下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 147. Evaluate Reverse Polish Notation]]></title>
      <url>http://yoursite.com/2013/11/28/2013-11-28-CODE%20147%20Evaluate%20Reverse%20Polish%20Notation/</url>
      <content type="html"><![CDATA[<p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="external">Reverse Polish Notation</a>.<br>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>.<br> Each operand may be an integer or another expression.<br>Some examples:</p>
<pre><code>[&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9
[&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		Stack&lt;Integer&gt; numbers = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span> (String token : tokens) &#123;</div><div class="line">			<span class="keyword">if</span> (token.equals(<span class="string">"+"</span>) || token.equals(<span class="string">"-"</span>) || token.equals(<span class="string">"*"</span>)</div><div class="line">					|| token.equals(<span class="string">"/"</span>)) &#123;</div><div class="line">				<span class="keyword">int</span> number2 = numbers.pop();</div><div class="line">				<span class="keyword">int</span> number1 = numbers.pop();</div><div class="line">				<span class="keyword">if</span> (token.equals(<span class="string">"+"</span>)) &#123;</div><div class="line">					numbers.push(number1 + number2);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (token.equals(<span class="string">"-"</span>)) &#123;</div><div class="line">					numbers.push(number1 - number2);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (token.equals(<span class="string">"*"</span>)) &#123;</div><div class="line">					numbers.push(number1 * number2);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (token.equals(<span class="string">"/"</span>)) &#123;</div><div class="line">					numbers.push(number1 / number2);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				numbers.push(Integer.valueOf(token));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> numbers.pop();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 146. Max Points on a Line]]></title>
      <url>http://yoursite.com/2013/11/28/2013-11-28-CODE%20146%20Max%20Points%20on%20a%20Line/</url>
      <content type="html"><![CDATA[<p>Given n points<br> on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(Point[] points)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line"></div><div class="line">	Map&lt;Float, Integer&gt; kmap = <span class="keyword">new</span> HashMap&lt;Float, Integer&gt;();</div><div class="line">	<span class="keyword">int</span> size = points.length;</div><div class="line">	<span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> sum_cloumn = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (size &lt;= <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> size;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">		sum_cloumn = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> add = <span class="number">1</span>;</div><div class="line">		kmap.clear();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (j == i) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (points[i].x == points[j].x &amp;&amp; points[i].y == points[j].y) &#123;</div><div class="line">				add++;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">float</span> k = <span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (points[i].x != points[j].x) &#123;</div><div class="line">				k = (<span class="keyword">float</span>) (points[j].y - points[i].y)</div><div class="line">						/ (points[j].x - points[i].x);</div><div class="line">				<span class="keyword">if</span> (kmap.containsKey(k)) &#123;</div><div class="line">					kmap.put(k, kmap.get(k) + <span class="number">1</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					kmap.put(k, <span class="number">1</span>);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sum_cloumn++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (Float f : kmap.keySet()) &#123;</div><div class="line">			<span class="keyword">if</span> (kmap.get(f) &gt; sum_cloumn) &#123;</div><div class="line">				sum_cloumn = kmap.get(f);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sum_cloumn += add;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (sum_cloumn &gt; total) &#123;</div><div class="line">			total = sum_cloumn;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> total;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 144. Insertion Sort List]]></title>
      <url>http://yoursite.com/2013/11/27/2013-11-27-CODE%20144%20Insertion%20Sort%20List/</url>
      <content type="html"><![CDATA[<p>###<br>Sort a linked list using insertion sort.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	ListNode node = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode tmp = head;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != tmp) &#123;</div><div class="line">		ListNode next = tmp.next;</div><div class="line">		<span class="keyword">if</span> (node.next == <span class="keyword">null</span>) &#123;</div><div class="line">			tmp.next = node.next;</div><div class="line">			node.next = tmp;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ListNode tmpNode = node;</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">null</span> != tmpNode.next &amp;&amp; tmpNode.next.val &lt;= tmp.val) &#123;</div><div class="line">				tmpNode = tmpNode.next;</div><div class="line">			&#125;</div><div class="line">			tmp.next = tmpNode.next;</div><div class="line">			tmpNode.next = tmp;</div><div class="line">		&#125;</div><div class="line">		tmp = next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 145. Sort List]]></title>
      <url>http://yoursite.com/2013/11/26/2013-11-26-CODE%20145%20Sort%20List/</url>
      <content type="html"><![CDATA[<p>Sort a linked list in O(n log n)<br> time using constant space complexity.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	ArrayList&lt;Integer&gt; its = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	ListNode tmp = head;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != tmp) &#123;</div><div class="line">		its.add(tmp.val);</div><div class="line">		tmp = tmp.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] is = <span class="keyword">new</span> <span class="keyword">int</span>[its.size()];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; its.size(); i++) &#123;</div><div class="line">		is[i] = its.get(i);</div><div class="line">	&#125;</div><div class="line">	Arrays.sort(is);</div><div class="line">	tmp = head;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; its.size(); i++) &#123;</div><div class="line">		tmp.val = is[i];</div><div class="line">		tmp = tmp.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PS制作图片圆角教程]]></title>
      <url>http://yoursite.com/2013/11/26/2013-11-26-PS%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E5%9C%86%E8%A7%92%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="http://www.amznz.com/ps-tupian-yuanjiao/" target="_blank" rel="external">点击打开链接</a></p>
<p>最近新做了一个模板的LOGO，为了让其更具美观和平滑型因此需要把<a href="http://www.amznz.com/tag/%E5%9B%BE%E7%89%87/" target="_blank" rel="external">图片</a>角部修改为圆角，<a href="http://www.amznz.com/tag/ps/" target="_blank" rel="external">PS</a>新手不防学习一下。</p>
<p>1.打开PhotoShop,并找开要处理的图片;</p>
<p>2.使用工具栏中的”矩形”工具,并对其如下设置:<br><a href="http://zimg.duliboke.net/bo/attachment/1250587452_55191167.jpg" target="_blank" rel="external"><img src="http://zimg.duliboke.net/bo/attachment/1250587452_55191167.jpg" alt="photoshop" title="PS制作图片圆角教程"></a></p>
<p>在写有”注意”字样的地方,这个按钮表示用此工具建立路径,</p>
<p>路径的作用也就是为了我们 [ 3.转换成选区(快捷键:Ctrl+Enter) ] ;</p>
<p>4.快捷键:ctrl+shift+I  作用是:反相选取区域,如图:<br><a href="http://zimg.duliboke.net/bo/attachment/1250587452_50606b74.jpg" target="_blank" rel="external"><img src="http://zimg.duliboke.net/bo/attachment/1250587452_50606b74.jpg" alt="photoshop" title="PS制作图片圆角教程"></a></p>
<p>5.这时按键盘上的”DEL”键,将图片周边的删去;</p>
<p>6.Ctrl+D取消选区;</p>
<p>7.保存时可保存成:<em>.GIF或</em>.PNG这两种格式都可保存成透明的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 143. LRU Cache]]></title>
      <url>http://yoursite.com/2013/11/26/2013-11-26-CODE%20143LRU%20Cache/</url>
      <content type="html"><![CDATA[<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>set</code>.<br><code>get(key)</code> - Get the value (will always be positive) of the key if the<br> key exists in the cache, otherwise return -1.<br><code>set(key, value)</code> - Set or insert the value if the key is not already<br> present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line">    <span class="keyword">private</span> Map&lt;Integer, Entry&gt; nodes;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSize;</div><div class="line">    <span class="keyword">private</span> Entry first;</div><div class="line">    <span class="keyword">private</span> Entry last;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.capacity = capacity;</div><div class="line">        currentSize = <span class="number">0</span>;</div><div class="line">        nodes = <span class="keyword">new</span> HashMap&lt;Integer, Entry&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">        Entry node = nodes.get(key);</div><div class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</div><div class="line">            moveToHead(node);</div><div class="line">            <span class="keyword">return</span> node.value;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        Entry node = nodes.get(key);</div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(currentSize &gt;= capacity)&#123;</div><div class="line">                nodes.remove(last.key);</div><div class="line">                removeLast();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                currentSize ++;</div><div class="line">            &#125;</div><div class="line">            node = <span class="keyword">new</span> Entry();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(currentSize == <span class="number">1</span>)&#123;</div><div class="line">            first = node;</div><div class="line">            last = node;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        node.key = key;</div><div class="line">        node.value = value;</div><div class="line">        moveToHead(node);</div><div class="line">        nodes.put(key, node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Entry node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node == first)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// delete current node from doubly linked list</span></div><div class="line">        <span class="keyword">if</span>(node.pre != <span class="keyword">null</span>)&#123;</div><div class="line">            node.pre.next = node.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node.next != <span class="keyword">null</span>)&#123;</div><div class="line">            node.next.pre = node.pre;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(last == node)&#123;</div><div class="line">            last = node.pre;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(first != <span class="keyword">null</span>)&#123;</div><div class="line">            node.next = first;</div><div class="line">            first.pre = node;</div><div class="line">        &#125;</div><div class="line">        first = node;</div><div class="line">        node.pre = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeLast</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(last != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(last.pre != <span class="keyword">null</span>)&#123;</div><div class="line">                last.pre.next = <span class="keyword">null</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                first = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            last = last.pre;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span></span>&#123;</div><div class="line">    Entry pre;</div><div class="line">    Entry next;</div><div class="line">    <span class="keyword">int</span> key;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 142. Binary Tree Postorder Traversal]]></title>
      <url>http://yoursite.com/2013/11/25/2013-11-25-CODE%20142%20Binary%20Tree%20Postorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the postorder traversal of its nodes’ values.<br>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<pre><code>1
 \
  2
 /
3
</code></pre><p>return <code>[3,2,1]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty() || <span class="keyword">null</span> != root) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != root) &#123;</div><div class="line">			stack.push(root);</div><div class="line">			root = root.left;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			root = stack.peek();</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != root.right) &#123;</div><div class="line">				TreeNode right = root.right;</div><div class="line">				stack.peek().left = <span class="keyword">null</span>;</div><div class="line">				stack.peek().right = <span class="keyword">null</span>;</div><div class="line">				stack.push(right);</div><div class="line">				root = right.left;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				stack.pop();</div><div class="line">				result.add(root.val);</div><div class="line">				root = <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 141. Binary Tree Preorder Traversal]]></title>
      <url>http://yoursite.com/2013/11/25/2013-11-25-CODE%20141%20Binary%20Tree%20Preorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the preorder traversal of its nodes’ values.<br>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<pre><code>1
 \
  2
 /
3
</code></pre><p>return <code>[1,2,3]</code>.<br>Note: Recursive solution is trivial, could you do it iteratively?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty() || <span class="keyword">null</span> != root) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != root) &#123;</div><div class="line">			result.add(root.val);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != root.right) &#123;</div><div class="line">				stack.push(root);</div><div class="line">			&#125;</div><div class="line">			root = root.left;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			TreeNode node = stack.pop().right;</div><div class="line">			result.add(node.val);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">				stack.push(node);</div><div class="line">			&#125;</div><div class="line">			root = node.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 140. Reorder List]]></title>
      <url>http://yoursite.com/2013/11/25/2013-11-25-CODE%20140%20Reorder%20List/</url>
      <content type="html"><![CDATA[<p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…<br>You must do this in-place without altering the nodes’ values.<br>For example,<br>Given <code>{1,2,3,4}</code>, reorder it to <code>{1,4,2,3}</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	ListNode tmpHead = head;</div><div class="line">	<span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (tmpHead != <span class="keyword">null</span>) &#123;</div><div class="line">		size++;</div><div class="line">		tmpHead = tmpHead.next;</div><div class="line">	&#125;</div><div class="line">	Queue&lt;ListNode&gt; q = <span class="keyword">new</span> LinkedList&lt;ListNode&gt;();</div><div class="line">	Stack&lt;ListNode&gt; s = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</div><div class="line"></div><div class="line">	tmpHead = head;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (size + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</div><div class="line">		q.offer(tmpHead);</div><div class="line">		tmpHead = tmpHead.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (tmpHead != <span class="keyword">null</span>) &#123;</div><div class="line">		s.push(tmpHead);</div><div class="line">		tmpHead = tmpHead.next;</div><div class="line">	&#125;</div><div class="line">	ListNode newNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode newTmpNode = newNode;</div><div class="line">	<span class="keyword">while</span> (!q.isEmpty() &amp;&amp; !s.isEmpty()) &#123;</div><div class="line">		newTmpNode.next = q.poll();</div><div class="line">		newTmpNode = newTmpNode.next;</div><div class="line">		newTmpNode.next = s.pop();</div><div class="line">		newTmpNode = newTmpNode.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!q.isEmpty()) &#123;</div><div class="line">		newTmpNode.next = q.poll();</div><div class="line">		newTmpNode = newTmpNode.next;</div><div class="line">	&#125;</div><div class="line">	newTmpNode.next = <span class="keyword">null</span>;</div><div class="line">	head = newNode.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 139. Linked List Cycle II]]></title>
      <url>http://yoursite.com/2013/11/24/2013-11-24-CODE%20139%20Linked%20List%20Cycle%20II/</url>
      <content type="html"><![CDATA[<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.<br>Follow up:<br>Can you solve it without using extra space?<br><a href="http://blog.csdn.net/sysucph/article/details/15378043" target="_blank" rel="external">点击打开链接</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="comment">// Empty linked list</span></div><div class="line">	<span class="keyword">if</span> (head == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	ListNode fast = head;</div><div class="line">	ListNode slow = head;</div><div class="line"></div><div class="line">	<span class="comment">// Find meeting point</span></div><div class="line">	<span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</div><div class="line">		slow = slow.next;</div><div class="line">		fast = fast.next.next;</div><div class="line">		<span class="keyword">if</span> (fast == slow)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Error - there is no meeting point, and therefore no loop</span></div><div class="line">	<span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Move slow to Head. Keep fast at meeting Point. Each are k steps from</div><div class="line">	 * the loop Start. If they move at the same pace, they must meet at Loop</div><div class="line">	 * Start.</div><div class="line">	 */</div><div class="line">	slow = head;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (slow != fast) &#123;</div><div class="line">		slow = slow.next;</div><div class="line">		fast = fast.next;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Now fast points to the start of the loop.</span></div><div class="line">	<span class="keyword">return</span> fast;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 138. Linked List Cycle]]></title>
      <url>http://yoursite.com/2013/11/24/2013-11-24-CODE%20138%20Linked%20List%20Cycle/</url>
      <content type="html"><![CDATA[<p>Given a linked list, determine if it has a cycle in it.<br>Follow up:<br>Can you solve it without using extra space?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">     <span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">     <span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">     <span class="keyword">if</span>(<span class="keyword">null</span> == head)&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"> 	ListNode first = head;</div><div class="line"> 	ListNode second = head;</div><div class="line"> 	<span class="keyword">while</span>(first.next != <span class="keyword">null</span> &amp;&amp; first.next.next !=<span class="keyword">null</span>)&#123;</div><div class="line"> 		<span class="keyword">if</span>(first.next.equals(second) || first.next.next.equals(second))&#123;</div><div class="line"> 			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> 		&#125;</div><div class="line"> 		first = first.next.next;</div><div class="line"> 		second = second.next;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="keyword">if</span>(first.next != <span class="keyword">null</span> &amp;&amp; first.next.equals(second))&#123;</div><div class="line"> 		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 137. Word Break II]]></title>
      <url>http://yoursite.com/2013/11/24/2013-11-24-CODE%20137%20Word%20Break%20II/</url>
      <content type="html"><![CDATA[<p>Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.<br>Return all such possible sentences.<br>For example, given<br>s = <code>&quot;catsanddog&quot;</code>,<br>dict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>.<br>A solution is <code>[&quot;cats and dog&quot;, &quot;cat sand dog&quot;]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		Set&lt;String&gt; unused = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">		<span class="keyword">boolean</span> touched = <span class="keyword">false</span>;</div><div class="line">		Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Set&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String dic : dict) &#123;</div><div class="line">			<span class="keyword">if</span> (!s.contains(dic)) &#123;</div><div class="line">				unused.add(dic);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		dict.removeAll(unused);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">			<span class="keyword">for</span> (String sub : dict) &#123;</div><div class="line">				String subTmp = s.substring(i);</div><div class="line">				<span class="keyword">int</span> start = i;</div><div class="line">				<span class="keyword">while</span> (subTmp.contains(sub)) &#123;</div><div class="line">					<span class="keyword">int</span> index = subTmp.indexOf(sub);</div><div class="line">					<span class="keyword">if</span> (map.containsKey(start + index)) &#123;</div><div class="line">						map.get(start + index)</div><div class="line">								.add(start + index + sub.length());</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						map.put(start + index, <span class="keyword">new</span> HashSet&lt;Integer&gt;());</div><div class="line">						map.get(start + index)</div><div class="line">								.add(start + index + sub.length());</div><div class="line">					&#125;</div><div class="line">					subTmp = subTmp.substring(index + sub.length());</div><div class="line">					start = start + index + sub.length();</div><div class="line">					<span class="keyword">if</span> (start &gt;= s.length()) &#123;</div><div class="line">						touched = <span class="keyword">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!touched) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> wbreak(s, s.length(), map, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function">ArrayList&lt;String&gt; <span class="title">wbreak</span><span class="params">(String s, <span class="keyword">int</span> length,</span></span></div><div class="line">			Map&lt;Integer, Set&lt;Integer&gt;&gt; map, <span class="keyword">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span> (!map.containsKey(x)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		&#125;</div><div class="line">		ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> index : map.get(x)) &#123;</div><div class="line">			String subString = s.substring(x, index);</div><div class="line">			<span class="keyword">if</span> (index &gt;= length) &#123;</div><div class="line">				results.add(subString);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				ArrayList&lt;String&gt; subResults = wbreak(s, length, map, index);</div><div class="line">				<span class="keyword">if</span> (subResults.isEmpty()) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">for</span> (String subResult : subResults) &#123;</div><div class="line">						String result = subString + <span class="string">" "</span> + subResult;</div><div class="line">						results.add(result);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 136. Word Break]]></title>
      <url>http://yoursite.com/2013/11/23/2013-11-23-CODE%20136%20Word%20Break/</url>
      <content type="html"><![CDATA[<p>Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.<br>For example, given<br>s = <code>&quot;leetcode&quot;</code>,<br>dict = <code>[&quot;leet&quot;, &quot;code&quot;]</code>.<br>Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet
 code&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s || <span class="string">""</span>.equals(s) || dict.contains(s)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	Set&lt;String&gt; unused = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">	<span class="keyword">boolean</span> touched = <span class="keyword">false</span>;</div><div class="line">	Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Set&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (String sub : dict) &#123;</div><div class="line">		<span class="keyword">if</span> (!s.contains(sub)) &#123;</div><div class="line">			unused.add(sub);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	dict.removeAll(unused);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">		<span class="keyword">for</span> (String sub : dict) &#123;</div><div class="line">			String subTmp = s.substring(i);</div><div class="line">			<span class="keyword">int</span> start = i;</div><div class="line">			<span class="keyword">while</span> (subTmp.contains(sub)) &#123;</div><div class="line">				<span class="keyword">int</span> index = subTmp.indexOf(sub);</div><div class="line">				<span class="keyword">if</span> (map.containsKey(start + index)) &#123;</div><div class="line">					map.get(start + index)</div><div class="line">							.add(start + index + sub.length());</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					map.put(start + index, <span class="keyword">new</span> HashSet&lt;Integer&gt;());</div><div class="line">					map.get(start + index)</div><div class="line">							.add(start + index + sub.length());</div><div class="line">				&#125;</div><div class="line">				subTmp = subTmp.substring(index + sub.length());</div><div class="line">				start = start + index + sub.length();</div><div class="line">				<span class="keyword">if</span> (start &gt;= s.length()) &#123;</div><div class="line">					touched = <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!touched) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> wreak(s.length(), map, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wreak</span><span class="params">(<span class="keyword">int</span> length, Map&lt;Integer, Set&lt;Integer&gt;&gt; map, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (!map.containsKey(x)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> index : map.get(x)) &#123;</div><div class="line">		<span class="keyword">if</span> (index &gt;= length) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">boolean</span> result = wreak(length, map, index);</div><div class="line">		<span class="keyword">if</span> (result) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 135. Copy List with Random Pointer]]></title>
      <url>http://yoursite.com/2013/11/23/2013-11-23-CODE%20135%20Copy%20List%20with%20Random%20Pointer/</url>
      <content type="html"><![CDATA[<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.<br>Return a deep copy of the list.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span><span class="params">(RandomListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	Map&lt;Integer, RandomListNode&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, RandomListNode&gt;();</div><div class="line"></div><div class="line">	RandomListNode cpyList = <span class="keyword">new</span> RandomListNode(<span class="number">0</span>);</div><div class="line">	RandomListNode cpyListTmp = cpyList;</div><div class="line">	RandomListNode headTmp = head;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != headTmp) &#123;</div><div class="line">		<span class="keyword">int</span> val = headTmp.label;</div><div class="line">		<span class="keyword">if</span> (map.containsKey(val)) &#123;</div><div class="line">			RandomListNode newnode = map.get(val);</div><div class="line">			cpyListTmp.next = newnode;</div><div class="line">			cpyListTmp = cpyListTmp.next;</div><div class="line">			headTmp = headTmp.next;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			RandomListNode newnode = <span class="keyword">new</span> RandomListNode(val);</div><div class="line">			cpyListTmp.next = newnode;</div><div class="line">			cpyListTmp = cpyListTmp.next;</div><div class="line">			headTmp = headTmp.next;</div><div class="line">			map.put(val, newnode);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	cpyListTmp = cpyList;</div><div class="line">	headTmp = head;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != headTmp) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == headTmp.random) &#123;</div><div class="line">			cpyListTmp.next.random = <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			cpyListTmp.next.random = map.get(headTmp.random.label);</div><div class="line">		&#125;</div><div class="line">		cpyListTmp = cpyListTmp.next;</div><div class="line">		headTmp = headTmp.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cpyList.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 134. Single Number II]]></title>
      <url>http://yoursite.com/2013/11/23/2013-11-23-CODE%20134%20Single%20Number%20II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears three times except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> A[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>, xthrees = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; ++i) &#123;</div><div class="line">		twos |= (ones &amp; A[i]);</div><div class="line">		ones ^= A[i];</div><div class="line">		xthrees = ~(ones &amp; twos);</div><div class="line">		ones &amp;= xthrees;</div><div class="line">		twos &amp;= xthrees;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ones;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 133. Single Number]]></title>
      <url>http://yoursite.com/2013/11/23/2013-11-23-CODE%20133%20Single%20Number/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</div><div class="line">			A[<span class="number">0</span>] ^= A[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> A[<span class="number">0</span>];</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 132. Candy]]></title>
      <url>http://yoursite.com/2013/11/23/2013-11-23-CODE%20132%20Candy/</url>
      <content type="html"><![CDATA[<p>There are N children standing in a line. Each child is assigned a rating value.<br>You are giving candies to these children subjected to the following requirements:</p>
<ul>
<li>Each child must have at least one candy.</li>
<li>Children with a higher rating get more candies than their neighbors.</li>
</ul>
<p>What is the minimum candies you must give?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[ratings.length];</div><div class="line">	<span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[ratings.length];</div><div class="line">	<span class="keyword">int</span> min = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ratings.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == i) &#123;</div><div class="line">			left[i] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;</div><div class="line">			left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ratings[i] &lt;= ratings[i - <span class="number">1</span>]) &#123;</div><div class="line">			left[i] = <span class="number">0</span>;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = ratings.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (ratings.length - <span class="number">1</span> == i) &#123;</div><div class="line">			right[i] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>]) &#123;</div><div class="line">			right[i] = right[i + <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ratings[i] &lt;= ratings[i + <span class="number">1</span>]) &#123;</div><div class="line">			right[i] = <span class="number">0</span>;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ratings.length; i++) &#123;</div><div class="line">		min += left[i] &gt; right[i] ? left[i] + <span class="number">1</span> : right[i] + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> min;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 131. Gas Station]]></title>
      <url>http://yoursite.com/2013/11/22/2013-11-22-CODE%20131%20Gas%20Station/</url>
      <content type="html"><![CDATA[<p>There are N gas stations along a circular route, where the amount of gas at station i is <code>gas[i]</code>.<br>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of<br> gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.<br>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.<br>Note:<br>The solution is guaranteed to be unique.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == gas || gas.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</div><div class="line">		gas[i] -= cost[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (; i &lt; gas.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (gas[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		sum = gas[i];</div><div class="line">		j = (i + <span class="number">1</span>) % gas.length;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (sum &gt;= <span class="number">0</span> &amp;&amp; j != i) &#123;</div><div class="line">			sum += gas[j];</div><div class="line">			j = (j + <span class="number">1</span>) % gas.length;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == i) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j &gt; i) &#123;</div><div class="line">			i = j;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (i &lt; gas.length &amp;&amp; j == i &amp;&amp; sum &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 6. Word Ladder II]]></title>
      <url>http://yoursite.com/2013/11/19/2013-11-19-CODE%206%20Word%20Ladder%20II/</url>
      <content type="html"><![CDATA[<p>Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:</p>
<ol>
<li>Only one letter can be changed at a time</li>
<li>Each intermediate word must exist in the dictionary</li>
</ol>
<p>For example,<br>Given:<br>start = <code>&quot;hit&quot;</code><br>end = <code>&quot;cog&quot;</code><br>dict = <code>[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</code></p>
<p>Return</p>
<pre><code>[
  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],
  [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]
]
</code></pre><p>Note:</p>
<ul>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; findLadders(String start, String end,</div><div class="line">			HashSet&lt;String&gt; dict) &#123;</div><div class="line">		<span class="comment">// Start typing your Java solution below</span></div><div class="line">		<span class="comment">// DO NOT write main() function</span></div><div class="line">		<span class="keyword">if</span> (start.equals(end) || dict.size() == <span class="number">2</span>) &#123;</div><div class="line">			ArrayList&lt;ArrayList&lt;String&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		dict.add(start);</div><div class="line">		dict.add(end);</div><div class="line"></div><div class="line">		Map&lt;String, DepthWordsPair&gt; map = <span class="keyword">new</span> HashMap&lt;String, DepthWordsPair&gt;();</div><div class="line">		map.put(start, <span class="keyword">new</span> DepthWordsPair(<span class="number">1</span>));</div><div class="line"></div><div class="line">		Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">		<span class="keyword">int</span> depth = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> len = start.length(); <span class="comment">// word length</span></div><div class="line">		<span class="keyword">int</span> min_depth = dict.size() + <span class="number">2</span>; <span class="comment">// 2 for start and end words</span></div><div class="line">		q.offer(start);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (!q.isEmpty() &amp;&amp; min_depth &gt; depth) &#123;</div><div class="line">			String cur = q.poll();</div><div class="line"></div><div class="line">			depth = map.get(cur).getDepth();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) <span class="comment">// check word(s)</span></div><div class="line">			&#123;</div><div class="line">				StringBuilder sb = <span class="keyword">new</span> StringBuilder(cur);</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">char</span> a = <span class="string">'a'</span>; a &lt;= <span class="string">'z'</span>; ++a) &#123;</div><div class="line">					<span class="keyword">if</span> (a == cur.charAt(i))</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					sb.setCharAt(i, a);</div><div class="line">					String t = sb.toString();</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (t.equals(end)) &#123;</div><div class="line">						min_depth = depth + <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (dict.contains(t)) &#123;</div><div class="line">						DepthWordsPair dwp = map.get(t);</div><div class="line">						<span class="keyword">if</span> (<span class="keyword">null</span> == dwp) &#123;</div><div class="line">							DepthWordsPair dw = <span class="keyword">new</span> DepthWordsPair(depth + <span class="number">1</span>);</div><div class="line">							dw.getWords().add(cur);</div><div class="line">							map.put(t, dw);</div><div class="line">							q.offer(t);</div><div class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dwp.getDepth() == depth + <span class="number">1</span>) &#123;</div><div class="line">							dwp.getWords().add(cur);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="comment">// end while</span></div><div class="line"></div><div class="line">		ArrayList&lt;ArrayList&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">		<span class="keyword">if</span> (min_depth == dict.size() + <span class="number">2</span>) &#123; <span class="comment">// only for start and end words</span></div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">		Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">		Stack&lt;String&gt; sequence = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">		stack.push(end);</div><div class="line">		<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">			String top = stack.pop();</div><div class="line">			sequence.push(top);</div><div class="line">			List&lt;String&gt; sons = map.get(top).getWords();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sons.size(); ++i) &#123;</div><div class="line">				stack.push(sons.get(i));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (sons.size() == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">int</span> index = result.size();</div><div class="line">				result.add(<span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = sequence.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">					result.get(index).add(sequence.get(i)); <span class="comment">// save result</span></div><div class="line">				&#125;</div><div class="line">				top = sequence.pop();</div><div class="line">				<span class="keyword">while</span> (!sequence.empty()) &#123;</div><div class="line">					String father = sequence.peek();</div><div class="line">					List&lt;String&gt; brothers = map.get(father).getWords();</div><div class="line">					<span class="keyword">if</span> (!top.equals(brothers.get(<span class="number">0</span>))) &#123;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">					sequence.pop();</div><div class="line">					top = father;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">DepthWordsPair</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> depth;</div><div class="line">		List&lt;String&gt; words;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">DepthWordsPair</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.depth = depth;</div><div class="line">			words = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> depth;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepth</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.depth = depth;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getWords</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> words;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWords</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.words = words;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 130. Clone Graph]]></title>
      <url>http://yoursite.com/2013/11/18/2013-11-18-CODE%20130%20Clone%20Graph/</url>
      <content type="html"><![CDATA[<p>Clone an undirected graph. Each node in the graph contains a <code>label</code> and<br> a list of its <code>neighbors</code>.</p>
<p>OJ’s undirected graph serialization:Nodes are labeled uniquely.<br>We use <code>#</code> as a separator for each node, and <code>,</code> as<br> a separator for node label and each neighbor of the node.<br>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.<br>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.</p>
<ol>
<li>First node is labeled as <code>0</code>.<br>Connect node <code>0</code> to<br>both nodes <code>1</code> and <code>2</code>.</li>
<li>Second node is labeled as <code>1</code>.<br>Connect node <code>1</code> to<br>node <code>2</code>.</li>
<li>Third node is labeled as <code>2</code>.<br>Connect node <code>2</code> to<br>node <code>2</code> (itself), thus<br>forming a self-cycle.</li>
</ol>
<p>Visually, the graph looks like the following:<br>           1<br>          / \<br>         /   \<br>        0 — 2<br>             / \<br>             _/</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span><span class="params">(UndirectedGraphNode node)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == node) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	Map&lt;Integer, UndirectedGraphNode&gt; visitTable = <span class="keyword">new</span> HashMap&lt;Integer, UndirectedGraphNode&gt;();</div><div class="line">	<span class="keyword">return</span> clone(node, visitTable);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> UndirectedGraphNode <span class="title">clone</span><span class="params">(UndirectedGraphNode node,</span></span></div><div class="line">		Map&lt;Integer, UndirectedGraphNode&gt; table) &#123;</div><div class="line">	<span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (table.containsKey(node.label))</div><div class="line">		<span class="keyword">return</span> table.get(node.label);</div><div class="line"></div><div class="line">	UndirectedGraphNode newnode = <span class="keyword">new</span> UndirectedGraphNode(node.label);</div><div class="line">	table.put(newnode.label, newnode);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node.neighbors.size(); i++) &#123;</div><div class="line">		UndirectedGraphNode neighbor = clone(node.neighbors.get(i), table);</div><div class="line">		newnode.neighbors.add(neighbor);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> newnode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 41. Reverse Linked List II]]></title>
      <url>http://yoursite.com/2013/11/17/2013-11-17-CODE%2041%20Reverse%20Linked%20List%20II/</url>
      <content type="html"><![CDATA[<p>Reverse a linked list from position m to n. Do it in-place and in one-pass.<br>For example:<br>Given <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>, m =<br> 2 and n = 4,<br>return <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</code>.<br>Note:<br>Given m, n satisfy the following condition:<br>1 ≤ m ≤ n ≤ length of list.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	ListNode tmpHead = head;</div><div class="line">	Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	<span class="keyword">int</span> number = <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (tmpHead != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">while</span> (tmpHead != <span class="keyword">null</span> &amp;&amp; number &lt; m) &#123;</div><div class="line">			tmpHead = tmpHead.next;</div><div class="line">			number++;</div><div class="line">		&#125;</div><div class="line">		ListNode tmp = tmpHead;</div><div class="line">		<span class="keyword">while</span> (tmp != <span class="keyword">null</span> &amp;&amp; number &lt;= n) &#123;</div><div class="line">			stack.push(tmp.val);</div><div class="line">			tmp = tmp.next;</div><div class="line">			number++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (number &gt; n) &#123;</div><div class="line">			<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">				tmpHead.val = stack.pop();</div><div class="line">				tmpHead = tmpHead.next;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 42. Subsets II]]></title>
      <url>http://yoursite.com/2013/11/17/2013-11-17-CODE%2042%20Subsets%20II/</url>
      <content type="html"><![CDATA[<p>Given a collection of integers that might contain duplicates, S, return all possible subsets.<br>Note:</p>
<ul>
<li>Elements in a subset must be in non-descending order.</li>
<li>The solution set must not contain duplicate subsets.</li>
</ul>
<p>For example,<br>If S = <code>[1,2,2]</code>,<br> a solution is:<br>    [<br>      [2],<br>      [1],<br>      [1,2,2],<br>      [2,2],<br>      [1,2],<br>      []<br>    ]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] S) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == S || S.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	Arrays.sort(S);</div><div class="line">	ArrayList&lt;Integer&gt; sList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</div><div class="line">		sList.add(S[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		element.add(S[i]);</div><div class="line">		<span class="keyword">if</span> (!result.contains(element)) &#123;</div><div class="line">			result.add(element);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = result.size();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">2</span>; num &lt;= S.length; num++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</div><div class="line">			ArrayList&lt;Integer&gt; oldElement = result.get(i);</div><div class="line">			<span class="keyword">int</span> j = sList.indexOf(oldElement.get(oldElement.size() - <span class="number">1</span>)) + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (oldElement.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> m = oldElement.size() - <span class="number">2</span>; m &gt;= <span class="number">0</span>; m--) &#123;</div><div class="line">					<span class="keyword">if</span> (oldElement.get(m) == oldElement.get(oldElement</div><div class="line">							.size() - <span class="number">1</span>)) &#123;</div><div class="line">						j++;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> (; j &lt; S.length; j++) &#123;</div><div class="line">				ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				element.addAll(oldElement);</div><div class="line">				element.add(S[j]);</div><div class="line">				<span class="keyword">if</span> (!result.contains(element)) &#123;</div><div class="line">					result.add(element);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		start = end;</div><div class="line">		end = result.size();</div><div class="line">	&#125;</div><div class="line">	result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 51. Search in Rotated Sorted Array II]]></title>
      <url>http://yoursite.com/2013/11/17/2013-11-17-CODE%2051%20Search%20in%20Rotated%20Sorted%20Array%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?<br>Would this affect the run-time complexity? How and why?<br>Write a function to determine if a given target is in the array.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span> pivot = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (; pivot &lt; A.length; pivot++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[pivot] &lt; A[pivot - <span class="number">1</span>]) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (pivot == A.length) &#123;</div><div class="line">		end = A.length - <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (A[<span class="number">0</span>] &lt;= target &amp;&amp; A[pivot - <span class="number">1</span>] &gt;= target) &#123;</div><div class="line">			start = <span class="number">0</span>;</div><div class="line">			end = pivot - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			start = pivot;</div><div class="line">			end = A.length - <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (A[mid] &lt; target) &#123;</div><div class="line">			start = mid + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; target) &#123;</div><div class="line">			end = mid;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (A[start] == target) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 53. Remove Duplicates from Sorted Array II]]></title>
      <url>http://yoursite.com/2013/11/17/2013-11-17-CODE%2053%20Remove%20Duplicates%20from%20Sorted%20Array%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?<br>For example,<br>Given sorted array A = <code>[1,1,1,2,2,3]</code>,<br>Your function should return length = <code>5</code>,<br> and A is now <code>[1,1,2,2,3]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		<span class="keyword">if</span> (A.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> length = A.length;</div><div class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> nxt = <span class="number">1</span>;</div><div class="line">		<span class="keyword">boolean</span> morethan2 = <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">for</span> (; nxt &lt; A.length; nxt++) &#123;</div><div class="line">			<span class="keyword">if</span> (A[nxt] != A[nxt - <span class="number">1</span>]) &#123;</div><div class="line">				A[cur] = A[nxt - <span class="number">1</span>];</div><div class="line">				cur++;</div><div class="line">				morethan2 = <span class="keyword">false</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!morethan2) &#123;</div><div class="line">				A[cur] = A[nxt - <span class="number">1</span>];</div><div class="line">				cur++;</div><div class="line">				morethan2 = <span class="keyword">true</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				length--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		A[cur] = A[nxt - <span class="number">1</span>];</div><div class="line">		<span class="keyword">return</span> length;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 74. Spiral Matrix II]]></title>
      <url>http://yoursite.com/2013/11/16/2013-11-16-CODE%2074%20Spiral%20Matrix%20II/</url>
      <content type="html"><![CDATA[<p>Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.<br>For example,<br>Given n = <code>3</code>,<br>You should return the following matrix:    [<br>     [ 1, 2, 3 ],<br>     [ 8, 9, 4 ],<br>     [ 7, 6, 5 ]<br>    ]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">	<span class="keyword">int</span> number = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> halfCol = (n - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">int</span> halfRow = (n - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">int</span> col = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (row &lt;= halfRow &amp;&amp; col &lt;= halfCol) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = col; i &lt; n - col; i++) &#123;</div><div class="line">			matrix[row][i] = number++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = row + <span class="number">1</span>; i &lt; n - row; i++) &#123;</div><div class="line">			matrix[i][n - col - <span class="number">1</span>] = number++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (row != n - row - <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = n - col - <span class="number">2</span>; i &gt;= col; i--) &#123;</div><div class="line">				matrix[n - row - <span class="number">1</span>][i] = number++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (col != n - col - <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = n - row - <span class="number">2</span>; i &gt;= row + <span class="number">1</span>; i--) &#123;</div><div class="line">				matrix[i][col] = number++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		row++;</div><div class="line">		col++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> matrix;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 129. Two Sum]]></title>
      <url>http://yoursite.com/2013/11/16/2013-11-16-CODE%20129%20Two%20Sum/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.<br>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == numbers || numbers.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[numbers.length];</div><div class="line">	<span class="keyword">int</span>[] results = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">		tmp[i] = numbers[i];</div><div class="line">	&#125;</div><div class="line">	Arrays.sort(tmp);</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = tmp.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">		<span class="keyword">if</span> (tmp[start] + tmp[end] &lt; target) &#123;</div><div class="line">			start++;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[start] + tmp[end] &gt; target) &#123;</div><div class="line">			end--;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (numbers[i] == tmp[start] || numbers[i] == tmp[end]) &#123;</div><div class="line">			results[<span class="number">0</span>] = i + <span class="number">1</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = numbers.length - <span class="number">1</span>; i &gt;= results[<span class="number">0</span>] - <span class="number">1</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (numbers[i] == tmp[start] || numbers[i] == tmp[end]) &#123;</div><div class="line">			results[<span class="number">1</span>] = i + <span class="number">1</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 128. Median of Two Sorted Arrays]]></title>
      <url>http://yoursite.com/2013/11/15/2013-11-15-CODE%20128%20Median%20of%20Two%20Sorted%20Arrays/</url>
      <content type="html"><![CDATA[<p>There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall<br> run time complexity should be O(log (m+n)).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[])</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">int</span> k = A.length + B.length;</div><div class="line">	<span class="keyword">if</span> ((k &amp; <span class="number">0x1</span>) == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> find(A, <span class="number">0</span>, A.length, B, <span class="number">0</span>, B.length, k / <span class="number">2</span> + <span class="number">1</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> (find(A, <span class="number">0</span>, A.length, B, <span class="number">0</span>, B.length, k / <span class="number">2</span>) + find(A, <span class="number">0</span>,</div><div class="line">				A.length, B, <span class="number">0</span>, B.length, k / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> startA, <span class="keyword">int</span> lengthA, <span class="keyword">int</span> B[], <span class="keyword">int</span> startB,</span></span></div><div class="line">		<span class="keyword">int</span> lengthB, <span class="keyword">int</span> k) &#123;</div><div class="line">	<span class="keyword">if</span> (lengthA &gt; lengthB) &#123;</div><div class="line">		<span class="keyword">return</span> find(B, startB, lengthB, A, startA, lengthA, k);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (lengthA &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> B[startB + k - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (lengthB &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> A[startA + k - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (k &lt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> Math.min(A[startA], B[startB]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> i = Math.min(k &gt;&gt; <span class="number">1</span>, lengthA);</div><div class="line">	<span class="keyword">int</span> j = k - i;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (A[startA + i - <span class="number">1</span>] &lt; B[startB + j - <span class="number">1</span>]) &#123;</div><div class="line">		<span class="keyword">return</span> find(A, startA + i, lengthA - i, B, startB, lengthB, k - i);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> find(A, startA, lengthA, B, startB + j, lengthB - j, k - j);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 127. Longest Substring Without Repeating Characters]]></title>
      <url>http://yoursite.com/2013/11/14/2013-11-14-CODE%20127%20Longest%20Substring%20Without%20Repeating%20Characters/</url>
      <content type="html"><![CDATA[<p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring<br> without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s || <span class="string">""</span>.equals(s)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line">	<span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cs.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (list.isEmpty()) &#123;</div><div class="line">			list.add(cs[i]);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> index = list.indexOf(cs[i]);</div><div class="line">			<span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">				list.add(cs[i]);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= index; j++) &#123;</div><div class="line">					list.remove(<span class="number">0</span>);</div><div class="line">				&#125;</div><div class="line">				list.add(cs[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (list.size() &gt; max) &#123;</div><div class="line">			max = list.size();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 126. Add Two Numbers]]></title>
      <url>http://yoursite.com/2013/11/14/2013-11-14-CODE%20126%20Add%20Two%20Numbers/</url>
      <content type="html"><![CDATA[<p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>
<p>Output: 7 -&gt; 0 -&gt; 8</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ListNode cpyl1 = l1;</div><div class="line">	ListNode cpyl2 = l2;</div><div class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != cpyl1 &amp;&amp; <span class="keyword">null</span> != cpyl2) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = cpyl1.val + cpyl2.val + c;</div><div class="line">		<span class="keyword">if</span> (tmp &gt; <span class="number">9</span>) &#123;</div><div class="line">			c = tmp / <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		cpyl1.val = tmp % <span class="number">10</span>;</div><div class="line">		cpyl1 = cpyl1.next;</div><div class="line">		cpyl2 = cpyl2.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (cpyl1 != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = cpyl1.val + c;</div><div class="line">		<span class="keyword">if</span> (tmp &gt; <span class="number">9</span>) &#123;</div><div class="line">			c = tmp / <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		cpyl1.val = tmp % <span class="number">10</span>;</div><div class="line">		cpyl1 = cpyl1.next;</div><div class="line">	&#125;</div><div class="line">	cpyl1 = l1;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != cpyl1.next) &#123;</div><div class="line">		cpyl1 = cpyl1.next;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (cpyl2 != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = cpyl2.val + c;</div><div class="line">		<span class="keyword">if</span> (tmp &gt; <span class="number">9</span>) &#123;</div><div class="line">			c = tmp / <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		cpyl1.next = <span class="keyword">new</span> ListNode(tmp % <span class="number">10</span>);</div><div class="line">		cpyl1 = cpyl1.next;</div><div class="line">		cpyl2 = cpyl2.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</div><div class="line">		cpyl1.next = <span class="keyword">new</span> ListNode(c);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> l1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 125. Longest Palindromic Substring]]></title>
      <url>http://yoursite.com/2013/11/14/2013-11-14-CODE%20125%20Longest%20Palindromic%20Substring/</url>
      <content type="html"><![CDATA[<p>Given a string S,<br> find the longest palindromic substring in S.<br> You may assume that the maximum length of S is<br> 1000, and there exists one unique longest palindromic substring.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s || s.length() &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length() == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span>[][] isPalindromic = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">		isPalindromic[i][i] = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> end = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		isPalindromic[i][i + <span class="number">1</span>] = cs[i] == cs[i + <span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span> (end - start &lt; <span class="number">1</span> &amp;&amp; isPalindromic[i][i + <span class="number">1</span>]) &#123;</div><div class="line">			start = i;</div><div class="line">			end = i + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; s.length(); j++) &#123;</div><div class="line">			isPalindromic[i][j] = cs[i] == cs[j]</div><div class="line">					&amp;&amp; isPalindromic[i + <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">			<span class="keyword">if</span> (end - start &lt; j - i &amp;&amp; isPalindromic[i][j]) &#123;</div><div class="line">				start = i;</div><div class="line">				end = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (start == -<span class="number">1</span> &amp;&amp; end == -<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> s.substring(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 124. ZigZag Conversion]]></title>
      <url>http://yoursite.com/2013/11/13/2013-11-13-CODE%20124%20ZigZag%20Conversion/</url>
      <content type="html"><![CDATA[<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is<br> written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br>    P   A   H   N<br>    A P L S I I G<br>    Y   I   R</p>
<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code><br>Write the code that will take a string and make this conversion given a number of rows:<br>    string convert(string text, int nRows);<br><code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> nRows)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span>(nRows == <span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Character&gt;&gt; charLists = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Character&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRows; i++) &#123;</div><div class="line">		charLists.add(<span class="keyword">new</span> ArrayList&lt;Character&gt;());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i % (nRows - <span class="number">1</span>) == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (j = i; j &lt; cs.length &amp;&amp; j &lt; i + nRows; j++) &#123;</div><div class="line">				charLists.get(j - i).add(cs[j]);</div><div class="line">			&#125;</div><div class="line">			i = j - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> row = charLists.size() - <span class="number">1</span> - i % (nRows - <span class="number">1</span>);</div><div class="line">			charLists.get(row).add(cs[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">for</span> (ArrayList&lt;Character&gt; charList : charLists) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c : charList) &#123;</div><div class="line">			sb.append(c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 123. Reverse Integer]]></title>
      <url>http://yoursite.com/2013/11/12/2013-11-12-CODE%20123%20Reverse%20Integer/</url>
      <content type="html"><![CDATA[<p>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x = -123, return -321<br><a href="http://oj.leetcode.com/problems/reverse-integer/#" target="_blank" rel="external">click to show spoilers.</a><br>Have you thought about this?Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!<br>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.<br>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?<br>Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (x &gt;= -<span class="number">9</span> &amp;&amp; x &lt;= <span class="number">9</span>) &#123;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span> ism = x &lt; <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (ism) &#123;</div><div class="line">		x = -x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">long</span> lx = (<span class="keyword">long</span>) x;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (lx &gt; <span class="number">0</span>) &#123;</div><div class="line">		length++;</div><div class="line">		lx = lx / <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	lx = (<span class="keyword">long</span>) x;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (length + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> first = x / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i) % <span class="number">10</span>;</div><div class="line">		<span class="keyword">int</span> second = x / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, length - <span class="number">1</span> - i) % <span class="number">10</span>;</div><div class="line">		lx = lx - (<span class="keyword">long</span>) first * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</div><div class="line">		lx = lx - (<span class="keyword">long</span>) second * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, length - <span class="number">1</span> - i);</div><div class="line">		lx = lx + (<span class="keyword">long</span>) first * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, length - <span class="number">1</span> - i);</div><div class="line">		lx = lx + (<span class="keyword">long</span>) second * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</div><div class="line">		<span class="keyword">if</span> (!ism &amp;&amp; lx &gt; Integer.MAX_VALUE) &#123;</div><div class="line">			<span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ism &amp;&amp; lx - <span class="number">1</span> &gt; Integer.MAX_VALUE) &#123;</div><div class="line">			<span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> (<span class="keyword">int</span>) (ism ? -lx : lx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 122. String to Integer (atoi)]]></title>
      <url>http://yoursite.com/2013/11/12/2013-11-12-CODE%20122%20String%20to%20Integer%20(atoi)/</url>
      <content type="html"><![CDATA[<p>Implement atoi to convert a string to an integer.<br>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.<br>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.<br><a href="http://oj.leetcode.com/problems/string-to-integer-atoi/#" target="_blank" rel="external">spoilers alert… click to show requirements for atoi.</a><br>Requirements for atoi:The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed<br> by as many numerical digits as possible, and interprets them as a numerical value.<br>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.<br>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.<br>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">atoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == str || <span class="string">""</span>.equals(str)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] strs = str.toCharArray();</div><div class="line">	<span class="keyword">int</span> begin = <span class="number">0</span>;</div><div class="line">	<span class="keyword">boolean</span> ism = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">while</span> (begin &lt; strs.length &amp;&amp; strs[begin] == <span class="string">' '</span>) &#123;</div><div class="line">		begin++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (begin &gt;= strs.length) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (strs[begin] == <span class="string">'+'</span>) &#123;</div><div class="line">		begin++;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strs[begin] == <span class="string">'-'</span>) &#123;</div><div class="line">		ism = <span class="keyword">true</span>;</div><div class="line">		begin++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">long</span> number = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; strs.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (strs[i] &lt; <span class="string">'0'</span> || strs[i] &gt; <span class="string">'9'</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (i == begin) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			number = Character.digit(strs[i], <span class="number">10</span>) + <span class="number">10</span> * number;</div><div class="line">			<span class="keyword">if</span> (!ism &amp;&amp; number &gt; Integer.MAX_VALUE) &#123;</div><div class="line">				<span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ism &amp;&amp; number - <span class="number">1</span> &gt; Integer.MAX_VALUE) &#123;</div><div class="line">				<span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ism) &#123;</div><div class="line">		number = -number;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> (<span class="keyword">int</span>) number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 121. Palindrome Number]]></title>
      <url>http://yoursite.com/2013/11/12/2013-11-12-CODE%20121%20Palindrome%20Number/</url>
      <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. Do this without extra space.<br><a href="http://oj.leetcode.com/problems/palindrome-number/#" target="_blank" rel="external">click to show spoilers.</a><br>Some hints:Could negative integers be palindromes? (ie, -1)<br>If you are thinking of converting the integer to string, note the restriction of using extra space.<br>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?<br>There is a more generic way of solving this problem.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">9</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> num = x;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">		length++;</div><div class="line">		num = num / <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (length + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> ((x / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i) % <span class="number">10</span>) != (x</div><div class="line">				/ (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, length - <span class="number">1</span> - i) % <span class="number">10</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 120. Container With Most Water]]></title>
      <url>http://yoursite.com/2013/11/10/2013-11-10-CODE%20120%20Container%20With%20Most%20Water/</url>
      <content type="html"><![CDATA[<p>Given n non-negative integers a1, a2,<br> …, an, where each represents a point at coordinate (i, ai). n vertical<br> lines are drawn such that the two endpoints of line i is at (i, ai)<br> and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.<br>Note: You may not slant the container.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == height || height.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (height[j] &gt;= height[i]) &#123;</div><div class="line">				<span class="keyword">int</span> tmp = (i - j) * height[i];</div><div class="line">				<span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">					max = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = height.length - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line">			<span class="keyword">if</span> (height[j] &gt;= height[i]) &#123;</div><div class="line">				<span class="keyword">int</span> tmp = (j - i) * height[i];</div><div class="line">				<span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">					max = tmp;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 119. Integer to Roman]]></title>
      <url>http://yoursite.com/2013/11/10/2013-11-10-CODE%20119%20Integer%20to%20Roman/</url>
      <content type="html"><![CDATA[<p>Given an integer, convert it to a roman numeral.<br>Input is guaranteed to be within the range from 1 to 3999.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> List&lt;R2A&gt; r2a = <span class="keyword">new</span> ArrayList&lt;R2A&gt;();</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">1000</span>, <span class="string">'M'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">500</span>, <span class="string">'D'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">100</span>, <span class="string">'C'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">50</span>, <span class="string">'L'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">10</span>, <span class="string">'X'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">5</span>, <span class="string">'V'</span>));</div><div class="line">	r2a.add(<span class="keyword">new</span> R2A(<span class="number">1</span>, <span class="string">'I'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">int</span> number = num;</div><div class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r2a.size(); i++) &#123;</div><div class="line">			<span class="keyword">int</span> jieguo = number / r2a.get(i).number;</div><div class="line">			<span class="keyword">if</span> (jieguo &lt;= <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (jieguo == <span class="number">4</span>) &#123;</div><div class="line">					sb.append(r2a.get(i).roman);</div><div class="line">					sb.append(r2a.get(i - <span class="number">1</span>).roman);</div><div class="line">					number = number % r2a.get(i).number;</div><div class="line"></div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span></div><div class="line">							&amp;&amp; jieguo == <span class="number">1</span></div><div class="line">							&amp;&amp; i &lt; r2a.size() - <span class="number">1</span></div><div class="line">							&amp;&amp; number % r2a.get(i).number</div><div class="line">									/ r2a.get(i + <span class="number">1</span>).number == <span class="number">4</span>) &#123;</div><div class="line">						sb.append(r2a.get(i + <span class="number">1</span>).roman);</div><div class="line">						sb.append(r2a.get(i - <span class="number">1</span>).roman);</div><div class="line">						number = number % r2a.get(i + <span class="number">1</span>).number;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; jieguo; j++) &#123;</div><div class="line">							sb.append(r2a.get(i).roman);</div><div class="line">						&#125;</div><div class="line">						number = number % r2a.get(i).number;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">R2A</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> number;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">char</span> roman;</div><div class="line"></div><div class="line">	R2A(<span class="keyword">int</span> n, <span class="keyword">char</span> r) &#123;</div><div class="line">		number = n;</div><div class="line">		roman = r;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 118. Roman to Integer]]></title>
      <url>http://yoursite.com/2013/11/10/2013-11-10-CODE%20118%20Roman%20to%20Integer/</url>
      <content type="html"><![CDATA[<p>Given a roman numeral, convert it to an integer.<br>Input is guaranteed to be within the range from 1 to 3999.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> Map&lt;Character, Integer&gt; r2a = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">	r2a.put(<span class="string">'I'</span>, <span class="number">1</span>);</div><div class="line">	r2a.put(<span class="string">'V'</span>, <span class="number">5</span>);</div><div class="line">	r2a.put(<span class="string">'X'</span>, <span class="number">10</span>);</div><div class="line">	r2a.put(<span class="string">'L'</span>, <span class="number">50</span>);</div><div class="line">	r2a.put(<span class="string">'C'</span>, <span class="number">100</span>);</div><div class="line">	r2a.put(<span class="string">'D'</span>, <span class="number">500</span>);</div><div class="line">	r2a.put(<span class="string">'M'</span>, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> tmpStep = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c : cs) &#123;</div><div class="line">		<span class="keyword">int</span> ttmp = r2a.get(c);</div><div class="line">		<span class="keyword">if</span> (-<span class="number">1</span> == tmpStep) &#123;</div><div class="line">			tmpStep = ttmp;</div><div class="line">			tmp = ttmp;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ttmp == tmpStep) &#123;</div><div class="line">			tmp += ttmp;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ttmp &gt; tmpStep) &#123;</div><div class="line">			tmp = ttmp - tmp;</div><div class="line">			num += tmp;</div><div class="line">			tmp = <span class="number">0</span>;</div><div class="line">			tmpStep = -<span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ttmp &lt; tmpStep) &#123;</div><div class="line">			num += tmp;</div><div class="line">			tmpStep = ttmp;</div><div class="line">			tmp = ttmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	num += tmp;</div><div class="line">	<span class="keyword">return</span> num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 117. Longest Common Prefix]]></title>
      <url>http://yoursite.com/2013/11/09/2013-11-09-CODE%20117%20Longest%20Common%20Prefix/</url>
      <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == strs || <span class="number">0</span> == strs.length) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == strs.length) &#123;</div><div class="line">		<span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> maxIndex = strs[<span class="number">0</span>].length() - <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (maxIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] cs = strs[<span class="number">0</span>].toCharArray();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</div><div class="line">		<span class="keyword">char</span>[] ss = strs[i].toCharArray();</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (j &lt; cs.length &amp;&amp; j &lt; ss.length &amp;&amp; j &lt;= maxIndex</div><div class="line">				&amp;&amp; cs[j] == ss[j]) &#123;</div><div class="line">			j++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j &gt; maxIndex) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		maxIndex = j - <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (maxIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, maxIndex + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 114. 4Sum]]></title>
      <url>http://yoursite.com/2013/11/09/2013-11-09-CODE%20114%204Sum/</url>
      <content type="html"><![CDATA[<p>Given an array S of n integers, are there elements a, b, c, and d in S such<br> that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.<br>Note:</p>
<ul>
<li>Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)</li>
<li>The solution set must not contain duplicate quadruplets.</li>
</ul>
<pre><code>For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

A solution set is:
(-1,  0, 0, 1)
(-2, -1, 1, 2)
(-2,  0, 0, 2)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (num.length &lt;= <span class="number">3</span>) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	Arrays.sort(num);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">3</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">3</span>; j &lt; num.length; j++) &#123;</div><div class="line">			<span class="keyword">int</span> sum = num[i] + num[j];</div><div class="line">			<span class="keyword">int</span> start = i + <span class="number">1</span>;</div><div class="line">			<span class="keyword">int</span> end = j - <span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">				<span class="keyword">if</span> (num[start] + num[end] &gt; target - sum) &#123;</div><div class="line">					<span class="keyword">while</span> (start &lt; end &amp;&amp; num[end - <span class="number">1</span>] == num[end]) &#123;</div><div class="line">						end--;</div><div class="line">					&#125;</div><div class="line">					end--;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num[start] + num[end] &lt; target - sum) &#123;</div><div class="line">					<span class="keyword">while</span> (start &lt; end &amp;&amp; num[start + <span class="number">1</span>] == num[start]) &#123;</div><div class="line">						start++;</div><div class="line">					&#125;</div><div class="line">					start++;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">					result.add(num[i]);</div><div class="line">					result.add(num[start]);</div><div class="line">					result.add(num[end]);</div><div class="line">					result.add(num[j]);</div><div class="line">					<span class="keyword">if</span> (!results.contains(result)) &#123;</div><div class="line">						results.add(result);</div><div class="line">					&#125;</div><div class="line">					start++;</div><div class="line">					end--;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (i &lt; num.length - <span class="number">3</span> &amp;&amp; num[i + <span class="number">1</span>] == num[i]) &#123;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 115. 3Sum Closest]]></title>
      <url>http://yoursite.com/2013/11/08/2013-11-08-CODE%20115%203Sum%20Closest/</url>
      <content type="html"><![CDATA[<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have<br> exactly one solution.<br>        For example, given array S = {-1 2 1 -4}, and target = 1.</p>
<pre><code>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (num.length &lt;= <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	Arrays.sort(num);</div><div class="line">	<span class="keyword">int</span> targetClosest = Integer.MAX_VALUE;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">2</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> sum = num[i];</div><div class="line">		<span class="keyword">int</span> start = i + <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> end = num.length - <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">			<span class="keyword">if</span> (targetClosest == Integer.MAX_VALUE</div><div class="line">					|| (Math.abs(num[start] + num[end] + sum - target) &lt; Math</div><div class="line">							.abs(targetClosest - target))) &#123;</div><div class="line">				targetClosest = num[start] + num[end] + sum;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (num[start] + num[end] &gt; target - sum) &#123;</div><div class="line">				<span class="keyword">while</span> (start &lt; end &amp;&amp; num[end - <span class="number">1</span>] == num[end]) &#123;</div><div class="line">					end--;</div><div class="line">				&#125;</div><div class="line">				end--;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num[start] + num[end] &lt; target - sum) &#123;</div><div class="line">				<span class="keyword">while</span> (start &lt; end &amp;&amp; num[start + <span class="number">1</span>] == num[start]) &#123;</div><div class="line">					start++;</div><div class="line">				&#125;</div><div class="line">				start++;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> target;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (i &lt; num.length - <span class="number">2</span> &amp;&amp; num[i + <span class="number">1</span>] == num[i]) &#123;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> targetClosest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 116. 3Sum]]></title>
      <url>http://yoursite.com/2013/11/08/2013-11-08-CODE%20116%203Sum/</url>
      <content type="html"><![CDATA[<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c =<br> 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:</p>
<ul>
<li>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)</li>
<li>The solution set must not contain duplicate triplets.</li>
</ul>
<pre><code>For example, given array S = {-1 0 1 2 -1 -4},

A solution set is:
(-1, 0, 1)
(-1, -1, 2)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] num) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (num.length &lt;= <span class="number">2</span>) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	Arrays.sort(num);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">2</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> sum = num[i];</div><div class="line">		<span class="keyword">int</span> start = i + <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> end = num.length - <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">			<span class="keyword">if</span> (num[start] + num[end] &gt; <span class="number">0</span> - sum) &#123;</div><div class="line">				<span class="keyword">while</span> (start &lt; end &amp;&amp; num[end - <span class="number">1</span>] == num[end]) &#123;</div><div class="line">					end--;</div><div class="line">				&#125;</div><div class="line">				end--;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num[start] + num[end] &lt; <span class="number">0</span> - sum) &#123;</div><div class="line">				<span class="keyword">while</span> (start &lt; end &amp;&amp; num[start + <span class="number">1</span>] == num[start]) &#123;</div><div class="line">					start++;</div><div class="line">				&#125;</div><div class="line">				start++;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				result.add(num[i]);</div><div class="line">				result.add(num[start]);</div><div class="line">				result.add(num[end]);</div><div class="line">				<span class="keyword">if</span> (!results.contains(result)) &#123;</div><div class="line">					results.add(result);</div><div class="line">				&#125;</div><div class="line">				start++;</div><div class="line">				end--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (i &lt; num.length - <span class="number">2</span> &amp;&amp; num[i + <span class="number">1</span>] == num[i]) &#123;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 113. Letter Combinations of a Phone Number]]></title>
      <url>http://yoursite.com/2013/11/06/2013-11-06-CODE%20113%20Letter%20Combinations%20of%20a%20Phone%20Number/</url>
      <content type="html"><![CDATA[<p>Given a digit string, return all possible letter combinations that the number could represent.<br>A mapping of digit to letters (just like on the telephone buttons) is given below.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""><br>    Input:Digit string “23”<br>    Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>
<p>Note:<br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">char</span>[][] cdigits = &#123; &#123; <span class="string">' '</span> &#125;, &#123;&#125;, &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> &#125;,</div><div class="line">		&#123; <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span> &#125;, &#123; <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span> &#125;, &#123; <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span> &#125;,</div><div class="line">		&#123; <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span> &#125;, &#123; <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span> &#125;, &#123; <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span> &#125;,</div><div class="line">		&#123; <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == digits || <span class="string">""</span>.equals(digits)) &#123;</div><div class="line">		ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		String str = <span class="string">""</span>;</div><div class="line">		results.add(str);</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(digits, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;String&gt; <span class="title">dfs</span><span class="params">(String digits, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (i &gt;= digits.length()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> a = Character.digit(digits.charAt(i), <span class="number">10</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="number">1</span> == a) &#123;</div><div class="line">		<span class="keyword">return</span> dfs(digits, i + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cdigits[a].length; j++) &#123;</div><div class="line">		<span class="keyword">char</span> c = cdigits[a][j];</div><div class="line">		ArrayList&lt;String&gt; tmps = dfs(digits, i + <span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span> (tmps.isEmpty()) &#123;</div><div class="line">			results.add(<span class="keyword">new</span> StringBuilder().append(c).toString());</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">for</span> (String str : tmps) &#123;</div><div class="line">				str = c + str;</div><div class="line">				results.add(<span class="keyword">new</span> String(str));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 112. Remove Nth Node From End of List]]></title>
      <url>http://yoursite.com/2013/11/06/2013-11-06-CODE%20112%20Remove%20Nth%20Node%20From%20End%20of%20List/</url>
      <content type="html"><![CDATA[<p>Given a linked list, remove the nth node from the end of list and return its head.<br>For example,<br>       Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<pre><code>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.
</code></pre><p>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">1</span> || <span class="keyword">null</span> == head) &#123;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125;</div><div class="line">	ListNode pre = head;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n &amp;&amp; <span class="keyword">null</span> != pre; i++) &#123;</div><div class="line">		pre = pre.next;</div><div class="line">	&#125;</div><div class="line">	ListNode last = head;</div><div class="line">	ListNode preLast = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != pre) &#123;</div><div class="line">		pre = pre.next;</div><div class="line">		preLast = last;</div><div class="line">		last = last.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != preLast) &#123;</div><div class="line">		preLast.next = last.next;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == n + <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> head.next;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 111. Valid Parentheses]]></title>
      <url>http://yoursite.com/2013/11/06/2013-11-06-CODE%20111%20Valid%20Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>,<br> determine if the input string is valid.<br>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are<br> all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are<br> not.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">char</span>[] ss = s.toCharArray();</div><div class="line">	Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c : ss) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="string">'('</span> == c || <span class="string">'&#123;'</span> == c || <span class="string">'['</span> == c) &#123;</div><div class="line">			stack.add(c);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (stack.isEmpty()) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (<span class="string">')'</span> == c &amp;&amp; stack.pop() != <span class="string">'('</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">']'</span> == c &amp;&amp; stack.pop() != <span class="string">'['</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'&#125;'</span> == c &amp;&amp; stack.pop() != <span class="string">'&#123;'</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (stack.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 110. Generate Parentheses]]></title>
      <url>http://yoursite.com/2013/11/05/2013-11-05-CODE%20110%20Generate%20Parentheses/</url>
      <content type="html"><![CDATA[<p>###<br>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br>For example, given n = 3, a solution set is:<br><code>&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="comment">// (()) ()()</span></div><div class="line">	<span class="keyword">return</span> dfs(<span class="number">0</span>, n, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;String&gt; <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> right, <span class="keyword">int</span> left, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> == left) &#123;</div><div class="line">		ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		String str = <span class="string">""</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - right; i++) &#123;</div><div class="line">			str += <span class="string">")"</span>;</div><div class="line">		&#125;</div><div class="line">		results.add(str);</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - left - right; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1</span>; j++) &#123;</div><div class="line">			ArrayList&lt;String&gt; strs = dfs(i + right, left - j, n);</div><div class="line">			<span class="keyword">for</span> (String str : strs) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j; k++) &#123;</div><div class="line">					str = <span class="string">"("</span> + str;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</div><div class="line">					str = <span class="string">")"</span> + str;</div><div class="line">				&#125;</div><div class="line">				results.add(<span class="keyword">new</span> String(str));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 109. Merge k Sorted Lists]]></title>
      <url>http://yoursite.com/2013/11/05/2013-11-05-CODE%20109%20Merge%20k%20Sorted%20Lists/</url>
      <content type="html"><![CDATA[<p>Merge k sorted<br> linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ArrayList&lt;ListNode&gt; lists)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == lists || lists.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(lists, <span class="number">0</span>, lists.size() - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ListNode <span class="title">dfs</span><span class="params">(ArrayList&lt;ListNode&gt; lists, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (start == end) &#123;</div><div class="line">		<span class="keyword">return</span> lists.get(start);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (end &gt; start &amp;&amp; end == start + <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> merge2Lists(lists.get(start), lists.get(end));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">	ListNode left = dfs(lists, start, mid);</div><div class="line">	ListNode right = dfs(lists, mid + <span class="number">1</span>, end);</div><div class="line">	<span class="keyword">return</span> merge2Lists(left, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ListNode <span class="title">merge2Lists</span><span class="params">(ListNode first, ListNode second)</span> </span>&#123;</div><div class="line">	ListNode tmpF = first;</div><div class="line">	ListNode tmpS = second;</div><div class="line">	ListNode newNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode tmpN = newNode;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != tmpF &amp;&amp; <span class="keyword">null</span> != tmpS) &#123;</div><div class="line">		<span class="keyword">if</span> (tmpS.val &gt;= tmpF.val) &#123;</div><div class="line">			tmpN.next = tmpF;</div><div class="line">			tmpF = tmpF.next;</div><div class="line">			tmpN = tmpN.next;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ListNode node = <span class="keyword">new</span> ListNode(tmpS.val);</div><div class="line">			tmpN.next = node;</div><div class="line">			tmpS = tmpS.next;</div><div class="line">			tmpN = tmpN.next;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != tmpS) &#123;</div><div class="line">		tmpN.next = tmpS;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != tmpF) &#123;</div><div class="line">		tmpN.next = tmpF;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> newNode.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 108. Swap Nodes in Pairs]]></title>
      <url>http://yoursite.com/2013/11/04/2013-11-04-CODE%20108%20Swap%20Nodes%20in%20Pairs/</url>
      <content type="html"><![CDATA[<p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example,<br>Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode tmpHead = newHead;</div><div class="line">	ListNode tmp = head;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != tmp &amp;&amp; <span class="keyword">null</span> != tmp.next) &#123;</div><div class="line">		ListNode first = tmp;</div><div class="line">		ListNode second = tmp.next;</div><div class="line">		tmp = second.next;</div><div class="line">		tmpHead.next = second;</div><div class="line">		tmpHead.next.next = first;</div><div class="line">		tmpHead = tmpHead.next.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != tmp) &#123;</div><div class="line">		tmpHead.next = tmp;</div><div class="line">		tmpHead = tmpHead.next;</div><div class="line">	&#125;</div><div class="line">	tmpHead.next = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">return</span> newHead.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 107. Reverse Nodes in k-Group]]></title>
      <url>http://yoursite.com/2013/11/04/2013-11-04-CODE%20107%20Reverse%20Nodes%20in%20k-Group/</url>
      <content type="html"><![CDATA[<p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br>If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.<br>You may not alter the values in the nodes, only nodes itself may be changed.<br>Only constant memory is allowed.<br>For example,<br>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code><br>For k = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code><br>For k = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code><br>``</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ListNode tmpHead = head;</div><div class="line">	Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	<span class="keyword">int</span> number = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (tmpHead != <span class="keyword">null</span>) &#123;</div><div class="line">		ListNode tmp = tmpHead;</div><div class="line">		<span class="keyword">while</span> (tmp != <span class="keyword">null</span> &amp;&amp; number &lt;= k) &#123;</div><div class="line">			stack.push(tmp.val);</div><div class="line">			tmp = tmp.next;</div><div class="line">			number++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (number &gt; k) &#123;</div><div class="line">			<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">				tmpHead.val = stack.pop();</div><div class="line">				tmpHead = tmpHead.next;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		tmpHead = tmp;</div><div class="line">		number = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 106. Remove Duplicates from Sorted Array]]></title>
      <url>http://yoursite.com/2013/11/04/2013-11-04-CODE%20106%20Remove%20Duplicates%20from%20Sorted%20Array/</url>
      <content type="html"><![CDATA[<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>For example,<br>Given input array A = <code>[1,1,2]</code>,<br>Your function should return length = <code>2</code>, and A is now <code>[1,2]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		<span class="keyword">if</span> (A.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> length = A.length;</div><div class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> nxt = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (; nxt &lt; A.length; nxt++) &#123;</div><div class="line">			<span class="keyword">if</span> (A[nxt] != A[nxt - <span class="number">1</span>]) &#123;</div><div class="line">				A[cur] = A[nxt - <span class="number">1</span>];</div><div class="line">				cur++;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				length--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		A[cur] = A[nxt - <span class="number">1</span>];</div><div class="line">		<span class="keyword">return</span> length;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 105. Remove Element]]></title>
      <url>http://yoursite.com/2013/11/03/2013-11-03-CODE%20105%20Remove%20Element/</url>
      <content type="html"><![CDATA[<p>Given an array and a value, remove all instances of that value in place and return the new length.<br>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> elem)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	ArrayList&lt;Integer&gt; removeIndex = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[i] == elem) &#123;</div><div class="line">			removeIndex.add(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = removeIndex.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = removeIndex.get(i);</div><div class="line">		<span class="keyword">if</span> (tmp == A.length - removeIndex.size() + i) &#123;</div><div class="line">			A[tmp] = <span class="number">0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			A[tmp] = A[A.length - removeIndex.size() + i];</div><div class="line">			A[A.length - removeIndex.size() + i] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A.length - removeIndex.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 104. Divide Two Integers]]></title>
      <url>http://yoursite.com/2013/11/03/2013-11-03-CODE%20104%20Divide%20Two%20Integers/</url>
      <content type="html"><![CDATA[<p>Divide two integers without using multiplication, division and mod operator.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (divisor == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> dividend;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (divisor == -<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> -dividend;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Math.abs(divisor) == <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">int</span> number = dividend &gt;&gt; <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (divisor &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> -number;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">long</span> ldividend = <span class="number">0L</span>;</div><div class="line">	<span class="keyword">long</span> ldivisor = <span class="number">0L</span>;</div><div class="line">	<span class="keyword">boolean</span> isDividendFuShu = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">boolean</span> isDivisorFuShu = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">if</span> (divisor &lt; <span class="number">0</span>) &#123;</div><div class="line">		isDivisorFuShu = <span class="keyword">true</span>;</div><div class="line">		ldivisor = Math.abs((<span class="keyword">long</span>) divisor);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		ldivisor = divisor;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (dividend &lt; <span class="number">0</span>) &#123;</div><div class="line">		isDividendFuShu = <span class="keyword">true</span>;</div><div class="line">		ldividend = Math.abs((<span class="keyword">long</span>) dividend);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		ldividend = dividend;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">long</span> start = <span class="number">0l</span>;</div><div class="line">	<span class="keyword">long</span> end = ldividend;</div><div class="line">	<span class="keyword">while</span> (start &lt; end - <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">long</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">long</span> tmpNumber = add(mid, ldivisor);</div><div class="line">		<span class="keyword">if</span> (tmpNumber &lt; ldividend) &#123;</div><div class="line">			start = mid;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpNumber &gt; ldividend) &#123;</div><div class="line">			end = mid;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> ((isDividendFuShu &amp;&amp; !isDivisorFuShu)</div><div class="line">					|| (!isDividendFuShu &amp;&amp; isDivisorFuShu)) &#123;</div><div class="line">				<span class="keyword">return</span> -(<span class="keyword">int</span>) mid;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> (<span class="keyword">int</span>) mid;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ((isDividendFuShu &amp;&amp; !isDivisorFuShu)</div><div class="line">			|| (!isDividendFuShu &amp;&amp; isDivisorFuShu)) &#123;</div><div class="line">		<span class="keyword">return</span> -(<span class="keyword">int</span>) start;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) start;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> p, <span class="keyword">long</span> num)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> == p) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">long</span> tmp = add(p &gt;&gt; <span class="number">1</span>, num) &lt;&lt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> ((p &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</div><div class="line">		tmp += num;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 103. Substring with Concatenation of All Words]]></title>
      <url>http://yoursite.com/2013/11/03/2013-11-03-CODE%20103%20Substring%20with%20Concatenation%20of%20All%20Words/</url>
      <content type="html"><![CDATA[<p>You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening<br> characters.<br>For example, given:<br>S: <code>&quot;barfoothefoobarman&quot;</code><br>L: <code>[&quot;foo&quot;, &quot;bar&quot;]</code><br>You should return the indices: <code>[0,9]</code>.<br>(order does not matter).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">findSubstring</span><span class="params">(String S, String[] L)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	Map&lt;String, Integer&gt; wordMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; starts = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">int</span> wordLength = L[<span class="number">0</span>].length();</div><div class="line">	<span class="keyword">int</span> wordNumber = L.length;</div><div class="line">	<span class="keyword">int</span> allLength = wordLength * wordNumber;</div><div class="line">	<span class="keyword">for</span> (String l : L) &#123;</div><div class="line">		<span class="keyword">if</span> (wordMap.containsKey(l)) &#123;</div><div class="line">			<span class="keyword">int</span> num = wordMap.get(l);</div><div class="line">			wordMap.put(l, num + <span class="number">1</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			wordMap.put(l, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= S.length() - allLength; i++) &#123;</div><div class="line">		Map&lt;String, Integer&gt; tmpWordMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = i, curWordNum = <span class="number">0</span>; curWordNum &lt; wordNumber; k += wordLength, curWordNum++) &#123;</div><div class="line">			String tmpStr = S.substring(k, k + wordLength);</div><div class="line">			<span class="keyword">if</span> (tmpWordMap.containsKey(tmpStr)) &#123;</div><div class="line">				<span class="keyword">int</span> number = tmpWordMap.get(tmpStr);</div><div class="line">				tmpWordMap.put(tmpStr, number + <span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				tmpWordMap.put(tmpStr, <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!wordMap.containsKey(tmpStr)</div><div class="line">					|| tmpWordMap.get(tmpStr) &gt; wordMap.get(tmpStr)) &#123;</div><div class="line">				flag = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			starts.add(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> starts;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 102. Next Permutation]]></title>
      <url>http://yoursite.com/2013/11/01/2013-11-01-CODE%20102%20Next%20Permutation/</url>
      <content type="html"><![CDATA[<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.<br>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br><code>1,2,3</code> → <code>1,3,2</code><br><code>3,2,1</code> → <code>1,2,3</code><br><code>1,1,5</code> → <code>1,5,1</code></p>
<p>``</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	List&lt;Integer&gt; rest = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (i = num.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (num[i] &lt;= num[i - <span class="number">1</span>]) &#123;</div><div class="line">			rest.add(num[i]);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt;= <span class="number">0</span>) &#123;</div><div class="line">		Arrays.sort(num);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		rest.add(num[i]);</div><div class="line">		<span class="keyword">for</span> (; j &lt; rest.size(); j++) &#123;</div><div class="line">			<span class="keyword">if</span> (rest.get(j) &gt; num[i - <span class="number">1</span>]) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> tmp = rest.get(j);</div><div class="line">		rest.set(j, num[i - <span class="number">1</span>]);</div><div class="line">		num[i - <span class="number">1</span>] = tmp;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; i &lt; num.length; i++, j++) &#123;</div><div class="line">			num[i] = rest.get(j);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 101. Longest Valid Parentheses]]></title>
      <url>http://yoursite.com/2013/11/01/2013-11-01-CODE%20101%20Longest%20Valid%20Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>,<br> find the length of the longest valid (well-formed) parentheses substring.<br>For <code>&quot;(()&quot;</code>,<br> the longest valid parentheses substring is <code>&quot;()&quot;</code>, which<br> has length = 2.<br>Another example is <code>&quot;)()())&quot;</code>,<br> where the longest valid parentheses substring is <code>&quot;()()&quot;</code>,<br> which has length = 4.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (s.length() &lt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;Object&gt;();</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c : cs) &#123;</div><div class="line">		<span class="keyword">if</span> (c == <span class="string">')'</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (stack.isEmpty()) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				Object pc = stack.pop();</div><div class="line">				<span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">				<span class="keyword">while</span> (!(pc <span class="keyword">instanceof</span> Character) &amp;&amp; !stack.isEmpty()) &#123;</div><div class="line">					tmp += (Integer) pc;</div><div class="line">					pc = stack.pop();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (pc <span class="keyword">instanceof</span> Character) &#123;</div><div class="line">					stack.add(tmp + <span class="number">2</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">if</span> (tmp + (Integer) pc &gt; max) &#123;</div><div class="line">						max = tmp + (Integer) pc;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			stack.push(c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">		Object pc = stack.pop();</div><div class="line">		<span class="keyword">if</span> (!(pc <span class="keyword">instanceof</span> Character)) &#123;</div><div class="line">			tmp += (Integer) pc;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">				max = tmp;</div><div class="line">			&#125;</div><div class="line">			tmp = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">		max = tmp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 100. Search in Rotated Sorted Array]]></title>
      <url>http://yoursite.com/2013/10/31/2013-10-31-CODE%20100%20Search%20in%20Rotated%20Sorted%20Array/</url>
      <content type="html"><![CDATA[<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4
 5 6 7 0 1 2</code>).<br>You are given a target value to search. If found in the array return its index, otherwise return -1.<br>You may assume no duplicate exists in the array.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span> pivot = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (; pivot &lt; A.length; pivot++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[pivot] &lt; A[pivot - <span class="number">1</span>]) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (pivot == A.length) &#123;</div><div class="line">		end = A.length - <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (A[<span class="number">0</span>] &lt;= target &amp;&amp; A[pivot - <span class="number">1</span>] &gt;= target) &#123;</div><div class="line">			start = <span class="number">0</span>;</div><div class="line">			end = pivot - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			start = pivot;</div><div class="line">			end = A.length - <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (A[mid] &lt; target) &#123;</div><div class="line">			start = mid + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; target) &#123;</div><div class="line">			end = mid;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> mid;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (A[start] == target) &#123;</div><div class="line">		<span class="keyword">return</span> start;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 99. Search for a Range]]></title>
      <url>http://yoursite.com/2013/10/31/2013-10-31-CODE%2099%20Search%20for%20a%20Range/</url>
      <content type="html"><![CDATA[<p>Given a sorted array of integers, find the starting and ending position of a given target value.<br>Your algorithm’s runtime complexity must be in the order of O(log n).<br>If the target is not found in the array, return <code>[-1, -1]</code>.<br>For example,<br>Given <code>[5, 7, 7, 8, 8, 10]</code> and target value 8,<br>return <code>[3, 4]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = A.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (A[mid] &lt; target) &#123;</div><div class="line">			start = mid + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt;= target) &#123;</div><div class="line">			end = mid;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (A[start] != target</div><div class="line">			&amp;&amp; ((start + <span class="number">1</span> &lt; A.length &amp;&amp; A[start + <span class="number">1</span>] != target) || (start + <span class="number">1</span> &gt;= A.length))) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">1</span>, -<span class="number">1</span> &#125;;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (A[start] != target &amp;&amp; start + <span class="number">1</span> &lt; A.length</div><div class="line">			&amp;&amp; A[start + <span class="number">1</span>] == target) &#123;</div><div class="line">		start++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (end = start + <span class="number">1</span>; end &lt; A.length; end++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[end] != target) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; start, end - <span class="number">1</span> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 98. Search Insert Position]]></title>
      <url>http://yoursite.com/2013/10/30/2013-10-30-CODE%2098%20Search%20Insert%20Position/</url>
      <content type="html"><![CDATA[<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You may assume no duplicates in the array.<br>Here are few examples.<br><code>[1,3,5,6]</code>, 5 → 2<br><code>[1,3,5,6]</code>, 2 → 1<br><code>[1,3,5,6]</code>, 7 → 4<br><code>[1,3,5,6]</code>, 0 → 0</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = A.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (A[mid] &lt; target) &#123;</div><div class="line">			start = mid + <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &gt; target) &#123;</div><div class="line">			end = mid;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> mid;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (A[start] &gt;= target) &#123;</div><div class="line">		<span class="keyword">return</span> start;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> start + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 97. Valid Sudoku]]></title>
      <url>http://yoursite.com/2013/10/30/2013-10-30-CODE%2097%20Valid%20Sudoku/</url>
      <content type="html"><![CDATA[<p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">Sudoku Puzzles - The Rules</a>.<br>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""></p>
<p>A partially filled sudoku which is valid.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (!check(board, i, j)) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i != y &amp;&amp; board[x][i] == board[x][y]) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i != x &amp;&amp; board[i][y] == board[x][y]) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span> * (x / <span class="number">3</span>); i &lt; <span class="number">3</span> * (x / <span class="number">3</span> + <span class="number">1</span>); i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span> * (y / <span class="number">3</span>); j &lt; <span class="number">3</span> * (y / <span class="number">3</span> + <span class="number">1</span>); j++) &#123;</div><div class="line">			<span class="keyword">if</span> (i != x &amp;&amp; j != y &amp;&amp; board[i][j] == board[x][y]) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 96. Sudoku Solver]]></title>
      <url>http://yoursite.com/2013/10/29/2013-10-29-CODE%2096%20Sudoku%20Solver/</url>
      <content type="html"><![CDATA[<p>Write a program to solve a Sudoku puzzle by filling the empty cells.<br>Empty cells are indicated by the character <code>&#39;.&#39;</code>.<br>You may assume that there will be only one unique solution.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""></p>
<p>A sudoku puzzle…</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt=""></p>
<p>…and its solution numbers marked in red.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[] nineNumbers = &#123; <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>,</div><div class="line">			<span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> &#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">		<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">		<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">		ArrayList&lt;ArrayList&lt;Character&gt;&gt; cols = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Character&gt;&gt;();</div><div class="line">		ArrayList&lt;ArrayList&lt;Character&gt;&gt; rows = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Character&gt;&gt;();</div><div class="line">		ArrayList&lt;Integer&gt; indexes = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">			ArrayList&lt;Character&gt; row = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</div><div class="line">				row.add(board[i][j]);</div><div class="line">				<span class="keyword">if</span> (board[i][j] == <span class="string">'.'</span>) &#123;</div><div class="line">					<span class="keyword">int</span> index = j + i * <span class="number">9</span>;</div><div class="line">					indexes.add(index);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			rows.add(row);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">			ArrayList&lt;Character&gt; col = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</div><div class="line">				col.add(board[j][i]);</div><div class="line">			&#125;</div><div class="line">			cols.add(col);</div><div class="line">		&#125;</div><div class="line">		dfs(cols, rows, indexes, indexes.size(), <span class="number">0</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (board[i][j] == <span class="string">'.'</span>) &#123;</div><div class="line">					board[i][j] = rows.get(i).get(j);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(ArrayList&lt;ArrayList&lt;Character&gt;&gt; cols,</span></span></div><div class="line">			ArrayList&lt;ArrayList&lt;Character&gt;&gt; rows, ArrayList&lt;Integer&gt; indexes,</div><div class="line">			<span class="keyword">int</span> indexNumber, <span class="keyword">int</span> index) &#123;</div><div class="line">		<span class="keyword">if</span> (index &gt;= indexNumber) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> row = indexes.get(index) / <span class="number">9</span>;</div><div class="line">		<span class="keyword">int</span> col = indexes.get(index) % <span class="number">9</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nineNumbers.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (rows.get(row).contains(nineNumbers[i])</div><div class="line">					|| cols.get(col).contains(nineNumbers[i])) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">				<span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (m = <span class="number">3</span> * (row / <span class="number">3</span>); m &lt; <span class="number">3</span> * (row / <span class="number">3</span> + <span class="number">1</span>); m++) &#123;</div><div class="line">					<span class="keyword">for</span> (n = <span class="number">3</span> * (col / <span class="number">3</span>); n &lt; <span class="number">3</span> * (col / <span class="number">3</span> + <span class="number">1</span>); n++) &#123;</div><div class="line">						<span class="keyword">if</span> (rows.get(m).get(n) == nineNumbers[i]) &#123;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (n &lt; <span class="number">3</span> * (col / <span class="number">3</span> + <span class="number">1</span>)) &#123;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (m &lt; <span class="number">3</span> * (row / <span class="number">3</span> + <span class="number">1</span>) || n &lt; <span class="number">3</span> * (col / <span class="number">3</span> + <span class="number">1</span>)) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			rows.get(row).set(col, nineNumbers[i]);</div><div class="line">			cols.get(col).set(row, nineNumbers[i]);</div><div class="line">			<span class="keyword">boolean</span> result = dfs(cols, rows, indexes, indexNumber, index + <span class="number">1</span>);</div><div class="line">			<span class="keyword">if</span> (result) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			rows.get(row).set(col, <span class="string">'.'</span>);</div><div class="line">			cols.get(col).set(row, <span class="string">'.'</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 95. Count and Say]]></title>
      <url>http://yoursite.com/2013/10/29/2013-10-29-CODE%2095%20Count%20and%20Say/</url>
      <content type="html"><![CDATA[<p>The count-and-say sequence is the sequence of integers beginning as follows:<br><code>1, 11, 21, 1211, 111221, ...</code><br><code>1</code> is read<br> off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two
 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one
 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>
<p>Given an integer n, generate the nth sequence.<br>Note: The sequence of integers will be represented as a string.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	String string = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">1</span> == i) &#123;</div><div class="line">			string = <span class="string">"1"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">char</span>[] cs = string.toCharArray();</div><div class="line">			<span class="keyword">char</span> tmp = cs[<span class="number">0</span>];</div><div class="line">			<span class="keyword">int</span> tmpnum = <span class="number">1</span>;</div><div class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; cs.length; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (cs[j] == tmp) &#123;</div><div class="line">					tmpnum++;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					sb.append(tmpnum);</div><div class="line">					sb.append(tmp);</div><div class="line">					tmp = cs[j];</div><div class="line">					tmpnum = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			sb.append(tmpnum);</div><div class="line">			sb.append(tmp);</div><div class="line">			string = <span class="keyword">null</span>;</div><div class="line">			string = sb.toString();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> string;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 93. Combination Sum II]]></title>
      <url>http://yoursite.com/2013/10/28/2013-10-28-CODE%2093%20Combination%20Sum%20II/</url>
      <content type="html"><![CDATA[<p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers<br> sums to T.<br>Each number in C may only be used once in the combination.<br>Note:</p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>Elements in a combination (a1, a2,<br>… , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤<br>… ≤ ak).</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<p>For example, given candidate set <code>10,1,2,7,6,1,5</code> and<br> target <code>8</code>,<br>A solution set is:<br><code>[1, 7]</code><br><code>[1, 2, 5]</code><br><code>[2, 6]</code><br><code>[1, 1, 6]</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates,</div><div class="line">		<span class="keyword">int</span> target) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	Arrays.sort(candidates);</div><div class="line">	<span class="keyword">return</span> dfs(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; dfs(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> sum,</div><div class="line">		<span class="keyword">int</span> i) &#123;</div><div class="line">	<span class="keyword">if</span> (i &gt;= candidates.length) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index * candidates[i] &lt;= target &amp;&amp; index &lt;= <span class="number">1</span>; index++) &#123;</div><div class="line">		<span class="keyword">int</span> tmpsum = sum + index * candidates[i];</div><div class="line">		<span class="keyword">if</span> (tmpsum == target) &#123;</div><div class="line">			ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; index; m++) &#123;</div><div class="line">				result.add(<span class="number">0</span>, candidates[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!results.contains(result)) &#123;</div><div class="line">				results.add(result);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpsum &lt; target) &#123;</div><div class="line">			ArrayList&lt;ArrayList&lt;Integer&gt;&gt; tmpResults = dfs(candidates,</div><div class="line">					target, tmpsum, i + <span class="number">1</span>);</div><div class="line">			<span class="keyword">for</span> (ArrayList&lt;Integer&gt; tmpResult : tmpResults) &#123;</div><div class="line">				ArrayList&lt;Integer&gt; newResult = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				newResult.addAll(tmpResult);</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; index; m++) &#123;</div><div class="line">					newResult.add(<span class="number">0</span>, candidates[i]);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (!results.contains(newResult)) &#123;</div><div class="line">					results.add(newResult);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 94. Combination Sum]]></title>
      <url>http://yoursite.com/2013/10/28/2013-10-28-CODE%2094%20Combination%20Sum/</url>
      <content type="html"><![CDATA[<p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums<br> to T.<br>The same repeated number may be chosen from C unlimited number of times.<br>Note:</p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>Elements in a combination (a1, a2,<br>… , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤<br>… ≤ ak).</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<p>For example, given candidate set <code>2,3,6,7</code> and target <code>7</code>,<br>A solution set is:<br><code>[7]</code><br><code>[2, 2, 3]</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates,</div><div class="line">		<span class="keyword">int</span> target) &#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	Arrays.sort(candidates);</div><div class="line">	<span class="keyword">return</span> dfs(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; dfs(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> sum,</div><div class="line">		<span class="keyword">int</span> i) &#123;</div><div class="line">	<span class="keyword">if</span> (i &gt;= candidates.length) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index * candidates[i] &lt;= target; index++) &#123;</div><div class="line">		<span class="keyword">int</span> tmpsum = sum + index * candidates[i];</div><div class="line">		<span class="keyword">if</span> (tmpsum == target) &#123;</div><div class="line">			ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; index; m++) &#123;</div><div class="line">				result.add(<span class="number">0</span>, candidates[i]);</div><div class="line">			&#125;</div><div class="line">			results.add(result);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpsum &lt; target) &#123;</div><div class="line">			ArrayList&lt;ArrayList&lt;Integer&gt;&gt; tmpResults = dfs(candidates,</div><div class="line">					target, tmpsum, i + <span class="number">1</span>);</div><div class="line">			<span class="keyword">for</span> (ArrayList&lt;Integer&gt; tmpResult : tmpResults) &#123;</div><div class="line">				ArrayList&lt;Integer&gt; newResult = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				newResult.addAll(tmpResult);</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; index; m++) &#123;</div><div class="line">					newResult.add(<span class="number">0</span>, candidates[i]);</div><div class="line">				&#125;</div><div class="line">				results.add(newResult);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 92. First Missing Positive]]></title>
      <url>http://yoursite.com/2013/10/28/2013-10-28-CODE%2092%20First%20Missing%20Positive/</url>
      <content type="html"><![CDATA[<p>Given an unsorted integer array, find the first missing positive integer.<br>For example,<br>Given <code>[1,2,0]</code> return <code>3</code>,<br>and <code>[3,4,-1,1]</code> return <code>2</code>.<br>Your algorithm should run in O(n) time and uses constant space.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</div><div class="line">		numbers.add(i + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (numbers.contains((Integer) A[i])) &#123;</div><div class="line">			numbers.remove((Integer) A[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (numbers.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span> A.length + <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> numbers.get(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 91. Trapping Rain Water]]></title>
      <url>http://yoursite.com/2013/10/27/2013-10-27-CODE%2091%20Trapping%20Rain%20Water/</url>
      <content type="html"><![CDATA[<p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.<br>For example,<br>Given <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/08/rainwatertrap.png" alt=""></p>
<p>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></div><div class="line">	<span class="comment">// the same Solution instance will be reused for each test case.</span></div><div class="line">	<span class="keyword">if</span> (A.length &lt;= <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	Stack&lt;Integer&gt; hights = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	Stack&lt;Integer&gt; index = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	hights.push(A[<span class="number">0</span>]);</div><div class="line">	index.push(<span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[i] &gt; hights.peek()) &#123;</div><div class="line">			<span class="keyword">if</span> (hights.size() &lt;= <span class="number">1</span>) &#123;</div><div class="line">				hights.pop();</div><div class="line">				index.pop();</div><div class="line">				hights.push(A[i]);</div><div class="line">				index.push(i);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">while</span> (A[i] &gt; hights.peek() &amp;&amp; hights.size() &gt;= <span class="number">2</span>) &#123;</div><div class="line">					<span class="keyword">int</span> before = hights.pop();</div><div class="line">					<span class="keyword">int</span> beforeIndex = index.pop();</div><div class="line">					<span class="keyword">int</span> bbefore = hights.pop();</div><div class="line">					<span class="keyword">int</span> bbeforeIndex = index.pop();</div><div class="line">					<span class="keyword">int</span> minBorad = Math.min(A[i], bbefore);</div><div class="line">					sum += (i - bbeforeIndex - <span class="number">1</span>) * (minBorad - before);</div><div class="line">					hights.push(bbefore);</div><div class="line">					index.push(bbeforeIndex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (hights.size() &lt;= <span class="number">1</span> &amp;&amp; A[i] &gt; hights.peek()) &#123;</div><div class="line">					hights.pop();</div><div class="line">					index.pop();</div><div class="line">					hights.push(A[i]);</div><div class="line">					index.push(i);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; hights.peek()) &#123;</div><div class="line">					hights.push(A[i]);</div><div class="line">					index.push(i);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] == hights.peek()) &#123;</div><div class="line">					index.pop();</div><div class="line">					index.push(i);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; hights.peek()) &#123;</div><div class="line">			hights.push(A[i]);</div><div class="line">			index.push(i);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			index.pop();</div><div class="line">			index.push(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 90. Multiply Strings]]></title>
      <url>http://yoursite.com/2013/10/27/2013-10-27-CODE%2090%20Multiply%20Strings/</url>
      <content type="html"><![CDATA[<p>Given two numbers represented as strings, return multiplication of the numbers as a string.<br>Note: The numbers can be arbitrarily large and are non-negative.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="string">"0"</span>.equals(num1) || <span class="string">"0"</span>.equals(num2)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] num1s = num1.toCharArray();</div><div class="line">	<span class="keyword">char</span>[] num2s = num2.toCharArray();</div><div class="line">	List&lt;Character&gt; result = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = num2s.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">		ArrayList&lt;Character&gt; line = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = num1s.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">			<span class="keyword">int</span> tmp = Character.digit(num1s[j], <span class="number">10</span>)</div><div class="line">					* Character.digit(num2s[i], <span class="number">10</span>) + num;</div><div class="line">			<span class="keyword">int</span> ge = tmp % <span class="number">10</span>;</div><div class="line">			num = tmp / <span class="number">10</span>;</div><div class="line">			line.add(<span class="number">0</span>, Character.forDigit(ge, <span class="number">10</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">			line.add(<span class="number">0</span>, Character.forDigit(num, <span class="number">10</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (num2s.length - <span class="number">1</span> == i) &#123;</div><div class="line">			result.addAll(line);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> nu = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (m = result.size() - <span class="number">1</span> - (num2s.length - <span class="number">1</span> - i), n = line</div><div class="line">					.size() - <span class="number">1</span>; m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>; m--, n--) &#123;</div><div class="line">				<span class="keyword">int</span> tmp = Character.digit(result.get(m), <span class="number">10</span>)</div><div class="line">						+ Character.digit(line.get(n), <span class="number">10</span>) + nu;</div><div class="line">				<span class="keyword">int</span> ge = tmp % <span class="number">10</span>;</div><div class="line">				result.set(m, Character.forDigit(ge, <span class="number">10</span>));</div><div class="line">				nu = tmp / <span class="number">10</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (n &gt;= <span class="number">0</span> || nu &gt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (; n &gt;= <span class="number">0</span>; n--) &#123;</div><div class="line">					<span class="keyword">int</span> tmp = Character.digit(line.get(n), <span class="number">10</span>) + nu;</div><div class="line">					<span class="keyword">int</span> ge = tmp % <span class="number">10</span>;</div><div class="line">					result.add(<span class="number">0</span>, Character.forDigit(ge, <span class="number">10</span>));</div><div class="line">					nu = tmp / <span class="number">10</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (nu &gt; <span class="number">0</span>) &#123;</div><div class="line">					result.add(<span class="number">0</span>, Character.forDigit(nu, <span class="number">10</span>));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</div><div class="line">		sb.append(result.get(i));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 89. Wildcard Matching]]></title>
      <url>http://yoursite.com/2013/10/27/2013-10-27-CODE%2089%20Wildcard%20Matching/</url>
      <content type="html"><![CDATA[<p>Implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.<br>    ‘?’ Matches any single character.<br>    ‘*’ Matches any sequence of characters (including the empty sequence).</p>
<pre><code>The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch(&quot;aa&quot;,&quot;a&quot;) → false
isMatch(&quot;aa&quot;,&quot;aa&quot;) → true
isMatch(&quot;aaa&quot;,&quot;aa&quot;) → false
isMatch(&quot;aa&quot;, &quot;*&quot;) → true
isMatch(&quot;aa&quot;, &quot;a*&quot;) → true
isMatch(&quot;ab&quot;, &quot;?*&quot;) → true
isMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → false

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">null</span> == s &amp;&amp; p != <span class="keyword">null</span>) || (<span class="keyword">null</span> != s &amp;&amp; <span class="keyword">null</span> == p)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == s &amp;&amp; <span class="keyword">null</span> == p) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> plenNoStar = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray())</div><div class="line">		<span class="keyword">if</span> (c != <span class="string">'*'</span>)</div><div class="line">			plenNoStar++;</div><div class="line">	<span class="keyword">if</span> (plenNoStar &gt; s.length())</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">boolean</span>[] match = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> firstTrue = <span class="number">0</span>;</div><div class="line">	match[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> lens = s.length();</div><div class="line">	<span class="keyword">int</span> lenp = p.length();</div><div class="line">	<span class="keyword">char</span>[] ss = s.toCharArray();</div><div class="line">	<span class="keyword">char</span>[] ps = p.toCharArray();</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenp; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; ps[i] == <span class="string">'*'</span> &amp;&amp; ps[i - <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (ps[i] == <span class="string">'*'</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> fi = firstTrue + <span class="number">1</span>; fi &lt;= s.length(); ++fi) &#123;</div><div class="line">				match[fi] = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> firstMatch = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = lens; j &gt; firstTrue; j--) &#123;</div><div class="line">				<span class="keyword">if</span> (ss[j - <span class="number">1</span>] == ps[i] || ps[i] == <span class="string">'?'</span>) &#123;</div><div class="line">					match[j] = match[j - <span class="number">1</span>];</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					match[j] = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (match[j]) &#123;</div><div class="line">					firstMatch = j;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (firstMatch &lt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				firstTrue = firstMatch;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> match[lens];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 88. Jump Game II]]></title>
      <url>http://yoursite.com/2013/10/20/2013-10-20-CODE%2088%20Jump%20Game%20II/</url>
      <content type="html"><![CDATA[<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Your goal is to reach the last index in the minimum number of jumps.<br>For example:<br>Given array A = <code>[2,3,1,1,4]</code><br>The minimum number of jumps to reach the last index is <code>2</code>.<br> (Jump <code>1</code> step from index 0 to 1, then <code>3</code> steps<br> to the last index.)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == A || A.length &lt;= <span class="number">1</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> maxIndex = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> length = A.length;</div><div class="line">	<span class="keyword">int</span> step = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (i &lt; length &amp;&amp; i &lt;= maxIndex) &#123;</div><div class="line">		<span class="keyword">int</span> tmpMaxIndex = maxIndex;</div><div class="line">		<span class="keyword">while</span> (i &lt;= tmpMaxIndex) &#123;</div><div class="line">			<span class="keyword">if</span> (i + A[i] &gt; maxIndex)</div><div class="line">				maxIndex = i + A[i];</div><div class="line">			++i;</div><div class="line">		&#125;</div><div class="line">		++step;</div><div class="line">		<span class="keyword">if</span> (maxIndex &gt;= length - <span class="number">1</span>)</div><div class="line">			<span class="keyword">return</span> step;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 86. Permutations II]]></title>
      <url>http://yoursite.com/2013/10/20/2013-10-20-CODE%2086%20Permutations%20II/</url>
      <content type="html"><![CDATA[<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.<br>For example,<br><code>[1,1,2]</code> have the following unique permutations:<br><code>[1,1,2]</code>, <code>[1,2,1]</code>,<br> and <code>[2,1,1]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] num) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> n : num) &#123;</div><div class="line">		numbers.add(n);</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(</div><div class="line">			dfs(numbers));</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Set&lt;ArrayList&lt;Integer&gt;&gt; dfs(ArrayList&lt;Integer&gt; numbers) &#123;</div><div class="line">	<span class="keyword">if</span> (numbers.size() &lt;= <span class="number">1</span>) &#123;</div><div class="line">		Set&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> HashSet&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(numbers);</div><div class="line">		results.add(result);</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	Set&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> HashSet&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; newNumbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(numbers);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line">		Integer number = numbers.get(i);</div><div class="line">		newNumbers.remove(number);</div><div class="line">		Set&lt;ArrayList&lt;Integer&gt;&gt; res = dfs(newNumbers);</div><div class="line">		<span class="keyword">for</span> (ArrayList&lt;Integer&gt; re : res) &#123;</div><div class="line">			re.add(<span class="number">0</span>, number);</div><div class="line">			results.add(re);</div><div class="line">		&#125;</div><div class="line">		newNumbers.add(number);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 87. Permutations]]></title>
      <url>http://yoursite.com/2013/10/20/2013-10-20-CODE%2087%20Permutations/</url>
      <content type="html"><![CDATA[<p>Given a collection of numbers, return all possible permutations.<br>For example,<br><code>[1,2,3]</code> have the following permutations:<br><code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[2,1,3]</code>, <code>[2,3,1]</code>, <code>[3,1,2]</code>,<br> and <code>[3,2,1]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] num) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> n : num) &#123;</div><div class="line">		numbers.add(n);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(numbers);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; dfs(ArrayList&lt;Integer&gt; numbers) &#123;</div><div class="line">	<span class="keyword">if</span> (numbers.size() &lt;= <span class="number">1</span>) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(numbers);</div><div class="line">		results.add(result);</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; newNumbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(numbers);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line">		Integer number = numbers.get(i);</div><div class="line">		newNumbers.remove(number);</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = dfs(newNumbers);</div><div class="line">		<span class="keyword">for</span> (ArrayList&lt;Integer&gt; re : res) &#123;</div><div class="line">			re.add(<span class="number">0</span>, number);</div><div class="line">			results.add(re);</div><div class="line">		&#125;</div><div class="line">		newNumbers.add(number);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 85. Rotate Image]]></title>
      <url>http://yoursite.com/2013/10/19/2013-10-19-CODE%2085%20Rotate%20Image/</url>
      <content type="html"><![CDATA[<p>You are given an n x n 2D matrix representing an image.<br>Rotate the image by 90 degrees (clockwise).<br>Follow up:<br>Could you do this in-place?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == matrix || matrix.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> roll = (matrix.length - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= roll; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; matrix.length - i - <span class="number">1</span>; k++) &#123;</div><div class="line">			<span class="keyword">int</span> tmp = matrix[i][k];</div><div class="line">			matrix[i][k] = matrix[matrix.length - k  - <span class="number">1</span>][i];</div><div class="line">			matrix[matrix.length - k  - <span class="number">1</span>][i] = matrix[matrix.length</div><div class="line">					- i - <span class="number">1</span>][matrix.length - k  - <span class="number">1</span>];</div><div class="line">			matrix[matrix.length - i - <span class="number">1</span>][matrix.length - k - <span class="number">1</span>] = matrix[k][matrix.length</div><div class="line">					- i - <span class="number">1</span>];</div><div class="line">			matrix[k][matrix.length - i - <span class="number">1</span>] = tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 84. Anagrams]]></title>
      <url>http://yoursite.com/2013/10/18/2013-10-18-CODE%2084%20Anagrams/</url>
      <content type="html"><![CDATA[<p>Given an array of strings, return all groups of strings that are anagrams.<br>Note: All inputs will be in lower-case.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">anagrams</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	Map&lt;String, ArrayList&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;String&gt;&gt;();</div><div class="line">	ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (String str : strs) &#123;</div><div class="line">		<span class="keyword">char</span>[] cs = str.toCharArray();</div><div class="line">		Arrays.sort(cs);</div><div class="line">		String newStr = <span class="keyword">new</span> String(cs);</div><div class="line">		<span class="keyword">if</span> (map.containsKey(newStr)) &#123;</div><div class="line">			ArrayList&lt;String&gt; value = map.get(newStr);</div><div class="line">			value.add(str);</div><div class="line">			map.put(newStr, value);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ArrayList&lt;String&gt; value = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">			value.add(str);</div><div class="line">			map.put(newStr, value);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (ArrayList&lt;String&gt; value : map.values()) &#123;</div><div class="line">		<span class="keyword">if</span> (value.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">			result.addAll(value);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[转一篇有关JAVA的内存泄露的文章]]></title>
      <url>http://yoursite.com/2013/10/17/2013-10-17-%E8%BD%AC%E4%B8%80%E7%AF%87%E6%9C%89%E5%85%B3JAVA%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p><a href="http://www.lybbs.net/news_read.do?newsPath=2007/9/25/1190684628458.html" target="_blank" rel="external">http://www.lybbs.net/news_read.do?newsPath=2007/9/25/1190684628458.html</a><br> 1 引言<br>     Java的一个重要优点就是通过垃圾收集器GC （Garbage Collection）自动管理内存的回收，程序员不需要通过调用函数来释放内存。因此，很多程序员认为Java 不存在内存泄漏问题，或者认为即使有内存泄漏也不是程序的责任，而是GC 或JVM的问题。其实，这种想法是不正确的，因为Java 也存在内存泄漏，但它的表现与C++不同。如果正在开发的Java 代码要全天24 小时在服务器上运行，则内存漏洞在此处的影响就比在配置实用程序中的影响要大得多，即使最小的漏洞也会导致JVM耗尽全部可用内存。另外，在很多嵌入式系统中，内存的总量非常有限。在相反的情况下，即便程序的生存期较短，如果存在分配大量临时对象（或者若干吞噬大量内存的对象）的任何Java<br> 代码，而且当不再需要这些对象时也没有取消对它们的引用，则仍然可能达到内存极限。</p>
<p>2 Java 内存回收机制<br>     Java 的内存管理就是对象的分配和释放问题。分配内存的方式多种多样，取决于该种语言的语法结构。但不论是哪一种语言的内存分配方式，最后都要返回所分配的内存块的起始地址，即返回一个指针到内存块的首地址。在Java 中所有对象都是在堆（Heap）中分配的，对象的创建通常都是采用new或者是反射的方式，但对象释放却有直接的手段，所以对象的回收都是由Java虚拟机通过垃圾收集器去完成的。这种收支两条线的方法确实简化了程序员的工作，但同时也加重了JVM的工作，这也是Java<br> 程序运行速度较慢的原因之一。因为，GC 为了能够正确释放对象，GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要进行监控。监视对象状态是为了更加准确地、及时地释放对象，而释放对象的根本原则就是该对象不再<br>被引用。Java 使用有向图的方式进行内存管理，可以消除引用循环的问题，例如有三个对象，相互引用，只要它们和根进程不可达，那么GC 也是可以回收它们的。在Java 语言中，判断一块内存空间是否符合垃圾收集器收集标准的标准只有两个：一个是给对象赋予了空值null，以下再没有调用过，另一个是给对象赋予了新值，即重新分配了内存空间。</p>
<p>3 Java 中的内存泄漏</p>
<p>3.1 Java 中内存泄漏与C++的区别<br>    在Java 中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点，首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java 中的内存泄漏，这些对象不会被GC 所回收，然而它却占用内存。在C++中，内存泄漏的范围更大一些。有些对象被分配了内存空间，然后却不可达，由于C++中没有GC，这些内存将永远收<br>不回来。在Java 中，这些不可达的对象都由GC 负责回收，因此程序员不需要考虑这部分的内存泄漏。通过分析，可以得知，对于C++，程序员需要自己管理边和顶点，而对于Java 程序员只需要管理边就可以了（不需要管理顶点<br>的释放）。通过这种方式，Java 提高了编程的效率。</p>
<p>3.2 内存泄漏示例<br>3.2.1 示例1<br>   在这个例子中，循环申请Object 对象，并将所申请的对象放入一个Vector 中，如果仅仅释放引用本身，那么Vector 仍然引用该对象，所以这个对象对GC 来说是不可回收的。因此，如果对象加入到Vector 后，还必须从Vector 中删除，最简单的方法就是将Vector对象设置为null。<br>Vector v = new Vector(10);<br>for (int i = 1; i&lt;100; i++)<br>{Object o = new Object();<br>v.add(o);<br>o = null;<br>}//</p>
<p>此时，所有的Object 对象都没有被释放，因为变量v 引用这些对象。实际上无用，而还被引用的对象，GC 就无能为力了（事实上GC 认为它还有用），这一点是导致内存泄漏最重要的原因。</p>
<p>(1)如果要释放对象，就必须使其的引用记数为0，只有那些不再被引用的对象才能被释放，这个原理很简单，但是很重要，是导致内存泄漏的基本原因，也是解决内存泄漏方法的宗旨；<br>(2)程序员无须管理对象空间具体的分配和释放过程，但必须要关注被释放对象的引用记数是否为0；<br>(3)一个对象可能被其他对象引用的过程的几种：<br>a.直接赋值，如上例中的A.a = E；<br>b.通过参数传递，例如public void addObject(Object E)；<br>c.其它一些情况如系统调用等。</p>
<p>3.3 容易引起内存泄漏的几大原因<br>3.3.1 静态集合类<br>      像HashMap、Vector 等静态集合类的使用最容易引起内存泄漏，因为这些静态变量的生命周期与应用程序一致，如示例1，如果该Vector 是静态的，那么它将一直存在，而其中所有的Object对象也不能被释放，因为它们也将一直被该Vector 引用着。<br>3.3.2 监听器<br>     在java 编程中，我们都需要和监听器打交道，通常一个应用当中会用到很多监听器，我们会调用一个控件的诸如addXXXListener()等方法来增加监听器，但往往在释放对象的时候却没有记住去删除这些监听器，从而增加了内存泄漏的机会。<br>3.3.3 物理连接<br>         一些物理连接，比如数据库连接和网络连接，除非其显式的关闭了连接，否则是不会自动被GC 回收的。Java 数据库连接一般用DataSource.getConnection()来创建，当不再使用时必须用Close()方法来释放，因为这些连接是独立于JVM的。对于Resultset 和Statement 对象可以不进行显式回收，但Connection 一定要显式回收，因为Connection 在任何时候都无法自动回收，而Connection一旦回收，Resultset 和Statement 对象就会立即为NULL。但是如果使用连接池，情况就不一样了，除了要显式地关闭连接，还必须显式地关闭Resultset<br> Statement 对象（关闭其中一个，另外一个也会关闭），否则就会造成大量的Statement 对象无法释放，从而引起内存泄漏。</p>
<p>3.3.4 内部类和外部模块等的引用<br>        内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。对于程序员而言，自己的程序很清楚，如果发现内存泄漏，自己对这些对象的引用可以很快定位并解决，但是现在的应用软件<br>并非一个人实现，模块化的思想在现代软件中非常明显，所以程序员要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如：<br>public void registerMsg(Object b);<br>这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。</p>
<p>4 预防和检测内存漏洞<br>    在了解了引起内存泄漏的一些原因后，应该尽可能地避免和发现内存泄漏。<br>(1)好的编码习惯。最基本的建议就是尽早释放无用对象的引用，大多数程序员在使用临时变量的时候，都是让引用变量在退出活动域后，自动设置为null。在使用这种方式时候，必须特别注意一些复杂的对象图，例如数组、列、树、图等，这些对象之间有相互引用关系较为复杂。对于这类对象，GC 回收它们一般效率较低。如果程序允许，尽早将不用的引用对象赋为null。另外建议几点：<br>在确认一个对象无用后，将其所有引用显式的置为null；<br>当类从Jpanel 或Jdialog 或其它容器类继承的时候，删除该对象之前不妨调用它的removeall()方法；在设一个引用变量为null 值之前，应注意该引用变量指向的对象是否被监听，若有，要首先除去监听器，然后才可以赋空值；当对象是一个Thread 的时候，删除该对象之前不妨调用它的interrupt()方法；内存检测过程中不仅要关注自己编写的类对象，同时也要关注一些基本类型的对象，例如：int[]、String、char[]等等；如果有数据库连接，使用try…finally 结构，在finally<br> 中关闭Statement 对象和连接。<br>(2)好的测试工具。在开发中不能完全避免内存泄漏，关键要在发现有内存泄漏的时候能用好的测试工具迅速定位问题的所在。市场上已有几种专业检查Java 内存泄漏的工具，它们的基本工作原理大同小异，都是通过监测Java 程序运行时，所有对象的申请、释放等动作，将内存管理的所有信息进行统计、分析、可视化。开发人员将根据这些信息判断程序是否有内存泄漏问题。这些工具包括Optimizeit Profiler、JProbe Profiler、JinSight、Rational 公司的Purify 等。 </p>
<p>记：<br>    映像（Reflector）是一个程序分析自己的能力。java.lang.reflect包提供了获取关于字段、构造函数、方法和类的修改器的信息的能力。利用这些信息可以建立和Java Beans组件打交道的工具。可以动态创建组件的特征。<br>    堆（heap） ：栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。栈的优势是，存取速度比堆要快，仅次于直接位于CPU中的寄存器。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。<br>    连接池：在实际应用开发中，特别是在WEB应用系统中，如果JSP、Servlet或EJB使用JDBC直接访问数据库中的数据，每一次数据访问请求都必须经历建立数据库连接、打开数据库、存取数据和关闭数据库连接等步骤，而连接并打开数据库是一件既消耗资源又费时的工作，如果频繁发生这种数据库操作，系统的性能必然会急剧下降，甚至会导致系统崩溃。数据库连接池技术是解决这个问题最常用的方法，在许多应用程序服务器（例如：Weblogic,WebSphere,JBoss）中，基本都提供了这项技术，无需自己编程，但是，深入了解这项技术是非常必要的。<br>　　数据库连接池技术的思想非常简单，将数据库连接作为对象存储在一个Vector对象中，一旦数据库连接建立后，不同的数据库访问请求就可以共享这些连接，这样，通过复用这些已经建立的数据库连接，可以克服上述缺点，极大地节省系统资源和时间。<br>　　数据库连接池的主要操作如下：<br>　　（1）建立数据库连接池对象（服务器启动）。<br>　　（2）按照事先指定的参数创建初始数量的数据库连接（即：空闲连接数）。<br>　　（3）对于一个数据库访问请求，直接从连接池中得到一个连接。如果数据库连接池对象中没有空闲的连接，且连接数没有达到最大（即：最大活跃连接数），创建一个新的数据库连接。<br>　　（4）存取数据库。<br>　　（5）关闭数据库，释放所有数据库连接（此时的关闭数据库连接，并非真正关闭，而是将其放入空闲队列中。如实际空闲连接数大于初始空闲连接数则释放连接）。<br>　　（6）释放数据库连接池对象（服务器停止、维护期间，释放数据库连接池对象，并释放所有连接）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 83. Pow(x, n)]]></title>
      <url>http://yoursite.com/2013/10/16/2013-10-16-CODE%2083%20Pow(x,%20n)/</url>
      <content type="html"><![CDATA[<p>Implement pow(x, n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">boolean</span> minus = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">double</span> result = x;</div><div class="line">	<span class="keyword">if</span> (Math.abs(n - <span class="number">0.0</span>) &lt; <span class="number">1.0E-50</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Math.abs(x - <span class="number">1.0</span>) &lt; <span class="number">1.0E-50</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Math.abs(x + <span class="number">1.0</span>) &lt; <span class="number">1.0E-50</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> -<span class="number">1.0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</div><div class="line">		minus = <span class="keyword">true</span>;</div><div class="line">		n = -n;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">		result *= x;</div><div class="line">		<span class="keyword">if</span> (Math.abs(result) &lt; <span class="number">1.0E-50</span>) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (minus) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span> / result;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 81. N-Queens II]]></title>
      <url>http://yoursite.com/2013/10/16/2013-10-16-CODE%2081%20N-Queens%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for N-Queens problem.<br>Now, instead outputting board configurations, return the total number of distinct solutions.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">int</span>[] cols = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		cols[i] = -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> number = createNQueens(n, cols, <span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> number;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createNQueens</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] rows, <span class="keyword">int</span> row)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; row; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (rows[j] == i || (row - j == Math.abs(rows[j] - i))) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j &lt; row) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		rows[row] = i;</div><div class="line">		<span class="keyword">if</span> (row == n - <span class="number">1</span>) &#123;</div><div class="line">			rows[row] = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> tmp = createNQueens(n, rows, row + <span class="number">1</span>);</div><div class="line">			number += tmp;</div><div class="line">		&#125;</div><div class="line">		rows[row] = -<span class="number">1</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 82. N-Queens]]></title>
      <url>http://yoursite.com/2013/10/16/2013-10-16-CODE%2082%20N-Queens/</url>
      <content type="html"><![CDATA[<p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt=""><br>Given an integer n, return all distinct solutions to the n-queens puzzle.<br>Each solution contains a distinct board configuration of the n-queens’ placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both<br> indicate a queen and an empty space respectively.<br>For example,<br>There exist two distinct solutions to the 4-queens puzzle:<br>    [<br>     [“.Q..”,  // Solution 1<br>      “…Q”,<br>      “Q…”,<br>      “..Q.”],</p>
<pre><code> [&quot;..Q.&quot;,  // Solution 2
  &quot;Q...&quot;,
  &quot;...Q&quot;,
  &quot;.Q..&quot;]
]
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String[]&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	ArrayList&lt;Integer&gt; cols = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	ArrayList&lt;String[]&gt; result = createNQueens(n, cols, <span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> ArrayList&lt;String[]&gt; createNQueens(<span class="keyword">int</span> n, ArrayList&lt;Integer&gt; cols,</div><div class="line">		<span class="keyword">int</span> col) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	ArrayList&lt;String[]&gt; results = <span class="keyword">new</span> ArrayList&lt;String[]&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (cols.contains((Integer) i)) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cols.isEmpty()) &#123;</div><div class="line">			<span class="keyword">int</span> j;</div><div class="line">			<span class="keyword">for</span> (j = cols.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">				<span class="keyword">if</span> (Math.abs(i - cols.get(j)) == cols.size() - j) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cols.add((Integer) i);</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (j != i) &#123;</div><div class="line">				sb.append(<span class="string">'.'</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sb.append(<span class="string">'Q'</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (col == n - <span class="number">1</span>) &#123;</div><div class="line">			String[] strs = <span class="keyword">new</span> String[n];</div><div class="line">			strs[col] = sb.toString();</div><div class="line">			results.add(strs);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ArrayList&lt;String[]&gt; nextResult = createNQueens(n, cols, col + <span class="number">1</span>);</div><div class="line">			<span class="keyword">for</span> (String[] strs : nextResult) &#123;</div><div class="line">				strs[col] = sb.toString();</div><div class="line">				results.add(strs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cols.remove((Integer) i);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 80. Maximum Subarray]]></title>
      <url>http://yoursite.com/2013/10/13/2013-10-13-CODE%2080%20Maximum%20Subarray/</url>
      <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.<br>For example, given the array <code>[−2,1,−3,4,−1,2,1,−5,4]</code>,<br>the contiguous subarray <code>[4,−1,2,1]</code> has the largest sum<br> = <code>6</code>.<br><a href="http://oj.leetcode.com/problems/maximum-subarray/#" target="_blank" rel="external">click to show more practice.</a><br>More practice:If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == A || A.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">	<span class="keyword">int</span> tmpmax = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</div><div class="line">		tmpmax += A[i];</div><div class="line">		<span class="keyword">if</span> (tmpmax &gt; max) &#123;</div><div class="line">			max = tmpmax;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (tmpmax &lt; <span class="number">0</span>) &#123;</div><div class="line">			tmpmax = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 79. Spiral Matrix]]></title>
      <url>http://yoursite.com/2013/10/12/2013-10-12-CODE%2079%20Spiral%20Matrix/</url>
      <content type="html"><![CDATA[<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.<br>For example,<br>Given the following matrix:<br>    [<br>     [ 1, 2, 3 ],<br>     [ 4, 5, 6 ],<br>     [ 7, 8, 9 ]<br>    ]</p>
<p>You should return <code>[1,2,3,6,9,8,7,4,5]</code>.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; spiralOrder(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;matrix) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by each test case.</span></div><div class="line">	<span class="keyword">if</span>(matrix.size() == <span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; spiralMatrix(<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> spiralMatrix;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> halfCol = (matrix[<span class="number">0</span>].size() - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">int</span> halfRow = (matrix.size() - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">int</span> col = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; spiralMatrix(<span class="number">0</span>);</div><div class="line">	<span class="keyword">while</span>(row &lt;= halfRow &amp;&amp; col &lt;= halfCol)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = col; i &lt; matrix[<span class="number">0</span>].size() - col; i++)&#123;</div><div class="line">			spiralMatrix.push_back(matrix[row][i]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = row + <span class="number">1</span>; i &lt; matrix.size() - row; i++)&#123;</div><div class="line">			spiralMatrix.push_back(matrix[i][matrix[<span class="number">0</span>].size() - col - <span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(row != matrix.size() - row - <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = matrix[<span class="number">0</span>].size() - col - <span class="number">2</span>; i &gt;= col; i--)&#123;</div><div class="line">				spiralMatrix.push_back(matrix[matrix.size() - row - <span class="number">1</span>][i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(col != matrix[<span class="number">0</span>].size() - col)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = matrix.size() - row - <span class="number">2</span>; i &gt;= row + <span class="number">1</span>; i--)&#123;</div><div class="line">				spiralMatrix.push_back(matrix[i][col]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		row++;</div><div class="line">		col++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> spiralMatrix;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 78. Jump Game]]></title>
      <url>http://yoursite.com/2013/10/11/2013-10-11-CODE%2078%20Jump%20Game/</url>
      <content type="html"><![CDATA[<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.<br>For example:<br>A = <code>[2,3,1,1,4]</code>, return <code>true</code>.<br>A = <code>[3,2,1,0,4]</code>, return <code>false</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (A.length == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> A[<span class="number">0</span>] &gt;= <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[i - <span class="number">1</span>] - <span class="number">1</span> &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			A[i] = Math.max(A[i - <span class="number">1</span>] - <span class="number">1</span>, A[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 76. Insert Interval]]></title>
      <url>http://yoursite.com/2013/10/11/2013-10-11-CODE%2076%20Insert%20Interval/</url>
      <content type="html"><![CDATA[<p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).<br>You may assume that the intervals were initially sorted according to their start times.<br>Example 1:<br>Given intervals <code>[1,3],[6,9]</code>, insert and merge <code>[2,5]</code> in<br> as <code>[1,5],[6,9]</code>.<br>Example 2:<br>Given <code>[1,2],[3,5],[6,7],[8,10],[12,16]</code>, insert and merge <code>[4,9]</code> in<br> as <code>[1,2],[3,10],[12,16]</code>.<br>This is because the new interval <code>[4,9]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">insert</span><span class="params">(ArrayList&lt;Interval&gt; intervals,</span></span></div><div class="line">		Interval newInterval) &#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == intervals || intervals.isEmpty()) &#123;</div><div class="line">		ArrayList&lt;Interval&gt; newIntervals = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != newInterval) &#123;</div><div class="line">			newIntervals.add(newInterval);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newIntervals;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; intervals.size(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (newInterval.start &gt;= intervals.get(i).start</div><div class="line">				&amp;&amp; newInterval.start &lt;= intervals.get(i).end</div><div class="line">				&amp;&amp; newInterval.end &gt;= intervals.get(i).end) &#123;</div><div class="line">			intervals.get(i).end = newInterval.end;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newInterval.end &gt;= intervals.get(i).start</div><div class="line">				&amp;&amp; newInterval.end &lt;= intervals.get(i).end</div><div class="line">				&amp;&amp; newInterval.start &lt;= intervals.get(i).start) &#123;</div><div class="line">			intervals.get(i).start = newInterval.start;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newInterval.start &gt;= intervals.get(i).start</div><div class="line">				&amp;&amp; newInterval.end &lt;= intervals.get(i).end) &#123;</div><div class="line">			<span class="keyword">return</span> intervals;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newInterval.start &lt;= intervals.get(i).start</div><div class="line">				&amp;&amp; newInterval.end &gt;= intervals.get(i).end) &#123;</div><div class="line">			intervals.get(i).start = newInterval.start;</div><div class="line">			intervals.get(i).end = newInterval.end;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (newInterval.end &lt; intervals.get(i).start) &#123;</div><div class="line">			intervals.add(i, newInterval);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (i &gt;= intervals.size()) &#123;</div><div class="line">		intervals.add(newInterval);</div><div class="line">		<span class="keyword">return</span> intervals;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Interval&gt; newIntervals = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">	Interval first = intervals.get(<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; intervals.size(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == first) &#123;</div><div class="line">			first = intervals.get(i);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &gt;= first.start</div><div class="line">				&amp;&amp; intervals.get(i).start &lt;= first.end</div><div class="line">				&amp;&amp; intervals.get(i).end &gt;= first.end) &#123;</div><div class="line">			first.end = intervals.get(i).end;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).end &gt;= first.start</div><div class="line">				&amp;&amp; intervals.get(i).end &lt;= first.end</div><div class="line">				&amp;&amp; intervals.get(i).start &lt;= first.start) &#123;</div><div class="line">			first.start = intervals.get(i).start;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &gt;= first.start</div><div class="line">				&amp;&amp; intervals.get(i).end &lt;= first.end) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &lt;= first.start</div><div class="line">				&amp;&amp; intervals.get(i).end &gt;= first.end) &#123;</div><div class="line">			first.start = intervals.get(i).start;</div><div class="line">			first.end = intervals.get(i).end;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			newIntervals.add(first);</div><div class="line">			first = <span class="keyword">null</span>;</div><div class="line">			first = intervals.get(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != first) &#123;</div><div class="line">		newIntervals.add(first);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> newIntervals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 77. Merge Intervals]]></title>
      <url>http://yoursite.com/2013/10/10/2013-10-10-CODE%2077%20Merge%20Intervals/</url>
      <content type="html"><![CDATA[<p>Given a collection of intervals, merge all overlapping intervals.<br>For example,<br>Given <code>[1,3],[2,6],[8,10],[15,18]</code>,<br>return <code>[1,6],[8,10],[15,18]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">merge</span><span class="params">(ArrayList&lt;Interval&gt; intervals)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == intervals || intervals.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Interval&gt; sorted = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.size(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (sorted.isEmpty()) &#123;</div><div class="line">			sorted.add(intervals.get(i));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> j;</div><div class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sorted.size(); j++) &#123;</div><div class="line">				<span class="keyword">if</span> (intervals.get(i).end &lt; sorted.get(j).start) &#123;</div><div class="line">					sorted.add(j, intervals.get(i));</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &gt;= sorted.get(j).start</div><div class="line">						&amp;&amp; intervals.get(i).start &lt;= sorted.get(j).end</div><div class="line">						&amp;&amp; intervals.get(i).end &gt;= sorted.get(j).end) &#123;</div><div class="line">					sorted.get(j).end = intervals.get(i).end;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).end &gt;= sorted.get(j).start</div><div class="line">						&amp;&amp; intervals.get(i).end &lt;= sorted.get(j).end</div><div class="line">						&amp;&amp; intervals.get(i).start &lt;= sorted.get(j).start) &#123;</div><div class="line">					sorted.get(j).start = intervals.get(i).start;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &lt;= sorted.get(j).start</div><div class="line">						&amp;&amp; intervals.get(i).end &gt;= sorted.get(j).end) &#123;</div><div class="line">					sorted.get(j).start = intervals.get(i).start;</div><div class="line">					sorted.get(j).end = intervals.get(i).end;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals.get(i).start &gt;= sorted.get(j).start</div><div class="line">						&amp;&amp; intervals.get(i).end &lt;= sorted.get(j).end) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (j &gt;= sorted.size()) &#123;</div><div class="line">				sorted.add(intervals.get(i));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Interval&gt; newIntervals = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">	Interval first = sorted.get(<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sorted.size(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == first) &#123;</div><div class="line">			first = sorted.get(i);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorted.get(i).start &gt;= first.start</div><div class="line">				&amp;&amp; sorted.get(i).start &lt;= first.end</div><div class="line">				&amp;&amp; sorted.get(i).end &gt;= first.end) &#123;</div><div class="line">			first.end = sorted.get(i).end;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorted.get(i).end &gt;= first.start</div><div class="line">				&amp;&amp; sorted.get(i).end &lt;= first.end</div><div class="line">				&amp;&amp; sorted.get(i).start &lt;= first.start) &#123;</div><div class="line">			first.start = sorted.get(i).start;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorted.get(i).start &gt;= first.start</div><div class="line">				&amp;&amp; sorted.get(i).end &lt;= first.end) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorted.get(i).start &lt;= first.start</div><div class="line">				&amp;&amp; sorted.get(i).end &gt;= first.end) &#123;</div><div class="line">			first.start = sorted.get(i).start;</div><div class="line">			first.end = sorted.get(i).end;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			newIntervals.add(first);</div><div class="line">			first = <span class="keyword">null</span>;</div><div class="line">			first = sorted.get(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != first) &#123;</div><div class="line">		newIntervals.add(first);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> newIntervals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 75. Length of Last Word]]></title>
      <url>http://yoursite.com/2013/10/10/2013-10-10-CODE%2075%20Length%20of%20Last%20Word/</url>
      <content type="html"><![CDATA[<p>Given a string s consists of upper/lower-case alphabets and empty space characters <code>&#39;
 &#39;</code>, return the length of last word in the string.<br>If the last word does not exist, return 0.<br>Note: A word is defined as a character sequence consists of non-space characters only.<br>For example,<br>Given s = <code>&quot;Hello World&quot;</code>,<br>return <code>5</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	<span class="keyword">int</span> lastLength = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cs.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> ((cs[i] &gt;= <span class="string">'A'</span> &amp;&amp; cs[i] &lt;= <span class="string">'Z'</span>)</div><div class="line">				|| (cs[i] &gt;= <span class="string">'a'</span> &amp;&amp; cs[i] &lt;= <span class="string">'z'</span>)) &#123;</div><div class="line">			length++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (length != <span class="number">0</span>) &#123;</div><div class="line">				lastLength = length;</div><div class="line">			&#125;</div><div class="line">			length = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (length != <span class="number">0</span>) &#123;</div><div class="line">		lastLength = length;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> lastLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 73. Permutation Sequence]]></title>
      <url>http://yoursite.com/2013/10/09/2013-10-09-CODE%2073%20Permutation%20Sequence/</url>
      <content type="html"><![CDATA[<p>The set <code>[1,2,3,…,n]</code> contains a<br> total of n! unique permutations.<br>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n = 3):</p>
<ol>
<li><code>&quot;123&quot;</code></li>
<li><code>&quot;132&quot;</code></li>
<li><code>&quot;213&quot;</code></li>
<li><code>&quot;231&quot;</code></li>
<li><code>&quot;312&quot;</code></li>
<li><code>&quot;321&quot;</code></li>
</ol>
<p>Given n and k, return the kth permutation sequence.<br>Note: Given n will be between 1 and 9 inclusive.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> 	<span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	--k;</div><div class="line">	ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	String s = <span class="keyword">new</span> String();</div><div class="line">	<span class="keyword">int</span> njiecheng = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		numbers.add(i);</div><div class="line">		njiecheng *= i;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= <span class="number">1</span>; j--) &#123;</div><div class="line">		<span class="keyword">int</span> num = k / (njiecheng / j);</div><div class="line">		s = s + numbers.get(num);</div><div class="line">		numbers.remove(num);</div><div class="line">		k = k % (njiecheng / j);</div><div class="line">		njiecheng = njiecheng / j;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 72. Rotate List]]></title>
      <url>http://yoursite.com/2013/10/09/2013-10-09-CODE%2072%20Rotate%20List/</url>
      <content type="html"><![CDATA[<p>Given a list, rotate the list to the right by k places, where k is non-negative.<br>For example:<br>Given <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> and k = <code>2</code>,<br>return <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	ListNode round1 = <span class="keyword">null</span>;</div><div class="line">	ListNode p = head;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != p) &#123;</div><div class="line">		ListNode node = <span class="keyword">new</span> ListNode(p.val);</div><div class="line">		node.next = round1;</div><div class="line">		p = p.next;</div><div class="line">		round1 = node;</div><div class="line">		length++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (n % length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		n = n % length;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	ListNode round2 = <span class="keyword">null</span>;</div><div class="line">	ListNode p1 = round1;</div><div class="line">	<span class="keyword">while</span> (num &lt; n) &#123;</div><div class="line">		ListNode node = <span class="keyword">new</span> ListNode(p1.val);</div><div class="line">		node.next = round2;</div><div class="line">		p1 = p1.next;</div><div class="line">		round2 = node;</div><div class="line">		num++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ListNode round3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode round3Cpy = round3;</div><div class="line">	ListNode p2 = round2;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != p2) &#123;</div><div class="line">		ListNode node = <span class="keyword">new</span> ListNode(p2.val);</div><div class="line">		p2 = p2.next;</div><div class="line">		round3Cpy.next = node;</div><div class="line">		round3Cpy = round3Cpy.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != p1) &#123;</div><div class="line">		ListNode node = <span class="keyword">new</span> ListNode(p1.val);</div><div class="line">		node.next = round3Cpy.next;</div><div class="line">		round3Cpy.next = node;</div><div class="line">		p1 = p1.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> round3.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 70. Unique Paths II]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2070%20Unique%20Paths%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Unique Paths”:<br>Now consider if some obstacles are added to the grids. How many unique paths would there be?<br>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively<br> in the grid.<br>For example,</p>
<p>There is one obstacle in the middle of a 3x3 grid as illustrated below.<br>    [<br>      [0,0,0],<br>      [0,1,0],<br>      [0,0,0]<br>    ]</p>
<p>The total number of unique paths is <code>2</code>.<br>Note: m and n will be at most 100.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">int</span> m = obstacleGrid.length;</div><div class="line">	<span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</div><div class="line">	<span class="keyword">int</span>[][] sum = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">	sum[<span class="number">0</span>][<span class="number">0</span>] = obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</div><div class="line">			sum[i][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sum[i][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>) &#123;</div><div class="line">			sum[<span class="number">0</span>][i] = <span class="number">0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sum[<span class="number">0</span>][i] = sum[<span class="number">0</span>][i - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (obstacleGrid[i][j] != <span class="number">1</span>) &#123;</div><div class="line">				sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>];</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sum[i][j] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum[m - <span class="number">1</span>][n - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 71. Unique Paths]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2071%20Unique%20Paths/</url>
      <content type="html"><![CDATA[<p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).<br>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).<br>How many possible unique paths are there?<br><img src="http://4.bp.blogspot.com/_UElib2WLeDE/TNJf8VtC2VI/AAAAAAAACXU/UyUa-9LKp4E/s400/robot_maze.png" alt=""></p>
<p>Above is a 3 x 7 grid. How many possible unique paths are there?<br>Note: m and n will be at most 100.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">int</span>[][] sum = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">		sum[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		sum[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">			sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum[m - <span class="number">1</span>][n - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 69. Minimum Path Sum]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2069%20Minimum%20Path%20Sum/</url>
      <content type="html"><![CDATA[<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.<br>Note: You can only move either down or right at any point in time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">int</span>[][] sum = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</div><div class="line">	sum[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;</div><div class="line">		sum[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + sum[i - <span class="number">1</span>][<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid[<span class="number">0</span>].length; i++) &#123;</div><div class="line">		sum[<span class="number">0</span>][i] = grid[<span class="number">0</span>][i] + sum[<span class="number">0</span>][i - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</div><div class="line">			sum[i][j] = grid[i][j] + Math.min(sum[i - <span class="number">1</span>][j], sum[i][j - <span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum[sum.length - <span class="number">1</span>][sum[<span class="number">0</span>].length - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 68. Merge Two Sorted Lists]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2068%20Merge%20Two%20Sorted%20Lists/</url>
      <content type="html"><![CDATA[<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes<br> of the first two lists.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == l1 &amp;&amp; <span class="keyword">null</span> == l2) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == l2) &#123;</div><div class="line">		<span class="keyword">return</span> l1;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == l1) &#123;</div><div class="line">		<span class="keyword">return</span> l2;</div><div class="line">	&#125;</div><div class="line">	ListNode newList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode p = newList;</div><div class="line">	ListNode p1 = l1;</div><div class="line">	ListNode p2 = l2;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != p1 &amp;&amp; <span class="keyword">null</span> != p2) &#123;</div><div class="line">		<span class="keyword">if</span> (p1.val &lt; p2.val) &#123;</div><div class="line">			ListNode node = <span class="keyword">new</span> ListNode(p1.val);</div><div class="line">			p.next = node;</div><div class="line">			p = p.next;</div><div class="line">			p1 = p1.next;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ListNode node = <span class="keyword">new</span> ListNode(p2.val);</div><div class="line">			p.next = node;</div><div class="line">			p = p.next;</div><div class="line">			p2 = p2.next;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != p1) &#123;</div><div class="line">		p.next = p1;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != p2) &#123;</div><div class="line">		p.next = p2;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> newList.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 67. Add Binary]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2067%20Add%20Binary/</url>
      <content type="html"><![CDATA[<p>Given two binary strings, return their sum (also a binary string).<br>For example,<br>a = <code>&quot;11&quot;</code><br>b = <code>&quot;1&quot;</code><br>Return <code>&quot;100&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">char</span>[] as = a.toCharArray();</div><div class="line">	<span class="keyword">char</span>[] bs = b.toCharArray();</div><div class="line">	<span class="keyword">int</span> i = as.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> j = bs.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == c) &#123;</div><div class="line">			<span class="keyword">if</span> ((as[i] == <span class="string">'0'</span> &amp;&amp; bs[j] == <span class="string">'1'</span>)</div><div class="line">					|| (as[i] == <span class="string">'1'</span> &amp;&amp; bs[j] == <span class="string">'0'</span>)) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">				c = <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((as[i] == <span class="string">'0'</span> &amp;&amp; bs[j] == <span class="string">'0'</span>)) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'0'</span>);</div><div class="line">				c = <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'0'</span>);</div><div class="line">				c = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == c) &#123;</div><div class="line">			<span class="keyword">if</span> ((as[i] == <span class="string">'0'</span> &amp;&amp; bs[j] == <span class="string">'1'</span>)</div><div class="line">					|| (as[i] == <span class="string">'1'</span> &amp;&amp; bs[j] == <span class="string">'0'</span>)) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'0'</span>);</div><div class="line">				c = <span class="number">1</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((as[i] == <span class="string">'0'</span> &amp;&amp; bs[j] == <span class="string">'0'</span>)) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">				c = <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">				c = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		i--;</div><div class="line">		j--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == c) &#123;</div><div class="line">			sb = sb.insert(<span class="number">0</span>, as[i]);</div><div class="line">			c = <span class="number">0</span>;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == c) &#123;</div><div class="line">			<span class="keyword">if</span> (as[i] == <span class="string">'0'</span>) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">				c = <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'0'</span>);</div><div class="line">				c = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		i--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == c) &#123;</div><div class="line">			sb = sb.insert(<span class="number">0</span>, bs[j]);</div><div class="line">			c = <span class="number">0</span>;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == c) &#123;</div><div class="line">			<span class="keyword">if</span> (bs[j] == <span class="string">'0'</span>) &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">				c = <span class="number">0</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sb = sb.insert(<span class="number">0</span>, <span class="string">'0'</span>);</div><div class="line">				c = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		j--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="number">1</span> == c) &#123;</div><div class="line">		sb = sb.insert(<span class="number">0</span>, <span class="string">'1'</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 66. Valid Number]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2066%20Valid%20Number/</url>
      <content type="html"><![CDATA[<p>Validate if a given string is numeric.<br>Some examples:<br><code>&quot;0&quot;</code> =&gt; <code>true</code><br><code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br><code>&quot;abc&quot;</code> =&gt; <code>false</code><br><code>&quot;1 a&quot;</code> =&gt; <code>false</code><br><code>&quot;2e10&quot;</code> =&gt; <code>true</code></p>
<p>Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	String regExp = <span class="string">"[ ]*[+|-]&#123;0,1&#125;([0-9]+\\.&#123;0,1&#125;|([0-9]*\\.[0-9]+))(e[+|-]&#123;0,1&#125;[0-9]+)&#123;0,1&#125;[ ]*"</span>;</div><div class="line">	<span class="keyword">return</span> s.matches(regExp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 65. Plus One]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2065%20Plus%20One/</url>
      <content type="html"><![CDATA[<p>####<br>Given a number represented as an array of digits, plus one to the number.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (digits[i] &lt; <span class="number">9</span>) &#123;</div><div class="line">			digits[i] += c;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (digits[i] == <span class="number">9</span>) &#123;</div><div class="line">			digits[i] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> &amp;&amp; digits[<span class="number">0</span>] == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">int</span>[] newDigits = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</div><div class="line">		newDigits[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> newDigits;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> digits;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 64. Text Justification]]></title>
      <url>http://yoursite.com/2013/10/07/2013-10-07-CODE%2064%20Text%20Justification/</url>
      <content type="html"><![CDATA[<p>Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.<br>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39;
 &#39;</code> when necessary so that each line has exactly L characters.<br>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.<br>For the last line of text, it should be left justified and no extra space is inserted between words.<br>For example,<br>words: <code>[&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;,
 &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]</code><br>L: <code>16</code>.<br>Return the formatted lines as:</p>
<pre><code>[
   &quot;This    is    an&quot;,
   &quot;example  of text&quot;,
   &quot;justification.  &quot;
]
</code></pre><p>Note: Each word is guaranteed not to exceed L in length.<br><a href="http://oj.leetcode.com/problems/text-justification/#" target="_blank" rel="external">click to show corner cases.</a><br>Corner Cases:</p>
<ul>
<li>A line other than the last line might contain only one word. What should you do in this case?<br>In this case, that line should be left-justified.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">fullJustify</span><span class="params">(String[] words, <span class="keyword">int</span> L)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == words || words.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		result.add(<span class="string">""</span>);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (words.length == <span class="number">1</span> &amp;&amp; words[<span class="number">0</span>].equals(<span class="string">""</span>) &amp;&amp; L &gt; <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++) &#123;</div><div class="line">			sb.append(<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		result.add(sb.toString());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">int</span> groupNumber = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> groupLength = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> startWord = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (groupLength + words[i].length() &lt;= L) &#123;</div><div class="line">			groupLength += words[i].length() + <span class="number">1</span>;</div><div class="line">			groupNumber++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">			<span class="keyword">int</span>[] spaceNumber = <span class="keyword">new</span> <span class="keyword">int</span>[groupNumber - <span class="number">1</span>];</div><div class="line">			<span class="keyword">if</span> (groupNumber == <span class="number">1</span>) &#123;</div><div class="line">				sb.append(words[startWord]);</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; L - words[startWord].length(); m++)</div><div class="line">					sb.append(<span class="string">" "</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (groupLength - <span class="number">1</span> == L) &#123;</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; groupNumber - <span class="number">1</span>; j++) &#123;</div><div class="line">						spaceNumber[j] = <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; groupNumber - <span class="number">1</span>; j++) &#123;</div><div class="line">						spaceNumber[j] = (L - (groupLength - groupNumber))</div><div class="line">								/ (groupNumber - <span class="number">1</span>);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (L - (groupLength - groupNumber))</div><div class="line">							% (groupNumber - <span class="number">1</span>); j++) &#123;</div><div class="line">						spaceNumber[j] += <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = startWord; j &lt; startWord + groupNumber; j++) &#123;</div><div class="line">					sb.append(words[j]);</div><div class="line">					<span class="keyword">if</span> (startWord + groupNumber - <span class="number">1</span> != j) &#123;</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; spaceNumber[j - startWord]; m++)</div><div class="line">							sb.append(<span class="string">" "</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			result.add(sb.toString());</div><div class="line"></div><div class="line">			groupNumber = <span class="number">0</span>;</div><div class="line">			groupLength = <span class="number">0</span>;</div><div class="line">			startWord = i;</div><div class="line">			i--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (groupNumber != <span class="number">0</span>) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = startWord; j &lt; startWord + groupNumber; j++) &#123;</div><div class="line">			sb.append(words[j]);</div><div class="line">			<span class="keyword">if</span> (startWord + groupNumber - <span class="number">1</span> != j) &#123;</div><div class="line">				sb.append(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (sb.length() &lt; L) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> m = sb.length(); m &lt; L; m++) &#123;</div><div class="line">				sb.append(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		result.add(sb.toString());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 63. Sqrt(x)]]></title>
      <url>http://yoursite.com/2013/10/06/2013-10-06-CODE%2063%20Sqrt(x)/</url>
      <content type="html"><![CDATA[<p>Implement <code>int sqrt(int x)</code>.<br>Compute and return the square root of x.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">double</span> pre = -<span class="number">1.0</span>;</div><div class="line">	<span class="keyword">double</span> cur = <span class="number">1.0</span>;</div><div class="line">	<span class="keyword">while</span> (Math.abs(pre - cur) &gt; <span class="number">0.00001</span>) &#123;</div><div class="line">		pre = cur;</div><div class="line">		cur = (cur + x / cur) / <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> (<span class="keyword">int</span>) cur;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 62. Climbing Stairs]]></title>
      <url>http://yoursite.com/2013/10/06/2013-10-06-CODE%2062%20Climbing%20Stairs/</url>
      <content type="html"><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.<br>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == n) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == n) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] ways = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</div><div class="line">	ways[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	ways[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</div><div class="line">		ways[i] = ways[i - <span class="number">1</span>] + ways[i - <span class="number">2</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ways[n];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 61. Simplify Path]]></title>
      <url>http://yoursite.com/2013/10/06/2013-10-06-CODE%2061%20Simplify%20Path/</url>
      <content type="html"><![CDATA[<p>Given an absolute path for a file (Unix-style), simplify it.<br>For example,<br>path = <code>&quot;/home/&quot;</code>, =&gt; <code>&quot;/home&quot;</code><br>path = <code>&quot;/a/./b/../../c/&quot;</code>, =&gt; <code>&quot;/c&quot;</code></p>
<p><a href="http://oj.leetcode.com/problems/simplify-path/#" target="_blank" rel="external">click to show corner cases.</a><br>Corner Cases:</p>
<ul>
<li>Did you consider the case where path = <code>&quot;/../&quot;</code>?<br>In this case, you should return <code>&quot;/&quot;</code>.</li>
<li>Another corner case is the path might contain multiple slashes <code>&#39;/&#39;</code> together,<br>such as <code>&quot;/home//foo/&quot;</code>.<br>In this case, you should ignore redundant slashes and return <code>&quot;/home/foo&quot;</code>.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == path || <span class="string">""</span>.equals(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	List&lt;String&gt; pathList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">char</span>[] paths = path.toCharArray();</div><div class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paths.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (paths[i] == <span class="string">'/'</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!sb.toString().equals(<span class="string">""</span>)) &#123;</div><div class="line">				<span class="keyword">if</span> (!sb.toString().equals(<span class="string">"."</span>)</div><div class="line">						&amp;&amp; !sb.toString().equals(<span class="string">".."</span>)) &#123;</div><div class="line">					pathList.add(sb.toString());</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.toString().equals(<span class="string">".."</span>)) &#123;</div><div class="line">					<span class="keyword">if</span> (!pathList.isEmpty()) &#123;</div><div class="line">						pathList.remove(pathList.size() - <span class="number">1</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				sb = <span class="keyword">null</span>;</div><div class="line">				sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sb.append(paths[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!sb.toString().equals(<span class="string">""</span>)) &#123;</div><div class="line">		<span class="keyword">if</span> (!sb.toString().equals(<span class="string">"."</span>) &amp;&amp; !sb.toString().equals(<span class="string">".."</span>)) &#123;</div><div class="line">			pathList.add(sb.toString());</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.toString().equals(<span class="string">".."</span>)) &#123;</div><div class="line">			<span class="keyword">if</span> (!pathList.isEmpty()) &#123;</div><div class="line">				pathList.remove(pathList.size() - <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (pathList.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"/"</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		sb = <span class="keyword">null</span>;</div><div class="line">		sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (String s : pathList) &#123;</div><div class="line">			sb.append(<span class="string">"/"</span> + s);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 60. Set Matrix Zeroes]]></title>
      <url>http://yoursite.com/2013/10/05/2013-10-05-CODE%2060%20Set%20Matrix%20Zeroes/</url>
      <content type="html"><![CDATA[<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it in place.<a href="http://oj.leetcode.com/problems/set-matrix-zeroes/#" target="_blank" rel="external">click to show follow up.</a><br><strong>Follow up:</strong>Did you use extra space?<br>A straight forward solution using O(<em>mn</em>) space is probably a bad idea.<br>A simple improvement uses O(<em>m</em>+<em>n</em>) space, but still not the best solution.<br>Could you devise a constant space solution?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">int</span> zeroH = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> rows = matrix.length;</div><div class="line">	<span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> == matrix[<span class="number">0</span>][<span class="number">0</span>]) &#123;</div><div class="line">		zeroH = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == matrix[i][<span class="number">0</span>]) &#123;</div><div class="line">			matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cols; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == matrix[<span class="number">0</span>][i]) &#123;</div><div class="line">			zeroH = <span class="number">0</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; cols; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="number">0</span> == matrix[i][j]) &#123;</div><div class="line">				matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">				matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == matrix[i][<span class="number">0</span>]) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">				matrix[i][j] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cols; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == matrix[<span class="number">0</span>][i]) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; rows; j++) &#123;</div><div class="line">				matrix[j][i] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> == zeroH) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">			matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 59. Search a 2D Matrix]]></title>
      <url>http://yoursite.com/2013/10/04/2013-10-04-CODE%2059%20Search%20a%202D%20Matrix/</url>
      <content type="html"><![CDATA[<p>Write an efficient algorithm that searches for a value in an<em>m</em>x<em>n</em>matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted from left to right.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p>For example,<br>Consider the following matrix:<br>    [<br>      [1,   3,  5,  7],<br>      [10, 11, 16, 20],<br>      [23, 30, 34, 50]<br>    ]</p>
<p>Given<strong>target</strong>=<code>3</code>, return<code>true</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == matrix || matrix.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> rows = matrix.length;</div><div class="line">	<span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</div><div class="line">	<span class="keyword">int</span> all = rows * cols;</div><div class="line">	<span class="keyword">boolean</span> finded = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; all - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (matrix[i / cols][i % cols] &gt; matrix[(i + <span class="number">1</span>) / cols][(i + <span class="number">1</span>)</div><div class="line">				% cols]) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (matrix[i / cols][i % cols] == target) &#123;</div><div class="line">			finded = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt; all - <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[rows - <span class="number">1</span>][cols - <span class="number">1</span>] == target) &#123;</div><div class="line">		finded = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> finded;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 58. Sort Colors]]></title>
      <url>http://yoursite.com/2013/10/04/2013-10-04-CODE%2058%20Sort%20Colors/</url>
      <content type="html"><![CDATA[<p>Given an array with <em>n</em> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.<br><strong>Note:</strong><br>You are not suppose to use the library’s sort function for this problem.<br><a href="http://oj.leetcode.com/problems/sort-colors/#" target="_blank" rel="external">click to show follow up.</a><br><strong>Follow up:</strong><br>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.<br>Could you come up with an one-pass algorithm using only constant space?</p>
<p><strong>WORST CODE:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="comment">// 012012012012</span></div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = A.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (start &lt; A.length &amp;&amp; A[start] == <span class="number">0</span>) &#123;</div><div class="line">		start++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (end &gt; <span class="number">0</span> &amp;&amp; A[end] == <span class="number">2</span>) &#123;</div><div class="line">		end--;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> mid = start; mid &lt;= end; mid++) &#123;</div><div class="line">		<span class="keyword">if</span> (A[mid] == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> tmp = A[mid];</div><div class="line">			A[mid] = A[start];</div><div class="line">			A[start] = tmp;</div><div class="line">			start++;</div><div class="line">			<span class="keyword">while</span> (start &lt; A.length &amp;&amp; A[start] == <span class="number">0</span>) &#123;</div><div class="line">				start++;</div><div class="line">			&#125;</div><div class="line">			mid = start - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid != end &amp;&amp; A[mid] == <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">int</span> tmp = A[mid];</div><div class="line">			A[mid] = A[end];</div><div class="line">			A[end] = tmp;</div><div class="line">			end--;</div><div class="line">			mid--;</div><div class="line">			<span class="keyword">while</span> (end &gt; <span class="number">0</span> &amp;&amp; A[end] == <span class="number">2</span>) &#123;</div><div class="line">				end--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 57. Minimum Window Substring]]></title>
      <url>http://yoursite.com/2013/10/04/2013-10-04-CODE%2057%20Minimum%20Window%20Substring/</url>
      <content type="html"><![CDATA[<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).For example,<br><strong>S</strong>=<code>&quot;ADOBECODEBANC&quot;</code><br><strong>T</strong>=<code>&quot;ABC&quot;</code></p>
<p>Minimum window is<code>&quot;BANC&quot;</code>.<br><strong>Note:</strong><br>If there is no such window in S that covers all characters in T, return the emtpy string<code>&quot;&quot;</code>.<br>If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.<br><strong>WORST CODE:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String S, String T)</span> </span>&#123;</div><div class="line">	<span class="comment">// Note: The Solution object is instantiated only once and is reused by</span></div><div class="line">	<span class="comment">// each test case.</span></div><div class="line">	<span class="keyword">if</span> (T.length() &gt; S.length()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	Map&lt;Character, Integer&gt; table = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">	<span class="keyword">char</span>[] ss = S.toCharArray();</div><div class="line">	<span class="keyword">char</span>[] tt = T.toCharArray();</div><div class="line">	Map&lt;Character, Integer&gt; ttable = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">	ArrayList&lt;Character&gt; cs = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">char</span> c : tt) &#123;</div><div class="line">		<span class="keyword">if</span> (ttable.containsKey(c)) &#123;</div><div class="line">			<span class="keyword">int</span> num = ttable.get(c);</div><div class="line">			ttable.put(c, num + <span class="number">1</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ttable.put(c, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		cs.add(c);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> end = -<span class="number">1</span>;</div><div class="line">	String substring = <span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ss.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (ttable.keySet().contains(ss[i])) &#123;</div><div class="line">			<span class="keyword">if</span> (-<span class="number">1</span> == start) &#123;</div><div class="line">				start = i;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">int</span> num = ttable.get(ss[i]);</div><div class="line">			<span class="keyword">if</span> (num &gt; <span class="number">1</span>) &#123;</div><div class="line">				ttable.put(ss[i], num - <span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				ttable.remove(ss[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ttable.isEmpty()) &#123;</div><div class="line">				end = i;</div><div class="line">				substring = S.substring(start, end + <span class="number">1</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cs.contains(ss[i])) &#123;</div><div class="line">			<span class="keyword">if</span> (table.containsKey(ss[i])) &#123;</div><div class="line">				<span class="keyword">int</span> num = table.get(ss[i]);</div><div class="line">				table.put(ss[i], num + <span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				table.put(ss[i], <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (-<span class="number">1</span> == start || -<span class="number">1</span> == end) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (start = start + <span class="number">1</span>; start &lt;= ss.length - tt.length</div><div class="line">			&amp;&amp; end &lt; ss.length; start++) &#123;</div><div class="line">		<span class="keyword">if</span> (!cs.contains(ss[start - <span class="number">1</span>])) &#123;</div><div class="line">			String tmp = S.substring(start, end + <span class="number">1</span>);</div><div class="line">			<span class="keyword">if</span> (tmp.length() &lt; substring.length()) &#123;</div><div class="line">				substring = tmp;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (table.containsKey(ss[start - <span class="number">1</span>])) &#123;</div><div class="line">				<span class="keyword">int</span> num = table.get(ss[start - <span class="number">1</span>]);</div><div class="line">				<span class="keyword">if</span> (num &gt; <span class="number">1</span>) &#123;</div><div class="line">					table.put(ss[start - <span class="number">1</span>], num - <span class="number">1</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					table.remove(ss[start - <span class="number">1</span>]);</div><div class="line">				&#125;</div><div class="line">				String tmp = S.substring(start, end + <span class="number">1</span>);</div><div class="line">				<span class="keyword">if</span> (tmp.length() &lt; substring.length()) &#123;</div><div class="line">					substring = tmp;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">for</span> (end = end + <span class="number">1</span>; end &lt; ss.length; end++) &#123;</div><div class="line">					<span class="keyword">if</span> (ss[start - <span class="number">1</span>] == ss[end]) &#123;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (cs.contains(ss[end])) &#123;</div><div class="line">						<span class="keyword">if</span> (table.containsKey(ss[end])) &#123;</div><div class="line">							<span class="keyword">int</span> num = table.get(ss[end]);</div><div class="line">							table.put(ss[end], num + <span class="number">1</span>);</div><div class="line">						&#125; <span class="keyword">else</span> &#123;</div><div class="line">							table.put(ss[end], <span class="number">1</span>);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (end &lt; ss.length) &#123;</div><div class="line">					String tmp = S.substring(start, end + <span class="number">1</span>);</div><div class="line">					<span class="keyword">if</span> (tmp.length() &lt; substring.length()) &#123;</div><div class="line">						substring = tmp;</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> substring;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 56. Combinations]]></title>
      <url>http://yoursite.com/2013/10/03/2013-10-03-CODE%2056%20Combinations/</url>
      <content type="html"><![CDATA[<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of<em>k</em> numbers out of 1 … <em>n</em>.For example,<br>If<em>n</em>= 4 and<em>k</em>= 2, a solution is:<br>    [<br>      [2,4],<br>      [3,4],<br>      [2,3],<br>      [1,2],<br>      [1,3],<br>      [1,4],<br>    ]</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (n &lt; k) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	ArrayList&lt;Integer&gt; sList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		sList.add(i);</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		element.add(i);</div><div class="line">		result.add(element);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = result.size();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">2</span>; num &lt;= k; num++) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; tmp = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</div><div class="line">			ArrayList&lt;Integer&gt; oldElement = result.get(i);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = sList</div><div class="line">					.indexOf(oldElement.get(oldElement.size() - <span class="number">1</span>)) + <span class="number">2</span>; j &lt;= n; j++) &#123;</div><div class="line">				ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				element.addAll(oldElement);</div><div class="line">				element.add(j);</div><div class="line">				tmp.add(element);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		result.clear();</div><div class="line">		result.addAll(tmp);</div><div class="line">		start = <span class="number">0</span>;</div><div class="line">		end = result.size();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 55. Subsets]]></title>
      <url>http://yoursite.com/2013/10/01/2013-10-01-CODE%2055%20Subsets/</url>
      <content type="html"><![CDATA[<p>Given a set of distinct integers, <em>S</em>, return all possible subsets.<strong>Note:</strong></p>
<ul>
<li>Elements in a subset must be in non-descending order.</li>
<li>The solution set must not contain duplicate subsets.</li>
</ul>
<p>For example,<br>If<strong><em>S</em></strong>=<code>[1,2,3]</code>, a solution is:<br>    [<br>      [3],<br>      [1],<br>      [2],<br>      [1,2,3],<br>      [1,3],<br>      [2,3],<br>      [1,2],<br>      []<br>    ]</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] S) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == S || S.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">		result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	Arrays.sort(S);</div><div class="line">	ArrayList&lt;Integer&gt; sList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</div><div class="line">		sList.add(S[i]);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		element.add(S[i]);</div><div class="line">		result.add(element);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> end = result.size();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">2</span>; num &lt;= S.length; num++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</div><div class="line">			ArrayList&lt;Integer&gt; oldElement = result.get(i);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = sList</div><div class="line">					.indexOf(oldElement.get(oldElement.size() - <span class="number">1</span>)) + <span class="number">1</span>; j &lt; S.length; j++) &#123;</div><div class="line">				ArrayList&lt;Integer&gt; element = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">				element.addAll(oldElement);</div><div class="line">				element.add(S[j]);</div><div class="line">				result.add(element);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		start = end;</div><div class="line">		end = result.size();</div><div class="line">	&#125;</div><div class="line">	result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 54. Word Search]]></title>
      <url>http://yoursite.com/2013/10/01/2013-10-01-CODE%2054%20Word%20Search/</url>
      <content type="html"><![CDATA[<p>Given a 2D board and a word, find if the word exists in the grid.The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.<br>For example,<br>Given<strong>board</strong>=<br>    [<br>      [“ABCE”],<br>      [“SFCS”],<br>      [“ADEE”]<br>    ]</p>
<p><strong>word</strong> = <code>&quot;ABCCED&quot;</code>, -&gt; returns<code>true</code>,<br><strong>word</strong> = <code>&quot;SEE&quot;</code>, -&gt; returns<code>true</code>,<br><strong>word</strong> = <code>&quot;ABCB&quot;</code>, -&gt; returns<code>false</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == board || board.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == word || <span class="string">""</span>.equals(word)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> rows = board.length;</div><div class="line">	<span class="keyword">int</span> cols = board[<span class="number">0</span>].length;</div><div class="line">	<span class="keyword">boolean</span>[][] walked = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (checkExist(board, word, i, j, <span class="number">0</span>, walked)) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkExist</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> index,</span></span></div><div class="line">		<span class="keyword">boolean</span>[][] walked) &#123;</div><div class="line">	<span class="keyword">boolean</span> existed = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">if</span> (board[i][j] == word.charAt(index) &amp;&amp; !walked[i][j]) &#123;</div><div class="line">		<span class="keyword">if</span> (index == word.length() - <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m = -<span class="number">1</span>; m &lt;= <span class="number">1</span>; m++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> n = -<span class="number">1</span>; n &lt;= <span class="number">1</span>; n++) &#123;</div><div class="line">				<span class="keyword">if</span> (Math.abs(n - m) != <span class="number">1</span> || i + m &lt; <span class="number">0</span></div><div class="line">						|| i + m &gt;= board.length || j + n &lt; <span class="number">0</span></div><div class="line">						|| j + n &gt;= board[<span class="number">0</span>].length || walked[m + i][n + j]) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				walked[i][j] = <span class="keyword">true</span>;</div><div class="line">				existed = checkExist(board, word, m + i, n + j, index + <span class="number">1</span>,</div><div class="line">						walked);</div><div class="line">				walked[i][j] = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">if</span> (existed) &#123;</div><div class="line">					<span class="keyword">return</span> existed;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> existed;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 50. Remove Duplicates from Sorted List II]]></title>
      <url>http://yoursite.com/2013/09/29/2013-09-29-CODE%2050%20Remove%20Duplicates%20from%20Sorted%20List%20II/</url>
      <content type="html"><![CDATA[<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.<br>For example,<br>Given <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br>Given <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	ListNode node = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode next = head.next;</div><div class="line">	<span class="keyword">int</span> currentVal = head.val;</div><div class="line">	ListNode currentNode = node;</div><div class="line">	<span class="keyword">boolean</span> isDouble = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != next) &#123;</div><div class="line">		<span class="keyword">if</span> (next.val &gt; currentVal) &#123;</div><div class="line">			<span class="keyword">if</span> (!isDouble) &#123;</div><div class="line">				currentNode.next = <span class="keyword">new</span> ListNode(currentVal);</div><div class="line">				currentNode = currentNode.next;</div><div class="line">			&#125;</div><div class="line">			isDouble = <span class="keyword">false</span>;</div><div class="line">			currentVal = next.val;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (next.val == currentVal) &#123;</div><div class="line">			isDouble = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		next = next.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!isDouble) &#123;</div><div class="line">		currentNode.next = <span class="keyword">new</span> ListNode(currentVal);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 51. Remove Duplicates from Sorted List]]></title>
      <url>http://yoursite.com/2013/09/29/2013-09-29-CODE%2051%20Remove%20Duplicates%20from%20Sorted%20List/</url>
      <content type="html"><![CDATA[<p>Given a sorted linked list, delete all duplicates such that each element appear only once.<br>For example,<br>Given <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>Given <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	ListNode node = <span class="keyword">new</span> ListNode(head.val);</div><div class="line">	ListNode next = head.next;</div><div class="line">	ListNode currentNode = node;</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">null</span> != next) &#123;</div><div class="line">		<span class="keyword">if</span> (next.val &gt; currentNode.val) &#123;</div><div class="line">			currentNode.next = <span class="keyword">new</span> ListNode(next.val);</div><div class="line">			currentNode = currentNode.next;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			next = next.next;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 48. Maximal Rectangle]]></title>
      <url>http://yoursite.com/2013/09/28/2013-09-28-CODE%2048%20Maximal%20Rectangle/</url>
      <content type="html"><![CDATA[<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing all ones and return its area.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == matrix || matrix.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> rows = matrix.length;</div><div class="line">	<span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</div><div class="line">	<span class="keyword">int</span>[][] vmax = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</div><div class="line">	<span class="keyword">if</span> (matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</div><div class="line">		vmax[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> maximum = Integer.MIN_VALUE;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>) &#123;</div><div class="line">					vmax[i][j] = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>) &#123;</div><div class="line">					vmax[i][j] = <span class="number">1</span> + vmax[i - <span class="number">1</span>][j];</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					vmax[i][j] = <span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = rows - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = largestRectangleArea(vmax[i]);</div><div class="line">		<span class="keyword">if</span> (tmp &gt; maximum) &#123;</div><div class="line">			maximum = tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> maximum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 49. Largest Rectangle in Histogram]]></title>
      <url>http://yoursite.com/2013/09/27/2013-09-27-CODE%2049%20Largest%20Rectangle%20in%20Histogram/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == height || height.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">	Stack&lt;Integer&gt; indexHeight = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	Stack&lt;Integer&gt; index = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (index.isEmpty() || height[i] &gt; indexHeight.peek()) &#123;</div><div class="line">			indexHeight.push(height[i]);</div><div class="line">			index.push(i);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (height[i] &lt; indexHeight.peek()) &#123;</div><div class="line">			<span class="keyword">int</span> indexTmp = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (!index.isEmpty() &amp;&amp; height[i] &lt; indexHeight.peek()) &#123;</div><div class="line">				indexTmp = index.pop();</div><div class="line">				<span class="keyword">int</span> indexHeightTmp = indexHeight.pop();</div><div class="line">				<span class="keyword">int</span> tmp = (i - indexTmp) * indexHeightTmp;</div><div class="line">				<span class="keyword">if</span> (max &lt; tmp) &#123;</div><div class="line">					max = tmp;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (index.isEmpty() || height[i] &gt; indexHeight.peek()) &#123;</div><div class="line">				indexHeight.push(height[i]);</div><div class="line">				index.push(indexTmp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (!indexHeight.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = indexHeight.pop() * (height.length - index.pop());</div><div class="line">		<span class="keyword">if</span> (tmp &gt; max) &#123;</div><div class="line">			max = tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram.png" alt=""></p>
<p>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p>
<p><img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram_area.png" alt=""></p>
<p>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p>
<p>For example,<br>Given height = <code>[2,1,5,6,2,3]</code>,<br>return <code>10</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 47. Partition List]]></title>
      <url>http://yoursite.com/2013/09/25/2013-09-25-CODE%2047%20Partition%20List/</url>
      <content type="html"><![CDATA[<p>Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.<br>You should preserve the original relative order of the nodes in each of the two partitions.<br>For example,<br>Given <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2</code> and x = 3,<br>return <code>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ListNode p1 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode q1 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	ListNode p2 = p1;</div><div class="line">	ListNode q2 = q1;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (x &gt; head.val) &#123;</div><div class="line">			p2.next = <span class="keyword">new</span> ListNode(head.val);</div><div class="line">			p2 = p2.next;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			q2.next = <span class="keyword">new</span> ListNode(head.val);</div><div class="line">			q2 = q2.next;</div><div class="line">		&#125;</div><div class="line">		head = head.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != q1.next) &#123;</div><div class="line">		p2.next = q1.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> p1.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 45. Merge Sorted Array]]></title>
      <url>http://yoursite.com/2013/09/23/2013-09-23-CODE%2045%20Merge%20Sorted%20Array/</url>
      <content type="html"><![CDATA[<p>Given two sorted integer arrays A and B, merge B into A as one sorted array.<br>Note:<br>You may assume that A has enough space to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> m, <span class="keyword">int</span> B[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == B) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] insert = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</div><div class="line">	insert[<span class="number">0</span>] = -<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> insertIndex = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> lastJ = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; m &amp;&amp; i &lt; n;) &#123;</div><div class="line">		<span class="keyword">if</span> (A[j] &lt; B[i]) &#123;</div><div class="line">			j++;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			insert[insertIndex] = insert[insertIndex - <span class="number">1</span>] + j - lastJ + <span class="number">1</span>;</div><div class="line">			insertIndex++;</div><div class="line">			<span class="keyword">int</span> k;</div><div class="line">			<span class="keyword">for</span> (k = i + <span class="number">1</span>; k &lt; n; k++) &#123;</div><div class="line">				<span class="keyword">if</span> (B[k] &lt;= A[j]) &#123;</div><div class="line">					insert[insertIndex] = insert[insertIndex - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">					insertIndex++;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			i += k - i;</div><div class="line">			lastJ = j;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> moveStep = insertIndex - <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (insert[moveStep] != i + moveStep || moveStep == <span class="number">0</span>) &#123;</div><div class="line">			A[i + moveStep] = A[i];</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			A[i + moveStep] = B[moveStep - <span class="number">1</span>];</div><div class="line">			i++;</div><div class="line">			moveStep--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (moveStep != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moveStep; i++) &#123;</div><div class="line">			A[i] = B[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (insertIndex - <span class="number">1</span> &lt; n) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span> + insertIndex; i &lt; m + n; i++) &#123;</div><div class="line">			A[i] = B[i - m];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 44. Gray Code]]></title>
      <url>http://yoursite.com/2013/09/22/2013-09-22-CODE%2044%20Gray%20Code/</url>
      <content type="html"><![CDATA[<p>The gray code is a binary numeral system where two successive values differ in only one bit.<br>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.<br>For example, given n = 2, return <code>[0,1,3,2]</code>. Its<br> gray code sequence is:<br>    00 - 0<br>    01 - 1<br>    11 - 3<br>    10 - 2</p>
<p>Note:<br>For a given n, a gray code sequence is not uniquely defined.<br>For example, <code>[0,2,3,1]</code> is also a valid gray code sequence according<br> to the above definition.<br>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		nums.add(<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> nums;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	<span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[n];</div><div class="line">	<span class="keyword">int</span> max = (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, n) - <span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= max; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">			<span class="keyword">int</span> yushu = (<span class="keyword">int</span>) (i % Math.pow(<span class="number">2</span>, <span class="number">2</span> + j));</div><div class="line">			<span class="keyword">if</span> (yushu &lt; Math.pow(<span class="number">2</span>, <span class="number">1</span> + j)) &#123;</div><div class="line">				<span class="keyword">if</span> (yushu &lt; Math.pow(<span class="number">2</span>, j)) &#123;</div><div class="line">					cs[n - j - <span class="number">1</span>] = <span class="string">'0'</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					cs[n - j - <span class="number">1</span>] = <span class="string">'1'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> ((yushu - Math.pow(<span class="number">2</span>, <span class="number">1</span> + j)) &lt; Math.pow(<span class="number">2</span>, j)) &#123;</div><div class="line">					cs[n - j - <span class="number">1</span>] = <span class="string">'1'</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					cs[n - j - <span class="number">1</span>] = <span class="string">'0'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> num = Integer.valueOf(String.valueOf(cs), <span class="number">2</span>);</div><div class="line">		nums.add(num);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> nums;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 43. Decode Ways]]></title>
      <url>http://yoursite.com/2013/09/22/2013-09-22-CODE%2043%20Decode%20Ways/</url>
      <content type="html"><![CDATA[<p>A message containing letters from <code>A-Z</code> is being encoded to numbers using<br> the following mapping:<br>    ‘A’ -&gt; 1<br>    ‘B’ -&gt; 2<br>    …<br>    ‘Z’ -&gt; 26</p>
<p>Given an encoded message containing digits, determine the total number of ways to decode it.<br>For example,<br>Given encoded message <code>&quot;12&quot;</code>, it could be decoded as <code>&quot;AB&quot;</code> (1<br> 2) or <code>&quot;L&quot;</code> (12).<br>The number of ways decoding <code>&quot;12&quot;</code> is 2.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s || <span class="string">""</span>.equals(s)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>];</div><div class="line">	<span class="keyword">char</span>[] cs = s.toCharArray();</div><div class="line">	num[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (cs[<span class="number">0</span>] &gt; <span class="string">'0'</span>) &#123;</div><div class="line">		num[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		num[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; s.length() + <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> num1 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> num2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span> (cs[i - <span class="number">1</span>] != <span class="string">'0'</span>) &#123;</div><div class="line">			num1 = num[i - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (cs[i - <span class="number">2</span>] == <span class="string">'1'</span>) &#123;</div><div class="line">			num2 = num[i - <span class="number">2</span>];</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cs[i - <span class="number">2</span>] == <span class="string">'2'</span></div><div class="line">				&amp;&amp; (cs[i - <span class="number">1</span>] &gt;= <span class="string">'0'</span> &amp;&amp; cs[i - <span class="number">1</span>] &lt;= <span class="string">'6'</span>)) &#123;</div><div class="line">			num2 = num[i - <span class="number">2</span>];</div><div class="line">		&#125;</div><div class="line">		num[i] = num1 + num2;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> num[s.length()];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 40. Restore IP Addresses]]></title>
      <url>http://yoursite.com/2013/09/21/2013-09-21-CODE%2040%20Restore%20IP%20Addresses/</url>
      <content type="html"><![CDATA[<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.<br>For example:<br>Given <code>&quot;25525511135&quot;</code>,<br>return <code>[&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</code>. (Order does not matter)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length() &lt;= <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(s, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;String&gt; <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> th)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (th &lt; <span class="number">3</span> &amp;&amp; start &gt;= s.length() - <span class="number">3</span> + th) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th == <span class="number">3</span> &amp;&amp; start &lt; s.length() - <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (th == <span class="number">3</span> &amp;&amp; start &gt;= s.length() - <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (Integer.valueOf(s.substring(start)) &gt; <span class="number">255</span></div><div class="line">				|| (s.substring(start).length() &gt; <span class="number">1</span> &amp;&amp; s.substring(start)</div><div class="line">						.startsWith(<span class="string">"0"</span>))) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		strings.add(s.substring(start));</div><div class="line">		<span class="keyword">return</span> strings;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;String&gt; news = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (start + i &lt; s.length()) &#123;</div><div class="line">			String tmp = s.substring(start, start + i);</div><div class="line">			<span class="keyword">if</span> (Integer.valueOf(tmp) &gt; <span class="number">255</span></div><div class="line">					|| (tmp.length() &gt; <span class="number">1</span> &amp;&amp; tmp.startsWith(<span class="string">"0"</span>))) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			ArrayList&lt;String&gt; strs = dfs(s, start + i, th + <span class="number">1</span>);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != strs) &#123;</div><div class="line">				<span class="keyword">for</span> (String str : strs) &#123;</div><div class="line">					news.add(tmp + <span class="string">"."</span> + str);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> news;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 39. Submission Details]]></title>
      <url>http://yoursite.com/2013/09/21/2013-09-21-CODE%2039%20Submission%20Details/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the inorder traversal of its nodes’ values.<br>For example:<br>Given binary tree <code>{1,#,2,3}</code>,</p>
<pre><code>1
 \
  2
 /
3
</code></pre><p>return <code>[1,3,2]</code>.<br>Note: Recursive solution is trivial, could you do it iteratively?<br>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/binary-tree-inorder-traversal/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Integer&gt; inorder = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">	TreeNode node = root;</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty() || <span class="keyword">null</span> != node) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == node) &#123;</div><div class="line">			node = stack.pop();</div><div class="line">			inorder.add(node.val);</div><div class="line">			node = node.right;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			stack.push(node);</div><div class="line">			node = node.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> inorder;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 46. Scramble String]]></title>
      <url>http://yoursite.com/2013/09/21/2013-09-21-CODE%2046%20Scramble%20String/</url>
      <content type="html"><![CDATA[<p>Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.<br>Below is one possible representation of s1 = <code>&quot;great&quot;</code>:<br>        great<br>       /    \<br>      gr    eat<br>     / \    /  \<br>    g   r  e   at<br>               / \<br>              a   t</p>
<p>To scramble the string, we may choose any non-leaf node and swap its two children.<br>For example, if we choose the node <code>&quot;gr&quot;</code> and<br> swap its two children, it produces a scrambled string <code>&quot;rgeat&quot;</code>.<br>        rgeat<br>       /    \<br>      rg    eat<br>     / \    /  \<br>    r   g  e   at<br>               / \<br>              a   t</p>
<p>We say that <code>&quot;rgeat&quot;</code> is<br> a scrambled string of <code>&quot;great&quot;</code>.<br>Similarly, if we continue to swap the children of nodes <code>&quot;eat&quot;</code> and <code>&quot;at&quot;</code>,<br> it produces a scrambled string <code>&quot;rgtae&quot;</code>.<br>        rgtae<br>       /    \<br>      rg    tae<br>     / \    /  \<br>    r   g  ta  e<br>           / \<br>          t   a</p>
<p>We say that <code>&quot;rgtae&quot;</code> is<br> a scrambled string of <code>&quot;great&quot;</code>.<br>Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s1 &amp;&amp; <span class="keyword">null</span> == s2) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">null</span> == s1 &amp;&amp; <span class="keyword">null</span> != s2) || (<span class="keyword">null</span> != s1 &amp;&amp; <span class="keyword">null</span> == s2)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s1.length() != s2.length()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s1.equals(s2)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">char</span>[] c1 = s1.toCharArray();</div><div class="line">	<span class="keyword">char</span>[] c2 = s2.toCharArray();</div><div class="line">	<span class="keyword">int</span> length = s1.length();</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span>[][][] is = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length][length];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s2.length(); j++) &#123;</div><div class="line">			is[<span class="number">0</span>][i][j] = (c1[i] == c2[j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; length; k++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m = length - k - <span class="number">1</span>; m &gt;= <span class="number">0</span>; m--) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> n = length - k - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</div><div class="line">				<span class="keyword">boolean</span> r = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k &amp;&amp; !r; j++) &#123;</div><div class="line">					<span class="keyword">if</span> ((is[j - <span class="number">1</span>][m][n] &amp;&amp; is[k - j][j + m][j + n])</div><div class="line">							|| (is[j - <span class="number">1</span>][m][n + k + <span class="number">1</span> - j] &amp;&amp; is[k - j][m</div><div class="line">									+ j][n])) &#123;</div><div class="line">						r = <span class="keyword">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				is[k][m][n] = r;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> is[length - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 37. Unique Binary Search Trees II]]></title>
      <url>http://yoursite.com/2013/09/21/2013-09-21-CODE%2037%20Unique%20Binary%20Search%20Trees%20II/</url>
      <content type="html"><![CDATA[<p>Given n, generate all structurally unique BST’s (binary search trees) that store values 1…n.<br>For example,<br>Given n = 3, your program should return all 5 unique BST’s shown below.<br>       1         3     3      2      1<br>        \       /     /      / \      \<br>         3     2     1      1   3      2<br>        /     /       \                 \<br>       2     1         2                 3</p>
<p>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/unique-binary-search-trees-ii/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; node = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">		node.add(<span class="keyword">null</span>);</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(<span class="number">1</span>, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;TreeNode&gt; <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (end - start &lt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (end - start == <span class="number">0</span>) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; node = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">		node.add(<span class="keyword">new</span> TreeNode(start));</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;TreeNode&gt; node = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; leftNodes = dfs(start, i - <span class="number">1</span>);</div><div class="line">		ArrayList&lt;TreeNode&gt; rightNodes = dfs(i + <span class="number">1</span>, end);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != leftNodes || <span class="keyword">null</span> != rightNodes) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> == leftNodes) &#123;</div><div class="line">				<span class="keyword">for</span> (TreeNode rightNode : rightNodes) &#123;</div><div class="line">					TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</div><div class="line">					newNode.right = rightNode;</div><div class="line">					node.add(newNode);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == rightNodes) &#123;</div><div class="line">				<span class="keyword">for</span> (TreeNode leftNode : leftNodes) &#123;</div><div class="line">					TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</div><div class="line">					newNode.left = leftNode;</div><div class="line">					node.add(newNode);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">for</span> (TreeNode leftNode : leftNodes) &#123;</div><div class="line">					<span class="keyword">for</span> (TreeNode rightNode : rightNodes) &#123;</div><div class="line">						TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</div><div class="line">						newNode.left = leftNode;</div><div class="line">						newNode.right = rightNode;</div><div class="line">						node.add(newNode);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</div><div class="line">			node.add(newNode);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 38. Unique Binary Search Trees]]></title>
      <url>http://yoursite.com/2013/09/21/2013-09-21-CODE%2038%20Unique%20Binary%20Search%20Trees/</url>
      <content type="html"><![CDATA[<p>Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?<br>For example,<br>Given n = 3, there are a total of 5 unique BST’s.<br>       1         3     3      2      1<br>        \       /     /      / \      \<br>         3     2     1      1   3      2<br>        /     /       \                 \<br>       2     1         2                 3</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(<span class="number">1</span>, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (end - start &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (end - start == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (end - start == <span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</div><div class="line">		sum += dfs(start, i - <span class="number">1</span>) * dfs(i + <span class="number">1</span>, end);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 36. Interleaving String]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2036%20Interleaving%20String/</url>
      <content type="html"><![CDATA[<p>Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.<br>For example,<br>Given:<br>s1 = <code>&quot;aabcc&quot;</code>,<br>s2 = <code>&quot;dbbca&quot;</code>,<br>When s3 = <code>&quot;aadbbcbcac&quot;</code>, return true.<br>When s3 = <code>&quot;aadbbbaccc&quot;</code>, return false.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s1 &amp;&amp; <span class="keyword">null</span> == s2 &amp;&amp; <span class="keyword">null</span> == s3) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == s1 &amp;&amp; <span class="keyword">null</span> == s2 &amp;&amp; <span class="keyword">null</span> != s3) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == s1) &#123;</div><div class="line">		<span class="keyword">if</span> (s2.equals(s3)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == s2) &#123;</div><div class="line">		<span class="keyword">if</span> (s1.equals(s3)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != s1 &amp;&amp; <span class="keyword">null</span> != s2 &amp;&amp; <span class="keyword">null</span> != s3) &#123;</div><div class="line">		<span class="keyword">if</span> (s3.length() != s1.length() + s2.length()) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span>[][] is = <span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</div><div class="line">	is[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s1.length() + <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s3.charAt(i - <span class="number">1</span>)) &#123;</div><div class="line">			is[i][<span class="number">0</span>] = <span class="keyword">true</span> &amp;&amp; is[i - <span class="number">1</span>][<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s2.length() + <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (s2.charAt(i - <span class="number">1</span>) == s3.charAt(i - <span class="number">1</span>)) &#123;</div><div class="line">			is[<span class="number">0</span>][i] = <span class="keyword">true</span> &amp; is[<span class="number">0</span>][i - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s1.length() + <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s2.length() + <span class="number">1</span>; j++) &#123;</div><div class="line">			<span class="keyword">boolean</span> b1 = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">if</span> (s3.charAt(i + j - <span class="number">1</span>) == s1.charAt(i - <span class="number">1</span>)) &#123;</div><div class="line">				b1 = is[i - <span class="number">1</span>][j];</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (s3.charAt(i + j - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) &#123;</div><div class="line">				b2 = is[i][j - <span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">			is[i][j] = b1 || b2;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> is[s1.length()][s2.length()];</div><div class="line">	<span class="comment">// return dfs(s1, s2, s3, 0, 0, 0);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 35. Validate Binary Search Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2035%20Validate%20Binary%20Search%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, determine if it is a valid binary search tree (BST).<br>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/validate-binary-search-tree/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">	TreeNode pre = <span class="keyword">new</span> TreeNode(Integer.MIN_VALUE);</div><div class="line">	TreeNode now = root;</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty() || <span class="keyword">null</span> != now) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == now) &#123;</div><div class="line">			now = stack.pop();</div><div class="line">			<span class="keyword">if</span> (pre.val &gt;= now.val) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">			pre = now;</div><div class="line">			now = now.right;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			stack.push(now);</div><div class="line">			now = now.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 26. Binary Tree Level Order Traversal II]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2026%20Binary%20Tree%20Level%20Order%20Traversal%20II/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).<br>For example:<br>Given binary tree <code>{3,9,20,#,#,15,7}</code>,</p>
<pre><code>  3
 / \
9  20
  /  \
 15   7
</code></pre><p>return its bottom-up level order traversal as:</p>
<pre><code>[
  [15,7]
  [9,20],
  [3],
]
</code></pre><p>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; layerVals = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> layerNumber = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		TreeNode node = queue.poll();</div><div class="line">		layerVals.add(node.val);</div><div class="line">		layerNumber--;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">			queue.offer(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">			queue.offer(node.right);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (layerNumber == <span class="number">0</span>) &#123;</div><div class="line">			layerNumber = queue.size();</div><div class="line">			ArrayList&lt;Integer&gt; layerValsCpy = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			layerValsCpy.addAll(layerVals);</div><div class="line">			results.add(<span class="number">0</span>, layerValsCpy);</div><div class="line">			layerVals.clear();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 34. Recover Binary Search Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2034%20Recover%20Binary%20Search%20Tree/</url>
      <content type="html"><![CDATA[<p>Two elements of a binary search tree (BST) are swapped by mistake.<br>Recover the tree without changing its structure.<br>Note:<br>A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?<br>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/recover-binary-search-tree/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ArrayList&lt;TreeNode&gt; list = inorder(root);</div><div class="line">	TreeNode err1 = <span class="keyword">null</span>;</div><div class="line">	TreeNode err2 = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size() - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (list.get(i).val &gt; list.get(i + <span class="number">1</span>).val) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> == err1) &#123;</div><div class="line">				err1 = list.get(i);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				err2 = list.get(i + <span class="number">1</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != err1 &amp;&amp; <span class="keyword">null</span> != err2) &#123;</div><div class="line">		<span class="keyword">int</span> tmp = err1.val;</div><div class="line">		err1.val = err2.val;</div><div class="line">		err2.val = tmp;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != err1) &#123;</div><div class="line">		<span class="keyword">int</span> index = list.indexOf(err1);</div><div class="line">		<span class="keyword">int</span> tmp = list.get(index + <span class="number">1</span>).val;</div><div class="line">		list.get(index + <span class="number">1</span>).val = err1.val;</div><div class="line">		err1.val = tmp;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ArrayList&lt;TreeNode&gt; <span class="title">inorder</span><span class="params">(TreeNode node)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == node.left &amp;&amp; <span class="keyword">null</span> == node.right) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">		list.add(node);</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;TreeNode&gt; list = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">		list = inorder(node.left);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == list) &#123;</div><div class="line">		list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">	&#125;</div><div class="line">	list.add(node);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">		ArrayList&lt;TreeNode&gt; listRight = inorder(node.right);</div><div class="line">		list.addAll(listRight);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 33. Same Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2033%20Same%20Tree/</url>
      <content type="html"><![CDATA[<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">return</span> dfs(p, q);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">null</span> != left &amp;&amp; <span class="keyword">null</span> == right) || (<span class="keyword">null</span> == left)</div><div class="line">			&amp;&amp; (<span class="keyword">null</span> != right)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.val != right.val) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span> leftResult = dfs(left.left, right.left);</div><div class="line">	<span class="keyword">boolean</span> rightResult = dfs(left.right, right.right);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> (leftResult &amp;&amp; rightResult) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 32. Symmetric Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2032%20Symmetric%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).<br>For example, this binary tree is symmetric:<br>        1<br>       / \<br>      2   2<br>     / \ / \<br>    3  4 4  3</p>
<p>But the following is not:</p>
<pre><code>  1
 / \
2   2
 \   \
 3    3
</code></pre><p>Note:<br>Bonus points if you could solve it both recursively and iteratively.<br>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/symmetric-tree/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(root.left, root.right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">null</span> != left &amp;&amp; <span class="keyword">null</span> == right) || (<span class="keyword">null</span> == left)</div><div class="line">			&amp;&amp; (<span class="keyword">null</span> != right)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.val != right.val) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span> leftResult = dfs(left.left, right.right);</div><div class="line">	<span class="keyword">boolean</span> rightResult = dfs(left.right, right.left);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> (leftResult &amp;&amp; rightResult) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 31. Binary Tree Level Order Traversal]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2031%20Binary%20Tree%20Level%20Order%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).<br>For example:<br>Given binary tree <code>{3,9,20,#,#,15,7}</code>,</p>
<pre><code>  3
 / \
9  20
  /  \
 15   7
</code></pre><p>return its level order traversal as:</p>
<pre><code>[
  [3],
  [9,20],
  [15,7]
]
</code></pre><p>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/binary-tree-level-order-traversal/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; layerVals = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> layerNumber = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		TreeNode node = queue.poll();</div><div class="line">		layerVals.add(node.val);</div><div class="line">		layerNumber--;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">			queue.offer(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">			queue.offer(node.right);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (layerNumber == <span class="number">0</span>) &#123;</div><div class="line">			layerNumber = queue.size();</div><div class="line">			ArrayList&lt;Integer&gt; layerValsCpy = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			layerValsCpy.addAll(layerVals);</div><div class="line">			results.add(layerValsCpy);</div><div class="line">			layerVals.clear();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 30. Binary Tree Zigzag Level Order Traversal]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2030%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).<br>For example:<br>Given binary tree <code>{3,9,20,#,#,15,7}</code>,</p>
<pre><code>  3
 / \
9  20
  /  \
 15   7
</code></pre><p>return its zigzag level order traversal as:</p>
<pre><code>[
  [3],
  [20,9],
  [15,7]
]
</code></pre><p>confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/#" target="_blank" rel="external">&gt;<br> read more on how binary tree is serialized on OJ.</a></p>
<p>OJ’s Binary Tree Serialization:The serialization of a binary tree follows a level order traversal, where ‘#’ signifies a path terminator where no node exists below.<br>Here’s an example:</p>
<pre><code>  1
 / \
2   3
   /
  4
   \
    5
</code></pre><p>The above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; layerVals = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> layerNumber = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layer = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		TreeNode node = queue.poll();</div><div class="line">		layerVals.add(node.val);</div><div class="line">		layerNumber--;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">			queue.offer(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">			queue.offer(node.right);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (layerNumber == <span class="number">0</span>) &#123;</div><div class="line">			layerNumber = queue.size();</div><div class="line">			ArrayList&lt;Integer&gt; layerValsCpy = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			<span class="keyword">if</span> (layer % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = layerVals.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">					layerValsCpy.add(layerVals.get(i));</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				layerValsCpy.addAll(layerVals);</div><div class="line">			&#125;</div><div class="line">			results.add(layerValsCpy);</div><div class="line">			layerVals.clear();</div><div class="line">			layer++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 29. Maximum Depth of Binary Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2029%20Maximum%20Depth%20of%20Binary%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> layer = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layerNumbers = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		TreeNode node = queue.poll();</div><div class="line">		layerNumbers--;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">			queue.offer(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">			queue.offer(node.right);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (layerNumbers == <span class="number">0</span> &amp;&amp; !queue.isEmpty()) &#123;</div><div class="line">			layerNumbers = queue.size();</div><div class="line">			layer++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> layer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 28. Construct Binary Tree from Preorder and Inorder Traversal]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2028%20Construct%20Binary%20Tree%20from%20Preorder%20and%20Inorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given preorder and inorder traversal of a tree, construct the binary tree.<br>Note:<br>You may assume that duplicates do not exist in the tree.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == inorder || <span class="keyword">null</span> == preorder || inorder.length &lt;= <span class="number">0</span></div><div class="line">			|| preorder.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(inorder, preorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, <span class="number">0</span>,</div><div class="line">			preorder.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span> inorderStart,</span></span></div><div class="line">		<span class="keyword">int</span> inorderEnd, <span class="keyword">int</span> preorderStart, <span class="keyword">int</span> preorderEnd) &#123;</div><div class="line">	TreeNode node = <span class="keyword">new</span> TreeNode(preorder[preorderStart]);</div><div class="line">	<span class="keyword">int</span> nodeIndexInInorder = findElement(inorder, preorder[preorderStart]);</div><div class="line">	<span class="keyword">int</span> leftLength = nodeIndexInInorder - inorderStart;</div><div class="line">	<span class="keyword">int</span> rightLength = inorderEnd - nodeIndexInInorder;</div><div class="line">	<span class="keyword">if</span> (leftLength &gt; <span class="number">0</span>) &#123;</div><div class="line">		TreeNode left = dfs(inorder, preorder, inorderStart,</div><div class="line">				nodeIndexInInorder - <span class="number">1</span>, preorderStart + <span class="number">1</span>, preorderStart</div><div class="line">						+ leftLength);</div><div class="line">		node.left = left;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (rightLength &gt; <span class="number">0</span>) &#123;</div><div class="line">		TreeNode right = dfs(inorder, preorder, nodeIndexInInorder + <span class="number">1</span>,</div><div class="line">				inorderEnd, preorderEnd - rightLength + <span class="number">1</span>, preorderEnd);</div><div class="line">		node.right = right;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findElement</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> element)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (array[i] == element) &#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 27. Construct Binary Tree from Inorder and Postorder Traversal]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2027%20Construct%20Binary%20Tree%20from%20Inorder%20and%20Postorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given inorder and postorder traversal of a tree, construct the binary tree.<br>Note:<br>You may assume that duplicates do not exist in the tree.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == inorder || <span class="keyword">null</span> == postorder || inorder.length &lt;= <span class="number">0</span></div><div class="line">			|| postorder.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(inorder, postorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>, <span class="number">0</span>,</div><div class="line">			postorder.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> inorderStart,</span></span></div><div class="line">		<span class="keyword">int</span> inorderEnd, <span class="keyword">int</span> postorderStart, <span class="keyword">int</span> postorderEnd) &#123;</div><div class="line">	TreeNode node = <span class="keyword">new</span> TreeNode(postorder[postorderEnd]);</div><div class="line">	<span class="keyword">int</span> nodeIndexInInorder = findElement(inorder, postorder[postorderEnd]);</div><div class="line">	<span class="keyword">int</span> leftLength = nodeIndexInInorder - inorderStart;</div><div class="line">	<span class="keyword">int</span> rightLength = inorderEnd - nodeIndexInInorder;</div><div class="line">	<span class="keyword">if</span> (leftLength &gt; <span class="number">0</span>) &#123;</div><div class="line">		TreeNode left = dfs(inorder, postorder, inorderStart,</div><div class="line">				nodeIndexInInorder - <span class="number">1</span>, postorderStart, postorderEnd</div><div class="line">						- rightLength - <span class="number">1</span>);</div><div class="line">		node.left = left;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (rightLength &gt; <span class="number">0</span>) &#123;</div><div class="line">		TreeNode right = dfs(inorder, postorder, nodeIndexInInorder + <span class="number">1</span>,</div><div class="line">				inorderEnd, postorderEnd - rightLength, postorderEnd - <span class="number">1</span>);</div><div class="line">		node.right = right;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findElement</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> element)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (array[i] == element) &#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 24. Convert Sorted List to Binary Search Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2024%20Convert%20Sorted%20List%20to%20Binary%20Search%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">return</span> dfs(head);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">dfs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">	TreeNode node = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</div><div class="line">		ListNode perMidNode = <span class="keyword">null</span>;</div><div class="line">		ListNode midNode = head;</div><div class="line">		ListNode lastNode = head;</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">null</span> != lastNode.next &amp;&amp; <span class="keyword">null</span> != lastNode.next.next) &#123;</div><div class="line">			perMidNode = midNode;</div><div class="line">			midNode = midNode.next;</div><div class="line">			lastNode = lastNode.next.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != perMidNode) &#123;</div><div class="line">			perMidNode.next = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		node = <span class="keyword">new</span> TreeNode(midNode.val);</div><div class="line">		TreeNode left = dfs(perMidNode == <span class="keyword">null</span> ? <span class="keyword">null</span> : head);</div><div class="line">		TreeNode right = dfs(midNode.next);</div><div class="line">		node.left = left;</div><div class="line">		node.right = right;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 25. Convert Sorted Array to Binary Search Tree]]></title>
      <url>http://yoursite.com/2013/09/20/2013-09-20-CODE%2025%20Convert%20Sorted%20Array%20to%20Binary%20Search%20Tree/</url>
      <content type="html"><![CDATA[<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (num == <span class="keyword">null</span> || num.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(num, <span class="number">0</span>, num.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">	TreeNode node = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (min &lt;= max) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (max + min) / <span class="number">2</span>;</div><div class="line">		node = <span class="keyword">new</span> TreeNode(num[mid]);</div><div class="line">		TreeNode left = dfs(num, min, mid - <span class="number">1</span>);</div><div class="line">		TreeNode right = dfs(num, mid + <span class="number">1</span>, max);</div><div class="line">		node.left = left;</div><div class="line">		node.right = right;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 23. Balanced Binary Tree]]></title>
      <url>http://yoursite.com/2013/09/19/2013-09-19-CODE%2023%20Balanced%20Binary%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, determine if it is height-balanced.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of<em>every</em> node<br> never differ by more than 1.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> checkBalanced(root) != -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> left = checkBalanced(root.left);</div><div class="line">	<span class="keyword">int</span> right = checkBalanced(root.right);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (left == -<span class="number">1</span> || right == -<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (Math.abs(left - right) &gt; <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 22. Minimum Depth of Binary Tree]]></title>
      <url>http://yoursite.com/2013/09/19/2013-09-19-CODE%2022%20Minimum%20Depth%20of%20Binary%20Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find its minimum depth.<br>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> layer = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layerNumbers = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		TreeNode node = queue.poll();</div><div class="line">		layerNumbers--;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == node.left &amp;&amp; <span class="keyword">null</span> == node.right) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.left) &#123;</div><div class="line">			queue.offer(node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != node.right) &#123;</div><div class="line">			queue.offer(node.right);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (layerNumbers == <span class="number">0</span> &amp;&amp; !queue.isEmpty()) &#123;</div><div class="line">			layerNumbers = queue.size();</div><div class="line">			layer++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> layer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 20. Path Sum II]]></title>
      <url>http://yoursite.com/2013/09/19/2013-09-19-CODE%2020%20Path%20Sum%20II/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> paths;</div><div class="line">	&#125;</div><div class="line">	dfs(paths, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), root, <span class="number">0</span>, sum);</div><div class="line">	<span class="keyword">return</span> paths;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths,</span></span></div><div class="line">		ArrayList&lt;Integer&gt; path, TreeNode root, <span class="keyword">int</span> current, <span class="keyword">int</span> sum) &#123;</div><div class="line">	<span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (current + root.val == sum) &#123;</div><div class="line">			path.add(root.val);</div><div class="line">			ArrayList&lt;Integer&gt; pathCopy = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">			pathCopy.addAll(path);</div><div class="line">			paths.add(pathCopy);</div><div class="line">			path.remove(path.size() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	path.add(root.val);</div><div class="line">	current += root.val;</div><div class="line">	<span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</div><div class="line">		dfs(paths, path, root.left, current, sum);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</div><div class="line">		dfs(paths, path, root.right, current, sum);</div><div class="line">	&#125;</div><div class="line">	path.remove(path.size() - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.<br>For example:<br>Given the below binary tree and <code>sum = 22</code>,                  5<br>                 / \<br>                4   8<br>               /   / \<br>              11  13  4<br>             /  \    / \<br>            7    2  5   1</p>
<p>return</p>
<pre><code>[
   [5,4,11,2],
   [5,8,4,5]
]
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2013/09/18/2013-09-18-CODE%2021%20Path%20Sum/</url>
      <content type="html"><![CDATA[<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:<br>Given the below binary tree and <code>sum
 = 22</code>,                  5<br>                 / \<br>                4   8<br>               /   / \<br>              11  13  4<br>             /  \      \<br>            7    2      1</p>
<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum<br> is 22.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dfs(root, <span class="number">0</span>, sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> current, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (current + root.val == sum) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span> is = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</div><div class="line">		is = dfs(root.left, current + root.val, sum);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (is) &#123;</div><div class="line">		<span class="keyword">return</span> is;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</div><div class="line">		is = dfs(root.right, current + root.val, sum);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> is;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 19. Flatten Binary Tree to Linked List]]></title>
      <url>http://yoursite.com/2013/09/17/2013-09-17-CODE%2019%20Flatten%20Binary%20Tree%20to%20Linked%20List/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, flatten it to a linked list in-place.<br>For example,<br>Given<br>             1<br>            / \<br>           2   5<br>          / \   \<br>         3   4   6</p>
<p>The flattened tree should look like:<br>       1<br>        \<br>         2<br>          \<br>           3<br>            \<br>             4<br>              \<br>               5<br>                \<br>                 6</p>
<p><a href="http://oj.leetcode.com/problems/flatten-binary-tree-to-linked-list/#" target="_blank" rel="external">click to show hints.</a><br>Hints:If you notice carefully in the flattened tree, each node’s right child points to the next node of a pre-order traversal.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	TreeNode newRoot = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</div><div class="line">	TreeNode cpyRoot = newRoot;</div><div class="line">	Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">	stack.push(root);</div><div class="line">	<span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">		cpyRoot.right = stack.pop();</div><div class="line">		cpyRoot.left = <span class="keyword">null</span>;</div><div class="line">		cpyRoot = cpyRoot.right;</div><div class="line">		<span class="keyword">while</span> (cpyRoot.left != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (cpyRoot.right != <span class="keyword">null</span>) &#123;</div><div class="line">				stack.push(cpyRoot.right);</div><div class="line">			&#125;</div><div class="line">			cpyRoot.right = cpyRoot.left;</div><div class="line">			cpyRoot.left = <span class="keyword">null</span>;</div><div class="line">			cpyRoot = cpyRoot.right;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (cpyRoot.right != <span class="keyword">null</span>) &#123;</div><div class="line">			stack.push(cpyRoot.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	root = newRoot.right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 18. Distinct Subsequences]]></title>
      <url>http://yoursite.com/2013/09/17/2013-09-17-CODE%2018%20Distinct%20Subsequences/</url>
      <content type="html"><![CDATA[<p>Given a string S and a string T, count the number of distinct subsequences of T in S.<br>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ACE&quot;</code> is<br> a subsequence of <code>&quot;ABCDE&quot;</code> while <code>&quot;AEC&quot;</code> is<br> not).<br>Here is an example:<br>S = <code>&quot;rabbbit&quot;</code>, T = <code>&quot;rabbit&quot;</code><br>Return <code>3</code>.<br>ps: sum(a, b) = (S.charAt(a)==T.charAt(b))*sum(a-1, b-1)+ sum(a-1, b)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(String S, String T)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == S || <span class="keyword">null</span> == T || T.length() &gt; S.length()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (S.equals(T)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[][] sum = <span class="keyword">new</span> <span class="keyword">int</span>[S.length()][T.length()];</div><div class="line">	<span class="keyword">if</span> (S.charAt(<span class="number">0</span>) == T.charAt(<span class="number">0</span>)) &#123;</div><div class="line">		sum[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S.length(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (S.charAt(i) == T.charAt(<span class="number">0</span>)) &#123;</div><div class="line">			sum[i][<span class="number">0</span>] = <span class="number">1</span> + sum[i - <span class="number">1</span>][<span class="number">0</span>];</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sum[i][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S.length(); i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i &amp;&amp; j &lt; T.length(); j++) &#123;</div><div class="line">			<span class="keyword">if</span> (S.charAt(i) == T.charAt(j)) &#123;</div><div class="line">				sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sum[i][j] = sum[i - <span class="number">1</span>][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sum[S.length() - <span class="number">1</span>][T.length() - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 16. Populating Next Right Pointers in Each Node II]]></title>
      <url>http://yoursite.com/2013/09/16/2013-09-16-CODE%2016%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for problem “Populating Next Right Pointers in Each Node”.<br>What if the given tree could be any binary tree? Would your previous solution still work?<br>Note:</p>
<ul>
<li>You may only use constant extra space.</li>
</ul>
<p>For example,<br>Given the following binary tree,</p>
<pre><code>     1
   /  \
  2    3
 / \    \
4   5    7
</code></pre><p>After calling your function, the tree should look like:</p>
<pre><code>     1 -&gt; NULL
   /  \
  2 -&gt; 3 -&gt; NULL
 / \    \
4-&gt; 5 -&gt; 7 -&gt; NULL
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	bfs(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line">	Queue&lt;TreeLinkNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeLinkNode&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> queueNumber = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layerNumber = <span class="number">0</span>;</div><div class="line">	TreeLinkNode tempNode = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		tempNode = queue.poll();</div><div class="line">		queueNumber--;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != tempNode.left) &#123;</div><div class="line">			queue.offer(tempNode.left);</div><div class="line">			layerNumber++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != tempNode.right) &#123;</div><div class="line">			queue.offer(tempNode.right);</div><div class="line">			layerNumber++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (queueNumber != <span class="number">0</span>) &#123;</div><div class="line">			tempNode.next = queue.peek();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			tempNode.next = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (queueNumber == <span class="number">0</span> &amp;&amp; layerNumber != <span class="number">0</span>) &#123;</div><div class="line">			queueNumber = layerNumber;</div><div class="line">			layerNumber = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 17. Populating Next Right Pointers in Each Node]]></title>
      <url>http://yoursite.com/2013/09/16/2013-09-16-CODE%2017%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node/</url>
      <content type="html"><![CDATA[<p>Given a binary tree<br>        struct TreeLinkNode {<br>          TreeLinkNode <em>left;<br>          TreeLinkNode </em>right;<br>          TreeLinkNode *next;<br>        }</p>
<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.<br>Initially, all next pointers are set to <code>NULL</code>.<br>Note:</p>
<ul>
<li>You may only use constant extra space.</li>
<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>
</ul>
<p>For example,<br>Given the following perfect binary tree,</p>
<pre><code>     1
   /  \
  2    3
 / \  / \
4  5  6  7
</code></pre><p>After calling your function, the tree should look like:</p>
<pre><code>     1 -&gt; NULL
   /  \
  2 -&gt; 3 -&gt; NULL
 / \  / \
4-&gt;5-&gt;6-&gt;7 -&gt; NULL
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	bfs(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeLinkNode root)</span> </span>&#123;</div><div class="line">	Queue&lt;TreeLinkNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeLinkNode&gt;();</div><div class="line">	queue.offer(root);</div><div class="line">	<span class="keyword">int</span> queueNumber = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layerNumber = <span class="number">0</span>;</div><div class="line">	TreeLinkNode tempNode = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		tempNode = queue.poll();</div><div class="line">		queueNumber--;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != tempNode.left) &#123;</div><div class="line">			queue.offer(tempNode.left);</div><div class="line">			layerNumber++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != tempNode.right) &#123;</div><div class="line">			queue.offer(tempNode.right);</div><div class="line">			layerNumber++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (queueNumber != <span class="number">0</span>) &#123;</div><div class="line">			tempNode.next = queue.peek();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			tempNode.next = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (queueNumber == <span class="number">0</span> &amp;&amp; layerNumber != <span class="number">0</span>) &#123;</div><div class="line">			queueNumber = layerNumber;</div><div class="line">			layerNumber = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 15. Pascal's Triangle]]></title>
      <url>http://yoursite.com/2013/09/16/2013-09-16-CODE%2015%20Pascal's%20Triangle/</url>
      <content type="html"><![CDATA[<p>Given numRows, generate the first numRows of Pascal’s triangle.<br>For example, given numRows = 5,<br>Return<br>    [<br>         [1],<br>        [1,1],<br>       [1,2,1],<br>      [1,3,3,1],<br>     [1,4,6,4,1]<br>    ]<br>My Code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (numRows &lt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; pascalsTriangle = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">	ArrayList&lt;Integer&gt; layer = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	layer.add(<span class="number">1</span>);</div><div class="line">	pascalsTriangle.add(layer);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numRows; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; layeri = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		ArrayList&lt;Integer&gt; layerj = pascalsTriangle.get(i - <span class="number">1</span>);</div><div class="line">		layeri.add(<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (j == i) &#123;</div><div class="line">				layeri.add(<span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				layeri.add(layerj.get(j) + layerj.get(j - <span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		pascalsTriangle.add(layeri);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> pascalsTriangle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 9. Binary Tree Maximum Path Sum]]></title>
      <url>http://yoursite.com/2013/09/16/2013-09-16-CODE%209%20Binary%20Tree%20Maximum%20Path%20Sum/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find the maximum path sum.<br>The path may start and end at any node in the tree.<br>For example:<br>Given the below binary tree,<br>           1<br>          / \<br>         2   3</p>
<p>Return <code>6</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> max;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root.left &amp;&amp; <span class="keyword">null</span> == root.right) &#123;</div><div class="line">		<span class="keyword">return</span> root.val;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.max = Integer.MIN_VALUE;</div><div class="line">	calcMax(root);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.max;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcMax</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root.left &amp;&amp; <span class="keyword">null</span> == root.right) &#123;</div><div class="line">		<span class="keyword">this</span>.max = <span class="keyword">this</span>.max &gt; root.val ? <span class="keyword">this</span>.max : root.val;</div><div class="line">		<span class="keyword">return</span> root.val;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> right = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != root.left) &#123;</div><div class="line">		left = calcMax(root.left);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != root.right) &#123;</div><div class="line">		right = calcMax(root.right);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> tmpMax = left + right + root.val &gt; root.val ? left + right</div><div class="line">			+ root.val : root.val;</div><div class="line">	<span class="keyword">int</span> tmpLRMax = right + root.val &gt; left + root.val ? right + root.val</div><div class="line">			: left + root.val;</div><div class="line">	tmpMax = tmpMax &gt; tmpLRMax ? tmpMax : tmpLRMax;</div><div class="line">	<span class="keyword">this</span>.max = <span class="keyword">this</span>.max &gt; tmpMax ? <span class="keyword">this</span>.max : tmpMax;</div><div class="line">	<span class="keyword">return</span> tmpLRMax &gt; root.val ? tmpLRMax : root.val;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 2. Palindrome Partitioning]]></title>
      <url>http://yoursite.com/2013/09/16/2013-09-16-CODE%202%20Palindrome%20Partitioning/</url>
      <content type="html"><![CDATA[<p>Given a string s, partition s such that every substring of the partition is a palindrome.<br>Return all possible palindrome partitioning of s.<br>For example, given s = <code>&quot;aab&quot;</code>,<br>Return<br>      [<br>        [“aa”,”b”],<br>        [“a”,”a”,”b”]<br>      ]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; partition(String s) &#123;</div><div class="line">	<span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">	<span class="keyword">boolean</span>[][] isPalindromes = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</div><div class="line">	<span class="keyword">int</span>[] pa = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">		isPalindromes[i][i] = <span class="keyword">true</span>;</div><div class="line">		pa[i] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		isPalindromes[i][i + <span class="number">1</span>] = s.charAt(i) == s.charAt(i + <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; s.length(); j++)</div><div class="line">			isPalindromes[i][j] = (s.charAt(i) == s.charAt(j))</div><div class="line">					&amp;&amp; isPalindromes[i + <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> getPalindromes(s, isPalindromes, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; getPalindromes(String s,</div><div class="line">		<span class="keyword">boolean</span>[][] isPalindromes, <span class="keyword">int</span> start) &#123;</div><div class="line">	ArrayList&lt;ArrayList&lt;String&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">	<span class="keyword">if</span> (start &gt; s.length() - <span class="number">1</span>) &#123;</div><div class="line">		results.add(<span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">		<span class="keyword">return</span> results;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (isPalindromes[start][i]) &#123;</div><div class="line">			<span class="keyword">for</span> (ArrayList&lt;String&gt; subPa : getPalindromes(s, isPalindromes,</div><div class="line">					i + <span class="number">1</span>)) &#123;</div><div class="line">				subPa.add(<span class="number">0</span>, s.substring(start, i + <span class="number">1</span>));</div><div class="line">				results.add(subPa);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 14. Pascal's Triangle II]]></title>
      <url>http://yoursite.com/2013/09/15/2013-09-15-CODE%2014%20Pascal's%20Triangle%20II/</url>
      <content type="html"><![CDATA[<p>Given an index k,<br> return the kth row<br> of the Pascal’s triangle.<br>For example, given k =<br> 3,<br>Return <code>[1,3,3,1]</code>.<br>Note:<br>Could you optimize your algorithm to use only O(k)<br> extra space?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	ArrayList&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	row.add(<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; tmpRow = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		tmpRow.add(<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (j == i) &#123;</div><div class="line">				tmpRow.add(<span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				tmpRow.add(row.get(j) + row.get(j - <span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		row.clear();</div><div class="line">		row.addAll(tmpRow);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> row;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 13. Triangle]]></title>
      <url>http://yoursite.com/2013/09/15/2013-09-15-CODE%2013%20Triangle/</url>
      <content type="html"><![CDATA[<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.<br>For example, given the following triangle</p>
<pre><code>[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
</code></pre><p>The minimum path sum from top to bottom is <code>11</code> (i.e., 2 + 3 + 5 + 1 =<br> 11).<br>Note:<br>Bonus point if you are able to do this using only O(n)<br> extra space, where n is<br> the total number of rows in the triangle.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == triangle || <span class="number">0</span> == triangle.size()) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> layerNumer = triangle.size();</div><div class="line">	ArrayList&lt;Integer&gt; tmpLengths = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">	tmpLengths.add(triangle.get(<span class="number">0</span>).get(<span class="number">0</span>));</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; layerNumer; i++) &#123;</div><div class="line">		ArrayList&lt;Integer&gt; layer = triangle.get(i);</div><div class="line">		layer.set(<span class="number">0</span>, layer.get(<span class="number">0</span>) + tmpLengths.get(<span class="number">0</span>));</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; layer.size(); k++) &#123;</div><div class="line">			<span class="keyword">if</span> (k == layer.size() - <span class="number">1</span>) &#123;</div><div class="line">				layer.set(k, layer.get(k) + tmpLengths.get(k - <span class="number">1</span>));</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (tmpLengths.get(k) &gt; tmpLengths.get(k - <span class="number">1</span>)) &#123;</div><div class="line">					layer.set(k, tmpLengths.get(k - <span class="number">1</span>) + layer.get(k));</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					layer.set(k, tmpLengths.get(k) + layer.get(k));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		tmpLengths.clear();</div><div class="line">		tmpLengths.addAll(layer);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> min = tmpLengths.get(<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; layerNumer; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (tmpLengths.get(i) &lt; min) &#123;</div><div class="line">			min = tmpLengths.get(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> min;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 10. Best Time to Buy and Sell Stock III]]></title>
      <url>http://yoursite.com/2013/09/15/2013-09-15-CODE%2010%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20III/</url>
      <content type="html"><![CDATA[<p>Say you have an array for which the ith element<br> is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete at most two transactions.<br>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == prices || prices.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">		diff[i] = prices[i] - prices[i - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> maxFinal = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (diff[i] &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> max1 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> max2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">			tmp += diff[j];</div><div class="line">			<span class="keyword">if</span> (tmp &gt; max1) &#123;</div><div class="line">				max1 = tmp;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</div><div class="line">				tmp = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		tmp = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; diff.length; j++) &#123;</div><div class="line">			tmp += diff[j];</div><div class="line">			<span class="keyword">if</span> (tmp &gt; max2) &#123;</div><div class="line">				max2 = tmp;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</div><div class="line">				tmp = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (maxFinal &lt; max1 + max2) &#123;</div><div class="line">			maxFinal = max1 + max2;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> maxFinal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 11. Best Time to Buy and Sell Stock II]]></title>
      <url>http://yoursite.com/2013/09/15/2013-09-15-CODE%2011%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II/</url>
      <content type="html"><![CDATA[<p>Say you have an array for which the ith element<br> is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell<br> the stock before you buy again).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="comment">// Start typing your Java solution below</span></div><div class="line">		<span class="comment">// DO NOT write main() function</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == prices || prices.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</div><div class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			diff[i] = prices[i] - prices[i - <span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (diff[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">				max += diff[i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> max;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 12. Best Time to Buy and Sell Stock]]></title>
      <url>http://yoursite.com/2013/09/15/2013-09-15-CODE%2012%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/</url>
      <content type="html"><![CDATA[<p>Say you have an array for which the ith element<br> is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</div><div class="line">		<span class="comment">// Start typing your Java solution below</span></div><div class="line">		<span class="comment">// DO NOT write main() function</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == prices || prices.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> currentMin = prices[<span class="number">0</span>];</div><div class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (prices[i] &lt; currentMin) &#123;</div><div class="line">				currentMin = prices[i];</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">int</span> tmpMax = prices[i] - currentMin;</div><div class="line">			<span class="keyword">if</span> (tmpMax &gt; max) &#123;</div><div class="line">				max = tmpMax;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> max;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 8. Valid Palindrome]]></title>
      <url>http://yoursite.com/2013/09/12/2013-09-12-CODE%208%20Valid%20Palindrome/</url>
      <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.<br>For example,<br><code>&quot;A man, a plan, a canal: Panama&quot;</code>is a palindrome.<br><code>&quot;race a car&quot;</code>is<em>not</em>a palindrome.<br><strong>Note:</strong><br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == s) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (s.length() &lt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> j = s.length() - <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">		<span class="keyword">char</span> a = s.charAt(i);</div><div class="line">		<span class="keyword">char</span> b = s.charAt(j);</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="string">'0'</span> || (a &gt; <span class="string">'9'</span> &amp;&amp; a &lt; <span class="string">'A'</span>) || (a &gt; <span class="string">'Z'</span> &amp;&amp; a &lt; <span class="string">'a'</span>)</div><div class="line">				|| a &gt; <span class="string">'z'</span>) &#123;</div><div class="line">			i++;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (b &lt; <span class="string">'0'</span> || (b &gt; <span class="string">'9'</span> &amp;&amp; b &lt; <span class="string">'A'</span>) || (b &gt; <span class="string">'Z'</span> &amp;&amp; b &lt; <span class="string">'a'</span>)</div><div class="line">				|| b &gt; <span class="string">'z'</span>) &#123;</div><div class="line">			j--;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (a == b || ((a &lt; b) &amp;&amp; (a + <span class="number">32</span> == b))</div><div class="line">				|| ((a &gt; b) &amp;&amp; (a - <span class="number">32</span> == b))) &#123;</div><div class="line">			i++;</div><div class="line">			j--;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 7. Word Ladder]]></title>
      <url>http://yoursite.com/2013/09/12/2013-09-12-CODE%207%20Word%20Ladder/</url>
      <content type="html"><![CDATA[<p>Given two words (<em>start</em>and<em>end</em>), and a dictionary, find the length of shortest transformation sequence from<em>start</em>to<em>end</em>, such that:</p>
<ol>
<li>Only one letter can be changed at a time </li>
<li>Each intermediate word must exist in the dictionary</li>
</ol>
<p>For example,<br>Given:<br><em>start</em>=<code>&quot;hit&quot;</code><br><em>end</em>=<code>&quot;cog&quot;</code><br><em>dict</em>=<code>[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</code><br>As one shortest transformation is<code>&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;</code>,<br>return its length<code>5</code>.<br><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence. </li>
<li>All words have the same length. </li>
<li>All words contain only lowercase alphabetic characters.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String start, String end, HashSet&lt;String&gt; dict)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (start.equals(end)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	Queue&lt;String&gt; que = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">	que.offer(end);</div><div class="line">	dict.add(start);</div><div class="line">	<span class="keyword">int</span> time = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> layer = que.size();</div><div class="line">	<span class="keyword">while</span> (!que.isEmpty()) &#123;</div><div class="line">		String now = que.poll();</div><div class="line">		layer--;</div><div class="line">		<span class="keyword">if</span> (now.equals(start)) &#123;</div><div class="line">			<span class="keyword">return</span> time;</div><div class="line">		&#125;</div><div class="line">		isInDic(dict, now, que);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (layer == <span class="number">0</span> &amp;&amp; !que.isEmpty()) &#123;</div><div class="line">			layer = que.size();</div><div class="line">			time++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isInDic</span><span class="params">(HashSet&lt;String&gt; dict, String word, Queue&lt;String&gt; que)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(word);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">			sb.setCharAt(i, c);</div><div class="line">			String t = sb.toString();</div><div class="line">			<span class="keyword">if</span> (dict.contains(t)) &#123;</div><div class="line">				dict.remove(t);</div><div class="line">				que.offer(t);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Konw Something:</p>
<ol>
<li>StringBuilder has a method named setCharAt(int arg0,char arg1).</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 5. Longest Consecutive Sequence]]></title>
      <url>http://yoursite.com/2013/09/10/2013-09-10-CODE%205%20Longest%20Consecutive%20Sequence/</url>
      <content type="html"><![CDATA[<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.<br>For example,<br>Given<code>[100, 4, 200, 1, 3, 2]</code>,<br>The longest consecutive elements sequence is<code>[1, 2, 3, 4]</code>. Return its length:<code>4</code>.<br>Your algorithm should run in O(<em>n</em>) complexity.</p>
<p>My code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == num || num.length &lt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	Map&lt;Integer, Integer&gt; results = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">	Set&lt;Integer&gt; used = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (used.contains(num[i])) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			used.add(num[i]);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> left = num[i], right = num[i];</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (results.containsKey(left - <span class="number">1</span>)</div><div class="line">				&amp;&amp; results.get(left - <span class="number">1</span>) &lt;= left - <span class="number">1</span>) &#123;</div><div class="line">			left = results.get(left - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (results.containsKey(right + <span class="number">1</span>)</div><div class="line">				&amp;&amp; results.get(right + <span class="number">1</span>) &gt;= right + <span class="number">1</span>) &#123;</div><div class="line">			right = results.get(right + <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		results.put(left, right);</div><div class="line">		results.put(right, left);</div><div class="line"></div><div class="line">		max = max &gt; (right - left + <span class="number">1</span>) ? max : (right - left + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 4. Sum Root to Leaf Numbers]]></title>
      <url>http://yoursite.com/2013/09/09/2013-09-09-CODE%204%20Sum%20Root%20to%20Leaf%20Numbers/</url>
      <content type="html"><![CDATA[<p>Given a binary tree containing digits from<code>0-9</code>only, each root-to-leaf path could represent a number.<br>An example is the root-to-leaf path<code>1-&gt;2-&gt;3</code>which represents the number<code>123</code>.<br>Find the total sum of all root-to-leaf numbers.<br>For example,<br>        1<br>       / \<br>      2   3</p>
<p>The root-to-leaf path<code>1-&gt;2</code>represents the number<code>12</code>.<br>The root-to-leaf path<code>1-&gt;3</code>represents the number<code>13</code>.<br>Return the sum = 12 + 13 =<code>25</code>.</p>
<p>My Code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> sum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">	<span class="comment">// Start typing your Java solution below</span></div><div class="line">	<span class="comment">// DO NOT write main() function</span></div><div class="line">	<span class="keyword">this</span>.sum = <span class="number">0</span>;</div><div class="line">	dfs(root, <span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == root.left &amp;&amp; <span class="keyword">null</span> == root.right) &#123;</div><div class="line">		<span class="keyword">this</span>.sum += root.val + val * <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != root.left) &#123;</div><div class="line">		dfs(root.left, val * <span class="number">10</span> + root.val);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != root.right) &#123;</div><div class="line">		dfs(root.right, val * <span class="number">10</span> + root.val);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 3. Surrounded Regions]]></title>
      <url>http://yoursite.com/2013/09/09/2013-09-09-CODE%203%20Surrounded%20Regions/</url>
      <content type="html"><![CDATA[<p>Given a 2D board containing<code>&#39;X&#39;</code>and<code>&#39;O&#39;</code>, capture all regions surrounded by<code>&#39;X&#39;</code>.<br>A region is captured by flipping all<code>&#39;O&#39;</code>s into<code>&#39;X&#39;</code>s in that surrounded region .<br>For example,<br>    X X X X<br>    X O O X<br>    X X O X<br>    X O X X</p>
<p>After running your function, the board should be:<br>    X X X X<br>    X X X X<br>    X X X X<br>    X O X X<br>我的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == board || board.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> m = board.length;</div><div class="line">	<span class="keyword">int</span> n = board[<span class="number">0</span>].length;</div><div class="line">	Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(i * m);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (board[i][n - <span class="number">1</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(i * m + n - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</div><div class="line">		<span class="keyword">if</span> (board[<span class="number">0</span>][j] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(j);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (board[m - <span class="number">1</span>][j] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer((m - <span class="number">1</span>) * m + j);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> all = queue.poll();</div><div class="line">		<span class="keyword">int</span> x = all / m;</div><div class="line">		<span class="keyword">int</span> y = all % m;</div><div class="line">		board[x][y] = <span class="string">'L'</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = -<span class="number">1</span>; i &lt;= <span class="number">1</span>; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = -<span class="number">1</span>; j &lt;= <span class="number">1</span>; j++) &#123;</div><div class="line">				<span class="keyword">if</span> (x + i &lt; <span class="number">0</span> || x + i &gt; m - <span class="number">1</span> || y + j &lt; <span class="number">0</span></div><div class="line">						|| y + j &gt; n - <span class="number">1</span> || (Math.abs(i + j) != <span class="number">1</span>)) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">int</span> tmpAll = (x + i) * m + y + j;</div><div class="line">				<span class="keyword">if</span> (board[x + i][y + j] == <span class="string">'O'</span>) &#123;</div><div class="line">					queue.offer(tmpAll);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">			board[i][j] = board[i][j] == <span class="string">'L'</span> ? <span class="string">'O'</span> : <span class="string">'X'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要思考如下：</p>
<ol>
<li>这道题首先使用了dfs完成，但这种方法使用了递归所以没有通过大数据集中大数据的测试；</li>
<li>然后使用了bfs完成，但是同样的判断语句出现了很多次，也会导致运行时间过长，具体的问题代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> == board || board.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> m = board.length;</div><div class="line">	<span class="keyword">int</span> n = board[<span class="number">0</span>].length;</div><div class="line">	Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(i * m);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (board[i][n - <span class="number">1</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(i * m + n - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</div><div class="line">		<span class="keyword">if</span> (board[<span class="number">0</span>][j] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(j);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (board[m - <span class="number">1</span>][j] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer((m - <span class="number">1</span>) * m + j);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> all = queue.poll();</div><div class="line">		<span class="keyword">int</span> x = all / m;</div><div class="line">		<span class="keyword">int</span> y = all % m;</div><div class="line">		board[x][y] = <span class="string">'L'</span>;</div><div class="line">		<span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; board[x - <span class="number">1</span>][y] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer((x - <span class="number">1</span>) * m + y);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (x &lt; m - <span class="number">1</span> &amp;&amp; board[x + <span class="number">1</span>][y] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer((x + <span class="number">1</span>) * m + y);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; board[x][y - <span class="number">1</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(x * m + y - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (y &lt; n - <span class="number">1</span> &amp;&amp; board[x][y + <span class="number">1</span>] == <span class="string">'O'</span>) &#123;</div><div class="line">			queue.offer(x * m + y + <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">			board[i][j] = board[i][j] == <span class="string">'L'</span> ? <span class="string">'O'</span> : <span class="string">'X'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体是在while循环中有过多的if判断，这样导致运算次数多，若是将这些判断语句提到最前面则会减少运算次数；</p>
<ol>
<li>在leetcode上貌似直接使用dfs和bfs是不行了，必须改进，比如改为非递归或者剪枝等等。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CODE 1. Palindrome Partitioning II]]></title>
      <url>http://yoursite.com/2013/09/08/2013-09-08-CODE%201%20Palindrome%20Partitioning%20II/</url>
      <content type="html"><![CDATA[<p>Given a string<em>s</em>, partition<em>s</em>such that every substring of the partition is a palindrome.<br>Return the minimum cuts needed for a palindrome partitioning of<em>s</em>.<br>For example, given<em>s</em>=<code>&quot;aab&quot;</code>,<br>Return<code>1</code>since the palindrome partitioning<code>[&quot;aa&quot;,&quot;b&quot;]</code>could be produced using 1 cut.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用动态规划计算任意两点间是否为回文</div><div class="line"> * <span class="doctag">@param</span> s 字符串</div><div class="line"> * <span class="doctag">@return</span>  最小Cut次数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">boolean</span>[][] isPalindromes = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()]; <span class="comment">// 表示任意两点之间的字符串是否为回文</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">		isPalindromes[i][i] = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		isPalindromes[i][i + <span class="number">1</span>] = s.charAt(i) == s.charAt(i + <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; s.length(); j++)</div><div class="line">			isPalindromes[i][j] = (s.charAt(i) == s.charAt(j)) &amp;&amp; isPalindromes[i + <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> getMinCut(s, isPalindromes);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用动态规划计算最小Cut次数</div><div class="line"> * <span class="doctag">@param</span> s 字符串</div><div class="line"> * <span class="doctag">@param</span> isPalindromes 表示任意两点之间的字符串是否为回文</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMinCut</span><span class="params">(String s, <span class="keyword">boolean</span>[][] isPalindromes)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span>[] cuts = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (isPalindromes[i][s.length() - <span class="number">1</span>]) &#123;</div><div class="line">			cuts[i] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = s.length() - <span class="number">2</span>; j &gt;= i; j--) &#123;</div><div class="line">			<span class="keyword">if</span> (isPalindromes[i][j]) &#123;</div><div class="line">				<span class="keyword">int</span> tmp = <span class="number">1</span> + cuts[j + <span class="number">1</span>];</div><div class="line">				min = min &gt; tmp ? tmp : min;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		cuts[i] = min;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cuts[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux软件包管理（上）]]></title>
      <url>http://yoursite.com/2012/09/26/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1.二进制软件包管理（RPM，YUM）</p>
<p>RPM软件包的一个例子：sudo-1.7.21pl-5.el5.i386.rpm</p>
<p>其中包括软件名（sudo），版本号（1.7.2pl），发行号（5.el5），硬件平台（i386）</p>
<p>（1）卸载</p>
<p>rpm -e sudo，注意：如果其他软件包有依赖关系，卸载时会产生提示信息，可使用–nodeps强行卸载</p>
<p>（2）安装</p>
<p>rom -ivh sudo-1.7.2pl-5.el5.i386.rpm</p>
<p>挂载光盘：mkdir /mnt/cdrom; mount /dev/cdrom /mnt/cdrom</p>
<p>查询：rpm -q sudo; rpm -qa | grep samba</p>
<p>其他指令：</p>
<p>–excludedocs，不安装软件包的文档文件</p>
<p>–test，只对安装进行测试，并不实际安装</p>
<p>A.如果已经被安装，如果覆盖安装，可以再命令行上使用–replacepkgs选项</p>
<p>B.文件冲突，若想要RPM忽略该错误信息，请使用–replacefiles命令行选项</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux引导流程解析03]]></title>
      <url>http://yoursite.com/2012/09/24/Linux%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%9003/</url>
      <content type="html"><![CDATA[<p>1.GRUB配置与应用</p>
<p>GRUB的配置文件默认为 /boot/grub/grub.conf</p>
<p>软链接：ls -l /etc/grub.conf</p>
<p>GRUB配置：<strong><span style="color: #000000;">defaulf</span></strong>定义缺省启动系统</p>
<p><strong><span style="color: #000000;">                         timeout</span></strong>定义缺省等待时间</p>
<p><strong><span style="color: #000000;">                         splashimage</span></strong>定义GRUB界面图片，(hd0,0)，hd表示硬盘，0表示第一个，逗号后表示第几个分区</p>
<p><strong><span style="color: #000000;">                         hiddenmenu</span></strong>隐藏菜单</p>
<p><strong>                         title</strong>定义菜单项名称</p>
<p><strong><span style="color: #000000;">                         root</span></strong>设置GRUB的根设备及内核所在的分区</p>
<p><strong><span style="color: #000000;">                         kernel</span></strong>定义内核文件所在位置</p>
<p><strong>                         initrd</strong>命令加载镜像文件</p>
<p>功能键：</p>
<p><strong><span style="color: #000000;">              e：</span></strong>编辑当前的启动菜单项</p>
<p><strong><span style="color: #000000;">              c：</span></strong>进入GRUB的命令行方式</p>
<p><strong><span style="color: #000000;">              b：</span></strong>其中当前的菜单项</p>
<p><strong>              d：</strong>删除当前行</p>
<p><strong><span style="color: #000000;">              Esc：</span></strong>返回GRUB启动菜单界面，取消对当前菜单项所做的任何修改</p>
<p>案例：</p>
<p>1）root密码忘记，计入单用户模式重新设置root密码，方法如下：开机进入GRUB界面，按e进入编辑行模式，选中kernel行，再次按e键，在新的界面的最后一行输入1或s，然后按b键即可进入单用户模式。</p>
<p>2）设置GRUB密码，使用GRUB自带的grub-md5-crypt，编辑GRUB配置文件，加入下行：password –md5 <strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>3）GRUB修复，当开机后进入GRUB界面，但没有菜单，只剩下一个grub&gt;提示符，解决办法：不写了</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux引导流程解析02]]></title>
      <url>http://yoursite.com/2012/09/19/Linux%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%9002/</url>
      <content type="html"><![CDATA[<p>1. 查看排除#的行，grep -v(排除匹配) “^#” /etc/inittab | more</p>
<p>2.man inittab，inittab文件剖析，在inittab中，所有条目采取以下格式：</p>
<p><span style="color: #000000;"> <strong>   id：runlevels：action：process</strong></span></p>
<p><span style="color: #000000;">    <strong>id：</strong>标识符，一般为两位数字或字母</span></p>
<p><span style="color: #000000;">    <strong>runlevels：</strong>指定运行级别，可以指定多个</span></p>
<p><span style="color: #000000;">   <strong>action：</strong>指定运行状态</span></p>
<p><span style="color: #000000;">   <strong>process：</strong>指定要运行的脚本/命令</span></p>
<p>3. action常用常用取值：</p>
<p><span style="color: #000000;"><strong>    initdefault：</strong>指定系统缺省启动的运行级别</span></p>
<p><span style="color: #000000;"><strong>    sysinit：</strong>系统启动执行process中指定的命令</span></p>
<p><span style="color: #000000;"><strong>    wait：</strong>执行process中指定的命令，并等其结束在运行其他命令</span></p>
<p><span style="color: #000000;"><strong>    once：</strong>执行process中指定的命令，不等待其结束</span></p>
<p><span style="color: #000000;"><strong>    ctrlaltdel：</strong>按下Ctrl+Alt+Del时执行process指定的命令</span></p>
<p>4.设置自启动程序</p>
<p><span style="color: #000000;"><strong>    ln -s </strong></span> 生成软链接</p>
<p><strong><span style="color: #000000;">    chkconfig ：</span></strong>chkconfig –levels 2345 mysqld on；chkconfig –list mysqld</p>
<p><strong><span style="color: #000000;">    ntsysv：</span></strong>ntsysv –level 3</p>
<p>5. dmesg：dmesg | grep eth0</p>
<p>6.日志存放路径：/var/log；常用的是messages</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux引导流程解析01]]></title>
      <url>http://yoursite.com/2012/09/18/Linux%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%9001/</url>
      <content type="html"><![CDATA[<p>固件firmware（CMOS/BIOS）   -&gt;  POST加电自检</p>
<p>自举程序BootLoader（GRUB） -&gt;  载入内核</p>
<p>载入内核Kernel                                -&gt;  驱动硬件</p>
<p>启动进程init</p>
<p>读取执行配置文件/ect/inittab</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文本编辑器Vim]]></title>
      <url>http://yoursite.com/2012/09/12/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8Vim/</url>
      <content type="html"><![CDATA[<p>Vim/Vi是一个功能强大的全屏幕文本编辑器，是Linux/UNIX上最常用的文本编辑器，它的作用是建立、编辑、显示文本文件。<span style="color: #ff0000;"><strong>Vim/Vi没有菜单，只有命令。</strong></span></p>
<p>命令模式，插入模式，编辑模式</p>
<p>插入命令</p>
<div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="92"><br><br>命令<br><br></td><br><td width="198"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="92"><br><br>a<br><br></td><br><td width="198"><br><br>在光标后附加文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>A<br><br></td><br><td width="198"><br><br>在本行行末附加文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>i<br><br></td><br><td width="198"><br><br>在光标前插入文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>I<br><br></td><br><td width="198"><br><br>在本行开始插入文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>o<br><br></td><br><td width="198"><br><br>在光标下插入新行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>O<br><br></td><br><td width="198"><br><br>在光标上插入新行<br><br></td><br></tr><br></tbody><br></table><br></div>

<p>定位命令</p>
<div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="92"><br><br>命令<br><br></td><br><td width="198"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="92"><br><br>h、方向左键<br><br></td><br><td width="198"><br><br>在光标后附加文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>j、方向下键<br><br></td><br><td width="198"><br><br>在本行行末附加文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>k、方向上键<br><br></td><br><td width="198"><br><br>在光标前插入文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>l、方向右键<br><br></td><br><td width="198"><br><br>在本行开始插入文本<br><br></td><br></tr><br><tr><br><td width="92"><br><br>$<br><br></td><br><td width="198"><br><br>移至行尾<br><br></td><br></tr><br><tr><br><td width="92"><br><br>0<br><br></td><br><td width="198"><br><br>移至行首<br><br></td><br></tr><br><tr><br><td width="92"><br><br>H<br><br></td><br><td width="198"><br><br>移至屏幕上端<br><br></td><br></tr><br><tr><br><td width="92"><br><br>M<br><br></td><br><td width="198"><br><br>移至屏幕中央<br><br></td><br></tr><br><tr><br><td width="92"><br><br>L<br><br></td><br><td width="198"><br><br>移至屏幕下端<br><br></td><br></tr><br><tr><br><td width="92"><br><br>:set nu<br><br></td><br><td width="198"><br><br>设置行号<br><br></td><br></tr><br><tr><br><td width="92"><br><br>:set nonu<br><br></td><br><td width="198"><br><br>取消行号<br><br></td><br></tr><br><tr><br><td width="92"><br><br>gg/G<br><br></td><br><td width="198"><br><br>到第一行/最后一行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>nG<br><br></td><br><td width="198"><br><br>到第n行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>:m<br><br></td><br><td width="198"><br><br>到第n行<br><br></td><br></tr><br></tbody><br></table><br></div><br><div align="center"></div><br><div align="center"><br><br>删除命令<br><br><div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="92"><br><br>命令<br><br></td><br><td width="211"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="92"><br><br>x<br><br></td><br><td width="211"><br><br>删除光标所在处字符<br><br></td><br></tr><br><tr><br><td width="92"><br><br>nx<br><br></td><br><td width="211"><br><br>删除光标所在处后n个字符<br><br></td><br></tr><br><tr><br><td width="92"><br><br>dd<br><br></td><br><td width="211"><br><br>删除光标所在行，ndd删除n行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>dG<br><br></td><br><td width="211"><br><br>删除光标所在行到末尾的内容<br><br></td><br></tr><br><tr><br><td width="92"><br><br>D<br><br></td><br><td width="211"><br><br>删除从光标所在处到行尾<br><br></td><br></tr><br><tr><br><td width="92"><br><br>:n1,n2d<br><br></td><br><td width="211"><br><br>删除指定范围的行<br><br></td><br></tr><br></tbody><br></table><br></div><br><div align="center"></div><br><div align="center"><br><br>复制和剪切命令<br><br><div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="92"><br><br>命令<br><br></td><br><td width="211"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="92"><br><br>yy、Y<br><br></td><br><td width="211"><br><br>复制当前行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>nyy、nY<br><br></td><br><td width="211"><br><br>复制当前行一下n行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>dd<br><br></td><br><td width="211"><br><br>剪切当前行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>ndd<br><br></td><br><td width="211"><br><br>剪切当前行以下n行<br><br></td><br></tr><br><tr><br><td width="92"><br><br>p、P<br><br></td><br><td width="211"><br><br>粘贴在当前光标所在行下或行上<br><br></td><br></tr><br></tbody><br></table><br></div><br><div align="center"></div><br><div align="center"><br><br>替换和取消命令<br><br><div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="92"><br><br>命令<br><br></td><br><td width="211"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="92"><br><br>r<br><br></td><br><td width="211"><br><br>取代光标所在处字符<br><br></td><br></tr><br><tr><br><td width="92"><br><br>R<br><br></td><br><td width="211"><br><br>从光标所在处开始替换字符，按Esc结束<br><br></td><br></tr><br><tr><br><td width="92"><br><br>u<br><br></td><br><td width="211"><br><br>取消上一步操作<br><br></td><br></tr><br></tbody><br></table><br></div><br></div><br><div align="center"></div><br><div align="center"><br><br>搜索和替换命令<br><br><div align="center"><br><table border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td width="121"><br><br>命令<br><br></td><br><td width="345"><br><br>作用<br><br></td><br></tr><br><tr><br><td width="121"><br><br>/string<br><br></td><br><td width="345"><br><br>向前搜索指定字符串<br><br>搜索时忽略大小写:set ic<br><br></td><br></tr><br><tr><br><td width="121"><br><br>n<br><br></td><br><td width="345"><br><br>搜索指定字符串的下一个出现位置<br><br></td><br></tr><br><tr><br><td width="121"><br><br>:%s/old/new/g<br><br></td><br><td width="345"><br><br>取消上一步操作（/c可以替换/g，询问是否替换）<br><br></td><br></tr><br><tr><br><td width="121"><br><br>:n1,n2s/old/new/g<br><br></td><br><td width="345"><br><br>在一定范围内替换指定字符串<br><br></td><br></tr><br></tbody><br></table><br></div>

<p>应用实例：</p>
<p>导入文件    :r文件名</p>
<p>在Vi中执行命令    :!命令      <span style="color: #ff0000;">  :r !date，把当前时间导入当前文档</span></p>
<p>定义快捷键    :map  快捷键  触发命令；范例：:map ^p(ctrl+v和ctrl+v或者ctrl+v+p) I#&lt;ESC&gt;；:map  ^B 0x</p>
<p>连续航注视    :n1,n2s/^/#/g（^表示行首）; :n1,n2s/^#//g（去掉行首的#）; :n1,n2s/^/\/\//g（删除行首的//）</p>
<p>替换： ab（或者unab） sammail jammail</p>
<p>vi的配置文件，在每个用户的宿主目录下，及~，~/.vimrc</p>
<p></p></div><br></div><br></div><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令04]]></title>
      <url>http://yoursite.com/2012/09/07/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A404/</url>
      <content type="html"><![CDATA[<p>1.压缩解压命令：gzip，压缩文件。<span style="color: #ff0000;">只能压缩文件，不能压缩目录；不保留源文件。</span></p>
<p>gunzip，gzip -d，解压缩文件</p>
<p>2.压缩解压命令：tar，打包目录，tar -[cvfzx] 目录名。</p>
<p>1）-c，产生.tar打包文件</p>
<p>2）-v，显示详细信息</p>
<p>3）-f，指定压缩后的文件名</p>
<p>4）-z，打包同时压缩/解压缩</p>
<p>5）-x，解包.tar文件</p>
<p>3.压缩解压缩命令：zip，压缩文件或目录，默认win和Linux格式。zip 选项[-r] [压缩后文件名] [文件或目录]</p>
<p>4.压缩解压缩命令：bzip2，压缩文件。bzip2 选项[-k] [文件]，-k产生压缩文件后保留原文件。解压缩，bunzip2 选项[-k] [压缩文件]</p>
<p>5.网络通信命令：write，向另外一个用户发送信息，以Ctrl+D为结束。write &lt;用户名&gt;</p>
<p>6.网络通信命令：wall，向所有用户广播信息。wall [message] [文件名]</p>
<p>7.网络通信命令：ping，测试网络连通性</p>
<p>8.网络通信命令：ifconfig，查看网络设置信息。ifconfig 选项 [-a] [网卡设备标识]</p>
<p>9.系统关机命令：shutdown， 关机。shutdown -h now，马上关机</p>
<p>10.系统关机命令：reboot，重启</p>
<p>11.Shell技巧：命令补齐，<span style="color: #ff0000;">&lt;tab&gt;</span></p>
<p>12.Shell技巧：命令历史，history，<span style="color: #ff0000;">上下方向键</span>；清屏，<span style="color: #ff0000;">ctrl+l</span>；删除前面输入的内容，<span style="color: #ff0000;">ctrl+u</span></p>
<p>13.Shell技巧：命令别名，alias，unalias</p>
<p>14.Shell技巧：输入输出重定向，同标准I/O一样，Shell对于每一进程预先定义3个文件描述字（0,1,2）。分别对应于：</p>
<p><span style="color: #ff0000;">     0（STDIN）标准输入，1（STDOUT）标准输出，2（STDERR）标准错误输出</span></p>
<p><span style="color: #ff0000;">     <span style="color: #000000;">输出重定向：&gt;（覆盖），&gt;&gt;（追加）</span></span></p>
<p><span style="color: #ff0000;">    <span style="color: #000000;"> 输入重定向：&lt;</span></span></p>
<p><span style="color: #000000;">    错误输入重定向：2&gt;</span></p>
<p>15.Shell技巧：管道：将一个命令的输出传送给另一个命令，作为另一个命令的输入</p>
<p>16.Shell技巧：命令替换符，<code>`，将一个命令的输出作为另一个命令的参数， ls -l</code>which touch`</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令03]]></title>
      <url>http://yoursite.com/2012/09/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A403/</url>
      <content type="html"><![CDATA[<p>1.文件搜索命令：which，<span style="color: #ff0000;">显示<strong>系统命令</strong>所在目录，包括别名记录</span></p>
<p><span>                                  whereis，显示<strong>系统命令</strong>所在目录，包括帮助文档所在地</span></p>
<p>2.文件搜索命令：find，<span style="color: #ff0000;">查找文件或目录，find [搜索路径]  [搜索关键字]</span></p>
<p>1)-name，根据文件名查找，例如：find /etc -name init；通配符，* 任意字符，？单个字符</p>
<p>2)-size，根据size查找文件，例如： find / -size +204800，查找大于100MB的文件</p>
<p>3)-user，根据所有者查找文件，例如：find /home -user XXX</p>
<p>4)-ctime/atime/mtime，以天为单位查找，c-change（属性修改），a-access，m-modify（内容修改）</p>
<p>5)-cmin/amin/mmin，以分钟为单位查找，-之内，+超过，例如：find /etc -mmin -120</p>
<p>6)连接符 -a and，-o or，例如：find /etc -size +163840 -a -size -204800</p>
<p>7)-type，文件类型，f 二进制文件，l软链接文件，d目录，例如：find /etc -name init* -a -type -d</p>
<p>8)连接符，find …… -exec （-ok(询问确认)）命令 {}\;</p>
<p><span>                     {}表示find的查询结果，\为转义符，是一些符合和命令使用本身含义，例如：\rm testfile，;结束</span></p>
<p><span>                     例如：find /etc -name inittab -exec ls -l {} \;</span></p>
<p>9)<span style="color: #ff0000;">文件-abc创建，touch – -abc， 文件a b创建：touch “a b”，这样的文件很难删除，可以通过i节点查找并删除，例如：find . -inum 16 -exec rm {} \;</span></p>
<p>3.文件搜索命令：locate，用来查找文件或目录，locate [搜索关键字]，会存在找不到的现象，因为locate根据系统安装和更新的数据库中查找，如果心文件没有录入数据库中时，则查询不到</p>
<p>4.文件搜索命令：updatedb，建立整个系统目录文件的数据库</p>
<p>5.文件搜索命令：grep，<span style="color: #ff0000;">在文件中搜寻字串匹配的行并输出，grep [制定字串] [源文件]，例如：grep ftp /etc/services</span></p>
<p>6.帮助命令：man</p>
<p>7.帮助命令：info</p>
<p>8.帮助命令：whatis/–help/apropos(查看配置文件信息，相当于man-k)/makewhatis(建立whatis搜索使用的数据库)</p>
<p>9.帮助命令：help，查看 shell内置命令的帮助，例如：help cd</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令02]]></title>
      <url>http://yoursite.com/2012/09/05/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A402/</url>
      <content type="html"><![CDATA[<p>1. 文件处理命令</p>
<p>命令名称：cat 显示文件内容</p>
<p>命令名称：more 分页显示文件内容；（空格）或f显示下一页，（Enter）显示下一行，q或Q退出</p>
<p>命令名称：head 查看文件的前几行；head -num [文件名]</p>
<p>命令名称：tail 查看文件的后几行；tail -num [文件名]，-f 动态显示文件内容</p>
<p>命令名称：ln 产生链接文件；ln -s（软连接） [源文件] [目标文件]</p>
<p><span>                            <span style="color: #ff0000;">软链接：lrwxrwxrwx –&gt;，文件很小，类似于window里的快捷方式</span></span></p>
<p><span style="color: #ff0000;">                            硬链接：与原文件的属性完全相同，具有相同的i节点，类似于拷贝，但不同，为<strong><span style="text-decoration: underline;">同步更新</span></strong>，cp -p 不改变时间值，<br></span><span style="color: #ff0000;">                            硬链接不能跨文件系统</span></p>
<p>2. 权限管理命令：chmod</p>
<p><span style="color: #ff0000;">     语法：chmod [{ugo}{+-=}{rwx}] [文件或目录]</span></p>
<p><span style="color: #ff0000;">                                 [mode=421</span><span style="color: #ff0000;">] [文件或目录]</span></p>
<p><span style="color: #ff0000;">注意：</span></p>
<p><table border="1" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<td colspan="4" width="568">

<p>文件目录权限总结</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="142">

<p>代表字符</p>
<p></p></td><p></p>
<td width="142">

<p>权限</p>
<p></p></td><p></p>
<td width="142">

<p>对文件的含义</p>
<p></p></td><p></p>
<td width="142">

<p>对目录的含义</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="142">

<p>r</p>
<p></p></td><p></p>
<td width="142">

<p>读权限</p>
<p></p></td><p></p>
<td width="142">

<p>可以查看文件内容</p>
<p></p></td><p></p>
<p><td width="142">可以列出目录中的内容</td><br></p>
<p><tr></tr></p>
<td width="142">

<p>w</p>
<p></p></td><p></p>
<td width="142">

<p>写权限</p>
<p></p></td><p></p>
<td width="142">

<p>可以修改文件内容</p>
<p></p></td><p></p>
<p><td width="142">可以在目录中创建、删除文件</td><br></p>
<p><tr></tr></p>
<td width="142">

<p>x</p>
<p></p></td><p></p>
<td width="142">

<p>执行权限</p>
<p></p></td><p></p>
<td width="142">

<p>可以执行文件</p>
<p></p></td><p></p>
<p><td width="142">可以进入目录</td><br><br><br><br>权限管理命令：chown 改变文件或目录的所有者，chown [用户] [文件或目录]</p>
<p>权限管理命令：chgrp 改变文件或目录的所属组，chgrp [组名] [文件或目录]</p>
<p>权限管理命令：umark 显示、设置文件的缺省权限，umark或umark -S，<span style="color: #ff0000;">Linux权限规则：缺省创建的文件不能授予可执行x权限</span></p>
<p><span style="color: #ff0000;">                              不建议更改，更改的话为umark加权限的掩码，例如 umark 022（755）</span></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序总结]]></title>
      <url>http://yoursite.com/2012/09/05/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>排序算法有多种，总是容易混淆，在此总结一下。</p>
<p>Input: sequence of &lt;a1 a2 … an&gt;</p>
<p>Output: premutation of &lt;a1<code>a2</code> …an`&gt;</p>
<ul>
<li><strong>插入排序(Insertion Sort)</strong><br><strong>基本思想：逐个遍历数组中的每一个位置i，保证位置i之前的序列是sorted。原地排序。</strong></li>
</ul>
<p><strong>伪代码：</strong></p>
<p><span style="color: #ff6600;"><strong>InsertionSort(A[])</strong></span></p>
<p><span style="color: #ff6600;"><strong>for j &lt;- 2 to n</strong></span></p>
<p><span style="color: #ff6600;"><strong>do key &lt;- A[j]</strong></span></p>
<p><span style="color: #ff6600;"><strong>i &lt;- j-1</strong></span></p>
<p><span style="color: #ff6600;"><strong>while i&gt;0 and A[i]&gt;key</strong></span></p>
<p><span style="color: #ff6600;"><strong>do A[i+1]&lt;-A[i]</strong></span></p>
<p><span style="color: #ff6600;"><strong>i&lt;-i-1</strong></span></p>
<p><span style="color: #ff6600;"><strong>A[i+1]&lt;-key</strong></span></p>
<p>8 <span style="color: #ff0000;">2</span> 4 9 3 6</p>
<p>2 8 <span style="color: #ff0000;">4</span> 9 3 6</p>
<p>2 4 8 <span style="color: #ff0000;">9</span> 3 6</p>
<p>2 4 8 9 <span style="color: #ff0000;">3</span> 6</p>
<p>2 3 4 8 9 <span style="color: #ff0000;">6</span></p>
<p><span style="color: #000000;">2 3 4 6 8 9</span></p>
<p><span style="color: #000000;">插入排序的时间复杂度取决于输入的规模和有序程度，规模越大、越无序，花费时间越长。这是一种原地排序，时间复杂度为o（n2）</span></p>
<ul>
<li><strong>合并排序（Merge Sort）</strong><br><strong>基本思想：基于分治思想。减小要解决问题的规模，递归地合并数组。归并排序非原地排序，用空间换时间，来降低时间复杂度。</strong></li>
</ul>
<p><strong>伪代码：</strong></p>
<p><span style="color: #ff9900;"><strong>MergeSort(A[])</strong></span></p>
<p><span style="color: #ff9900;"><strong>if n =1 ,done</strong></span></p>
<p><span style="color: #ff9900;"><strong>Recursively sort A[1,…n/2] and A[n/2+1,…n]</strong></span></p>
<p><span style="color: #ff9900;"><strong>Merge 2 sorted lists</strong></span></p>
<p><span style="color: #333333;">Merge 步骤的复杂度o(n),T(n) = 2T(n/2)+n，故归并排序的时间复杂度为o(nlgn),在大规模输入情况下，归并排序由于插入排序。</span></p>
<p>&nbsp;</p>
<ul>
<li><strong><span style="color: #333333;">快速排序（QuikSort）</span></strong><br><strong><span style="color: #333333;">基本思想：分治思想+原地排序。递归地划分数组。</span></strong></li>
</ul>
<p><strong><span style="color: #333333;">伪代码：</span></strong></p>
<p><span style="color: #333333;">                          <span style="color: #ff9900;">   </span></span><span style="color: #ff9900;"><strong>QuickSort(A,p,q)</strong></span></p>
<p><span style="color: #ff9900;"><strong>Partition (A,p,q)</strong></span></p>
<p><span style="color: #ff9900;"><strong>x &lt;- A[p]</strong></span></p>
<p><span style="color: #ff9900;"><strong>i &lt;- p</strong></span></p>
<p><span style="color: #ff9900;"><strong>for j &lt;- p+1 to q</strong></span></p>
<p><span style="color: #ff9900;"><strong>do if A[j]&lt;x</strong></span></p>
<p><span style="color: #ff9900;"><strong>then i &lt;- i+1</strong></span></p>
<p><span style="color: #ff9900;"><strong>echange A[i] &lt;-&gt; A[j]</strong></span></p>
<p><span style="color: #ff9900;"><strong>echange A[p] &lt;-&gt; A[i]</strong></span></p>
<p><span style="color: #ff9900;"><strong>return</strong></span></p>
<p><span style="color: #ff9900;"><strong>QuickSort(A,p,r-1);</strong></span></p>
<p><span style="color: #ff9900;"><strong>QuickSort(A,r+1,p);</strong></span></p>
<p><span style="color: #333333;">Partition的复杂度为O(n)</span></p>
<p><span style="color: #333333;">快排的最坏情况出现在数组已经排序好或者逆序排列，复杂度为O(n2),最好情况出现在总是选出的key值总能很好划分数组，复杂度为O(nlgn).优化的方法是随机选取key值，这样数组的输入就不在matter了。</span></p>
<ul>
<li><strong><span style="color: #333333;">堆排序（Heapsort）</span></strong></li>
</ul>
<p><strong><span style="color: #333333;">基本思想：用大根堆的特性来排列数组中的元素。时间复杂度为O(nlgn),非原地排序。</span></strong></p>
<p><span style="color: #333333;">① 先将初始文件R[1..n]建成一个大根堆，此堆为初始的无序区</span></p>
<div> </div>

<p><span style="color: #333333;">　　② 再将关键字最大的记录R[1]（即堆顶）和无序区的最后一个记录R[n]交换，由此得到新的无序区R[1..n-1]和有序区R[n]，且满足R[1..n-1].keys≤R[n].key</span></p>
<div> </div>

<p><span style="color: #333333;">　　③由于交换后新的根R[1]可能违反堆性质，故应将当前无序区R[1..n-1]调整为堆。然后再次将R[1..n-1]中关键字最大的记录R[1]和该区间的最后一个记录R[n-1]交换，由此得到新的无序区R[1..n-2]和有序区R[n-1..n]，且仍满足关系R[1..n-2].keys≤R[n-1..n].keys，同样要将R[1..n-2]调整为堆。 </span></p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令01]]></title>
      <url>http://yoursite.com/2012/09/05/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A401/</url>
      <content type="html"><![CDATA[<p>1. 文件命名规则</p>
<p>1）除了/之外，所有的字符都合法；</p>
<p>2）有些字符最好不使用，如空格符、制表符、退格符和字符@#￥&amp;（）-等；</p>
<p>3）避免使用.作为普通文件名的第一个字符（<span style="color: #ff0000;">.开头的文件表示隐藏文件</span>）；</p>
<p>4）<span style="color: #ff0000;">大小写敏感</span>。</p>
<p>2. 命令格式：命令 -选项 参数</p>
<p>1）当有多个选项是，可以写在一起；</p>
<p>2）两个特殊的目录.和..，分别代表当前目录和当前目录的父目录</p>
<p>3. 文件处理命令</p>
<p><span style="color: #ff0000;">     命令根据不用权限存放的路径：</span></p>
<p><span style="color: #ff0000;">     root： /sbin; /usr/sbin</span></p>
<p><span style="color: #ff0000;">     all users: /bin; /usr/bin</span></p>
<p><span style="color: #ff0000;">     （bin-binary，usr-user，sbin-super binary）</span></p>
<p><span>     命令名称：ls</span></p>
<p><span>     命令英文原意：list</span></p>
<p><span>     命令所在路径：/bin/ls</span></p>
<p><span>     功能描述： 显示目录文件</span></p>
<p><span>     语法： ls 选项[-ald] [文件或目录]</span></p>
<p><span>                          -a 显示所有文件，包括隐藏文件</span></p>
<p><span>                           -l 详细信息宣誓</span></p>
<p><span>                          -d 查看目录属性</span></p>
<p><span style="color: #ff0000;">   ll解析：</span></p>
<p><span style="color: #ff0000;">     d     <span style="text-decoration: underline;">rwx</span>      <span style="text-decoration: underline;">rwx</span>     <span style="text-decoration: underline;"> rwx</span>            2                  root               root                                    1024                                                  12-01 20:52                    XXX</span></p>
<p><span>                    权限                         硬链接数         所有者           所属组         文件大小（数据块block，512字节）    创建时间或最后修改时间     文件名称</span></p>
<p><span style="color: #ff0000;">    文件类型 d 目录directory</span></p>
<p><span style="color: #ff0000;">                      - 二进制文件</span></p>
<p><span style="color: #ff0000;">                      l 软连接文件link</span></p>
<p><span style="color: #ff0000;">    r-read读，w-write写，x-execute执行</span></p>
<p><span style="color: #ff0000;">    每三个字符代表一种用户：所有者u-user，所属组g-group，其他人o-others</span></p>
<p>&nbsp;</p>
<p>命令名称：cd</p>
<p>命令名称：pwd (print working directory) 查看当前目录</p>
<p>命令名称：touch  创建空文件</p>
<p>命令名称：mkdir  创建新目录</p>
<p>命令名称：cp 复制文件或目录，cp -R [源文件或目录] [目的目录]</p>
<p>命令名称：mv 移动文件、更名，mv [源文件或目录] [目的目录]</p>
<p>命令名称：rm 删除文件， rm -r [-f(force强制删除) [文件或目录] ；rmdir 删除空目录（用的少）</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH远程登录Linux出现中文乱码]]></title>
      <url>http://yoursite.com/2012/09/05/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>这个问题好像还是很普遍的，我用的是CentOS6.3，开始使用的是SSH Secure Shell远程登录，发现在查看目录的时候出现了乱码，从网上找了很久都没有解决问题。</p>
<p>后来试了putty和SecureCRT可以解决。</p>
<p>putty是一个轻量级的东西，在 Windoe-&gt;Translation中有一项是Remote character set，选择UTF-8，然后登陆，登陆以后输入</p>
<p><pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;"><span style="color: #708;">export</span> <span style="color: #00f;">LANG</span><span style="color: #000;">=</span><span style="color: #a11;">“zh_CN.UTF-8”</span></pre><br>就可以了。</p>
<p>&nbsp;</p>
<p>SecureCRT是个稍微重量点儿的东西，登陆之后，在Options-&gt;Session Options-&gt;Terminal-&gt;Appearance中有一项是Character encoding，选择UTF-8，此时要还是不行就再输入上面的命令。</p>
<p>&nbsp;</p>
<p>下回再装Linux考虑使用英文的好了，就没这么多问题了。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV HOG+SVM 分类器训练与检测]]></title>
      <url>http://yoursite.com/2012/09/05/OpenCV%20HOG+SVM%20%E5%88%86%E7%B1%BB%E5%99%A8%E8%AE%AD%E7%BB%83%E4%B8%8E%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p><strong>先从检测说起。</strong></p>
<p>现有的OpenCV版本中有完整的基于HOG+SVM的检测代码，主要用到HOGDescriptor这个类。两个关键函数：</p>
<p> hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());<span style="color: #339966;">//导入分类器，默认采用的是Dalal提出的算法模型，其实是svm训练得到的支持向量</span></p>
<p> hog.detectMultiScale(img, found, 0, Size(8,8), Size(32,32), 1.05, 2);<span style="color: #339966;">//多尺度遍历，可以检测一定范围内的行人目标，当然现有的模型是基于64*128行人大小的，所以对中小目标检测效果不佳</span></p>
<p>在程序框架建立过程中，问题没有出现多少，毕竟熟能生巧，意外的收获是：opencv众所周知地没有注释难以看懂，但是对于一个可执行程序，都用一个函数来说明程序实现功能，在一定程度上缓和我对opencv的反感吧。其实opencv的代码风格其他方面真的很好，今后可以借鉴之。先列举其一吧：</p>
<p>void help()<br>{<br> printf(<br>  <span style="color: #800080;"> “\nDemonstrate the use of the HoG descriptor using\n”</span><br><span style="color: #800080;">   “  HOGDescriptor::hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());\n”</span><br><span style="color: #800080;">   “Usage:\n”</span><br><span style="color: #00ffff;"><span style="color: #800080;">   “./peopledetect (&lt;image_filename&gt; | &lt;image_list&gt;.txt)\n\n”</span> <span style="color: #000000;">);</span></span><br>}</p>
<p><strong>再来说训练。</strong></p>
<p>不同于Cascade，opencv中没有专门对hog特征的svm的训练，必须自己按照需要，选择特征算子和分类器，这里我先选了hog和svm(与latent svm 区分)。在调试过程中出现了很多bug，变量找不到定义（包含头文件）、无法解析的外部符号Link 2019 （找到函数的实现文件），这些问题也都一一解决了。我不得不再吐槽一下，像这种无注释源文件的真心没辙，网上百度、google都有可能找不到解决方案，还得一个个include和添加cpp去实验，以后写代码一定好写好注释，方便别人阅读嘛。</p>
<p>总结一下：</p>
<ul>
<li>项目属性中除了包含core、imgproc、highgui等常用的lib和头文件，在此情况下（训练和检测）要包含ml（machine learning）和objdetect（object detect）的lib和头文件。</li>
<li>工程文件中还要用到/opencv2.0/modules/objdetect/src下面的inner_functions.cpp文件，用在需要线性插值的地方。<br>&nbsp;</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux应用与发展（下）]]></title>
      <url>http://yoursite.com/2012/09/04/Linux%E5%BA%94%E7%94%A8%E4%B8%8E%E5%8F%91%E5%B1%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1.Linux系统结构</p>
<p>图形界面                 Shell命令                   系统调用<br>用户————&gt;应用层———-&gt;Shell层—————&gt;内核层-&gt;硬件</p>
<p>2.X Window 是个协议，类似于TCP/IP</p>
<p>1）独立于操作系统；可以不安装，挂了!=Linux挂了，可以换，安装多个</p>
<p>2）网络特性；</p>
<p>3）原代码免费。</p>
<p>3. Linux应用领域</p>
<p>1）电子政务</p>
<p>2）网络应用 基于LAMP的网站论坛及B/S架构应用；基于Linux的负载均衡和集群；基于Linux的防火墙及代理服务器</p>
<p>3）嵌入式应用 生物特征识别系统；智能卡系统；掌上电脑、手机、信息家电；路由器、机顶盒、数码相机、mp4</p>
<p>4）科学运算 5）办公应用（OpenOffice）6）娱乐应用等</p>
<p>4. 搭建学习环境，<span style="color: #ff0000;">选择命令行方式学习！！！</span></p>
<p>留意系统的提示信息；尝试自己检查或实验以找到答案</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux应用与发展（上）]]></title>
      <url>http://yoursite.com/2012/09/03/Linux%E5%BA%94%E7%94%A8%E4%B8%8E%E5%8F%91%E5%B1%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1.1965，MIT、GE、AT&amp;T贝尔实验室开发Multics计划</p>
<p>2.1969，贝尔实验室肯·汤普森在DEC PDP-7机器上开发出Unix，uni—小儿精巧，核心设计理念</p>
<p>3.1971，丹尼斯·里奇发明c语言</p>
<p>4.1973，UNIX绝大部分源代码用c语言重写，为提高可移植性打下基础</p>
<p>5.UNIX主要发型版本</p>
<p><table border="1" cellspacing="0" cellpadding="0"></table></p>
<p><tbody></tbody></p>
<p><tr></tr></p>
<td width="149">

<p>版本</p>
<p></p></td><p></p>
<td width="230">

<p>公司</p>
<p></p></td><p></p>
<td width="189">

<p>芯片</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>AIX</p>
<p></p></td><p></p>
<td width="230">

<p>IBM</p>
<p></p></td><p></p>
<td width="189">

<p>PowerPC</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>HP-UX</p>
<p></p></td><p></p>
<td width="230">

<p>HP</p>
<p></p></td><p></p>
<td width="189">

<p>PA-RISC</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>Solaris</p>
<p></p></td><p></p>
<td width="230">

<p>Sun</p>
<p></p></td><p></p>
<td width="189">

<p>SPARC</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>Irix</p>
<p></p></td><p></p>
<td width="230">

<p>SGI</p>
<p></p></td><p></p>
<td width="189">

<p>MIPS</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>Digital UNIX</p>
<p></p></td><p></p>
<td width="230">

<p>DEC</p>
<p></p></td><p></p>
<td width="189">

<p>Alpha</p>
<p></p></td><br><p></p>
<p><tr></tr></p>
<td width="149">

<p>Linux、BSD</p>
<p></p></td><p></p>
<td width="230">

<p>Red Hat Linux、Ubuntu、FreeBSD</p>
<p></p></td><p></p>
<td width="189">

<p>IA（Intel，AMD、Cyrix、RISE…）</p>
<p></p></td><br><br><br><br>UNIX的一般不适用于普通PC机，具有严格的要求。<p></p>
<p>AIX 北京气象局，银行，中高端</p>
<p>HP-UX 中国电信，中国地质大学，存储运算，好莱坞动画处理</p>
<p>Solaris 国内最多，广泛应用在互联网领域</p>
<p>Irix 做动画</p>
<p>Digital UNIX 自动化处理能力好</p>
<p>Linux是UNIX的分支</p>
<p>6.Linux系统简介，Linux出现于1991年，有芬兰大学生李纳斯（Linus Torvalds）和后来陆续加入的众多爱好者共同开发完成。</p>
<p>Linux是自由软件，源代码开放</p>
<p>Linux优良特性：多用户多任务、网络协议支持、强大的内容管理和文件管理系统、大量的可用软件和免费软件、优良的稳定性和安全性、良好的可移植性和灵活性、可供选择的厂商多……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于网站搬家]]></title>
      <url>http://yoursite.com/2012/09/02/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%AB%99%E6%90%AC%E5%AE%B6/</url>
      <content type="html"><![CDATA[<p>看了公卫的<a href="http://gwyjs.com/693.html" target="_blank" rel="external">wordpress网站如何搬家</a>，这篇文章还是不错的，可是他在最后提出了搬家过程不涉及域名更换，仍然使用原来的域名，只是将其解析到新的ip，但是，貌似我把代码下在本地以后。网站还是可以打开的，根本原因可能是数据库中存了一些与原来域名相关的数据，应该把它们都改为新的域名就可以了。但是这还只是理论，若是网站开的时间长了，也会包含很多很多的数据，改起来可能也不是很容易吧。。。</p>
<p>这个问题在这里记一笔好了，以后出现同样的问题再回来解决一下吧。。</p>
<p>ps：最近要开始学学linux了，唉，还真是活到老学到老。。。所以<span style="color: #ff0000;">在代码高亮部分，加了对shell语言的高亮处理</span>，目前还好用啦。。。不知道wordpress这个玩意儿怎么做单元测试。。。算了。。。即使能做我也可能没有经历去做。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring JPA 不使用缓存的方法]]></title>
      <url>http://yoursite.com/2012/08/30/Spring%20JPA%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最经遇到了一个问题，就是在使用JPA的时候，明明写入数据库，但是却完全查不出来，究其原因，可能就是JPA的缓存机制，当然也可以用别的方法，比如说给DAO一个固定的EntityManager，因为查不出来的原因可能就是因为在查询和插入的时候使用了不同的EntityManager。</p>
<p>在JPA的配置文件persistent.xml中使用persistent_2_0.xsd，即如下：</p>
<pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;"><span style="color: #ff1717;">&lt;?xml</span> <span style="color: #ff1717;">version="1.0" encoding="UTF-8"?&gt;</span>
<span style="color: #170;">&lt;persistence</span> <span style="color: #00c;">version</span>=<span style="color: #2a00ff;">"2.0"</span> <span style="color: #00c;">xmlns</span>=<span style="color: #2a00ff;">"http://java.sun.com/xml/ns/persistence"</span> 
             <span style="color: #00c;">xmlns:xsi</span>=<span style="color: #2a00ff;">"http://www.w3.org/2001/XMLSchema-instance"</span> 
             <span style="color: #00c;">xsi:schemaLocation</span>=<span style="color: #2a00ff;">"http://java.sun.com/xml/ns/persistence </span>
            _ <span style="text-decoration: underline; color: #ff0000;"><span style="text-decoration: underline;">http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span></span>_**<span style="color: #170;">&gt;</span>**</pre>
然后增加配置：
<pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;"> <span style="color: #170;">&lt;shared-cache-mode</span><span style="color: #170;">&gt;</span>NONE<span style="color: #170;">&lt;/shared-cache-mode</span><span style="color: #170;">&gt;</span></pre>
shared-cache-mode属性有4种配置：ALL-缓存所有实体；NONE-禁止缓存；ENABLE_SELECTIVE-如果加了缓存的标识，是默认的选项；DISABLE_SELECTIVE- 使用缓存除非使用注解@Cacheable(false)，这个不推荐使用

下面是一个persistent.xml的举例，不过不是Spring的，是Hibernate的，而且是从网上摘的，网址为[点我](http://www.cnblogs.com/luxh/archive/2012/05/24/2516282.html)
<pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;"> <span style="color: #ff1717;">&lt;?xml</span> <span style="color: #ff1717;">version="1.0" encoding="UTF-8"?&gt;</span>
  <span style="color: #170;">&lt;persistence</span> <span style="color: #00c;">version</span>=<span style="color: #2a00ff;">"2.0"</span> <span style="color: #00c;">xmlns</span>=<span style="color: #2a00ff;">"http://java.sun.com/xml/ns/persistence"</span> 
              <span style="color: #00c;">xmlns:xsi</span>=<span style="color: #2a00ff;">"http://www.w3.org/2001/XMLSchema-instance"</span> 
              <span style="color: #00c;">xsi:schemaLocation</span>=<span style="color: #2a00ff;">"http://java.sun.com/xml/ns/persistence </span>
              <span style="color: #2a00ff;">http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span><span style="color: #170;">&gt;</span>

     <span style="color: #3f7f5f;">&lt;!--必须要有name属性，不能为空 --&gt;</span>
      <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"jpaPU"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #2a00ff;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.hibernate.ejb.HibernatePersistence<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;jta-data-source</span><span style="color: #170;">&gt;</span>java:/DefaultDS<span style="color: #170;">&lt;/jta-data-source</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;mapping-file</span><span style="color: #170;">&gt;</span>ormap.xml<span style="color: #170;">&lt;/mapping-file</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;jar-file</span><span style="color: #170;">&gt;</span>MyApp.jar<span style="color: #170;">&lt;/jar-file</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.acme.Employee<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;shared-cache-mode</span><span style="color: #170;">&gt;</span>ENABLE_SELECTOVE<span style="color: #170;">&lt;/shared-cache-mode</span><span style="color: #170;">&gt;</span>
           <span style="color: #3f7f5f;">&lt;!--可选 --&gt;</span>
           <span style="color: #170;">&lt;validation-mode</span><span style="color: #170;">&gt;</span>CALLBACK<span style="color: #170;">&lt;/validation-mode</span><span style="color: #170;">&gt;</span>

           <span style="color: #3f7f5f;">&lt;!--厂商的特定属性 --&gt;</span>
           <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--配置Hibernate方言 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.dialect"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"org.hibernate.dialect.MySQL5Dialect"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--配置数据库驱动 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.connection.driver_class"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"com.mysql.jdbc.Driver"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--配置数据库用户名 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.connection.username"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"root"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--配置数据库密码 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.connection.password"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"root"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--配置数据库url --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.connection.url"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"jdbc:mysql://localhost:3306/jpa?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--设置外连接抓取树的最大深度 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.max_fetch_depth"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"3"</span> <span style="color: #170;">/&gt;</span>
              <span style="color: #3f7f5f;">&lt;!--自动输出schema创建DDL语句 --&gt;</span>
              <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #2a00ff;">"hibernate.hbm2ddl.auto"</span> <span style="color: #00c;">value</span>=<span style="color: #2a00ff;">"update"</span> <span style="color: #170;">/&gt;</span>    
           <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
      <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

  <span style="color: #170;">&lt;/persistence</span><span style="color: #170;">&gt;</span></pre>
<span style="color: #993366;">**xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"**</span>
要注意使用的是2.0规范
<span style="color: #993366;">**name**</span>
JPA2.0规范要求每一个持久化单元必须有一个名字，不能为空。即persistence-unit name="manager1"的name不能为空。
<span style="color: #993366;">**transaction-type**</span>
使用的事务类型。有JTA和RESOURCE_LOCAL两种类型可以选择。在JavaEE环境中默认为JTA,在JavaSE环境中默认为RESOURCE_LOCAL。当在persistent.xml文件使用,默认就是JTA事务，使用，默认就是使用RESOURCE_LOCAL事务。这两种事务的区别不在这里讨论。
<span style="color: #993366;">**provider**</span>
EJB Persistence provider的一个实现类。如果不是使用多个厂商的 EJB Persistence实现，是不需要定义的。
<span style="color: #993366;">**mapping-file**</span>
指定映射文件的位置
<span style="color: #993366;">**jar-file**</span>
指定要解析的jar。jar中所有注解的类、包和所有的hbm.xml都会被添加到persistent-unit的配置中。主要用在JavaEE环境中。
<span style="color: #993366;">**exclude-unlisted-classes**</span>
不检查jar中加了@Entity注解的类。
<span style="color: #993366;">**class**</span>
明确指定要映射的类
<span style="color: #993366;">**validation-mode**</span>
实体的验证模式，默认是激活的。当一个实体在创建、更新，在实体发送到数据库前会被进行验证。CALLBACK: entities are validated on creation, update and deletion. If no Bean Validation provider is present, an exception is raised at initialization time.
<span style="color: #993366;">**properties**</span>
配置厂商的一些特定属性。

&nbsp;

下面这个包含了各种JPA的persistent.xml，用的是1.0规范，看的玩儿吧：

&nbsp;
<pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;"><span style="color: #170;">&lt;persistence</span> <span style="color: #00c;">xmlns</span>=<span style="color: #a11;">"http://java.sun.com/xml/ns/persistence"</span> <span style="color: #00c;">xmlns:xsi</span>=<span style="color: #a11;">"http://www.w3.org/2001/XMLSchema-instance"</span>
             <span style="color: #00c;">xsi:schemaLocation</span>=<span style="color: #a11;">"http://java.sun.com/xml/ns/persistence persistence_1_0.xsd"</span> <span style="color: #00c;">version</span>=<span style="color: #a11;">"1.0"</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.eclipse.persistence.jpa.PersistenceProvider<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.driver"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.user"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.target-database"</span>
                      <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.eclipse.persistence.platform.database.HSQLPlatform"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.logging.level"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"OFF"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.orm.throw.exceptions"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.ddl-generation"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"drop-and-create-tables"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.ddl-generation.output-mode"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"database"</span><span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"embeddedeclipselink"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.eclipse.persistence.jpa.PersistenceProvider<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.driver"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.user"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.jdbc.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.target-database"</span>
                      <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.eclipse.persistence.platform.database.HSQLPlatform"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.logging.level"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"OFF"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.orm.throw.exceptions"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.ddl-generation"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"drop-and-create-tables"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.ddl-generation.output-mode"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"database"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"eclipselink.session.customizer"</span>
                      <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.compass.gps.device.jpa.embedded.eclipselink.CompassSessionCustomizer"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.engine.connection"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"target/test-index"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.debug"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span> <span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>oracle.toplink.essentials.PersistenceProvider<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.driver"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.user"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.target-database"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"oracle.toplink.essentials.platform.database.HSQLPlatform"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.logging.level"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"OFF"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.orm.throw.exceptions"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.ddl-generation"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"drop-and-create-tables"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.ddl-generation.output-mode"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"database"</span><span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"embeddedtoplink"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>oracle.toplink.essentials.PersistenceProvider<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.driver"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.user"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.jdbc.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.target-database"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"oracle.toplink.essentials.platform.database.HSQLPlatform"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.logging.level"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"OFF"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.orm.throw.exceptions"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.ddl-generation"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"drop-and-create-tables"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.ddl-generation.output-mode"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"database"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"toplink.session.customizer"</span>
                      <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.compass.gps.device.jpa.embedded.toplink.CompassSessionCustomizer"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.engine.connection"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"target/test-index"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.debug"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span> <span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.hibernate.ejb.HibernatePersistence<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.dialect"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hibernate.dialect.HSQLDialect"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.driver_class"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.username"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.search.autoregister_listeners"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"false"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.hbm2ddl.auto"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"create"</span><span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"embeddedhibernate"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.hibernate.ejb.HibernatePersistence<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.dialect"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hibernate.dialect.HSQLDialect"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.driver_class"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.url"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.username"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.connection.password"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.search.autoregister_listeners"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"hibernate.hbm2ddl.auto"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"create"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.engine.connection"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"target/test-index"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.debug"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span> <span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.apache.openjpa.persistence.PersistenceProviderImpl<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>false<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.jdbc.DBDictionary"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"hsql"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionDriverName"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionURL"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionUserName"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionPassword"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.jdbc.SynchronizeMappings"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"buildSchema"</span><span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>

    <span style="color: #170;">&lt;persistence-unit</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"embeddedopenjpa"</span> <span style="color: #00c;">transaction-type</span>=<span style="color: #a11;">"RESOURCE_LOCAL"</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;provider</span><span style="color: #170;">&gt;</span>org.apache.openjpa.persistence.PersistenceProviderImpl<span style="color: #170;">&lt;/provider</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.Simple<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleBase<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;class</span><span style="color: #170;">&gt;</span>org.compass.gps.device.jpa.model.SimpleExtend<span style="color: #170;">&lt;/class</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>true<span style="color: #170;">&lt;/exclude-unlisted-classes</span><span style="color: #170;">&gt;</span>
        <span style="color: #170;">&lt;properties</span><span style="color: #170;">&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.jdbc.DBDictionary"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"hsql"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionDriverName"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"org.hsqldb.jdbcDriver"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionURL"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"jdbc:hsqldb:mem:test"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionUserName"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"sa"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.ConnectionPassword"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">""</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"openjpa.jdbc.SynchronizeMappings"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"buildSchema"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.engine.connection"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"target/test-index"</span><span style="color: #170;">/&gt;</span>
            <span style="color: #170;">&lt;property</span> <span style="color: #00c;">name</span>=<span style="color: #a11;">"compass.debug"</span> <span style="color: #00c;">value</span>=<span style="color: #a11;">"true"</span> <span style="color: #170;">/&gt;</span>
        <span style="color: #170;">&lt;/properties</span><span style="color: #170;">&gt;</span>
    <span style="color: #170;">&lt;/persistence-unit</span><span style="color: #170;">&gt;</span>
<span style="color: #170;">&lt;/persistence</span><span style="color: #170;">&gt;</span></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于代码高亮]]></title>
      <url>http://yoursite.com/2012/08/23/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
      <content type="html"><![CDATA[<p>前几天看到了别人的代码高亮程序，觉得很有意思，也就想着自己也做做。可惜了，我每天都很晚回来，所以这个东西拖了很久，大概做了3-4的时间，不过收获还是有一些的，毕竟它现在已经上线了。</p>
<p>这个代码高亮的东西是依托于一个开源的东东——CodeMirror。我基本上对css、js，可能还包括php都是非常的不熟悉，谁叫我每天在单位都做得是后台的东西呢。</p>
<p>啃啃巴巴的终于做完了，本来想吧主题的类型能加都加上，后来发现这个处理逻辑貌似有点复杂，就只做了default的和eclipse的，而且整个代码不乏“借鉴”别人的。。。为搞清楚很多东西，我还专门看了css，javascript方面的书籍，真是有够麻烦的。</p>
<p>以下是注意的内容吧，这个很有可能是不完备的：</p>
<p>1.wordpress的相对路径类似于下面这样</p>
<p><pre style="margin: 15px 0; font: 100 12px/18px monaco, andale mono, courier new; padding: 10px 12px; border: #ccc 1px solid; border-left-width: 4px; background-color: #fefefe; box-shadow: 0 0 4px #eee; word-break: break-all; word-wrap: break-word; color: #444;">bloginfo(‘template_url’)?&gt;/js/CodeMirror/mode/xml/xml.js</pre><br>必须注意的是用bloginfo(‘template_url’)开头，而不是什么“..”什么的。</p>
<p>2.用EditPlus这种东西写代码很麻烦，必须时刻注意很小的地方，不然出错也发现不了，回头找找有没有更好的方法。</p>
<p>3.javascript的返回方式好像包括return和回调函数这两种，我只知道回调函数，这回却也没用上， 以后可以研究下。</p>
<p>4.正则表达式一定要弄清楚各个部分的含义，它还是很强大的。javascript中，/…/表示这个为正则表达式，后面加g即/…/g，为全部进行匹配。\为转义，注意为标点符号转义。其他正则表达式的元符号这里就不说明了，太罗嗦了。</p>
<p>5.本服务目前不支持ie浏览器，</p>
<p>现就这么多了，今天要好好休息，好好睡觉。</p>
<p>发现别人在用代码托管，比如注册了一个google code host，可以在这个SVN客户端管理我的代码，回头学学。</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV 级联分类器训练（2）]]></title>
      <url>http://yoursite.com/2012/08/21/OpenCV%20%E7%BA%A7%E8%81%94%E5%88%86%E7%B1%BB%E5%99%A8%E8%AE%AD%E7%BB%83%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>（1）解决Adaboost的问题。Adaboost的原理是用弱分类器去构造强分类器，强分类器的错误率呈下降并稳定的趋势。之前之所以只有62%的正确率，是因为，在训练集训练得到的最强的弱分类器在测试集上也表现不佳，也难怪最终的正确率不高了。样本过拟合是机器学习中的一个常见问题。针对今天出现的情况，最简单的方法是随机取样形成train和test样本集。</p>
<p>编程核心实现就是生成随机数。C++中常用rand()函数生成随机数，但严格意义上来讲生成的只是伪随机数（pseudo-random integral number）。生成随机数时需要我们指定一个种子，如果在程序内循环，那么下一次生成随机数时调用上一次的结果作为种子。但如果分两次执行程序，那么由于种子相同，生成的“随机数”也是相同的。在工程应用时，我们一般将系统当前时间(Unix时间)作为种子，这样生成的随机数更接近于实际意义上的随机数。</p>
<p>srand(unsigned(time(0))); num=rand()%100//生成0-100的随机数</p>
<p>（2）vc 6.0和vs2005中控制台程序读取命令行参数的不同。</p>
<p>vc6.0  int main(int argc, char* argv[])//argc表示命令行参数的个数，argv[]表示参数数组。argv[0]是可执行文件的信息。</p>
<p>vs2005 int _tmain(int argc, _TCHAR* argv[])//意义与上类似，但是_tmain 是unicode版本的main，_CHAR 表示宽长度字符，c++中对应的cout，需要使用wout实现：wout&lt;&lt;argv[2];若使用cout则出现乱码。</p>
<p>linux 下 一般为 int main(int argc, char** argv)</p>
<p>（3）基于vs2010和opencv2.0 完成了对行人的Haar特征进行了训练。这个程序可以借鉴的地方很多，例如vector、templete、虚函数的使用等等，温故知新。等待明晚的测试。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV 级联分类器训练（1）]]></title>
      <url>http://yoursite.com/2012/08/20/OpenCV%20%E7%BA%A7%E8%81%94%E5%88%86%E7%B1%BB%E5%99%A8%E8%AE%AD%E7%BB%83%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>白天的工作时间主要花在纠结于Adaboost。到底是训练样本和测试样本差异性太大，还是Adaboost本身的算法设计问题？</p>
<p>晚上按照opencv的方法，<br>（1）利用createsamples.exe生成了正负样本，参考方法详见<br><a href="http://niopen.com/thread-24236-1-1.html" target="_blank" rel="external">http://niopen.com/thread-24236-1-1.html</a><br>（2）使用haartraining.exe训练时，cvAlloc发生错误，造成insufficient memory.具体问题未知。只好自己使用opencv提供的源码进行调试。</p>
<p>我使用的是vs2010+opencv2.2（for 2010）。相比之前vc6.0+opencv1.0的安装，<br>相同的是<br>（1）需要设置环境变量<br>不同的是<br>（1）v1.0只需设置include，lib路径一次，便可对所有solution适用，而v2.2只要是新的solution都要设置路径。</p>
<p>建立工程编译的过程中，遇见了visual studio 编程经常遇见的三个问题：<br>(1)无法打开文件…<br>此类问题一般是它所在的文件#include的路径不对，编译的时候找不到。<br>(2)无法创建或使用预编译头…<br>此类问题一般在对应文件的预编译属性中选择不使用预编译头即可。不过这可能是对小的工程适用（小工程编译时间在容忍的范围之内），如果将来遇到大工程，预编译头可以节省时间。<br>参考链接<a href="http://blog.csdn.net/gouki04/article/details/6219822" target="_blank" rel="external">http://blog.csdn.net/gouki04/article/details/6219822</a><br>(3)Link 2019 无法解析的外部符号<br>3种可能：<br>1. lib 文件未引入。可使用“#pragma comment(lib, “winsock.lib”) ”语句添加 lib 引用，也可在项目依赖里添加。</p>
<p>2. 类方法的实现未加类标识。如， “CTest::Connect(void) { … }” 写成了 “Connect(void) { … }”。</p>
<p>3. 缺少 obj 文件。在项目里添加“包含路径”：C:\curl\lib\release-dll*.obj。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]wordpress 添加基本留言板]]></title>
      <url>http://yoursite.com/2012/08/08/%5B%E8%BD%AC%5Dwordpress%20%E6%B7%BB%E5%8A%A0%E5%9F%BA%E6%9C%AC%E7%95%99%E8%A8%80%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>做一个wordpress留言板很简单，我们知道一般可以用新建一个主题名字叫“留言板”的页面，让访客以评论留言的方式来实现。但是这种方式建立的留言板，其实是一个一般主题(post)或页面(page)，因此缺乏进一步定制的功能，而且提示文字也全部是“评论”<br>要做一个可定制的留言板其实很简单，只需要5步，那就让我们开始吧:)</p>
<p>如果你满足下列要求，请继续，</p>
<p>你有主机文件存储权限(一般博客服务提供商可能没有提供此权限).<br>你可以以admin权限登录后台(一般都有吧)<br>你大概知道点HTML和PHP文本形式的差别(定制部分需要修修改改，当然不难，只要认得出什么是html文本，什么是php文本就及格).</p>
<h3 id="一：制作留言板模板："><a href="#一：制作留言板模板：" class="headerlink" title="一：制作留言板模板："></a>一：制作留言板模板：</h3><p>1）找到你博客模板目录中的single.php文件（一般你的模板目录是在/wp-content/themes/博客模板名称/）；复制 single.php并重命名为guestbook.php,这样做的目的是我们希望留言板能保持博客的基本布局如：页面头部，页脚和侧边栏。因此最好的方式就是复制用来显示单篇主题的页面模板文件single.php</p>
<p>2）用一款合适的文本编辑器（如：editplus，ultraedit，notepad2，之所以没说windows自带的notepad是因为它对UTF-8的编码方式支持不好）；打开guestbook.php 在文件头部找到如下php代码：</p>
<p>&lt;?php get_header(); ?&gt;</p>
<p>在此语句前加一段仅带注释语句的模板标识，这里我们将页面模板名字(Template Name)定义为Guestbook，这个名字在下面会有用到。</p>
<p>&lt;?php<br>/<em><br>Template Name: Guestbook
</em>/<br>?&gt;</p>
<p>OK，简单吧，留言板的页面模板文件就做好了。</p>
<p>3）将修改后的guestbook.php上传到博客模板目录(/wp-content/themes/博客模板名称/)下</p>
<h3 id="二：在后台创建留言板"><a href="#二：在后台创建留言板" class="headerlink" title="二：在后台创建留言板"></a>二：在后台创建留言板</h3><p>4）以具有admin权限的帐号登录，新建一个页面，在主题名称处输入“留言板”，在内容处像往常写博客主题一样输入些内容，如：请留下宝贵意见和建议等等</p>
<p>5）很重要的一步：在右侧页面模板(page template)处，选择刚才创建的guestbook页面模板，发布(publish)，完成。</p>
<p>去自己的博客主页看看，根据博客模板的不同，留言板会以Tab方式或者侧栏链接的方式显示。</p>
<h3 id="三：把留言板做的更完美"><a href="#三：把留言板做的更完美" class="headerlink" title="三：把留言板做的更完美"></a>三：把留言板做的更完美</h3><p>通过上面的5步，你已经拥有一个留言板了，但是这和新建主题/页面生成的留言板没什么区别。别急，因为我们的留言板是根据自建的guestbook页面模板生成的，所以做适当的修修改改就可以了，而且这并不会影响到其他一般主题或页面的显示</p>
<p>1）去掉发布日期：<br>如果你不希望你的留言板主题显示如一般主题那样的发布日期，那么在guestbook.php中找到如下代码并删除。</p>
<p>&lt;?php the_time(‘Y/m/d’) ?&gt;<br>//根据不同模板不同可能有点不同，比如可能是<br>&lt;?php the_time(‘M’) ?&gt;</p>
<p>2）自定义“留言”样式的提示文本<br>因为其他主题或页面的评论都是用到comments.php来显示和输入评论的，不能把那些地方的“评论”也改成“留言”了。<br>因此复制一份comments.php并命名为guestcomments.php，就在guestcomments.php上修修改改吧</p>
<p>把所有“X comments”(xxx条评论)改成“X guestbook entries”(xxx条留言)<br>把“Post Comment”(发布评论)按钮的提示改成“Sign Guestbook”(发布留言)</p>
<p>3）最新留言显示在顶部<br>按照评论方式的留言，总是最新的留言排在最下面，如果我们希望最新的留言显示在最上面，可以这么做</p>
<p>在guestcomments.php中找到如下代码：</p>
<p>foreach ($comments as $comment)</p>
<p>替换成</p>
<p>foreach (array_reverse($comments) as $comment)</p>
<p>好啦，自定义的留言文本和显示方式据改好了，最后别忘了把guestcomments.php上传到你的博客模板目(/wp-content/themes/博客模板名称/)下</p>
<p>4）仅仅修改上面的2),3)；原来的guestbook.php并不知道你想启用新的留言和显示方式，所以我们还是要回到guestbook.php(不会那么快忘记这个文件吧:) )<br>找到如下代码：</p>
<p>&lt;?php comments_template(); ?&gt;</p>
<p>替换成</p>
<p>&lt;?php comments_template(‘/guestcomments.php’); ?&gt;</p>
<h3 id="四：还有什么花样吗"><a href="#四：还有什么花样吗" class="headerlink" title="四：还有什么花样吗?"></a>四：还有什么花样吗?</h3><p>因为我们用的是guestbook.php作为留言板的页面模板，相比一般主题/页面生成的留言板, 通过修改guestbook.php, 我们能获得更多的功能和提示，因为我们能在此文件中加入php语句，可以是自编的，也可以是其他插件中引用过来的函数。</p>
<p>这也给了我们一个启示，就是通过自定义页面模板的方式，我们可以定义一个全新页面，可以保留侧栏(sidebar)，页脚(foot)，也可以不保留，然后在内容(content)部分加入自己的php代码。比如，我将Popularity Contest(主题流行程度)插件的输出函数放在自定义的页面模板中，做成一个类似于抓虾的热文(top rank)页面,由访客的浏览行为自动排序出该博客内的热门主题榜单。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OSGi下JPA报错找不到域已继承序列化或操作无法完成会回滚的解决办法]]></title>
      <url>http://yoursite.com/2012/08/07/OSGi%E4%B8%8BJPA%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9F%9F%E5%B7%B2%E7%BB%A7%E6%89%BF%E5%BA%8F%E5%88%97%E5%8C%96%E6%88%96%E6%93%8D%E4%BD%9C%E6%97%A0%E6%B3%95%E5%AE%8C%E6%88%90%E4%BC%9A%E5%9B%9E%E6%BB%9A%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>首先我一直在考虑这个属于OSGi分类还是JPA分类，后来想到这个问题的出现完全在于OSGi本身的机制问题，所以分在了OSGi类。</p>
<p>其次，这个问题的原因不在于域是否继承序列化或者操作有误，这些地方都是没有错的。但编译器之所以报错的原因是，在写JPA配置文件（同时也是写了相应的JPA DAO操作）的bundle中，找不到相关的类。<span style="text-decoration: underline; color: #ff0000;"><strong>解决的办法是在这个bundle的MANIFEST.MF文件中加入对相应包的引用。</strong></span></p>
<p>同时今天看了《代码大全2》的调试一章，顿时也感觉调试的技术也是博大精深。书中有以下建议：<span style="text-decoration: underline; color: #ff0000;"><strong>不要迷信编译信息。编译器总是锲而不舍地想要告诉你到底是什么出了错，但它也会掩饰自己的无赖</strong></span>。你常常只能通过在字里行间寻找蛛丝马迹们才能知道这些信息的真正含义。就如这两天碰到的这些bugs一样，编译器报错的根本原因与编译器显示出来的信息其实关系不是很大，这种时候就需要通过一些方法步骤（可以参考《代码大全2》）和经验来确定具体的问题出在哪里。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转]wordpress基础主题文件的组成]]></title>
      <url>http://yoursite.com/2012/08/05/%5B%E8%BD%AC%5Dwordpress%E5%9F%BA%E7%A1%80%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%84%E6%88%90/</url>
      <content type="html"><![CDATA[<p>首先你需要给自己即将制作的主题起一个名字，比如我将要做的这个主题，它的名字叫newtheme，然后新建一个文件夹，文件夹的名字就是newtheme，这个文件夹的名字确定后尽量就不要修改了哦，否则会出错误的。下面给大家看看这个newtheme文件夹内都有什么文件。</p>
<div>

<p>[caption id=”attachment_45” align=”aligncenter” width=”600”]<a href="http://halfangelhalfdevil.com/wordpress/wp-content/uploads/2012/08/newtheme.jpg" target="_blank" rel="external"><img src="http://halfangelhalfdevil.com/wordpress/wp-content/uploads/2012/08/newtheme.jpg" alt="" title="newtheme"></a> WordPress主题文件的构成[/caption]</p>
<p></p></div><br>解释一下每个文件都是干什么用的，header.php、index.php、sidebar.php、footer.php、style.css是主题的核心文件，css规定的是网页的外观，即网页用什么背景，字体多大号，哪里需要显示图片等等，后面会再讲解css的问题的；四个php文件呢，其实就是把一个完整的网页给用小刀切割成了四大块，每一块区域显示各自的内容，就像我们玩过的拼图游戏一样。下面也贴一张图片，相信大家看了会有更直观的感受的。<p></p>
<p><a href="http://halfangelhalfdevil.com/wordpress/wp-content/uploads/2012/08/anatomy-wordpress.jpg" target="_blank" rel="external"><img src="http://halfangelhalfdevil.com/wordpress/wp-content/uploads/2012/08/anatomy-wordpress.jpg" alt="" title="anatomy-wordpress"></a></p>
<p>那么其余那几个php文件是干什么的呢？single.php是用来显示一篇一篇的文章的，page.php是用来显示在wordpress后台添加的页面的，比如留言板页面，作者介绍页面等，archive.php是用来按类别显示文章的，比如显示2012年4月份的所有文章，比如发表在wordpress这个文章类别里的文章，而404.php则是用来显示错误页面的，比如有人访问了一个你的网站上不存在的页面，404.php就会显示在他的电脑屏幕上。</p>
<p>其实，上面结构图中的四个php文件以及style.css文件才是一个主题最核心的，而single.php等文件即使没有也没关系，wordpress程序会自动的用核心文件替换single.php文件的，不过显示效果可能不是特别好；因此，我们这个主题还是把single.php等文件添加上了。</p>
<p>可能你已经看过别人的主题，文件夹里的文件会特别多，但请注意，我们将要制作的是一个基础性主题，咱们暂时不需要那些很复杂很花哨的效果，所以文件数目会比较有限；总要明白，饭得一口一口吃，不能一口吃成个胖子的道理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WordPress页面调用分类并分页的技术]]></title>
      <url>http://yoursite.com/2012/08/03/WordPress%E9%A1%B5%E9%9D%A2%E8%B0%83%E7%94%A8%E5%88%86%E7%B1%BB%E5%B9%B6%E5%88%86%E9%A1%B5%E7%9A%84%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>注：之所以把注写在这里是因为以下均为网上查询结果的整合，不看也行，可以百度或者Google一下。<br><code>`1.注意加入的代码必须为**&lt;span style=&quot;text-decoration: underline; color: #33cccc;&quot;&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;英文&lt;/span&gt;&lt;/span&gt;**，否则会报错。</code>    <code>2**.**&lt;span style=&quot;text-decoration: underline;&quot;&gt;**&lt;span style=&quot;color: #33cccc; text-decoration: underline;&quot;&gt;不要用Word&lt;/span&gt;**&lt;/span&gt;进行中间的文字转化，否则会在HTML中增加多余的代码，删起来十分复杂。</code>    `3.这是第一篇正式文章，有很多不熟练的地方等待以后加强。</p>
<a id="more"></a>
<hr>
<p><code>`我们在做网站规划时发现有的wordpress模板的主导航上只有一个页面，这时我们就想给网站增加新的页面。那么&lt;span style=&quot;color: #ff0000;&quot;&gt;**wordpress如何新建一个页面以及如何显示分类下的文章？**&lt;/span&gt;</code>    `1、新建一个php文档，命名为你想要的模板的名字，如mytemple，然后将index.php文件中的内容<span style="color: #33cccc;"><strong><span style="text-decoration: underline;">复制</span></strong></span>到该文档中。</p>
<p><code> </code>2、在mytemple.php文件的代码顶端<strong><span style="text-decoration: underline; color: #33cccc;"><span style="text-decoration: underline;">增加如下的代码</span></span></strong>：</p>
<p><strong>&lt;?php/<em>Template Name: mytemple</em>/?&gt;</strong>。</p>
<p><code> </code>这段代码的意思是指定模板的名字。</p>
<p><code> </code>3、创建好模板，我们就会想如何让模板显示自己想显示的内容。其实很简单。那我们给这个模板指定一个或者几个分类目录分类目录。在&lt;?php if (have_posts()) : ?&gt;这段代码的签名加上</p>
<p><strong>&lt;?php query_posts(‘showposts=10&amp;cat=3′); ?&gt;</strong></p>
<p><code> </code>这段代码。其中<strong><span style="text-decoration: underline;"><span style="color: #33cccc; text-decoration: underline;">cat=3</span></span></strong>就是指定显示ID为3分类目录的内容。如果这个模板想显示几个分类目录的内容，则可以写成&lt;?php query_posts(‘showposts=10&amp;cat=1,cat=2′); ?&gt;，<strong><span style="text-decoration: underline;"><span style="color: #33cccc; text-decoration: underline;">中间的,是英文状态下的逗号</span></span></strong>。</p>
<p><code> </code>4、现在可以登录到网站后台，新建一个页面，在有下角有个选择模板，就可以<span style="color: #33cccc;"><strong><span style="text-decoration: underline;">选择</span></strong></span>你创建的模板。</p>
<hr>
<p><code> </code>上面的方法<span style="color: #ff0000;"><strong>造成无法翻页的状况</strong></span>，症状为 WordPress 页面调用分类文章后，点击页面下方的翻页没有反应，但浏览器地址栏传递的参数已经发生改变了。出现此问题可参考下面的解决方法：</p>
<p><code> </code>将上面提到过的代码：</p>
<p><strong>&lt;?php query_posts(‘showposts=10&amp;cat=3′); ?&gt;</strong></p>
<p>替换为：</p>
<p><strong>&lt;?php</strong><br><strong>      $limit = get_option(‘posts_per_page’);</strong><br><strong>      $paged = (get_query_var(‘paged’)) ? get_query_var(‘paged’) : 1;</strong><br><strong>      query_posts(‘cat=3&amp;showposts=’ . $limit=10 . ‘&amp;paged=’ . $paged);</strong><br><strong>      $wp_query-&gt;is_archive = true; $wp_query-&gt;is_home = false;</strong><br><strong>?&gt;</strong></p>
<p>其中limit=15为每页显示的文章数目，cat=3 为分类的 ID。</p>
<hr>
<p><code>`另外有需要在&lt;span style=&quot;color: #ff0000;&quot;&gt;**导航上既显示分类文章，又显示页面列表**&lt;/span&gt;，同时可&lt;span style=&quot;color: #ff0000;&quot;&gt;**自定义显示哪个分类和页面**&lt;/span&gt;，把不想显示的隐藏掉，可采用下面的方法来实现（注：此方法只针对使用了**&lt;span style=&quot;color: #ff0000;&quot;&gt;inove&lt;/span&gt;**主题的朋友们）：
找到你主题中的/templates/header.php文件，找到如下代码：
**&amp;lt;?php**
**       if($options[&#39;menu_type&#39;] == &#39;categories&#39;) {**
**            wp_list_categories(&#39;depth=2&amp;amp;title_li=0&amp;amp;orderby=name&amp;amp;show_count=0&#39;);**
**        } else {**
**            wp_list_pages(&#39;depth=2&amp;amp;title_li=0&amp;amp;sort_column=menu_order&#39;);**
**        }**
**?&amp;gt;**
修改为：
**&amp;lt;?php**
**       wp_list_categories(&#39;depth=2&amp;amp;title_li=0&amp;amp;orderby=id&amp;amp;show_count=0&#39;);**
**       wp_list_pages(&#39;depth=2&amp;amp;title_li=0&amp;amp;sort_column=menu_order&#39;);**
**?&amp;gt;**</code>    `这样的话在页面导航上就会把分类和页面都显示出来，下一步就是利用 exclude 函数隐藏不需要显示的页面，找到各对应分类和页面的ID（在后台管理中鼠标放上对应的分类就会显示ID号），把上面修改过的代码改为如下形式即可：<br><strong>&lt;?php</strong><br><strong>       wp_list_categories(‘depth=2&amp;title_li=0&amp;orderby=id&amp;show_count=0&amp;exclude=58,4,1’);</strong><br><strong>       wp_list_pages(‘depth=2&amp;title_li=0&amp;sort_column=menu_order&amp;exclude=4,5’);</strong><br><strong>?&gt;</strong></p>
<hr>
<p><code> </code>最后，<strong><span style="color: #ff0000;">如果用前面的方法不能成功实现页面调用分类则可以采用下面的方法(该方法未经个人认证)：</span></strong></p>
<p><code>`1、复制page.php里面的全部内容，放在新建的一个php文档里面，并命名为自己想要的名字（例如mytemple）</code>    `2、打开文档，在顶部加上<br><strong>&lt;?php</strong><br><strong>      /**</strong><br><strong>      * @package WordPress</strong><br><strong>      Template Name: ranks</strong><br><strong>      */</strong><br><strong>?&gt;</strong></p>
<p><code> </code>3、在适当位置（显示正文的地方）加上调用代码<br><strong>&lt;?php if (function_exists(‘get_most_viewed’)): ?&gt;</strong><br><strong>      &lt;?php get_most_viewed(‘both’, 60); ?&gt;      //页面和文章都调用,调用60篇</strong><br><strong>&lt;?php endif; ?&gt;</strong></p>
<p><code> </code>4、新建一个页面→属性(右下角)→模板→mytemple</p>
<p><code> </code>这样就创建了一个自定义的页面，调用其他内容和这个同理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[人生就是不停的战斗————九把刀北大演讲]]></title>
      <url>http://yoursite.com/2011/11/18/2011-11-18-%E4%BA%BA%E7%94%9F%E5%B0%B1%E6%98%AF%E4%B8%8D%E5%81%9C%E7%9A%84%E6%88%98%E6%96%97%E4%B9%9D%E6%8A%8A%E5%88%80%E5%8C%97%E5%A4%A7%E6%BC%94%E8%AE%B2/</url>
      <content type="html"><![CDATA[<p>时间：2011年11月5日<br>地点：北京大学2号楼205<br>主题：人生就是不停的战斗<br>手打组：中财刘铮，魏文婷<br>请尊重手打组作品，转载勿删除手打组。</p>
<p>非常非常开心能够来北京大学演讲，我能表现出的最大的诚意就是，今天的演讲将是原汁原味非常忠于台湾版本的“人生就是不停的战斗”，还加了一段目前在台湾演讲一共讲了不到三次的“神的微笑”。希望我们今天晚上会有非常热血的两个小时。<br>但是“人生就是不停的战斗”四个U的版本有点太过励志，而我本人是个非常不励志的人（观众笑）。所以我今天想给大家的讲的是一个很美很美的爱情故事。<br>干，这个音乐可以小声点吗？不要也没有关系。（工作人员关音乐）谢谢，谢谢。因为一边演讲一边有背景音乐感觉像是个伟人（观众笑）。好像是在作那个九把刀的告别式一样（观众笑）。</p>
<p>这个演讲我们先从一个从小就长得非常白痴的人开始说起，<br><img src="http://img165.poco.cn/mypoco/myphoto/20111113/12/645340732011111312504809.jpg" alt=""><br>（放童年三兄弟合影）照片中间这个笑得非常像智障的（观众笑），就是幼稚园时候的我。幼稚园时候的我啊，非常喜欢画画，每次幼稚园老师说要上画画课 的时候我都非常非常地开心，因为全班同学会以最快的速度把他们的图画纸放在我的座位上，他们希望我帮忙构图，描边，他们会指定说这个图的左上角画一只怪兽 或者右上角画一只恐龙等等。<br>每次我被同学指派任务的时候，我都非常地开心。因为我从小运动就很烂，功课也不行，把妹也不晓得是什么东西，而同学都用行动告诉我说，你非常会画画，所以会画画这一点就变成我人生中的所拿到第一个宝藏。我觉得自己被重视，所以我每次都非常热情地帮全班同学画画，构图。</p>
<p>直 到国小三年级的时候，台湾的电视每个礼拜六下午两点到三点会播出一个卡通，叫做原子小金刚（注：铁臂阿童木）。我非常地痴迷原子小金刚，所以我将原子小金 刚当做蓝本，画了很多的漫画，用图画来说故事就是从那个时候开始的。我画了很多的图画，用原子小金刚来跟怪兽讲话，跟机器人讲话，跟恐龙讲话，同学都非常 地捧场。他们都在用那种很大张的透明的塑胶盖住我所画的连环画，然后上课传阅，并且催促我要赶快画出最近的剧情。<br>被催促之后我都非常地开心 ，就画得非常的热血。从那个时候开始，在作文簿上面写我的未来我的梦想我的希望，我都会写我将来想要成为一个漫画家，我觉得我的梦想一定会实现。<br>因为班上其他的同学在写我的梦想我的希望的时候，他们常常写我将来想要当一个总统，我将来想要当国防部部长，我将来要上月球，我将来要登陆火星，我将来要当一个发明解救全世界艾滋病人的药的医生。<br>每次我看我同学那副德行，这几乎就是不可能（观众笑）。就是，按照几率不可能全班所有人都当国防部长都当太空人都当科学家，但是我从小就想当一个卑贱的漫画家，我觉得有我这么谦虚的人，可以实现梦想。<br>慢慢的，我爸爸觉得他的儿子有个小小的梦想当一个漫画家，非常非常地励志。所以我爸爸也非常的开心，就买很多的漫画，比如说《叮当》《天才小钓手》《XXXX(听不清)》给我看，于是我大量地阅读然后大量地画。<br>一开始我爸爸觉得很棒，但慢慢地我爸爸觉得事情有点不对，因为学校老师会不停地给我爸爸打小报告，跟我爸告状说：“你的儿子数学考试考完都不验算，考卷翻过去，全部都是在画漫画。”<br>这 个时候啊，正好原子小金刚的作者手冢治虫，不晓得逝世几周年，台湾的报纸就有手冢治虫的专题报告。我爸就把那个专题报告拿给我看，看完之后就来一场阅读测 验。我爸对我说：“田田，你知不知道原子小金刚的作者是谁？”我说：“我知道啊，就是手冢治虫。”我爸继续地问：“那你知不知道手冢治虫，他为什么可以成 为一个伟大的漫画家？”我说：“我不知道。大概是因为他每天都很认真地画漫画吧。”这个答案四平八稳，但是我爸爸斩钉截铁地说：“错！原子小金刚的作者手 冢治虫，他之所以可以成为一个伟大的漫画家，原因就是，他曾经，是一个医生。”（观众笑）<br>我听了，觉得非常的鬼扯，问我爸是为什么。我爸非 常认真地把那个报道拿给我看，他说：“由于手冢治虫他曾经念过医学院，所以他解剖过非常多死人的尸体，也因此他非常了解人体肌肉骨骼和内脏的构造。然后他 才能够化繁为简，把非常复杂的人体的线条，简化成非常简单生动，卡通的线条。所以田田，如果你将来想要成为一个伟大的漫画家，你就要，念医科。”（观众 笑）<br>你们都会笑，但是我当时没有笑。因为我知道我爸爸非常认真，这张图是在我家门口拍的，这个招牌就是一个“药”字，我家里开的是一间药 局，我爸爸是一个药师。所以我们家三个兄弟成长过程中，不断地被我爸爸提醒：你们将来，都要在医学的领域上面发展，并且比爸爸获得更好地成就，也就是，当 医生。<br>所以从那时候开始，我就觉得，我的梦想有一朵乌云在上面：是否我在完成我自己的梦想之前要先达成我爸爸对我的期待。我相信这个压力大 家都有类似的经验。但是从那个时候开始，我在作文簿上面写我的未来我的梦想我的希望的时候，我就会改写成：我将来想要成为一个医生，逗号，然后再成为一个 漫画家（观众笑）。老实讲，还好我小时候成绩很烂，所以这个梦想只是被我拿出来嘴炮炫耀而已，我自己都没有太认真的看待。</p>
<p>直 到我国小毕业要升国中的那个夏天，我遇到人生中的两大贵人。一大贵人他的名字叫做，鸟山明。鸟山明画什么？七龙珠，对，我生平第一笔用自己的零用钱买的漫 画家的插画杰作集，就是就是鸟山明的杰作集。买到之后第一件事情，就是把外面的胶膜撕开，立刻翻到最后两页，看鸟山明的生平纪事。瞬间，我就发现，鸟山明 他没有念过医科（观众笑）。<br>当时不比现在，现在你可以用网路去确认你喜欢的作家你喜欢的漫画家，他曾经做过什么事情念过哪间学校。当时没有 啊，当时完全是靠同学之间的谣传跟耳语，来了解我认识的创作者。所以当时好不容易有一本官方出版的，应该说是盗版出版的，漫画家的杰作集，让我可供以取得 的重要的参考资料，很不简单。<br>同年，我遇到的第二个贵人的时候，那个贵人他才年仅29岁，29岁的他，刚刚画完《变色龙》，刚刚开始连载《灌篮高手》，他的名字就叫做，井上雄彦。年仅29岁的井上雄彦，当然没有任何一本杰作集可以让我买，但是我会简单的加法，我就帮井上雄彦算一算：我发现井上雄彦，要不是没有念过医科，要不然就是，他正在念医科（观众笑）。<br>我 觉得理所当然他应该是不会一边画《灌篮高手》，一边念医科。所以这两个漫画家给我非常重要的启发，我觉得我应该要成为一个更加谦虚的人：这辈子，或者我永 远无法成为一个像手冢治虫如此伟大的漫画家，但是我可以退而求其次，这辈子我就跟鸟山明还有井上雄彦平起平坐就可以了（观众笑）。所以我决定修正我自己的 梦想，我决定不当医生。</p>
<p>所以我就去考我们家乡的精诚中学第一届的美术资优班，我考进去的最大的原因是：那是第一届的美术资优班，所以它招生的时间要晚于其他中学的资优班的时间，真正资优学生都已经入学了，就剩下些残兵败将，跟一些弱智（笑）。所以我们就一起进了精诚中学第一届美术班。<br>我从小成绩就不好，突然之间让我混到一个美术资优生，非常虚荣。我觉得这是我的天地，我自己将来要成为一个漫画家，所以我进了美术资优班。所以不管老师上课上国文数学化学地理历史，不管老师上什么课，我统统都拿来画漫画。<br>我 真心觉得，如果将来想要成为一个漫画家，我就不能和我同学做一模一样的事情。我的假想敌是一群日本的臭阿宅，他们整天翘课逃学，就是疯狂地练习画分镜贴网 点。如果我把时间浪费在学习因式分解和三角函数上面，我就会输在起跑点上。真的，当时的目标就是：我要以非常烂的学科毕业，但是要以非常优异的术科考进台 北复兴美工，在复兴美工那边继续锻炼我漫画的技术。因为我要成为一个漫画家，我就理所当然应该把所有的时间用来画漫画。<br>那个时候啊，全年级有五百二十多个学生，我经常考的名次是全年级的四百八十多名，那个时候我人生第一个困惑就产生了，那就是：我都已经全面性地没有在念书，为什么还是有四十几个会考输我（观众笑）？头一次，我觉得自己非常有可能，有念书的天分（观众笑）。<br>你 知道，成绩不好的学生，心理有一点变态（观众笑）。没有读书，成绩不好，很正常对不对？那万一读了怎么办？万一读了还考不好，那就是确认是一个百分之百的 白痴。所以是很害怕证明自己是白痴这件事情，所以成绩不好就索性不要去念，不要去念我就可以一辈子都跟同学讲：“会读书有什么了不起？我就是还没有开始念 而已。”（观众笑）讲一些莫名其妙的自以为是的话来武装自己。<br>我想要当漫画家这个梦想也是我武装自己成绩不好的一个重要的漂亮的借口。就这样子，每天不停不停地画漫画，练习贴网点，自己画分镜，准备投稿漫画社第一届的新人奖。</p>
<p>但是我这样子努力努力很久之后，在我升上国三的那个夏天，我发现，非常非常有可能，我缺乏成为一个漫画家应该具备的才能。<br>这 是怎么发现的呢？是因为我在一个非常会画漫画的同学身上，看到了天才。我长期以为自己很会画漫画，其实是因为我的同学都是一群垃圾，他们根本不会画画，他 们只是喜欢读书。所以我只是画得比一般的人还要好而已，他们根本没有专心在画画上面。我大幅领先他们，结果我以为自己非常厉害。<br>但是直到有一天我看到隔壁班的一个同学，他所画的漫画非常厉害的时候，我惊觉原来我只是一个很普通很普通的人。这几年我一直非常努力的话，但是我一直都没有确实的进步，所以非常的灰心。<br>在英文里面，我们形容有才能的，最经常使用的单词是，talented，但是有另外一个单词我觉得更棒，就是gifted，礼物加ed。把才能比喻成礼物，我想不到一个更好的方式。<br>就好像是我从国小三年级的时候，我就拿到的一个非常非常大的礼物盒子。当我花了好几年，很多很多努力，才把这个盒子打开的时候，我才发现居然这个盒子里面什么东西都没有。就只有一张老天爷给我的纸条，上面写着，你去吃大便吧（观众笑）。<br>我看到那张纸条的时候，知道自己没有才能，非常的生气，非常的沮丧，非常的愤怒。但是唯一没有的情绪就是遗憾，我一点都不遗憾，因为我是一个没有耐性的人，特别是追求梦想，我是一个没有耐性的人。<br>我想要知道一件事情，然而我立刻就想要知道，所以我没有去听那些大人的话，那些大人总是喜欢说：你想要做一件什么事情，先考上理想的中学再说；你想要做一件什么事情，考上理想的大学再说；你想要交女朋友，等到你成年之后再说。<br>我都没有办法接受他们的意见，因为为什么我要一群没有追求到自己梦想的人，告诉我如何追求梦想？为什么？没有道理。所以我想要成为一名漫画家，最快的方式就是立刻去做。<br>我不会有那种装模作样的时候：就是当我老掉的时候，我站在镜子前面，抚摸着自己沧桑的皱纹，缓缓地说：“如果我年轻的时候没有努力用功读书，而是每天不停不停地画漫画，有没有可能我今天会是一个漫画家。” 没有，我没有那种装腔作势的时刻。<br>我知道自己确确实实地，没有当漫画家的才华，我试过了，我知道了。而且我失望的速度要比一般人来得快，这是没有耐性的最大的副作用。<br>但 是除了愤怒失望伤心之外，我最大的情绪是害怕，非常害怕，因为我学科非常烂，超级烂。按照我当时的学科，我在我的家乡彰化，能够考上的普通高中，都是一些 武斗派的学校，那些只有够凶够狠才有办法活着毕业的学校（观众笑），我没有这个自信可以毕业，所以那个时候非常的紧张。</p>
<p>幸好那个时候，班上的导师安排一个女孩子坐我后面。<br>每 个学期，导师都安排一个女孩子坐在我附近，几个女生就近监视我的学业还有人格发展状态（观众笑）。我上课喜欢讲笑话，扰乱次序，其实没有什么太多的伤害。 但是每次老师安排这样一个女孩子坐我后面的时候，我都会觉得非常的不爽，非常的受不了。就觉得“打小报告，臭三八（观众笑）”，也没有开心过。<br>但是这次老师安排坐在我后面的女孩子，不太一样，她的名字叫做，沈佳仪。<br>我非常非常地喜欢沈佳仪，因为沈佳仪非常的，（上图）</p>
<p> <img src="http://fmn.rrfmn.com/fmn058/20111112/1415/b_large_VVDa_07000000af61121a.jpg" alt=""></p>
<p>漂亮，（观众笑）。对。男孩子没有什么情操啦，喜欢女孩子很容易被女孩子庸俗的美丽的外表所吸引。沈佳仪非常的可爱漂亮，然后，我好喜欢她。<br>只可惜沈佳仪啊，她有一个非常变态的兴趣，她的兴趣就是努力用功读书（观众笑）。当一个男孩子他喜欢一个女孩子，她的兴趣居然是努力用功读书，其实会对我们的人生产生非常大的扭曲。<br>如 果我们喜欢的女孩子，她的兴趣啊，是打校长（观众笑），那就很简单。下课十分钟，我们花三分钟找到校长在哪边，然后再花三分钟打他，但是我们是读书人，要 有礼貌，所以要花三分钟很诚恳地跟校长道歉（观众笑），然后再花一分钟慢慢地回教室。如此简单的十分钟就可以和喜欢的女孩子拥有相同的兴趣（观众笑）。<br>每天放学就是“诶，沈佳仪，要不要去打校长？”（观众笑），沈佳仪说：“等下我要补习，可能要打快一点。”（观众笑）<br>这么简单，就能培育的爱情，没有发生在我身上。所以我每次看到偶像剧看到电影，主角为了心爱的女孩子，跟十个歹徒互殴，我都觉得非常的羡慕，你这么简单就可以让你喜欢的女孩子知道你愿意用你所有的一切来保护她，也不过就是住院半年而已嘛。这么简单!<br>但是我喜欢的沈佳仪，她的兴趣居然是努力用功读书。我要追求她就只能把我的屁股，牢牢地黏在椅子上，花所有的时间来念书，没有别的捷径。</p>
<p>我 非常希望沈佳仪可以看得起我，是“看得起”啊，不是“看得上”，“看得上”是很高级的人在用的，我们这种贱民，用“看得起”就可以了（观众笑）。我们喜欢 的女孩子真的容易让我们男生觉得自卑，自惭形秽。我们在喜欢的女孩子面前装腔作势，装得好像很聪明自在，其实只是在希望我们的自卑不要被发现。<br>那时候啊，我就每天晚上念书念到一点半两点，隔天早上五点，我妈妈就会甩我一巴掌叫我起床：“田田，田田，赶快起床，努力用功读书”我妈就把我拉起来。把我拉起来之后，我妈就会用闪电的速度，睡在我刚刚睡觉的位置上，就是不让我睡回笼觉（观众笑）。<br>早 上五点，就算是夏天也非常冷。印象最深的就是我穿着白色的紧身睡衣，然后拿着一罐铁罐装的牛奶，跑到厨房去，把那个铁罐丢到水里面，然后打开瓦斯炉隔水加 热。我左手就会放在水蒸气上面和它一起加热，右手就会拿着国文课本英文课本在那背课文背单字。等到大概快要六点五十分的时候，我就会拿起数学的参考书，算 两题到三题非常困难的数学题目，然后把解题的过程都背起来。<br>到学校去之后，就会问坐在我后面的沈佳仪说：“沈佳仪，干，这题不会，教一 下。”沈佳仪看一下题目就会非常温柔地跟我讲：“柯景腾，这一题对你来讲太困难了，你要不要先从简单的开始算起呢？”（观众笑）我就非常不屑地说：“干， 不要，我就要算这一题”（观众笑）。沈佳仪就会面有难色地说：“哦，好吧，首先你要设什么为X，然后再设什么为Y，接下来接下来……”我就会接下去说：“接下来是不是就是要用什么样子的观念再套上什么样子的公式，就可以解出来对不对？”沈佳仪就会痴痴地看着我说：“诶，你还蛮聪明的耶”（观众笑）。<br>把困难题的解题过程都背起来，当然不是为了要知道问题的答案，而是想要让你知道，我也有一点点的聪明，不要觉得我是笨蛋。<br>就这样子，我花了所有的时间在努力用功读书，成绩就开始变好。等到毕业前最后一次全校的考试，我已经考到了全校的第21名。<br>成绩突飞猛进的关键是什么？认为是努力用功读书的同学请举手。（木有）没有人。<br>认为是伟大爱情的请举手。（观众笑）（举手）大家举手。<br>答案是以上皆非，答案是除非你前面的成绩烂到爆炸，否则你完全没有突飞猛进的余地（观众笑）（鼓掌）。所以啊，我表示非常同情，那些只会考第一名的同学，因为他们的人生除了失败以为没有别的可能性（观众笑）（鼓掌）。</p>
<p>就这样子，国中毕业了，沈佳仪直升精诚中学的高中部，我跟我的一群好朋友都非常喜欢沈佳仪，所以我们都决定直升精诚中学的高中部。<br>我 生长在彰化，彰化是台湾的一个乡下，我们对台北这样的大都市都有一个奇怪的幻想。问一下在场的同学你不是北京在地人的，从别的地方请举手，（举很多手）， 很多人。你们或许可以感同身受一下，我们从小就觉得台北是一个非常先进的大都市，我们都幻想那里的男生都非常的厉害，不只学问好，也很会穿衣服，很fashion，然后懂得各式各样的知识。我们很害怕沈佳仪将来上大学之后，考上台大，很快地被周围男生给追走。然后那个男生就会教她各式各样关于身体的知识（观众笑），我们都不能接受（观众笑）。<br>所以，我们非常地焦急，我们想要在高中的时候就追到沈佳仪，要不然就是，我们要努力用功读书，要有足够多的分数，不管沈佳仪将来考上什么样子的大学什么样子科系，我们都牢牢地黏在她的尾巴后面，她填什么学校，我们就跟着填什么学校。<br>上了高中之后，沈佳仪的兴趣依然没有改变（观众笑），依然非常喜欢努力用功读书。我从来不喜欢读书，但是我觉得喜欢一个人，就要偶尔做些自己并不喜欢的事。</p>
<p><img src="http://fmn.rrfmn.com/fmn058/20111112/2330/b_large_kGyB_11220002282d1260.jpg" alt=""><br>谈 恋爱啊，没有人在做自己的，如果各位可以从这场演讲里面带走任何一句话，我希望是这句话，“谈恋爱，没有人在做自己”。如果你是那种坚持“我告诉你，我就 是那种不逛街的男子汉”（观众笑），那你干嘛谈恋爱？谈恋爱就是让你人格崩溃（观众笑），让你装腔作势，为了你喜欢的人变成一个你其实根本瞧不起也不认识 的人，这就对了。</p>
<p>我喜欢沈佳仪，她的兴趣是努力用功读书。所以当我发现沈佳仪只要晚上没有补习，她都会留在学校读书的时候，我都会偷偷地，在沈佳仪读书的教室附近又开了另外一间教室陪她读书。那不是晚自习的制度啊，而是整个学校都没有人，她自己偷偷摸摸开了一间教室在那边读书。<br>我 在沈佳仪附近开了一间教室读书，就是不希望沈佳仪发现我喜欢她，刻意跟她一起留校，但是我又忍不住会用最大的音量朗诵英文的课文（观众笑），让沈佳仪察觉 我在附近。每次我们从六点半开始念书，念到大概九点十五分二十分的时候，我就会感觉到沈佳仪从我的后面，偷偷摸摸地接近。<br>她自以为偷偷摸 摸，但是男生的耳朵啊，从小就是听父母的脚步声长大（观众笑），父母接近我们就要把一些奇怪的书收起来，我们的耳朵，是我们身上第一个发育健全的器官。所 以沈佳仪慢慢地从我后面接近的时候，我早就知道她在接近了，但是我却装作不知道，装作努力用功读书。直到沈佳仪拿着一盒夹心饼干，轻轻敲着我的后脑勺或我 的肩膀的时候，我才会蓦然回首说：“靠，沈佳仪，你也有来哦”（观众笑）。就会很假。<br>但是沈佳仪知道我是特别留校吧，就会坐下来，跟我分享那一盒夹心饼干，一边东南西北的瞎聊天。<br>那 时候啊，我就发现沈佳仪其实是一个非常三八的女生，她从小到大只会死读书，她的世界明明就只有这么大（刀大用手指比出三公分），但是她却可以从这么小的世 界里面，挤压出很多芝麻蒜皮的无聊的事情给我听。她会讲她家里有一个姐姐两个妹妹，聊她有起床气，聊她邻居养了一条狗叫蛋蛋，她却很喜欢她家的小白。聊当 今最热门的数学的题目（观众笑），也会聊我们英文通信的内容。<br>因为当时我非常想要和沈佳仪通信，但是通信是一件很色的事情，开不了口。所以 有一次我对沈佳仪说：“沈佳仪，我决定了，我决定我英文要开始进步，所以从明天开始我每天要写一封英文的信给你。”沈佳仪就说：“啊，好吧”过了一阵子之 后，我就跟沈佳仪说：“沈佳仪，我发现，只有我一个人英文进步并不公平（观众笑），从今天开始，你要每天写一封英文信给我（观众笑）。”沈佳仪说：“啊， 好吧（观众笑）”就这样子我们就开始通信。<br>我自尊心又特别强，所以就从英文杂志后面那个佳词美句上面乱抄一句自己都看不懂的英文写在信里面，P.S.什么什么什么。沈佳仪看不懂这个句子的时候她就趁我们晚上聊天的时候拿给我。</p>
<p>就 这样东南西北的乱聊天，知道大概九点五十分快要十点的时候，我就牵着脚踏车跟沈佳仪漫步在校园里面。那时候校工都会拿着手电筒在巡视学校，灯照到我们两个 的时候，因为他不止一次看到我们在留校读书，校工都会用那种“哎呦，在谈恋爱哟”（观众笑）的表情。每次我都非常凶狠地看着那个校工，“看三小！”就是看 什么的意思。但是我内心却是“对啊，我们在谈恋爱哦”（大笑，鼓掌）。<br>暗恋中的男女啊，偶尔被人家笑一下，“哦，谈恋爱哦”，其实有助于我们恋爱的增长。<br>我 牵着脚踏车送她到校门口，不久她妈妈就会开车过来接沈佳仪回家。我看着沈佳仪上了车关上门，我就在后面不停地挥手说：“沈佳仪，再见，再见。”然后默默地 祈祷，精诚中学巷子口的那个红绿灯转成红色，那么她妈妈的车就会被迫停在巷子口。我就可以若无其事地骑着脚踏车滑到她妈妈的车窗旁边，拍打她的车窗，说： “沈佳仪！你妈开得很慢诶！”（观众笑）这样乱讲一句话。<br>很多人啊，从媒体上面认识的九把刀，都是觉得：九把刀这么火爆热血叛逆的人，他的青春一定过得非常乱七八糟，就是有空就打老师，没空就打校长的人（观众笑）。但是不是这样子的，我的青春啊，就全部在努力用功读书，我的青春，全部都是沈佳仪。</p>
<p>慢 慢地，到了高三的时候，沈佳仪跟我说她想要去甄试（注：大约相当于自主招生）国立交通大学管理科学系，马上我就跟沈佳仪说：“这个科系我早就研究很久 了。”但是那个时候啊，交通大学我真的以为是培养交通警察的一间学校（观众笑）。我内心非常莫名其妙地说：沈佳仪，这么努力用功读书，却是想要当个交通警 察（观众笑），为什么？<br>但是对我来讲一点都不重要，因为，很久很久一段时间，我都是一个没有梦想的人。如果我曾经拿到过一个宣称可以是梦想 的礼物，这个礼物的盒子外面一定写着，“沈佳仪，我们永远在一起吧”。我真心觉得，如果这辈子可以跟喜欢的女孩子在一起，不管我念哪一间大学哪一个科系从 事什么样的工作，我都是全世界最幸运的人。所以当沈佳仪告诉我说她想要当一个交通警察的时候（观众笑），我就觉得，突然想要成为一个交通警察（观众笑）。<br>这样我们去甄试。因为非常难得来北大演讲，我非常想要把时间利用得淋漓尽致，这件事情虽然在小说里有写到，但是我的愤怒很强大，现场要再来讲一次。<br>在 参加交通大学甄试笔试的时候，我就发现沈佳仪没有来考试，座位是空的。我就非常紧张，就乱写。因为像沈佳仪这样只会死读书的女生，她的整个世界全部就是努 力用功读书。她没有出现在笔试的会场，只意味着两种可能性：第一个可能性就是，沈佳仪她死在家里（观众笑）；第二个可能性是，她死在半路（观众笑）。<br>我就很害怕，考卷赶快写一写，钟还没响就冲出去打公用电话去她家找沈佳仪，没接。<br>钟 声又响，赶快进去又考试，然后又出来。反反复复到了中午的时候，她家的电话总算被我打通了，沈佳仪用那种刚刚睡醒的语气跟我说：因为同一间高中只能有两个 名额去甄试同一个大学科系，她们班上有一个贱人，这个贱人跟沈佳仪说：“沈佳仪，你成绩这么好，你用联考的方式，也可以考上交大管科啊，但是我成绩这么 差，你可不可以把甄试的名额让给我。说不定我甄试进去后，我们到了大学，还是可以当好朋友啊。”沈佳仪就把这个机会让给了这个贱人。<br>说真的，我们讲话要有口德，特别是在演讲这么神圣的场合里面，更要注意对女孩子的修辞——但她就是一个贱人（大笑，鼓掌）。<br>因为贱人后来说：“沈佳仪，我发现，我的成绩这么不好，与其浪费时间在那写考卷，不如好好地在家里温书。”所以那个贱人根本没有去考试，不叫贱人叫什么呢？<br>很多演讲者非常的正面，他会跟各位说：“我们要感谢那些在人生之中给你制造困难，给你制造很多逆境的人，我们要尊称他们为“菩萨”，因为当你克服这些难关之后，你将会成为一个更好的人。“<br>没有，她就是一个贱人（观众笑）。<br>我拒绝称呼这些给我们人生带来苦难的垃圾叫做菩萨，没有，他们不配这两个字。（笑，鼓掌）。人生有很多种情绪哦，我们不能常常像一个伟人一样，容忍一些贱人的事情。</p>
<p>后来，我完全没有打算去念交通大学管理科学系，我完全不是为了当一个交通警察而念书。我是为了和沈佳仪在一起而念书。所以正当我准备放弃甄试资格的时候，我已经考上了。<br>沈佳仪她跟我说：“柯景腾，你先去，我随后就来。”（观众笑）这是我人生中所获得的第一个关于爱情的约定，所以我觉得，好sweet哦（观众笑）。我就很快乐地去报到了。<br>报到不久之后联考了，联考不久之后放榜了。放榜当天晚上，沈佳仪就打电话给我，沈佳仪一直哭，她嚎啕大哭，哭着说：“从小到大我都只会念书，却还是考不好”。我问她到底考得有多不好。她说没有办法去念交通大学管理科学系，也没有办法念交通大学任何一个科系。<br>她一直哭，我也一直哭啊（观众笑）。啊！什么！我要去成为交通警察了！（大笑）而你却没有和我一起成为交通警察（观众笑）。<br>我真的觉得非常生气，我念书，所为何事？是为了赚钱吗？是为了配股票吗？为了救国救民吗？不是，我念书只是为了和沈佳仪在一起，却办不到。所以我真的很难受。<br>沈佳仪一直哭，我一直哭。就这么两人哭哭啼啼的，很久之后，忽然觉得，很开心。<br>开 心的原因有两个：第一个原因是，沈佳仪是我的女神，长期以来她都像飞翔在天空中一样，高不可攀。好不容易她联考考不好，就好像是翅膀突然断掉摔在地上，感 觉比较亲近，感觉比较好追（观众笑）。我从小就是一个非常有自信的人，却没有办法在沈佳仪面前抬起头来，她太耀眼了。好不容易她联考考得很不好，让我觉得 她比较接近普通人一点。我觉得有点开心，觉得她不是这么不好接近。<br>第二个开心的原因就是，那天晚上，沈佳仪足足跟我哭了七个小时。我觉得应该是有点喜欢我吧，要不然怎么会这么久呢?然后就跟沈佳仪说，将来我们上了大学，还是要多联系，偶尔一起出来玩。</p>
<p>后 来就上了大学，上了大学之后啊，我和沈佳仪偶尔出来玩，我都非常地害怕，因为我不晓得怎么和女孩子约会。以前和沈佳仪一起读书一起放学，然后一起读书一起 放学，还是一起读书一起放学，日复一日，互动都很普通，就是完全不需要刻意在一起。高中毕业之后，我们要一起出去玩，都要我约你你约我，两人在一起完全不 知道怎么办。我很紧张，不晓得怎么跟她说话。所以，错过了很多很多跟沈佳仪告白的机会。<br>这个在演讲里面非常少听过，就是我自以为聪明，我以为追一个女孩子就不能是单单追求她而已，我应该要拉拢她身边所有的人来帮助我，包括沈佳仪姐姐。<br>我跟沈佳仪姐姐通信密集的程度不下于我跟沈佳仪（观众笑），其结局当然不是沈佳仪姐姐爱上我了（观众笑）。她姐姐经常鼓励我，叫我要坚持下去。但她有一封信，后面的PS写着：“如果你跟我的妹妹一样高的话，你早就追到我妹妹了”<br>我从小就很矮，但是我从小就不觉得高有什么了不起，在追求沈佳仪的过程中我也没有特别觉得怎么样。但是沈佳仪不晓得怎么搞的，越长越高，她从国中开始明明就还在这边（刀大用手比在眉头高度），忽然之间，她就越长越高，后来竟然高了我三公分。<br>这三公分啊，我本来想用不以为意的态度蒙混过去，却被她姐姐一封信提醒了，我的自尊心受到了严重的打击。所以开始每天去游泳，一边游泳一边想着说，等到我长了三公分的时候，我就要跟沈佳仪告白。</p>
<p>上了大学之后————诶，问一下北京大学的同学，在座的觉得自己是精英分子的请举手。（无人举手）没有人对不对？没有人举手了，好。<br>我上了大学之后，发现我同学都一副以为自己是精英分子的屌样（观众笑）。因为他们从小就是一群非常热爱努力用功读书并且擅长努力用功读书并且他们觉得自己将来可以进科学园区配股票赚大钱的精英分子，我很讨厌他们。没有人是吧？对不对？（观众笑）<br>我很讨厌他们，我整天想要打我的同学。但我们读书人，不能轻易地出手(笑)，所以我想了一个变通的办法，那就是“九刀杯”自由格斗赛（观众笑），方便我公开合法合理地，殴打我的同学（观众笑）。</p>
<p><img src="http://fmn.rrimg.com/fmn060/20111112/2330/b_large_stRS_1104000228c31261.jpg" alt=""><br>办“九刀杯”自由格斗赛，我觉得是我这辈子最酷的事排行榜第一名。我为什么办这个比赛？是因为我从小到大都非常擅长打架（观众笑），你可能看不出，但我非常热衷打架，而且几乎都没有输过。<br>我很想要沈佳仪知道，我是这么样子厉害的一个男子汉。所以我打电话给沈佳仪说：“沈佳仪，你一定要来看这个比赛，超屌超酷的。”沈佳仪非常非常地不屑，她根本不觉得这个比赛会办成，而且她觉得这个比赛非常的幼稚和无聊。<br>沈 佳仪越是这么讲我就越要办。我三个大学室友，他们纷纷表示这个比赛根本不可能成功，如果真的办成功了他们愿意下场来格斗。我问一下在场的北京大学的同学， 如果你们学校里面有一个白痴的学生，办了一场这么低能的自由格斗赛，你会下场格斗的请举手。（小撮人举手）不到五个人。你不敢下去比赛，但是你真的很想看 是哪些弱智下去比赛的请举手。（大笑，举手）这么多人，没有错，我办自由格斗赛，现场啊，人山人海（观众笑），学长姐都想要看，到底是哪个白痴办了这么暴 力的比赛在如此优秀的交通大学。但是下场的只有八个人，其中，有四个人是我室友（观众笑）。他们夸下海口，如今就是要奋斗到底。<br>那天晚上，我选了一个非常厉害的同学当我的对手，他是跆拳道社的副主教，他叫刘建伟，他是侨民，非常的厉害。我为什么选择刘建伟同学当我的对手，是因为我想要全力以赴殴打我的同学（观众笑），我不想要别人觉得我在欺负同学，我一定要挑一个有能力还手的人。<br>结 果那天晚上，我被打得非常的凄惨（观众笑）。这位同学距离我比较近，你看我的鼻子，我的鼻子是被打歪的，我的鼻子是歪向这边的。这是被刘建伟同学用跆拳道 里面的一记下压，一线而下，打断我的鼻梁，又打到我的人中，又往下。所以我的鼻子当场就断了，牙齿把我嘴巴里面的肉割得乱七八糟。害我后来足足吃了三个月 冷掉的粥和本来就很冰的冰豆花，维持我的生命（观众笑）。</p>
<p>但是我非常非常的兴奋，比赛结束后我就立刻打电话给沈佳仪，跟她 炫耀。因为我记忆力非常的强，比赛又刚刚结束不久，所以我巨细无遗地跟她描述了比赛所有的过程。并且我跟她说，我跟这么强悍的对手对峙，殴打对方，我鼻子 被打断，满脸都是血，但是从头到尾我都没有想过放弃，甚至没有喊过暂停。我鼻子被打断第一件事情就是爬起来再打。很少有人可以明明是个失败者，却可以把自 己讲得这么勇敢，就只有我（观众笑）。甚至我在昏昏欲坠，意识几乎朦胧的时候，我都走到刘建伟的旁边，举起刘建伟的手，宣布：（含混地）“优胜者是，刘建 伟。”（观众笑）<br>讲得这么详细跟沈佳仪听，就是希望沈佳仪她可以说一些“柯景腾，你好勇敢哦”“柯景腾你好man哦”“柯景腾我好喜欢你”。虽然不太可能，对，沈佳仪不是这种个性的人。<br>但是非常有可能，依照我对沈佳仪的了解，她可能会说一些：“柯景腾，你答应我一件事情好不好？”我就会说：“干什么？”她就说：“你答应我，你不要再办这么危险的比赛，好吗？我会，好担心。“非常有可能，沈佳仪会这么肉麻。<br>但 是没有，我说了那么多，屁了这么多。沈佳仪只是非常简短地对我说：“柯景腾，你真的非常幼稚。”我非常不服气，我就问沈佳仪说：“沈佳仪，为什么你要觉得 比赛很幼稚。”沈佳仪就问我：“那我告诉我，你可以从这种比赛里面学习到什么，收获到什么？”我说：“为什么要学习到什么才办这样的比赛，我难道不能够只 是因为我很开心就办这样的比赛吗？”沈佳仪说：“不行，当然不行，你妈妈送你来大学读书，不是让你来打架的。我只能说，你身上受的伤，全是你自己活该。”<br>沈 佳仪就一直骂，我就一直反抗。我问沈佳仪说：“你为什么要觉得这种比赛很幼稚？如果，我今天办的是九刀杯拳击赛，你还会觉得很幼稚吗？”沈佳仪说不会，我 问为什么，沈佳仪说因为它是拳击赛（观众笑）。那我就听不懂啊，那我办的是九刀杯空手道赛，你会觉得幼稚吗？沈佳仪说不会，我说为什么，沈佳仪说因为那是 空手道。<br>于是我就听不懂，“沈佳仪，如果今天办的是跆拳道你一定不会介意对不对？”她说对。我说：“因为是跆拳道对不对？”她说对。我说： “这不太公平吧？我办的可是九刀杯，自由格斗赛，其强度和暴力程度都要远远凌驾在我前面所说的每一种比赛之上。而且我根本就没有量级的概念，没有体重分级 的概念。我看着两人很想打对方，就让他们开始打（观众笑）。比赛，从一开始就不公平，所以比赛最热血，为什么要觉得比赛最幼稚呢？<br>沈佳仪就 一直骂，骂我伤害自己的身体，骂我愧对父母对我的期待。到最后我真的受不了，我在电话这头就跟沈佳仪飚：“对啊，我就是幼稚，我就是幼稚才会喜欢你这种女 生，我就是幼稚才会追你追这么久。”我话讲出口之后，我就知道自己完蛋了，所以马上就住嘴，我这记话讲得太重。片刻之后，沈佳仪就开口说了那句改变我这一 辈子的对白，她说：“那你就不要追啊。”电话挂掉。<br>电话挂断之后，我就非常难受，我就一直流眼泪一直流眼泪。一边打开电脑写了一封非常长的 信给沈佳仪，信里面说：“我从来都不喜欢读书，我是不得已才读的，我就是因为非常的幼稚，才会喜欢你这种努力用功的女生。如今你却否定掉我最喜欢你的理 由，所以我没有办法再前进，没有办法继续再喜欢你下去。”<br>这封信的内容是真的，但是心却是假的。我把信寄出去之后，真的非常想要收到一封回信。这封回信或者她会写：“好啦，其实我也有错”或者会写：“好啦，其实想一想，那天晚上我也太凶了。”或者：“好啦，其实没什么了不起，我们和好好啦。”<br>都 好，但是我没有收到任何一封回信，没有收到。过了一阵子之后，我觉得这个事情应该要处理一下，所以我交了一个女朋友。沈佳仪知道之后非常生气，过了一阵 子，沈佳仪也觉得事情应该要处理一下，所以交了一个男朋友（观众笑）。我知道之后快疯了，我觉得我努力，这么辛苦地喜欢你追你这么久，你却这么容易跟别人 在一起，就觉得好不值得。<br>就这样子，两个互相怄气的男孩和女孩，很久很久都没有再联络。</p>
<p>我真心觉得，成长，最残酷的部分就是，女孩子永远要比同年龄的男孩子要成熟，女孩子的成熟啊，没有一个男孩子能招架得住。<br>现 场所有的女生，把你的眼睛啊，射向我瞳孔的深处（观众笑）。没错，我们男孩子就是这么幼稚低能白痴弱智智障，但为什么？因为我们总是做了很多很多白痴低能 的行为之后，就好希望，你们可以温柔地骂我们一声：“你是白痴哦！”对啊，你看我们就是这么幼稚想要讨你一顿可爱的骂。你们总是希望我们赶快长大赶快成 熟，赶快变成一个可以依靠的大人。但是，这成长是不可逆的，一旦我们眼中失去了那种单纯只是想要讨你开心的灵魂和火焰的时候，接下来就是在装了，全都是在 装。男孩有一天一定会长大，真的好希望你们可以多欣赏男孩子幼稚的灵魂。<br>办了一场乱七八糟伤害自己的格斗赛，不过就是希望你们摸摸我们的头告诉我们：“下次不要再这样子喽”。多好。<br>所以后来，好久好久之后，我才有办法再接起沈佳仪的电话。</p>
<p>我 继续念交通大学的管理科学系（观众笑），这里有不小心来自交通大学的请举手，（木有），没有吧。台湾的交通大学是一间很变态的学校（大笑），男生和女生的 比例啊，是七比一，七个男生和一个女生。很变态对不对，不过这只是表面上的数字而已，如果我们打开正妹写轮眼，比例马上就会变成七十比一（观众笑）。比例 真悲惨啊，我真的觉得居然让我这么喜欢正妹的人去读到，真的是报应。尤其是那是一间没有沈佳仪的大学。<br>所以我在交通大学，老实讲，并没有学习到什么东西。因为我不是为了追求伟大知识而去的，所以系上教给我的东西我都基本上不感兴趣。<br>但 是我非常开心我做了一件非常正确的事情，那就是我很希望在大学里面我可以找到我接下来想要做的事情。所以我花了非常多的时间在看漫画，在我们图书馆的底下 视听中心看了非常非常多的电影的录影带。我是一个非常没有耐性的人，所以我看到呆板的剧情我就快转，看到不想看的剧情我就快转，看到飞车追逐我就快转，看 到枪战我就快转，基本上看到跟剧情进展无关的事情我都一律快转。<br>后来，在我离开大学的最后一年的最后一学期的时候，因缘际会我开始写起了小说。我写的第一本小说叫做《恐惧炸弹》。为什么会开始写小说？在别的演讲里面会讲到但不是今天。<br>总之我非常疯狂地开始写起了小说，由于我过去没有接受过任何文学上面的训练，所以我写作完全没有任何文学上的技巧，我用的都是我最喜欢的漫画分镜和电影的节奏感在写故事。我纯粹就是把我闭上眼睛所看到的画面，用文字翻译出来，让读者看到，我脑中所看到的景色。<br>那个时候，我就发现，原来老天爷给我的第一个礼物，上面写着漫画家，打开来其实不是叫我去吃大便，而是告诉我，你这么这么喜欢说故事，但是你却用错了翅膀。你或许没有用图画说故事的才能，但是你或许非常非常地有用文字来说故事的才华。<br>所以我从一九九九年开始写小说，之后就欲罢不能，我觉得非常非常的开心。</p>
<p>更 幸运的是，我从两千年开始出版之后，一直到两千零四年，我所出版的每本小说，都卖得非常非常的烂。没有一本小说卖超过一千五百本，这是一个非常悲惨的数 字。不仅卖得烂，最夸张的是写了根本没有出版。《异梦》《功夫》《狼嚎》《楼下的房客》是我的读者公认的，我早期的作品里面写的最好看的四本小说，但是它 们在网路上面发表了已经超过一年半甚至是两年，他才被出版社出版成实体书。<br>原因很简单，就是大部分的读者，那个时候在网路上面看完了我所有 的小说，他们非常习惯我的文字是免费的，所以当我的文字有一天居然要跟他们收费的时候，他们自己会反过来批评我说：“九把刀堕落了，居然跟我们收钱（观众 笑），他以前都义薄云天，都让我们看免费的，居然敢出书。”所以出书的时候都卖的很烂。但是出版社觉得我有一些作品特别的好看，不忍心在我卖得很烂的时候 出版，让这本书变成不畅销的故事。<br>我觉得这是我非常非常难能可贵的幸运。我到现在已经写作写了12年，前面五年小说卖得非常的烂，我想都想不到自己可以有这样子的美好的际遇。<br>我现在演讲快一个小时了，大家应该非常清楚，九把刀是一个非常自大臭屁口无遮拦的人。没错，观察正确。我真的难以想象，如果让我这种臭屁的人，第一年小说就非常非常地畅销的话，我的人格会自我毁灭到什么程度（观众笑）。真的，这是我的真心话。我非常讨厌读者在批评我的时候会说，九把刀的畅销之后，他就有大头症。我真的非常讨厌听到这些批评，因为,我从小就有大头症（观众笑），跟小说畅销一点都没有关系。<br>所以，我非常感谢前面五年小说持续地不看好，然后卖得很烂。让我有很长的一段时间可以自我审视，我到底有多想要、多喜欢做这件事情。</p>
<p>可 以想象，如果大家今天请到的是一个畅销书的作家，他从第一部书开始就非常非常地受欢迎。当他拿着麦克风，跟各位分享他一路创作过来的心得的时候，说我真的 真的热爱创作的时候。或许他说的是真的，或许他发自肺腑，但是坐台底下的大家会怎么看他，也许心里面会想着说：“也不过靠着创作，靠着写小说赚了一大笔 钱，你当然热爱创作啊”。<br>但其实非常非常的幸运，就是小说卖得很烂，让我跟小说维持了很长一段没有金钱的关系。<br>我想趁现在跟 大家讲一件事情，那就是，如果你非常想要成为一个作家，你每天非常认真地写作，但是同学都不想看你的作品，放在网路上面也没有人想看，出版社也没有人想帮 你出版。你心中忽然燃起了一盏明灯，你想起曾经听过九把刀的演讲，听他说过很多年他的书都卖得很烂的时候，你心里面会想：我要继续坚持下去，总有一天，掌 声会想起。（掌声）<br>（刀大用手势和话打断掌声）那你就要认真地想一下，你到底喜不喜欢写小说这件事情。因为，如果你真心喜欢写小说，你不应 该有煎熬的感觉，有那种我在期待好事会发生的感觉。如果你非常认真的期待灯光亮起和掌声响起的时候，或许你真正热爱的是之后发生的那件事情，而不是创作本 身。如果你真心喜欢写小说，你写小说的时候就会非常非常快乐，而不是期待，能够到处去演讲，能够书卖得很好很好，能够有更多更多的好事发生。<br>我 很喜欢灌篮高手，灌篮高手里有一句话，写得非常的棒——“打篮球很快乐，但是胜利可以增加一百倍的快乐。”写小说很快乐，写小说如果很多很多人觉得很好 看，很多很多人赞美，很多很多人买回家，当然可以增加一百倍的快乐。但是我们回到原点，写小说，打篮球，如果没有胜利，它依然让你很快乐，这才能够符合你 跟他之间最单纯的距离和关系。 所以刚才有人鼓掌真是吓死了。</p>
<p>为什么小说后来会开始卖得非常好？<br>大约在2004年年底的时候啊，那时候我的小说还卖得非常的差，我妈妈那时生病了，她被验出得了血癌。我妈得了血癌之后送医院治疗，治疗到一半的时候又被检查出我妈妈得了肺结核。<br>我 妈单纯得血癌的时候，她被送到一个任何人进去之前都要事先消毒的地方。但是后来她被检查出得了肺结核的时候，我妈妈被送到另外一个病房，这病房是出来的人 都要被彻底消毒的病房。所以她治疗疗程非常的艰辛。当时我们每一个人都哭惨了，尤其是我，我是一个非常脆弱的人，我在我妈妈无助地躺在病床上的时候其实觉 得自己非常的没有用。<br>我妈住院后费用是非常非常的庞大。那个时候我很开心，长期出版我很多不畅销小说的出版社，他们打电话给我，问我说九把 刀，你需不需要预支版税度过难关。我说我当然需要钱，但是啊，不需要预支版税，从现在开始，只要每写一本书，你下个月就出版，你不要给我拖一年半甚至两年 才出版。我立刻写，写完你下个月立刻给我出版，然后立刻就给我一张当天就可以换到现金的支票。如此，就可以帮我度过难关。<br>所以从2004年的11月份开始，我连续写了14本书，我完全是为了赚钱而写小说，因为我知道我所赚的每一笔钱，都可以拿来救我妈妈。那是我这辈子最想赚钱的时刻。所以媒体上会写九把刀非常热血地连续14个月写14本书。<br>真正原因就是，不是什么热血，是我想赚钱。我可以陪在我妈妈旁边，整天陪她看电视，然后写小说，每天写5000字，8000字，就是那个时候发生的事情。这是那当时的十四本书（上图）。<br>我把那段时间在医院陪我妈妈的所有记录都写下来，然后给我妈妈鼓励说希望她可以好好的治疗血癌，“我希望把我们母子之间的回忆出版的时候，你可以帮我写序”。我从来没有如此希望过一本书是喜剧的结尾。我妈妈仗着这样子的一个小小的信念，然后就非常非常认真地对抗病魔。<br>《猎命师传奇》第一集就是那个时候出版的，在台湾非常受欢迎的杀手系列是那个时候出版的，《楼下的房客》《少林寺第八铜人》都是那个时候出版的。但最幸运的是，我出版的第14本书叫做《妈，亲一下》，出版这本书的时候，我带着我妈妈出来一起办一场签售会。<br>那个时候妈妈因为化疗的关系，她的头发都掉光了，她还是光头。但她很开心，特地买了一顶卷卷的假发跟我去办签售会。她帮我这本书写序，到今天我妈妈都非常的健康，这是我非常幸运的事情。<br>所以，这就是我人生拿到的第三件礼物，上面写着“小说家”，打开之后发现风景非常灿烂，让我有足够的幸运拿着麦克风跟各位分享“人生就是不停的战斗”。</p>
<p>那也因为那段时间连续出版十四本书，发生了非常不可思议的奇迹。<br>到2004年为止，在台湾，我是一个，不是畅销，根本就是一个书卖得很烂的作家，根本没有人认识，只有网友知道我的存在而已，因为他们每天都看着我免费的书长大。<br>但是2005年，我密集出版了14本书的年底，台湾的三大书店通路结算，当年度台湾最畅销的作家是九把刀。他们整个人都吓坏了，说这个人是从哪里来的。所以从2005年那一年开始，我就是全台湾最畅销的作家。2006,2007,2008,2009,2010，我都是全台湾最畅销的作家。所以每次在演讲之前，主持人在介绍我出场的时候，她们说“让我们来欢迎台湾最畅销的小说家之一九把刀出场”的时候，我都会觉得很困惑，啊？我是最畅销啊，没有之一！（观众笑，掌声）<br>我本来有点担心，因为这一两年，我都忙着做另外一件事情，非常认真做另外一件事情，我觉得今年我的宝座可能会不稳。但没想到，从现在得到的结果来看，我就算从明天开始一本书都卖不出去，应该还是2011最畅销的台湾作家。(鼓掌)</p>
<p>书卖得很好，发生了一些很奇怪的事情。2008年的时候，香港有一家电影公司，跑来跟我说：“九把刀，你写了这么多种的小说，题材这么丰富，电影改编版权卖出去那么多，有没有可能你会当导演？”<br>我说：“不可能，我不会当导演，从来都没有想过。”这是真的。我如此的自大，但完全没有想过我会当导演。<br>电影公司又继续问说：“有没有可能你可以胜任导演？”我说决计不可能。<br>电影公司又继续问说，那九把刀，你要不要当导演？我说，好啊！（观众大笑）完全是虚荣心！<br>我一直觉得，在台湾拍电影的环境非常困难。很多导演为了拍电影，都要到处去借钱，抵押房子。但是我居然以一个作家的身份，可以写书写到有人拿着很多钱请我拍电影。我觉得如果我浪费这样的机会，简直是暴殄天物。所以厚着脸皮我说好。<br>说 好的背后还有一个原因是，我是一个非常好奇的人，又兼具正义感。演艺圈长期都有一个传说，那就是，女明星晚上会拿着剧本敲导演的房门，会说“导演导演，我 对白都记不住，你可以用身体帮我记吗？”（观众大笑）我觉得，我就要揭发这种内幕！（观众大笑）我义不容辞，我就接下了导演的任务！</p>
<p>我 第一个电影，是这个电影公司它要找四个新的电影导演，四个新导演要联手拍四个短片，然后要一起上映。另外大家比较熟悉的有，方文山，黄子佼，还有陈逸仙。 我拍的短片叫做《三生有幸》，由于我过去完全没有拍过电影，虽然只是一个短短二十五二十六分钟的电影短片，所以我还是很重视。<br>我找了两个好朋友，分别是雷孟跟廖明义，他们都是我的执行导演，他们过去完全没有拍过电影，但没有关系，重点是我们很好。而且他们都是我的师傅。雷孟，教我肢体表演，廖明义教我镜头的运动。他们年纪甚至都比我小，但也无所谓，我们是好朋友，所以我们一起并肩作战。<br>我 的第一个男主角叫做范逸臣，刚刚演完海角七号，当时海角七号的票房达到台币八百多万，范逸臣还不晓得自己将来会有多好的身价，所以就糊里糊涂的答应了我。 （观众大笑）女主角是刚演完我的《三生有幸》就跑去演在台湾非常火红的《光阴的故事》的赖雅妍。因为完全没有女生愿意来演我的戏，赖雅妍是我同一个经纪公 司的艺人，她等于是两肋插刀帮我。<br>我非常幸运我第一部电影男女主角是他们，因为他们完全没有因为我是一个新导演，就在那边刁难我，而是非常 虚心的接受一个从来没有拍过电影的导演，指导他们如何演戏如何表演。那我的脸皮是天生很厚，我觉得我的剧本天下无敌，所以教起戏来非常的认真，完全没有觉 得自己应该要谦虚。所以非常要感谢范逸臣跟赖雅妍，让我在导演第一部电影的时候留下非常美好的记忆，没有因此害怕当导演。<br>我的一群读者也非 常的可爱，他们在我拍电影的时候，免费来当临时演员。从这张照片可以明显的看出来，只有正妹可以坐在我的附近（观众大笑），更加坚定我继续当导演的决心。 这部电影短片后来在台湾上映了。当时《三生有幸》被归于一部电影叫做《爱到底》里面，后来听说《爱到底》在大陆也上映了是不是？那《爱到底》在台湾上映的 时候，票房只有八百多万，并不是太理想。但是之后却为我找到了一些新的机会。</p>
<p>找到什么机会？我们要先回到故事的起点（屏幕放出《那些年我们一起追的女孩》的封面）。<br>2005年噢，我写下了这个故事，但是这个故事并没有让我归到刚刚连续出版14本书的状态里面。因为它出版的时间是2006年。在2005年的时候，我非常想要我自己的创作，跟我自己的人生，有一些生命的连结。所以我非常非常非常想要写，我跟我的一群好朋友一起追求沈佳仪的青春故事。<br>我非常讨厌，非常讨厌一些畅销书的作家，用自己的生命故事来写小说的时候，他会跟读者宣称，“这个故事有80%是真的，20%是虚构的，究竟哪一些是真，哪一些是假，完全不重要。重要的是你可以从这个故事里学习到什么，收获到什么，感动到什么。”我觉得这种说法非常恶心，又有谁知道你偷偷把自己写得有多帅，有多厉害，但是你根本没有做过那么厉害的事情，我就不接受。<br>但我要写《那些年我们一起追的女孩》的时候，它的最低的标准并不是要好看，因为好看已经确定（观众大笑）。最低的标准是，这个故事必须百分之一百真实。我希望的我的好朋友他们在真实人生里叫什么名字，他们在故事里面也要叫什么名字。<br>问一下大家，如果你有一个好朋友是作家，你愿意把你的名字跟一部分的青春，捐给他，请他代为诠释的请举手，愿意的请举手（部分观众举手），那不愿意的请举手（部分观众举手）。<br>我就不愿意。幸好我的那些好朋友都是一些爱慕虚荣的小人（观众大笑）。他们纷纷表示快乐，他们都希望书出版的时候，可以请我签名，然后他们再用红笔把他们（的名字）用粗线框起来（观众大笑），送给他们喜欢的女孩子。<br>但， 他们我每一个人都问了，我唯独没有问沈佳仪。按照我对沈佳仪的了解，我问沈佳仪的时候她肯定会说“哎哟，不好啦”，“哎哟，会不好意思哎”，“哎哟，我很 低调的”，“哎哟，这样子我会很难做人”之类的。但是我很难接受，整本书都是真实的名字，唯独最重要的女主角用的是假名，不接受，所以我决定冒险。我这本 书写完了之后再寄给沈佳仪。<br>如果沈佳仪打电话给我说：“柯景腾！你有什么毛病啊！当作家有什么了不起！你干嘛用我的本名写小说！”我就会觉得：“用一下会死噢！（观众大笑）你害我去念了交通大学，名字用一下会死掉噢！（观众大笑，鼓掌）”<br>幸好没有，沈佳仪看完了整本书之后，她写了一封非常非常长的信给我，信里面最后一句话她写：“谢谢你，柯景腾，谢谢你写了一个这样子的故事，让我觉得自己是一个特别的人。”我看了之后就非常非常的感动，非常非常的充满了爱，好想再追求沈佳仪一次。</p>
<p>但很可惜，没有办法，我在写这个故事的时候，沈佳仪已经嫁给了一个大我们八岁的中年男子。<br> <img src="http://fmn.rrfmn.com/fmn058/20111112/1415/b_large_N07h_06fe0000af8d121a.jpg" alt=""><br>这张照片是我拍的团体照里面我觉得最棒的一张，但是任何的照片都有一些明显的瑕疵（指着新郎，观众大笑），那，要接受它。<br>现 场的男生！眼睛都看向我，如果你们喜欢的女孩子，嫁给一个大你八岁的中年男子，这个男子肯定有车有楼有钱有存款有事业，还有中年男子都有的小肚子，什么东 西都有了，却偏偏追走了你最重要的女神，你可以给予百分之百祝福的请举手（个别人举手），你会有一点小小不开心的请举手（大部分），你很火大的请举手（个 别人）！<br>那个……学校应该多加一些人格养成的课程……（观众大笑）我们这些追求沈佳仪长大的男孩子都非常不开心，我们就问沈佳仪说，沈佳仪！为什么你选他却不选我们呢？却不选我们呢？<br>（麦 克风出状况，观众大笑）其实我来北大演讲之前，曾经听过北大的一个传说，我听到之后认真考虑要不要来演讲。因为传说北大有一个受到诅咒的麦克风（观众大 笑），传说中拿着那只麦克风演讲超过一个小时没有让观众去尿尿的话，这个演讲者就会（停顿），飞黄腾达（观众大笑，鼓掌），我绝对，绝对，不会拿自己开玩 笑（观众大笑）。<br>我问沈佳仪说，为什么你选他却不选我们呢？沈佳仪非常温柔地跟我们说，因为人家成熟稳重，善良体贴啊，但柯景腾，你就只有善良这一点赢他而已，其他都狂输。<br>我们听到之后，都very unhappy。所以我们到沈佳仪婚礼的时候，第一件事情，就是坐下来猜拳。猜拳猜输的那一个人，要趁新郎新娘进场的时候，伸脚把新郎绊倒（观众大笑）。 我也非常非常讨厌很多畅销书的作家，他们在演讲或者写书的时候，他们会滥用一个句型，这个句型就是，我有一个朋友，他怎么样怎么样。“我有一个朋友”， 你相信这个句型的请举手（很少）！我每次听到这个句型都会觉得根本没有这个人！要不然这个朋友就是你自己。<br>但是现在很抱歉，我要沿用相同的句型，我有一个朋友（观众大笑），他叫做张家勋，他妈的就长这个样子（指大屏幕上中间红衣男子，观众大笑）。张家勋同学猜拳猜输，他非常紧张，整个身体都缩起来了，浑身发抖，“真的吗？真的吗？我真的可以伸脚把新郎绊倒吗？”（观众大笑）<br>我们现场都非常兴奋，因为我们都抱着猜拳猜输就没有办法再跟沈佳仪当好朋友的心情在猜拳（观众大笑）。我们就一直打着张家勋的后脑勺跟他说，噢，没关系！没关系啦！反正新郎成熟稳重，善良体贴！（观众大笑，鼓掌）<br>这 个时候噢，阿和，阿和就是这个胖子，我最讨厌阿和常常做的一件事，明明就有在猜拳，现在突然自我反省起来，他说：“我们这样子好像很没品也”。我说为什 么！他说：“我们这么喜欢沈佳仪，追她这么久，现在沈佳仪结婚了，我们不是应该给予百分之百的祝福才对吗？怎么还在这边猜拳呢？”我非常的不开心！就跟阿 和讲说：“就因为我们喜欢沈佳仪，就因为我们追她追最久，所以背后放箭，这是真爱（观众笑）”。<br>此时，灯光一暗，音乐响起，新郎牵着新娘慢慢走入红毯，慢慢前进的时候，我们这一桌的全都陷入疯狂，我们就一直殴打着张家勋的后脑勺，“张家勋！交给你了！我们会用照相机拍下历史的一瞬间！”一直打他一直打他。<br>新郎跟新娘慢慢地走，慢慢地走，走到我们这一桌旁边的时候，张家勋同学做了他人生之中最重要的一个决定，他拿起桌上的礼炮，“嘭！”“沈沈沈……沈佳仪！新婚快乐！”<br>从那一天开始，不管是过年打麻将，中秋吃月饼烤肉，平常夜唱，我们都没有找过张家勋（观众大笑），没有人格啊！<br>你赌输就是要把脚伸出来，你可以心存慈悲，你可以趁着新郎距离你还有十公尺这么远的时候，你就很可耻的把脚放在红毯上（观众大笑），新郎远远地看到只会觉得说：“靠！这干嘛！王八蛋！”然后跳过去。但是你不能说不把脚伸出来。</p>
<p>就 是那一天我发现我错了，错得非常非常的离谱，我看着沈佳仪穿着白纱，缓缓地走在红毯，慢慢接近我们的时候，我就非常非常的感动。沈佳仪穿着白纱是我非常非 常梦寐以求的一个画面，但是我们在梦中，在想象力，我们的角度都是……这个角度（做了一个单膝跪下的姿势），当天晚上我确实是这个角度（仰视姿势），一个 吵架决定了角度的不同。<br>我看着沈佳仪慢慢地走慢慢地走，内心非常的澎湃。不是仿佛吧，而是确确实实，有许多青春的画面，从我的记忆里面翻涌了出来。<br>我看见17岁的柯景腾，坐在教室里面，努力用功读书；我看见17岁的沈佳仪，拿着一盒夹心饼干，鬼鬼祟祟地走到柯景腾的后面，轻轻地拍着他的肩膀，17岁的柯景腾突然回首说：“靠，沈佳仪！你也有来!”我看见17岁的沈佳仪，上了她妈妈的车子；我看见17岁的柯景腾用力在车子后面挥手说：“沈佳仪，再见，再见……”我好喜欢沈佳仪，非常非常喜欢她。<br>看 着沈佳仪，忽然之间，我发现，沈佳仪也看着我，我们四目相接，大概有三秒钟到四秒钟的时间，我多么多么的希望是四秒钟，而不是三秒钟。忽然之间，我觉得非 常非常的感动。走红毯，是一个女孩子这辈子最幸福，最私密的一个记忆。但沈佳仪却非常慷慨地跟我分享了这绝无仅有的四秒钟。我看着她，沈佳仪也看着我，我 内心非常非常的温暖，忽然之间，我觉得一切都很值得，就因为有了婚礼之中那美妙的四目相接，让我觉得我对这份爱情有了完全不一样的想法。我觉得正因为我最 喜欢沈佳仪，正因为我追她追最久，所以我更应该给她百分之一百万的祝福。<br>就在我跟沈佳仪美妙地四目相接之后，我的视线不小心滑动了一下，我 的眼泪就真的掉下来了：因为我发现新郎比我矮（观众大笑）！我是多么有自信的一个人，我多么有自信啊！我完全不在乎被别人说：“九把刀，你是一个非常狂妄 自大的人！”都无所谓，都无所谓，但我这样的自信可以挡住千军万马的男人，却唯独看错了我最喜欢的女孩子，我低估了沈佳仪对爱情的渴望，低估了她对爱情的 真诚。当我发现新郎比我矮的时候，我更加喜欢沈佳仪，真的，就是原来我一直被自己给自己困惑住，却忘记我最信任的女孩，</p>
<p>所以，我在婚礼之后，我开始写《那些年，我们一起追的女孩》，我在书里写下这么一段话（大屏幕打出一段话），大家看不清楚，我帮大家念，这本书在2006年的时候就出版，我写下，“决定后，我看着新郎与新娘亲吻的瞬间，突然想到了一个很特别的热血画面，一个足以将我们这个青春故事，滑向电影的特别版结局。我从2005年参加沈佳仪婚礼的时候，我就知道，有一天，我要把这个故事拍成电影，我一直都想要找一个我信任并且我喜欢的导演，我要用我所有的能力帮助他，把这个故事拍成电影，但一直都没有办法找到。”<br>终于在2008年， 我因缘际会，让我拍一个电影短片之后，被我这么狂妄自大的人知道怎么拍电影之后，我就不可能把《那些年我们一起追的女孩》这个故事让给任何的一个导演，这 是我的青春。我想要这个故事在彰化拍，因为故事发生在彰化，我想要这个故事在精诚中学拍，因为故事发生在精诚中学。我多么希望我的电影不要打折扣，因为我 的青春根本不打折扣。所以我决定要把这个故事拍成电影。</p>
<p>有很多很多关于我拍这部电影的背后故事，其实可以在网路上面找到，所以有很多人知道在我拍这部电影的前期其实根本没有人看好，资金非常的缺乏，没有人愿意帮助我们，非常非常少的资源。<br>所以老实讲，我的力量来自于哪里，来自于大家，真的是完全来自于我的读者，所以我做的第一个筹措资金的事情，就是在网路上面卖了一件衣服，叫做“苹果战斗T”，我向读者宣称，这件衣服卖出去的利润，完全不会捐给慈善机构！（观众大笑）它所卖出的每一毛钱，都会用来我个人挥霍梦想所用。这件衣服，一个礼拜，就全部卖光光，这是电影最重要的一笔资金。<br>这部电影啊，怎么说呢？筹备前期，我所做的最多的一件事情就是吹牛，我到处去吹牛，说我有多厉害，只因为没有人帮我，我要骗很多人进来帮我。<br>所以到最后，我找了一个摄影师，由于没有摄影师帮我，所以找这个摄影师，他根本没有拍过电影。<br>我找了一个电影制片公司，它虽然是一个电影制片公司，但过去从来没有拍过电影。没有关系。<br>为了帮助我的电影拍得好，我觉得我需要执行导演，所以我找了两个执行导演，是谁呢？当然是雷孟跟廖明义！（观众大笑）在2008年之后，这两个导演依然没有拍过任何电影。没有关系，重要的并不是我们过去曾经做过什么事情，而是我们即将共同去完成什么事情。<br>找了一群演员，这群演员说出来没有人知道他们是谁。<br>所以，电影开拍前两个月，电影最大的投资人觉得此事不可为，夹着尾巴逃走了，带走了电影最大的一笔资金。<br>我 没有想很久，我想了一下下，我觉得人生中发生的每一件事情都有他的意义，我过去连续好几年都是台湾最畅销的作家，一定有它的意义。而这个意义不是我赚了很 多的版税，而是我即将怎么花这笔版税的方式，所以我就跑去跟另外一个电影投资人，其实也就是我的经纪人柴智屏，她为什么愿意投资电影呢？是因为我们合约到 了最后一年，她如果不投资我的电影，恐怕是不能续约，所以我觉得很棒，我就跟柴智屏说，柴姐，我们一个人出一半，我们把电影拍完，柴姐说好啊，但为什么。 我说：“我一直非常非常非常想要说一句非常帅气的对白，这句对白就是，这辈子我买过房子，也买过车子，但我买过最贵的东西，是梦想。就这样子，我们用了所<br> 有所有我们可以找到的资源，我们终于把电影给拍完了。”</p>
<p>这部电影，在彰化拍，在精诚中学拍，完全实现了我个人快乐的梦想。电影非常的好看！靠的是导演很有才华吗？不是，靠的是女主角很漂亮（观众大笑）。<br>如 果会有一个女明星半夜拿着剧本半夜敲我的房门，我希望那个人是陈妍希！所以我真的无法接受有任何投资人跟我说，电影应该由哪一个女明星来演女主角才会有票 房。我根本不相信这种事情！我喜欢陈妍希，我非常非常喜欢陈妍希（观众笑）！所以我靠着一股就算电影拍烂了，我也曾经跟陈妍希拥有过一个美好的夏天（观众 笑）！抱着这一股壮烈的信念，我让陈妍希当了我的沈佳仪。（屏幕打出陈妍希剧照）<br><img src="http://fmn.rrfmn.com/fmn058/20111112/2340/b_large_c5vc_070d0000dc81121a.jpg" alt=""><br>你看，啊！（观众大笑，鼓掌）<br><img src="http://fmn.rrimg.com/fmn065/20111112/2340/b_large_QyhH_324c0002298a1263.jpg" alt=""><br>演艺圈有好多好多漂亮的女生，很多美丽的女明星，但常常看起来一副不识字的样子，陈妍希看起来一副努力用功读书的模样。<br><img src="http://fmn.rrimg.com/fmn063/20111112/2345/b_large_ZS7L_1142000229ac1260.jpg" alt=""><br>绑马尾，超正！<br><img src="http://fmn.rrimg.com/fmn061/20111112/2340/b_large_k0hN_254f000226c61262.jpg" alt=""><br>哭起来，超正！<br><img src="http://fmn.rrimg.com/fmn065/20111112/2335/b_large_OiJv_7f700000dc84121c.jpg" alt=""><br>你看，这个构图！本来男主角坐她旁边，但我觉得，并不是很重要！（观众大笑）妍希真的好可爱，她真的好可爱，她就算是做个鬼脸，<br><img src="http://fmn.rrimg.com/fmn057/20111112/2340/b_large_P1oi_2559000227b31262.jpg" alt=""><br>嘣！（观众大笑）<br>女主角很重要，男主角，<br><img src="http://fmn.rrimg.com/fmn065/20111112/2345/b_large_mZtW_07070000dcd2121a.jpg" alt=""><br>也还可以（观众大笑）。<br>男主角，由柯震东饰演，柯震东又高又帅，186公分高，跟我本人非常的接近（观众大笑），好啦好啦，其实我必须承认，要找到一个跟自己一样帅的人，来饰演自己，的确非常困难（观众笑），所以我后来跟柯震东讲说，你不要烦恼你没有我帅的事情，你可以用你的演技和身高来弥补你我之间的差别（观众大笑），柯震东说：“好的，导演，我会努力！”柯震东非常非常的棒，他过去从来没有演过任何的电影，没演过电影长片，没演过电影短片，没有拍过MV，也没有拍过偶像剧，他所有一部真正意义上的作品就是《那些年我们一起追的女孩》，完全没有任何的经验。<br>所以如果柯震东，万一演得非常的好，是为什么？导演很会教！北大的学生应该都懂得科学分析对不对？！把变项列出来之后一个一个剔除，最后就只剩下导演很会教而已，没有别的原因。震东真的非常的白痴啊，但也非常的可爱。<br>他们两个因为饰演我生命中最重要的角色，所以他们两个对我来讲并不是单纯的只有演员而已，他们都很棒，我希望他们未来都可以有很好的发展。</p>
<p>沈 佳仪在电影里面不叫沈佳仪，为什么？我写小说的时候我都还可以说，我在写《那些年我们一起追的女孩》的时候并不是一个畅销书作家，所以我还不晓得用沈佳仪 本名会有什么样的结果。但我如此聪明的人怎么会不知道在电影里面，用沈佳仪的本名会产生的结果是什么。沈佳仪在小说里面的仪是人字旁的仪，但是在电影里面 改了一个宜室宜家的宜，为什么，为什么这么执着？<br>在拍电影的筹备期间，拍电影的过程中跟拍电影后期的过程中，我都跟沈佳仪保持密切的联系， 拍电影之前我问沈佳仪，“沈佳仪，你知不知道为什么我要把这个故事搬回去彰化精诚中学拍？”她说为什么，我说：“我想要让我们的角色穿着精诚中学的制服， 我想要我们的青春原地重现，那请你原谅我的坚持。”她说为什么，我说虽然改了你的一个字，希望保护你，但我希望发音一模一样，因为我希望柯景腾穿着制服， 在大雨中大喊着，沈佳仪，我喜欢你。我想要听见“沈佳仪，我喜欢你”。沈佳仪说，好啊。事情就是这么的浪漫，远远超过媒体的想象跟网友的猜测。</p>
<p>棒棒堂的敖犬饰演我的情敌老曹，他非常的好玩幽默，我们私下里的对话讲出来会震撼演艺圈。我的好朋友勃起 ，由新生代演员鄢胜宇饰 演，他的表演难度非常非常的高，他的每个镜头都在勃起（男生们猥琐的笑）。因为他每个镜头都在勃起，所以这部电影在台湾上映之前，三度被拍成限制级，这是 害我非常烦恼了一阵子。知名演员蔡昌宪饰演我的廖该边。风靡大街小巷的郝邵文，里面唯一有演过电影的郝邵文，饰演我的卑贱的好朋友阿和。<br>弯弯，大家认识弯弯吗？<br><img src="http://fmn.rrimg.com/fmn061/20111112/2345/b_large_TxRA_7f740000dd44121c.jpg" alt=""><br>弯弯啊，她的作品在2006年崛起的时候，那一年就瞬间成为台湾最畅销的女插画家。当我在2005年电脑前面，看到弯弯的作品的时候，我忍不住在电脑前惨叫说，靠！这样也可以噢！<br> <img src="http://fmn.rrimg.com/fmn060/20111112/1420/b_large_dgLQ_2545000211631262.jpg" alt=""><br>弯 弯所画出来的人物造型（大屏幕显示弯弯作品，观众大笑），让曾经失去过漫画家梦想的人，都非常的憎恨当初自己怎么没有坚持！弯弯她以极简的构图啊，让所有 的人觉得，到最后可以实现漫画家梦想的人，往往不是最有才华的那一个人，而是直到最后也坚持下去绝不放弃的那一个人，那个人就是弯弯。所以我让弯弯进我的 电影当我的同学。<br>弯弯跟我在台湾出版界的地位完全就是出版界的蔡依林跟周杰伦（观众大笑）。我跟弯弯说，弯弯，让我们结合吧！弯弯说，肉体 的结合我不是很方便（观众大笑）我说，弯弯你不要冲动，要肉体的结合我也会找陈妍希不会找你，我们用电影来结合。这部电影是我跟弯弯的小小的一个结晶， （观众笑）作品的结晶！弯弯拍电影非常快乐，我也很开心这部电影可以有弯弯的加入。<br>《那些年我们一起追的女孩》不只是一个男孩子追求女孩子的故事，也是一个关于青春，关于成长（大屏幕显示陈妍希剧照）笑起来好可爱对不对！（观众笑）陈妍希笑并不是假笑，她笑起来是那种真的好开心的那种笑法。在拍电影的时候啊，“Action!” 然后拍完，“咔！”副导演就会冲过来说，导演导演，刚才有没有要重来一遍的地方？有没有什么需要修正的？我傻傻地看着这一幕说，没有啊，但是妍希你可不可 以再演一遍，我好想再看你演一次！妍希说，噢，好啊！然后就跑去再演一遍，我真的觉得当导演好快乐（观众笑）。这个故事我觉得好喜欢，我们特地把故事搬回<br> 去重现，完全是我个人自私的快乐，（看着大屏幕陈妍希剧照）其实好有气质噢！（观众笑）<br>电影里有两次打手枪的画面和镜头，有人跟我说九把刀 你拍这些东西一定会造成审查上的困难，为什么还要拍？拍电影本来就是一件疯狂的事情，一件非常不可能会成功的事情，所以拍电影的一定比平常都要浪漫很多， 疯狂很多，不计代价很多，所以我很高兴非常荣幸我在电影里拍的这些东西让电影变得更加的，额，奇怪。<br> <img src="http://fmn.rrfmn.com/fmn058/20111112/1420/b_large_TPH9_255a000211191262.jpg" alt=""><br>（大屏幕现实沈佳仪婚礼剧照）这是我拍婚礼，沈佳仪婚礼的那一天，是不是感觉郎才女貌？（观众笑）</p>
<p>我们下面要来看一个电影的预告。预备——开始！<br>（预告片结束，掌声）<br>电影，远远比小说还要好看，因为电影最后夺回了我在真实人生以及百分之百真实的小说里面没有得到的画面（观众笑）。</p>
<p>这部电影，在8月19号台湾已经上映了，在电影宣传的过程之中，我都会跟观众讲，这部电影虽然在暑假上映，面对非常多好莱坞大片的包围，《那些年我们一起追的女孩》一定可以击败所有的电影。此时全场观众一定会给予非常奇怪的掌声和微笑（观众笑）。<br>但是这部电影在台湾几乎已经下映了。那下映的时候，我碰到了一些非常厉害的数字，在讲这些数字之前，我们的演讲还剩10分钟，我试着把着这个故事分享给大家听，这是我人生拿到的第四个礼物。</p>
<p>就在我跟柴智屏讲完，我要用自己的钱，所有的积蓄，去对付这场电影所需的资金的时候，那一天晚上，我去打棒球。<br>那一天晚上下着倾盆大雨。容我跟你们解释一个情况，棒球打击场，会有一个机器不停地吐出时速120公里以上的球，球飞过来，我们要把他挤出去。通常我们挤出去的时候啊，我心中为了要让这个运动更有竞争的感觉，如果那个球可以直接飞出去，不落地的话，这个算一分。我状态很好的时候，如果二十颗球能够挥出去七颗到八颗球，那是非常好的成绩。那天晚上下着倾盆大雨，视线不良，球也滑，棒子也滑，根本没有人去打棒球，就只有我一个人。那一天我的心中其实是非常的不安跟百感交集，我是不晓得我拍电影对不对，会不会有好结果，我也不晓得。没多久，我的右手就受伤了。于是，我换了左手打。<br>我 换左手打的时候啊，我的心中突然有一个念头，我就跟我心中的那个神，我不晓得他叫哪个名字，他是哪个宗教信仰，总之我心中有一个神，我就对那个神说，神 啊，如果我认真拍电影，电影会很成功的话，请你让我有十个安达。二十颗球，第一颗球飞出来，我用左手挥出去，飞过围墙，安达。第二，三，第四，第五颗，安 达，六七八九十，都是安达。<br>打击率百分之百的时候，我吓到了。我为了要跟神做一个确认，我就跟神说，神啊，如果刚才不是巧合的话，请你再给 我五个安达，第十一颗球飞过来，安达，第十二颗，安达，第十三，第十四颗，安达。到第十五颗球飞出来的那一瞬间，我忽然之间心中自信跟恐惧同时扩大到了最 极限，我心中闪过一个数字，这个数字是，台币五亿。<br>一个完全没有拍过电影长片的导演心中闪过的一个数字是五亿，我心中就跟神讲说，神啊，如 果倾尽所有的爱跟努力勇气来拍电影，票房会有五亿的话，请你再给我一个安达，让这颗球慢慢飞，往上飞，击中棒球打击场上面的一个铜锣。这个铜锣后面有一个 感应器，击中这个铜锣，感应器压下去，整个棒球打击场会奏乐，它会让所有管理者知道有人击中安达。击中这个铜锣的几率很低，如果你击中这个铜锣的话，它会 让你机会再玩三次。所以当我挥中这个安达，全场奏乐的时候，忽然之间我感到我听到了神的笑声。我知道，最大的股东进来了（观众笑）。</p>
<p>所以，我们拍这部电影的时候，拍第一个镜头之前，我们在彰化的八卦山，天空出现了两道彩虹，是大吉的征兆，是我知道神来跟我履行约定，它来看护我了。<br>我 们拍电影最后一天，天空下了倾盆大雨，我连第一个镜头都还没有拍它就给我下倾盆大雨，我觉得神啊，你怎么在最后一天来处罚我了呢？我到底是做错什么事情了 呢，正当我在那里考虑要不要延后一天拍的时候，雨停了，雨不仅停了，还射下阳光。但当时我只觉得单纯的幸运，直到我一直拍一直拍，拍到那一天两个人同时放 天灯的戏要结束的时候，天空出现两道彩虹，我才知道之前为什么要下雨，不下雨怎么会有彩虹呢？<br>所以我知道神告诉我你做得很好，我真的真的非常感动。</p>
<p>所 以这部电影在台湾上映之后，我目前得到的票房是，台币四亿，是台湾史上第三卖座的自制电影，我忍不住想，那一亿到哪里去了呢？（观众笑）我非常的困惑， 但，这部电影最棒的一点是，这部电影是由一群没有拍过电影的人联手完成的。这部电影如果真的具有商业企算的话，怎么会用一个没有摄影经验的摄影师担纲摄 影，怎么会由一个没有拍过电影的电影公司来拍电影，男主角为什么会用一个完全的新人，导演为什么会是，我呢？<br>这部电影非常骄傲的是，它几乎在台湾上映的每一场，最后十分钟，电影没有结束的时候，全场会因为一个非常热血感动的画面，全场鼓掌，这个特别的经验，直到我去了香港，到了东京影展，都是不停不停地发生。最后十分钟，全场必鼓掌。<br><img src="http://fmn.rrimg.com/fmn065/20111112/2330/b_large_1Y23_7f7c0000dc0d121c.jpg" alt=""><br>金马奖入围四项，照我心中本来是打算入围八项的，我想说另外四项到哪里去了呢？（观众笑）<br>我 真的是一个非常自大的人，真的，我很知道，但我拍电影非常的谦虚诚恳。因为写书只需要我一个人就可以完成，但是拍电影要很多很多人的努力。而且我真的一直 坚信在电影这个领域我没有办法自大，是因为，这部电影是受到神的庇佑而完成的，我居然居功就完蛋了，真的是谢谢神的帮忙。<br><img src="http://fmn.rrimg.com/fmn059/20111112/2330/b_large_4TVS_11140002287b1261.jpg" alt=""><br>这部电影10月20日已经在香港上映，也即将在11月10号在新加坡马来西亚上映。在香港上映的时候，破了所有台湾电影在香港以来的所有记录。到昨天为止，已经进入香港史上最卖座的20部电影之一，有可能还会挑战前十名。</p>
<p>这部电影也把我们带去了东京影展。但是最后一个大秘宝在哪里呢？两个月半前沈佳仪打电话给我，沈佳仪六个月的时候，跟她的老公来到了大陆，她没有看过电影，沈佳仪在电话里一直跟我讲说，她非常非常想要看到电影。<br>沈 佳仪说了很多让我感动的话，其中一段，说得很像当年的她。我说这部电影拍出来之后，很受欢迎，但是我唯一担心的是，你不开心。沈佳仪说不会，她非常开心， 而且她一直都很期待可以看到电影。她说，她也非常相信我的人格，我说“你干嘛用人格这么艰涩的字眼（观众笑）？”她说“我知道你非常的善良，我相信你会用 所有的一切方法保护我”，如果她一旦被媒体骚扰了，那一定是事情已经远远超过我所能够控制的范围，所以她也一定不会怪我。<br>我们聊了非常非常 久，聊到最后，忽然之间，我本来以为，这部电影在台湾下映了，《那些年我们一起追的女孩》的旅程也告一段落，但接到沈佳仪那通电话的时候，我忽然发现，旅 程没有结束。因为有一个大秘宝藏在电影的终点，我跟沈佳仪说，你看完电影的时候一定要立刻打电话给我，你跟我的第一句话，我这辈子都会好好的收藏着，因为 那是价值一亿的一句话。我知道很多人都会想问，到底这部电影有没有办法在大陆上映。但是，按照我的祈祷，这件事情当然是不能够公开的谈论。我要大家跟我一 起期待吼。</p>
<p>在演讲结束的前一刻，我想要引述我最崇拜的漫画家井上雄彦所画的三格漫画跟大家做一个分享，这个漫画叫做real，这个漫画的角色他自称是一个废物。</p>
<p><img src="http://fmn.rrimg.com/fmn063/20111112/2355/b_large_zYNU_7f6e0000dd99121c.jpg" alt=""><br>这个自称废物的主角他说，我还没有找到自己的目标，所以现在只能选择好好地活下去。</p>
<p> <img src="http://img2081.poco.cn/mypoco/myphoto/20111113/12/645340732011111312545006.jpg" alt=""><br>即使这份工作没有什么未来性，也是人生道路的一部分。</p>
<p> <img src="http://img165.poco.cn/mypoco/myphoto/20111113/12/6453407320111113125032018.jpg" alt=""><br>我不知道现在怎么跟我的目标搭上线，只知道总有一天会连结在一起。</p>
<p>我人生拿到的第一个礼物叫做“漫画家”，打开来，发现（老天爷）叫我去吃大便，隔了很久才发现，原来老天爷不是叫我去吃大便，而是告诉我，我这么喜欢说故事，应该要找到一个适合我说故事的武器。这个武器不是漫画<br>我人生拿到的第二个礼物叫做“沈佳仪，我们永远在一起吧”，打开来，有个女孩告诉我“那就不要再追啦”，多年之后我才发现，原来沈佳仪已经永远和我在一起了，她告诉我爱情的可贵，告诉我努力用功读书的重要。<br>我人生拿到的第三个礼物，上面写着“小说家”，打开后发现风景非常灿烂，让我有了今天的机会，也让我有足够的力量去接近人生中的第四个礼物“电影导演”。<br>“电影导演”这个礼物盒子也已经打开来了，然后成果也非常非常的绚丽，让我觉得自己是一个非常非常幸运的人。</p>
<p>我在各位这个年纪的时候，我在做什么？我在办“九刀杯”自由格斗赛，我不知道自己将来想要成为一个什么样子的人，我很迷惘，但是我没有放弃追寻。我一直好想知道自己会成为一个什么样子的人，所以我一直一直不停地拆礼物。<br>各 位这么年轻，这么有潜力，肯定会拆出非常非常多的礼物，吃到非常非常多的大便，实在是太正常了。成功之所以可贵在于失败几率实在是太高，我想鼓励大家好好 地珍惜你手中那个关于梦想的礼物盒子。也许一开始你会觉得非常非常的不顺利，但是只要你真心真意对待手中的礼物，努力把它打开，不管看见的东西是什么，它 一定会成为你拆到下一个礼物的动力。<br>我当然愿意祝福大家拆到看到非常绚丽风景的礼物，但是如果你拆到叫你“去吃大便吧”的礼物，也不要紧， 怀着真诚的希望，勇往直前，有一天，你也会跟我一样，看见神的微笑。 我的演讲到这边结束，如果各位可以从这个演讲里带走任何的一句话，或带走任何一点点的感动，都是我最大的荣幸，我们天空见！谢谢大家！（鼓掌半分钟）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 串口测试工具中 py2exe的使用]]></title>
      <url>http://yoursite.com/2011/11/17/2011-11-17-python%20%E4%B8%B2%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B8%AD%20py2exe%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>python 串口测试工具中 py2exe的使用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from distutils.core import setup</div><div class="line">import py2exe</div><div class="line">import sys, os</div><div class="line">sys.argv.append('py2exe')</div><div class="line"></div><div class="line">origIsSystemDLL = py2exe.build_exe.isSystemDLL</div><div class="line">def isSystemDLL(pathname):</div><div class="line">    if os.path.basename(pathname).lower() in ("msvcp71.dll", "dwmapi.dll", "msvcr71.dll"):</div><div class="line">        return 0</div><div class="line">    return origIsSystemDLL(pathname)</div><div class="line">py2exe.build_exe.isSystemDLL = isSystemDLL   #exe中包含msvcp71.dll等文件</div><div class="line"></div><div class="line">includes = ["encodings", "encodings.*"]</div><div class="line">options  = &#123;'py2exe': &#123; "bundle_files" : 1&#125;&#125; #bundle_files为1时只生成一个exe</div><div class="line"></div><div class="line">data_files = [('data', ['msvcp71.dll'])]     #包含msvcp71.dll，以防止操作系统中不包含此文件时之需</div><div class="line">setup(options = options,  </div><div class="line">      zipfile=None,                          #使用zipfile=None可以不生成library.zip</div><div class="line">      data_files = data_files,</div><div class="line">      #console=.....                         #命令行运行方式打包</div><div class="line">      windows = [&#123;"script":'SerialTestApp.pyw', "icon_resources" : [(1, "246.ico")]&#125;]) #icon_resources 设置图标</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python串口通信模块——pySerial]]></title>
      <url>http://yoursite.com/2011/11/17/2011-11-17-python%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9D%97pySerial/</url>
      <content type="html"><![CDATA[<p>#pySerial</p>
<p>##Overview<br>This module encapsulates the access for the serial port. It provides backends for Python running on Windows, Linux, BSD (possibly any POSIX compliant system), Jython and IronPython (.NET and Mono). The module named “serial” automatically selects the appropriate<br> backend.</p>
<p>It is released under a free software license, see <a href="http://pyserial.svn.sourceforge.net/viewvc/*checkout*/pyserial/trunk/pyserial/LICENSE.txt" target="_blank" rel="external">LICENSE.txt</a> for more details.<br>(C) 2001-2008 Chris Liechti <a href="mailto:cliechti@gmx.net" target="_blank" rel="external">cliechti@gmx.net</a></p>
<p>The <a href="http://sourceforge.net/projects/pyserial/" target="_blank" rel="external">project page on SourceForge</a> and here is the <a href="http://sourceforge.net/svn/?group_id=46487" target="_blank" rel="external">SVN repository</a> and the <a href="http://sourceforge.net/project/showfiles.php?group_id=46487" target="_blank" rel="external">Download Page</a> .<br>The homepage is on <a href="http://pyserial.sf.net/" target="_blank" rel="external">http://pyserial.sf.net/</a></p>
<p>##Features</p>
<ul>
<li>same class based interface on all supported platforms </li>
<li>access to the port settings through Python 2.2+ properties </li>
<li>port numbering starts at zero, no need to know the port name in the user program</li>
<li>port string (device name) can be specified if access through numbering is inappropriate</li>
<li>support for different bytesizes, stopbits, parity and flow control with RTS/CTS and/or Xon/Xoff</li>
<li>working with or without receive timeout </li>
<li>file like API with “read” and “write” (“readline” etc. also supported) </li>
<li>The files in this package are 100% pure Python. They depend on non standard but common packages on Windows (pywin32) and Jython (JavaComm). POSIX (Linux, BSD) uses only modules from the standard Python distribution)</li>
<li>The port is set up for binary transmission. No NULL byte stripping, CR-LF translation etc. (which are many times enabled for POSIX.) This makes this module universally useful.</li>
</ul>
<p>##Requirements</p>
<ul>
<li>Python 2.2 or newer </li>
<li>pywin32 extensions on Windows </li>
<li>“Java Communications” (JavaComm) or compatible extension for Java/Jython </li>
</ul>
<p>##Installation</p>
<p>###from source<br>Extract files from the archive, open a shell/console in that directory and let Distutils do the rest:<br>python setup.py install</p>
<p>The files get installed in the “Lib/site-packages” directory.</p>
<p>###easy_install<br>An EGG is available from the Python Package Index: <a href="http://pypi.python.org/pypi/pyserial" target="_blank" rel="external">http://pypi.python.org/pypi/pyserial</a><br>easy_install pyserial</p>
<p>###windows installer<br>There is also a Windows installer for end users. It is located in the <a href="http://sourceforge.net/project/showfiles.php?group_id=46487" target="_blank" rel="external">Download Page</a><br>Developers may be interested to get the source archive, because it contains examples and the readme.</p>
<p>##Short introduction<br>Open port 0 at “9600,8,N,1”, no timeout<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import serial</div><div class="line">ser = serial.Serial(0)  # open first serial port</div><div class="line">print ser.portstr       # check which port was really used</div><div class="line">ser.write("hello")      # write a string</div><div class="line">ser.close()             # close port</div></pre></td></tr></table></figure></p>
<p>Open named port at “19200,8,N,1”, 1s timeout<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ser = serial.Serial('/dev/ttyS1', 19200, timeout=1)</div><div class="line">x = ser.read()          # read one byte</div><div class="line">s = ser.read(10)        # read up to ten bytes (timeout)</div><div class="line">line = ser.readline()   # read a '\n' terminated line</div><div class="line">ser.close()</div></pre></td></tr></table></figure></p>
<p>Open second port at “38400,8,E,1”, non blocking HW handshaking<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ser = serial.Serial(1, 38400, timeout=0, parity=serial.PARITY_EVEN, rtscts=1)</div><div class="line">s = ser.read(100)       # read up to one hundred bytes</div><div class="line">...                     # or as much is in the buffer</div></pre></td></tr></table></figure></p>
<p>Get a Serial instance and configure/open it later<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; ser = serial.Serial()</div><div class="line">&gt;&gt;&gt; ser.baudrate = 19200</div><div class="line">&gt;&gt;&gt; ser.port = 0</div><div class="line">&gt;&gt;&gt; ser</div><div class="line">Serial<span class="tag">&lt;<span class="name">id=0xa81c10,</span> <span class="attr">open</span>=<span class="string">False</span>&gt;</span>(port='COM1', baudrate=19200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=0, rtscts=0)</div><div class="line">&gt;&gt;&gt; ser.open()</div><div class="line">&gt;&gt;&gt; ser.isOpen()</div><div class="line">True</div><div class="line">&gt;&gt;&gt; ser.close()</div><div class="line">&gt;&gt;&gt; ser.isOpen()</div><div class="line">False</div></pre></td></tr></table></figure></p>
<p>Be carefully when using “readline”. Do specify a timeout when opening the serial port otherwise it could block forever if no newline character is received. Also note that “readlines” only works with a timeout. “readlines”<br> depends on having a timeout and interprets that as EOF (end of file). It raises an exception if the port is not opened correctly.<br>Do also have a look at the example files in the examples directory in the source distribution or online.</p>
<p>##Examples<br>Please look in the SVN Repository. There is an example directory where you can find a simple terminal and more.<br><a href="http://pyserial.svn.sourceforge.net/viewvc/pyserial/trunk/pyserial/examples/" target="_blank" rel="external">http://pyserial.svn.sourceforge.net/viewvc/pyserial/trunk/pyserial/examples/</a></p>
<p>##Parameters for the Serial class<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ser = serial.Serial(</div><div class="line">port=None,              # number of device, numbering starts at</div><div class="line"># zero. if everything fails, the user</div><div class="line"># can specify a device string, note</div><div class="line"># that this isn't portable anymore</div><div class="line"># if no port is specified an unconfigured</div><div class="line"># an closed serial port object is created</div><div class="line">baudrate=9600,          # baud rate</div><div class="line">bytesize=EIGHTBITS,     # number of databits</div><div class="line">parity=PARITY_NONE,     # enable parity checking</div><div class="line">stopbits=STOPBITS_ONE,  # number of stopbits</div><div class="line">timeout=None,           # set a timeout value, None for waiting forever</div><div class="line">xonxoff=0,              # enable software flow control</div><div class="line">rtscts=0,               # enable RTS/CTS flow control</div><div class="line">interCharTimeout=None   # Inter-character timeout, None to disable</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>The port is immediately opened on object creation, if a port is given. It is not opened if port is None.<br>Options for read timeout:<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">timeout=None            # wait forever</div><div class="line">timeout=0               # non-blocking mode (return immediately on read)</div><div class="line">timeout=x               # set timeout to x seconds (float allowed)</div></pre></td></tr></table></figure></p>
<p>##Methods of Serial instances<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">open()                  # open port</div><div class="line">close()                 # close port immediately</div><div class="line">setBaudrate(baudrate)   # change baud rate on an open port</div><div class="line">inWaiting()             # return the number of chars in the receive buffer</div><div class="line">read(size=1)            # read "size" characters</div><div class="line">write(s)                # write the string s to the port</div><div class="line">flushInput()            # flush input buffer, discarding all it's contents</div><div class="line">flushOutput()           # flush output buffer, abort output</div><div class="line">sendBreak()             # send break condition</div><div class="line">setRTS(level=1)         # set RTS line to specified logic level</div><div class="line">setDTR(level=1)         # set DTR line to specified logic level</div><div class="line">getCTS()                # return the state of the CTS line</div><div class="line">getDSR()                # return the state of the DSR line</div><div class="line">getRI()                 # return the state of the RI line</div><div class="line">getCD()                 # return the state of the CD line</div></pre></td></tr></table></figure></p>
<p>##Attributes of Serial instances<br>Read Only:<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">portstr                 # device name</div><div class="line">BAUDRATES               # list of valid baudrates</div><div class="line">BYTESIZES               # list of valid byte sizes</div><div class="line">PARITIES                # list of valid parities</div><div class="line">STOPBITS                # list of valid stop bit widths</div></pre></td></tr></table></figure></p>
<p>New values can be assigned to the following attributes, the port will be reconfigured, even if it’s opened at that time:</p>
<!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} -->
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">port                    # port name/number as set by the user</div><div class="line">baudrate                # current baud rate setting</div><div class="line">bytesize                # byte size in bits</div><div class="line">parity                  # parity setting</div><div class="line">stopbits                # stop bit with (1,2)</div><div class="line">timeout                 # timeout setting</div><div class="line">xonxoff                 # if Xon/Xoff flow control is enabled</div><div class="line">rtscts                  # if hardware flow control is enabled</div></pre></td></tr></table></figure>
<p>##Exceptions<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serial.SerialException</div></pre></td></tr></table></figure></p>
<p>##Constants<br>parity:<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serial.PARITY_NONE</div><div class="line">serial.PARITY_EVEN</div><div class="line">serial.PARITY_ODD</div></pre></td></tr></table></figure></p>
<p>stopbits:<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">serial.STOPBITS_ONE</div><div class="line">serial.STOPBITS_TWO</div></pre></td></tr></table></figure></p>
<p>bytesize:<br><!-- /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */ .text .imp {font-weight: bold; color: red;} --><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">serial.FIVEBITS</div><div class="line">serial.SIXBITS</div><div class="line">serial.SEVENBITS</div><div class="line">serial.EIGHTBITS</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在python文件中集成图片]]></title>
      <url>http://yoursite.com/2011/11/14/2011-11-14-%E5%9C%A8python%E6%96%87%E4%BB%B6%E4%B8%AD%E9%9B%86%E6%88%90%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>方法一：<br><a href="http://leo108.com/pid-938.asp" target="_blank" rel="external">http://leo108.com/pid-938.asp</a><br>使用base64方式编解码。<br>核心代码如下：<br>1.将图片文件编码为base64字符串：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import base64                    #导入base64库 </div><div class="line">f = open(r'/home/1.ico','rb')    #用二进制方式打开图片文件</div><div class="line">str = base64.b64encode(f.read()) #读取文件内容，编码为base64字符串</div><div class="line">f.close()                        #关闭文件</div><div class="line">print str                        #输出base64编码结果</div></pre></td></tr></table></figure>
<p>2.将base64字符串解码为图片：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import base64  </div><div class="line">import wx  </div><div class="line">import cStringIO  </div><div class="line"></div><div class="line">def GetMondrianData():  </div><div class="line">    iconData = "图片BASE64字符串" </div><div class="line">    iconData = base64.b64decode(iconData)  </div><div class="line">    return iconData  </div><div class="line">def GetMondrianBitmap():  </div><div class="line">    return wx.BitmapFromImage(GetMondrianImage())  </div><div class="line">def GetMondrianImage():  </div><div class="line">    stream = cStringIO.StringIO(GetMondrianData())  </div><div class="line">    return wx.ImageFromStream(stream)  </div><div class="line">def GetMondrianIcon():  </div><div class="line">    icon = wx.EmptyIcon()  </div><div class="line">    icon.CopyFromBitmap(GetMondrianBitmap())  </div><div class="line">    return icon</div></pre></td></tr></table></figure>
<p>调用GetMondrianIcon()函数即可</p>
<p>方法二：<br>使用函数im2py.py，下面这个是旧版wxpython的使用<br><a href="http://www.blog.pythonlibrary.org/2008/05/23/wxpython-embedding-an-image-in-your-title-bar/" target="_blank" rel="external">http://www.blog.pythonlibrary.org/2008/05/23/wxpython-embedding-an-image-in-your-title-bar/</a><br>wxpython_2.9.2_py27中的使用:<br>打开cmd，打开文件夹C:\Python27\Lib\site-packages\wx-2.9.2-msw\wx\tools，输入命令</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python img2py.py -i (-n ***）28.ico myIcon.py</div></pre></td></tr></table></figure>
<p>option中-n, -i的注释：<br>-n <name>      Normally generic names (getBitmap, etc.) are used for the<br>                        image access functions.  If you use this option you can<br>                        specify a name that should be used to customize the access<br>                        fucntions, (getNameBitmap, etc.)，<strong>否则默认为下划线+ico的名字</strong><br><strong>                        本例中为_28</strong><br>-i                     Also output a function to return the image as a wxIcon<br>输出文件为myIcon，<br>本例中的使用方法为：</name></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import myIcon</div><div class="line">ico = myIcon._28.getIcon()</div><div class="line">self.SetIcon(ico)</div></pre></td></tr></table></figure>
<p>当然也可以在myIcon.py的文件末尾加</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get_Icon = _28.getIcon</div></pre></td></tr></table></figure>
<p>则使用方法为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import myIcon</div><div class="line">ico = myIcon.get_Icon()</div><div class="line">self.SetIcon(ico)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
